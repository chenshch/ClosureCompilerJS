/**
 * @externs
 * @suppress {checkTypes,const,duplicate,missingOverride}
 */
// NOTE: generated by tsickle, do not edit.
// Generated from: C:/workspace/ClosureCompilerJS/libs/LayaAir.d.ts
/**
 * @constructor
 * @struct
 */
function Config() {}
/** @type {number} */
Config.animationInterval;
/** @type {boolean} */
Config.isAntialias;
/** @type {boolean} */
Config.isAlpha;
/** @type {boolean} */
Config.premultipliedAlpha;
/** @type {boolean} */
Config.isStencil;
/** @type {boolean} */
Config.preserveDrawingBuffer;
/** @type {boolean} */
Config.webGL2D_MeshAllocMaxMem;
/** @type {boolean} */
Config.is2DPixelArtGame;
/** @type {boolean} */
Config.useWebGL2;
/** @type {boolean} */
Config.printWebglOrder;
/** @type {boolean} */
Config.allowGPUInstanceDynamicBatch;
/** @type {boolean} */
Config.enableStaticBatch;
/** @type {boolean} */
Config.useRetinalCanvas;

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Config3D</code> 实例。
 */
function Config3D() {}

/* TODO: GetAccessor: useCannonPhysics */

/* TODO: SetAccessor: useCannonPhysics */

/* TODO: SetAccessor: enableDynamicManager */

/* TODO: GetAccessor: enableDynamicManager */

/* TODO: SetAccessor: enableStaticManager */

/* TODO: GetAccessor: enableStaticManager */
/** @type {boolean} */
Config3D.prototype.isAntialias;
/** @type {boolean} */
Config3D.prototype.isAlpha;
/** @type {boolean} */
Config3D.prototype.premultipliedAlpha;
/** @type {boolean} */
Config3D.prototype.isStencil;
/** @type {boolean} */
Config3D.prototype.enableMultiLight;
/** @type {boolean} */
Config3D.prototype.octreeCulling;
/** @type {number} */
Config3D.prototype.octreeInitialSize;
/** @type {!Laya.Vector3} */
Config3D.prototype.octreeInitialCenter;
/** @type {number} */
Config3D.prototype.octreeMinNodeSize;
/** @type {number} */
Config3D.prototype.octreeLooseness;
/** @type {boolean} */
Config3D.prototype.debugFrustumCulling;
/** @type {!Laya.PBRRenderQuality} */
Config3D.prototype.pbrRenderQuality;
/** @type {boolean} */
Config3D.prototype.isUseCannonPhysicsEngine;

/* TODO: GetAccessor: defaultPhysicsMemory */

/* TODO: SetAccessor: defaultPhysicsMemory */

/* TODO: GetAccessor: maxLightCount */

/* TODO: SetAccessor: maxLightCount */

/* TODO: GetAccessor: lightClusterCount */

/* TODO: SetAccessor: lightClusterCount */

/**
 * 克隆。
 * @param {?} dest
 * @return {void}
 */
Config3D.prototype.cloneTo = function(dest) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Config3D.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
function Laya() {}
/** @type {!Laya.Stage} */
Laya.stage;
/** @type {!Laya.Timer} */
Laya.systemTimer;
/** @type {!Laya.Timer} */
Laya.startTimer;
/** @type {!Laya.Timer} */
Laya.physicsTimer;
/** @type {!Laya.Timer} */
Laya.updateTimer;
/** @type {!Laya.Timer} */
Laya.lateTimer;
/** @type {!Laya.Timer} */
Laya.timer;
/** @type {!Laya.LoaderManager} */
Laya.loader;
/** @type {string} */
Laya.version;
/** @type {!Laya.Render} */
Laya.render;
/** @type {boolean} */
Laya.isWXOpenDataContext;
/** @type {boolean} */
Laya.isWXPosMsg;
/** @type {?} */
Laya.isNativeRender_enable;
/** @type {?} */
Laya.enableWebGLPlus;
/** @type {?} */
Laya.enableNative;

/**
 * 兼容as3编译工具
 * @param {!Array<?>} _classs
 * @return {void}
 */
Laya.__init = function(_classs) {};

/**
 * 初始化引擎。使用引擎需要先初始化引擎，否则可能会报错。
 * @param {number} width 初始化的游戏窗口宽度，又称设计宽度。
 * @param {number} height 初始化的游戏窗口高度，又称设计高度。
 * @param {...?} plugins 插件列表，比如 WebGL（使用WebGL方式渲染）。
 * @return {?} 返回原生canvas引用，方便对canvas属性进行修改
 */
Laya.init = function(width, height, plugins) {};

/**
 * 表示是否捕获全局错误并弹出提示。默认为false。
 * 适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
 * @param {boolean} value
 * @return {void}
 */
Laya.alertGlobalError = function(value) {};

/**
 * 开启DebugPanel
 * @param {string=} debugJsPath laya.debugtool.js文件路径
 * @return {void}
 */
Laya.enableDebugPanel = function(debugJsPath) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Laya3D</code> 实例。
 */
function Laya3D() {}
/** @type {string} */
Laya3D.HIERARCHY;
/** @type {string} */
Laya3D.MESH;
/** @type {string} */
Laya3D.MATERIAL;
/** @type {string} */
Laya3D.TEXTURE2D;
/** @type {string} */
Laya3D.TEXTURECUBE;
/** @type {string} */
Laya3D.TEXTURECUBEBIN;
/** @type {string} */
Laya3D.ANIMATIONCLIP;
/** @type {string} */
Laya3D.AVATAR;
/** @type {string} */
Laya3D.TERRAINHEIGHTDATA;
/** @type {string} */
Laya3D.TERRAINRES;
/** @type {string} */
Laya3D.SIMPLEANIMATORBIN;

/* TODO: GetAccessor: enablePhysics */
/** @type {?} */
Laya3D.enableNative3D;
/** @type {?} */
Laya3D.formatRelativePath;

/**
 * 初始化Laya3D相关设置。
 * @param {number} width 3D画布宽度。
 * @param {number} height 3D画布高度。
 * @param {!Config3D=} config
 * @param {!Handler=} compolete
 * @return {void}
 */
Laya3D.init = function(width, height, config, compolete) {};
/**
 * @constructor
 * @struct
 */
function UIConfig() {}
/** @type {boolean} */
UIConfig.touchScrollEnable;
/** @type {boolean} */
UIConfig.mouseWheelEnable;
/** @type {boolean} */
UIConfig.showButtons;
/** @type {string} */
UIConfig.popupBgColor;
/** @type {number} */
UIConfig.popupBgAlpha;
/** @type {boolean} */
UIConfig.closeDialogOnSide;

/**
 * @extends {Laya.EventDispatcher}
 * @implements {Laya.IDestroy}
 * @constructor
 * @struct
 * 创建一个 <code>AnimationPlayer</code> 实例。
 */
Laya.AnimationPlayer = function() {};
/** @type {boolean} */
Laya.AnimationPlayer.prototype.isCache;
/** @type {number} */
Laya.AnimationPlayer.prototype.playbackRate;
/** @type {boolean} */
Laya.AnimationPlayer.prototype.returnToZeroStopped;

/* TODO: GetAccessor: Laya.templet */

/* TODO: SetAccessor: Laya.templet */

/* TODO: GetAccessor: Laya.playStart */

/* TODO: GetAccessor: Laya.playEnd */

/* TODO: GetAccessor: Laya.playDuration */

/* TODO: GetAccessor: Laya.overallDuration */

/* TODO: GetAccessor: Laya.currentAnimationClipIndex */

/* TODO: GetAccessor: Laya.currentKeyframeIndex */

/* TODO: GetAccessor: Laya.currentPlayTime */

/* TODO: GetAccessor: Laya.currentFrameTime */

/* TODO: GetAccessor: Laya.cachePlayRate */

/* TODO: SetAccessor: Laya.cachePlayRate */

/* TODO: GetAccessor: Laya.cacheFrameRate */

/* TODO: SetAccessor: Laya.cacheFrameRate */

/* TODO: SetAccessor: Laya.currentTime */

/* TODO: GetAccessor: Laya.paused */

/* TODO: SetAccessor: Laya.paused */

/* TODO: GetAccessor: Laya.cacheFrameRateInterval */

/* TODO: GetAccessor: Laya.state */

/* TODO: GetAccessor: Laya.destroyed */
/** @type {?} */
Laya.AnimationPlayer.prototype._setPlayParams;
/** @type {?} */
Laya.AnimationPlayer.prototype._setPlayParamsWhenStop;

/**
 * 播放动画。
 * @param {number=} index 动画索引。
 * @param {number=} playbackRate 播放速率。
 * @param {number=} overallDuration
 * @param {number=} playStart 播放的起始时间位置。
 * @param {number=} playEnd 播放的结束时间位置。（0为动画一次循环的最长结束时间位置）。
 * @return {void}
 */
Laya.AnimationPlayer.prototype.play = function(index, playbackRate, overallDuration, playStart, playEnd) {};

/**
 * 播放动画。
 * @param {number=} index 动画索引。
 * @param {number=} playbackRate 播放速率。
 * @param {number=} overallDuration
 * @param {number=} playStartFrame 播放的原始起始帧率位置。
 * @param {number=} playEndFrame 播放的原始结束帧率位置。（0为动画一次循环的最长结束时间位置）。
 * @param {number=} fpsIn3DBuilder
 * @return {void}
 */
Laya.AnimationPlayer.prototype.playByFrame = function(index, playbackRate, overallDuration, playStartFrame, playEndFrame, fpsIn3DBuilder) {};

/**
 * 停止播放当前动画
 * 如果不是立即停止就等待动画播放完成后再停止
 * @param {boolean=} immediate 是否立即停止
 * @return {void}
 */
Laya.AnimationPlayer.prototype.stop = function(immediate) {};

/**
 * @return {void}
 */
Laya.AnimationPlayer.prototype.destroy = function() {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 */
Laya.AnimationTemplet = function() {};
/** @type {!Array<?>} */
Laya.AnimationTemplet.interpolation;
/** @type {?} */
Laya.AnimationTemplet._LinearInterpolation_0;
/** @type {?} */
Laya.AnimationTemplet._QuaternionInterpolation_1;
/** @type {?} */
Laya.AnimationTemplet._AngleInterpolation_2;
/** @type {?} */
Laya.AnimationTemplet._RadiansInterpolation_3;
/** @type {?} */
Laya.AnimationTemplet._Matrix4x4Interpolation_4;
/** @type {?} */
Laya.AnimationTemplet._NoInterpolation_5;
/** @type {?} */
Laya.AnimationTemplet._BezierInterpolation_6;
/** @type {?} */
Laya.AnimationTemplet._BezierInterpolation_7;
/** @type {!Uint32Array} */
Laya.AnimationTemplet.prototype.unfixedCurrentFrameIndexes;
/** @type {!Float32Array} */
Laya.AnimationTemplet.prototype.unfixedCurrentTimes;
/** @type {!Array<!Laya.KeyFramesContent>} */
Laya.AnimationTemplet.prototype.unfixedKeyframes;
/** @type {number} */
Laya.AnimationTemplet.prototype.unfixedLastAniIndex;
/** @type {?} */
Laya.AnimationTemplet.prototype._boneCurKeyFrm;

/**
 * @param {!ArrayBuffer} data
 * @return {void}
 */
Laya.AnimationTemplet.prototype.parse = function(data) {};

/**
 * 获取动画数量
 * @return {number}
 */
Laya.AnimationTemplet.prototype.getAnimationCount = function() {};

/**
 * 通过索引获取动画
 * @param {number} aniIndex
 * @return {?}
 */
Laya.AnimationTemplet.prototype.getAnimation = function(aniIndex) {};

/**
 * 获取动画时长
 * @param {number} aniIndex
 * @return {number}
 */
Laya.AnimationTemplet.prototype.getAniDuration = function(aniIndex) {};

/**
 * 获取动画nodes信息
 * @param {number} aniIndex
 * @return {?}
 */
Laya.AnimationTemplet.prototype.getNodes = function(aniIndex) {};

/**
 * 获取动画骨骼信息
 * @param {number} aniIndex
 * @param {string} name
 * @return {number}
 */
Laya.AnimationTemplet.prototype.getNodeIndexWithName = function(aniIndex, name) {};

/**
 * 获取nodes长度
 * @param {number} aniIndex
 * @return {number}
 */
Laya.AnimationTemplet.prototype.getNodeCount = function(aniIndex) {};

/**
 * 获取keyframes长度
 * @param {number} aniIndex
 * @return {number}
 */
Laya.AnimationTemplet.prototype.getTotalkeyframesLength = function(aniIndex) {};

/**
 * 获取附加数据
 * @return {!ArrayBuffer}
 */
Laya.AnimationTemplet.prototype.getPublicExtData = function() {};

/**
 * 获取动画信息数据
 * @param {?} key
 * @param {?} cacheDatas
 * @param {number} aniIndex
 * @param {number} frameIndex
 * @return {!Float32Array}
 */
Laya.AnimationTemplet.prototype.getAnimationDataWithCache = function(key, cacheDatas, aniIndex, frameIndex) {};

/**
 * 设置动画信息数据
 * @param {?} key
 * @param {!Array<?>} cacheDatas
 * @param {number} aniIndex
 * @param {number} frameIndex
 * @param {?} data
 * @return {void}
 */
Laya.AnimationTemplet.prototype.setAnimationDataWithCache = function(key, cacheDatas, aniIndex, frameIndex, data) {};

/**
 * 计算当前时间应该对应关键帧的哪一帧
 * @param {!Array<!Laya.KeyFramesContent>} nodeframes 当前骨骼的关键帧数据
 * @param {number} nodeid 骨骼id，因为要使用和更新 _boneCurKeyFrm
 * @param {number} tm
 * @return {number} 问题
 */
Laya.AnimationTemplet.prototype.getNodeKeyFrame = function(nodeframes, nodeid, tm) {};

/**
 * 获取原始数据
 * @param {number} aniIndex
 * @param {!Float32Array} originalData
 * @param {!Array<?>} nodesFrameIndices
 * @param {number} frameIndex
 * @param {number} playCurTime
 * @return {void}
 */
Laya.AnimationTemplet.prototype.getOriginalData = function(aniIndex, originalData, nodesFrameIndices, frameIndex, playCurTime) {};

/**
 * 获取nodes信息
 * @param {number} aniIndex
 * @param {number} playCurTime
 * @return {!Uint32Array}
 */
Laya.AnimationTemplet.prototype.getNodesCurrentFrameIndex = function(aniIndex, playCurTime) {};

/**
 * 获取原始数据
 * @param {number} aniIndex
 * @param {!Float32Array} originalData
 * @param {number} playCurTime
 * @return {void}
 */
Laya.AnimationTemplet.prototype.getOriginalDataUnfixedRate = function(aniIndex, originalData, playCurTime) {};

/**
 * @constructor
 * @struct
 */
Laya.Bone = function() {};
/** @type {?} */
Laya.Bone.ShowBones;
/** @type {string} */
Laya.Bone.prototype.name;
/** @type {!Laya.Bone} */
Laya.Bone.prototype.root;
/** @type {!Laya.Bone} */
Laya.Bone.prototype.parentBone;
/** @type {number} */
Laya.Bone.prototype.length;
/** @type {!Laya.Transform} */
Laya.Bone.prototype.transform;
/** @type {!Laya.Transform} */
Laya.Bone.prototype.resultTransform;
/** @type {!Laya.Matrix} */
Laya.Bone.prototype.resultMatrix;
/** @type {boolean} */
Laya.Bone.prototype.inheritScale;
/** @type {boolean} */
Laya.Bone.prototype.inheritRotation;
/** @type {number} */
Laya.Bone.prototype.rotation;
/** @type {number} */
Laya.Bone.prototype.resultRotation;
/** @type {number} */
Laya.Bone.prototype.d;

/**
 * @param {!Laya.Matrix} matrix
 * @return {void}
 */
Laya.Bone.prototype.setTempMatrix = function(matrix) {};

/**
 * @param {!Laya.Matrix=} pMatrix
 * @return {void}
 */
Laya.Bone.prototype.update = function(pMatrix) {};

/**
 * @return {void}
 */
Laya.Bone.prototype.updateChild = function() {};

/**
 * @param {number} rd
 * @return {void}
 */
Laya.Bone.prototype.setRotation = function(rd) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Bone.prototype.updateDraw = function(x, y) {};

/**
 * @param {!Laya.Bone} bone
 * @return {void}
 */
Laya.Bone.prototype.addChild = function(bone) {};

/**
 * @param {string} boneName
 * @return {!Laya.Bone}
 */
Laya.Bone.prototype.findBone = function(boneName) {};

/**
 * @param {!Array<number>} local
 * @return {void}
 */
Laya.Bone.prototype.localToWorld = function(local) {};
/**
 * @constructor
 * @struct
 */
Laya.BoneSlot = function() {};
/** @type {string} */
Laya.BoneSlot.prototype.name;
/** @type {string} */
Laya.BoneSlot.prototype.parent;
/** @type {string} */
Laya.BoneSlot.prototype.attachmentName;
/** @type {number} */
Laya.BoneSlot.prototype.srcDisplayIndex;
/** @type {string} */
Laya.BoneSlot.prototype.type;
/** @type {!Laya.Templet} */
Laya.BoneSlot.prototype.templet;
/** @type {!Laya.SlotData} */
Laya.BoneSlot.prototype.currSlotData;
/** @type {!Laya.Texture} */
Laya.BoneSlot.prototype.currTexture;
/** @type {!Laya.SkinSlotDisplayData} */
Laya.BoneSlot.prototype.currDisplayData;
/** @type {number} */
Laya.BoneSlot.prototype.displayIndex;
/** @type {number} */
Laya.BoneSlot.prototype.originalIndex;
/** @type {!Array<?>} */
Laya.BoneSlot.prototype.deformData;
/** @type {?} */
Laya.BoneSlot.prototype._mVerticleArr;
/** @type {?} */
Laya.BoneSlot._tempMatrix;
/** @type {?} */
Laya.BoneSlot.isSameArr;
/** @type {?} */
Laya.BoneSlot.prototype.getSaveVerticle;
/** @type {?} */
Laya.BoneSlot.prototype._preGraphicMatrix;
/** @type {?} */
Laya.BoneSlot.useSameMatrixAndVerticle;
/** @type {?} */
Laya.BoneSlot.prototype.getSaveMatrix;
/** @type {?} */
Laya.BoneSlot.prototype.skinMesh;
/** @type {?} */
Laya.BoneSlot.prototype.getDisplayMatrix;

/**
 * 设置要显示的插槽数据
 * @param {!Laya.SlotData} slotData
 * @param {boolean=} freshIndex 是否重置纹理
 * @return {void}
 */
Laya.BoneSlot.prototype.showSlotData = function(slotData, freshIndex) {};

/**
 * 通过名字显示指定对象
 * @param {string} name
 * @return {void}
 */
Laya.BoneSlot.prototype.showDisplayByName = function(name) {};

/**
 * 替换贴图名
 * @param {string} tarName 要替换的贴图名
 * @param {string} newName 替换后的贴图名
 * @return {void}
 */
Laya.BoneSlot.prototype.replaceDisplayByName = function(tarName, newName) {};

/**
 * 替换贴图索引
 * @param {number} tarIndex 要替换的索引
 * @param {number} newIndex 替换后的索引
 * @return {void}
 */
Laya.BoneSlot.prototype.replaceDisplayByIndex = function(tarIndex, newIndex) {};

/**
 * 指定显示对象
 * @param {number} index
 * @return {void}
 */
Laya.BoneSlot.prototype.showDisplayByIndex = function(index) {};

/**
 * 替换皮肤
 * @param {!Laya.Texture} _texture
 * @return {void}
 */
Laya.BoneSlot.prototype.replaceSkin = function(_texture) {};

/**
 * 保存父矩阵的索引
 * @param {!Laya.Matrix} parentMatrix
 * @return {void}
 */
Laya.BoneSlot.prototype.setParentMatrix = function(parentMatrix) {};

/**
 * @return {?}
 */
Laya.BoneSlot.createSkinMesh = function() {};

/**
 * @param {!Laya.Matrix} mtA
 * @param {!Laya.Matrix} mtB
 * @return {boolean}
 */
Laya.BoneSlot.isSameMatrix = function(mtA, mtB) {};

/**
 * 把纹理画到Graphics上
 * @param {!Laya.GraphicsAni} graphics
 * @param {!Array<?>} boneMatrixArray
 * @param {boolean=} noUseSave 不使用共享的矩阵对象 _tempResultMatrix，只有实时计算的时候才设置为true
 * @param {number=} alpha
 * @return {void}
 */
Laya.BoneSlot.prototype.draw = function(graphics, boneMatrixArray, noUseSave, alpha) {};

/**
 * 画骨骼的起始点，方便调试
 * @param {!Laya.Graphics} graphics
 * @return {void}
 */
Laya.BoneSlot.prototype.drawBonePoint = function(graphics) {};

/**
 * 得到插糟的矩阵
 * @return {!Laya.Matrix}
 */
Laya.BoneSlot.prototype.getMatrix = function() {};

/**
 * 用原始数据拷贝出一个
 * @return {!Laya.BoneSlot}
 */
Laya.BoneSlot.prototype.copy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.MeshData = function() {};
/** @type {!Laya.Texture} */
Laya.MeshData.prototype.texture;
/** @type {!Float32Array} */
Laya.MeshData.prototype.uvs;
/** @type {!Float32Array} */
Laya.MeshData.prototype.vertices;
/** @type {!Uint16Array} */
Laya.MeshData.prototype.indexes;
/** @type {!Laya.Matrix} */
Laya.MeshData.prototype.uvTransform;
/** @type {boolean} */
Laya.MeshData.prototype.useUvTransform;
/** @type {number} */
Laya.MeshData.prototype.canvasPadding;

/**
 * 计算mesh的Bounds
 * @return {!Laya.Rectangle}
 */
Laya.MeshData.prototype.getBounds = function() {};

/**
 * @extends {Laya.MeshData}
 * @constructor
 * @struct
 */
Laya.SkinMeshForGraphic = function() {};
/** @type {!Laya.Matrix} */
Laya.SkinMeshForGraphic.prototype.transform;

/**
 * @param {!Laya.Texture} texture
 * @param {!Array<?>} ps
 * @param {!Array<?>} verticles
 * @param {!Array<?>} uvs
 * @return {void}
 */
Laya.SkinMeshForGraphic.prototype.init2 = function(texture, ps, verticles, uvs) {};

/**
 * @constructor
 * @struct
 */
Laya.EventData = function() {};
/** @type {string} */
Laya.EventData.prototype.name;
/** @type {number} */
Laya.EventData.prototype.intValue;
/** @type {number} */
Laya.EventData.prototype.floatValue;
/** @type {string} */
Laya.EventData.prototype.stringValue;
/** @type {string} */
Laya.EventData.prototype.audioValue;
/** @type {number} */
Laya.EventData.prototype.time;

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个Skeleton对象
 * @param {!Laya.Templet=} templet 骨骼动画模板
 * @param {number=} aniMode 动画模式，0不支持换装，1、2支持换装
 */
Laya.Skeleton = function(templet, aniMode) {};
/** @type {boolean} */
Laya.Skeleton.useSimpleMeshInCanvas;

/* TODO: GetAccessor: Laya.url */

/* TODO: SetAccessor: Laya.url */
/** @type {?} */
Laya.Skeleton.prototype._checkIsAllParsed;

/* TODO: GetAccessor: Laya.index */

/* TODO: SetAccessor: Laya.index */

/* TODO: GetAccessor: Laya.total */

/* TODO: GetAccessor: Laya.player */

/* TODO: GetAccessor: Laya.templet */

/**
 * 初始化动画
 * @param {!Laya.Templet} templet 模板
 * @param {number=} aniMode 动画模式
 * @return {void}
 */
Laya.Skeleton.prototype.init = function(templet, aniMode) {};

/**
 * 通过加载直接创建动画
 * @param {string} path 要加载的动画文件路径
 * @param {!Handler=} complete 加载完成的回调函数
 * @param {number=} aniMode 与<code>Skeleton.init</code>的<code>aniMode</code>作用一致
 * @return {void}
 */
Laya.Skeleton.prototype.load = function(path, complete, aniMode) {};

/**
 * 得到当前动画的数量
 * @return {number} 当前动画的数量
 */
Laya.Skeleton.prototype.getAnimNum = function() {};

/**
 * 得到指定动画的名字
 * @param {number} index 动画的索引
 * @return {string}
 */
Laya.Skeleton.prototype.getAniNameByIndex = function(index) {};

/**
 * 通过名字得到插槽的引用
 * @param {string} name 动画的名字
 * @return {!Laya.BoneSlot} 插槽的引用
 */
Laya.Skeleton.prototype.getSlotByName = function(name) {};

/**
 * 通过名字显示一套皮肤
 * @param {string} name 皮肤的名字
 * @param {boolean=} freshSlotIndex 是否将插槽纹理重置到初始化状态
 * @return {void}
 */
Laya.Skeleton.prototype.showSkinByName = function(name, freshSlotIndex) {};

/**
 * 通过索引显示一套皮肤
 * @param {number} skinIndex 皮肤索引
 * @param {boolean=} freshSlotIndex 是否将插槽纹理重置到初始化状态
 * @return {void}
 */
Laya.Skeleton.prototype.showSkinByIndex = function(skinIndex, freshSlotIndex) {};

/**
 * 设置某插槽的皮肤
 * @param {string} slotName 插槽名称
 * @param {number} index 插糟皮肤的索引
 * @return {void}
 */
Laya.Skeleton.prototype.showSlotSkinByIndex = function(slotName, index) {};

/**
 * 设置某插槽的皮肤
 * @param {string} slotName 插槽名称
 * @param {string} name 皮肤名称
 * @return {void}
 */
Laya.Skeleton.prototype.showSlotSkinByName = function(slotName, name) {};

/**
 * 替换插槽贴图名
 * @param {string} slotName 插槽名称
 * @param {string} oldName 要替换的贴图名
 * @param {string} newName 替换后的贴图名
 * @return {void}
 */
Laya.Skeleton.prototype.replaceSlotSkinName = function(slotName, oldName, newName) {};

/**
 * 替换插槽的贴图索引
 * @param {string} slotName 插槽名称
 * @param {number} oldIndex 要替换的索引
 * @param {number} newIndex 替换后的索引
 * @return {void}
 */
Laya.Skeleton.prototype.replaceSlotSkinByIndex = function(slotName, oldIndex, newIndex) {};

/**
 * 设置自定义皮肤
 * @param {string} slotName
 * @param {!Laya.Texture} texture 自定义的纹理
 * @return {void}
 */
Laya.Skeleton.prototype.setSlotSkin = function(slotName, texture) {};

/**
 * 播放动画
 * @param {?} nameOrIndex 动画名字或者索引
 * @param {boolean} loop 是否循环播放
 * @param {boolean=} force false,如果要播的动画跟上一个相同就不生效,true,强制生效
 * @param {number=} start 起始时间
 * @param {number=} end 结束时间
 * @param {boolean=} freshSkin 是否刷新皮肤数据
 * @param {boolean=} playAudio 是否播放音频
 * @return {void}
 */
Laya.Skeleton.prototype.play = function(nameOrIndex, loop, force, start, end, freshSkin, playAudio) {};

/**
 * 停止动画
 * @return {void}
 */
Laya.Skeleton.prototype.stop = function() {};

/**
 * 设置动画播放速率
 * @param {number} value 1为标准速率
 * @return {void}
 */
Laya.Skeleton.prototype.playbackRate = function(value) {};

/**
 * 暂停动画的播放
 * @return {void}
 */
Laya.Skeleton.prototype.paused = function() {};

/**
 * 恢复动画的播放
 * @return {void}
 */
Laya.Skeleton.prototype.resume = function() {};

/**
 * 销毁当前动画
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Skeleton.prototype.destroy = function(destroyChild) {};
/**
 * @constructor
 * @struct
 */
Laya.SkinSlotDisplayData = function() {};
/** @type {string} */
Laya.SkinSlotDisplayData.prototype.name;
/** @type {string} */
Laya.SkinSlotDisplayData.prototype.attachmentName;
/** @type {number} */
Laya.SkinSlotDisplayData.prototype.type;
/** @type {!Laya.Transform} */
Laya.SkinSlotDisplayData.prototype.transform;
/** @type {number} */
Laya.SkinSlotDisplayData.prototype.width;
/** @type {number} */
Laya.SkinSlotDisplayData.prototype.height;
/** @type {!Laya.Texture} */
Laya.SkinSlotDisplayData.prototype.texture;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.bones;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.uvs;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.weights;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.triangles;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.vertices;
/** @type {!Array<?>} */
Laya.SkinSlotDisplayData.prototype.lengths;
/** @type {number} */
Laya.SkinSlotDisplayData.prototype.verLen;

/**
 * @param {!Laya.Texture} currTexture
 * @return {!Laya.Texture}
 */
Laya.SkinSlotDisplayData.prototype.createTexture = function(currTexture) {};

/**
 * @return {void}
 */
Laya.SkinSlotDisplayData.prototype.destory = function() {};
/**
 * @constructor
 * @struct
 */
Laya.SlotData = function() {};
/** @type {string} */
Laya.SlotData.prototype.name;
/** @type {!Array<?>} */
Laya.SlotData.prototype.displayArr;

/**
 * 通过附件名称获取位置
 * @param {string} name
 * @return {number}
 */
Laya.SlotData.prototype.getDisplayByName = function(name) {};
/**
 * @extends {Laya.AnimationTemplet}
 * @constructor
 * @struct
 */
Laya.Templet = function() {};
/** @type {!Array<?>} */
Laya.Templet.prototype.srcBoneMatrixArr;
/** @type {!Array<?>} */
Laya.Templet.prototype.ikArr;
/** @type {!Array<?>} */
Laya.Templet.prototype.tfArr;
/** @type {!Array<?>} */
Laya.Templet.prototype.pathArr;
/** @type {?} */
Laya.Templet.prototype.boneSlotDic;
/** @type {?} */
Laya.Templet.prototype.bindBoneBoneSlotDic;
/** @type {!Array<?>} */
Laya.Templet.prototype.boneSlotArray;
/** @type {!Array<?>} */
Laya.Templet.prototype.skinDataArray;
/** @type {?} */
Laya.Templet.prototype.skinDic;
/** @type {?} */
Laya.Templet.prototype.subTextureDic;
/** @type {boolean} */
Laya.Templet.prototype.isParseFail;
/** @type {!Laya.Matrix} */
Laya.Templet.prototype.yReverseMatrix;
/** @type {!Array<?>} */
Laya.Templet.prototype.drawOrderAniArr;
/** @type {!Array<?>} */
Laya.Templet.prototype.eventAniArr;
/** @type {!Array<?>} */
Laya.Templet.prototype.attachmentNames;
/** @type {!Array<?>} */
Laya.Templet.prototype.deformAniArr;
/** @type {!Array<!Laya.SkinSlotDisplayData>} */
Laya.Templet.prototype.skinSlotDisplayDataArr;
/** @type {boolean} */
Laya.Templet.prototype.isParserComplete;
/** @type {?} */
Laya.Templet.prototype.aniSectionDic;
/** @type {number} */
Laya.Templet.prototype.tMatrixDataLen;
/** @type {!Laya.Bone} */
Laya.Templet.prototype.mRootBone;
/** @type {!Array<!Laya.Bone>} */
Laya.Templet.prototype.mBoneArr;
/** @type {?} */
Laya.Templet.prototype.onComplete;

/* TODO: GetAccessor: Laya.rate */

/* TODO: SetAccessor: Laya.rate */

/**
 * @param {string} url
 * @return {void}
 */
Laya.Templet.prototype.loadAni = function(url) {};

/**
 * 解析骨骼动画数据
 * @param {!Laya.Texture} texture 骨骼动画用到的纹理
 * @param {!ArrayBuffer} skeletonData 骨骼动画信息及纹理分块信息
 * @param {number=} playbackRate 缓冲的帧率数据（会根据帧率去分帧）
 * @return {void}
 */
Laya.Templet.prototype.parseData = function(texture, skeletonData, playbackRate) {};

/**
 * 创建动画
 * 0,使用模板缓冲的数据，模板缓冲的数据，不允许修改					（内存开销小，计算开销小，不支持换装）
 * 1,使用动画自己的缓冲区，每个动画都会有自己的缓冲区，相当耗费内存	（内存开销大，计算开销小，支持换装）
 * 2,使用动态方式，去实时去画										（内存开销小，计算开销大，支持换装,不建议使用）
 * @param {number=} aniMode 0	动画模式，0:不支持换装,1,2支持换装
 * @return {!Laya.Skeleton}
 */
Laya.Templet.prototype.buildArmature = function(aniMode) {};

/**
 * @override
 * @param {!ArrayBuffer} data 解析的二进制数据
 * @return {void}
 */
Laya.Templet.prototype.parse = function(data) {};

/**
 * 得到指定的纹理
 * @param {string} name 纹理的名字
 * @return {!Laya.Texture}
 */
Laya.Templet.prototype.getTexture = function(name) {};

/**
 * @param {?} boneSlotDic 插糟字典的引用
 * @param {number} skinIndex 皮肤的索引
 * @param {boolean=} freshDisplayIndex 是否重置插槽纹理
 * @return {boolean}
 */
Laya.Templet.prototype.showSkinByIndex = function(boneSlotDic, skinIndex, freshDisplayIndex) {};

/**
 * 通过皮肤名字得到皮肤索引
 * @param {string} skinName 皮肤名称
 * @return {number}
 */
Laya.Templet.prototype.getSkinIndexByName = function(skinName) {};

/**
 * @param {number} aniIndex 动画索引
 * @param {number} frameIndex 帧索引
 * @return {!Laya.Graphics}
 */
Laya.Templet.prototype.getGrahicsDataWithCache = function(aniIndex, frameIndex) {};

/**
 * @param {number} aniIndex 动画索引
 * @param {number} frameIndex 帧索引
 * @param {!Laya.Graphics} graphics 要保存的数据
 * @return {void}
 */
Laya.Templet.prototype.setGrahicsDataWithCache = function(aniIndex, frameIndex, graphics) {};

/**
 * @param {number} aniIndex
 * @return {void}
 */
Laya.Templet.prototype.deleteAniData = function(aniIndex) {};

/**
 * 释放纹理
 * @override
 * @return {void}
 */
Laya.Templet.prototype.destroy = function() {};

/**
 * 通过索引得动画名称
 * @param {number} index
 * @return {string}
 */
Laya.Templet.prototype.getAniNameByIndex = function(index) {};
/**
 * @constructor
 * @struct
 */
Laya.Transform = function() {};
/** @type {number} */
Laya.Transform.prototype.skX;
/** @type {number} */
Laya.Transform.prototype.skY;
/** @type {number} */
Laya.Transform.prototype.scX;
/** @type {number} */
Laya.Transform.prototype.scY;
/** @type {number} */
Laya.Transform.prototype.x;
/** @type {number} */
Laya.Transform.prototype.y;
/** @type {number} */
Laya.Transform.prototype.skewX;
/** @type {number} */
Laya.Transform.prototype.skewY;
/** @type {?} */
Laya.Transform.prototype.mMatrix;

/**
 * 初始化数据
 * @param {?} data
 * @return {void}
 */
Laya.Transform.prototype.initData = function(data) {};

/**
 * 获取当前矩阵
 * @return {!Laya.Matrix}
 */
Laya.Transform.prototype.getMatrix = function() {};

/**
 * 获取倾斜矩阵
 * @param {!Laya.Matrix} m
 * @param {number} x
 * @param {number} y
 * @return {!Laya.Matrix}
 */
Laya.Transform.prototype.skew = function(m, x, y) {};
/**
 * @extends {Laya.Graphics}
 * @constructor
 * @struct
 */
Laya.GraphicsAni = function() {};
/** @type {?} */
Laya.GraphicsAni._caches;

/**
 * @param {!Laya.SkinMeshForGraphic} skinA
 * @param {number} alpha
 * @return {void}
 */
Laya.GraphicsAni.prototype.drawSkin = function(skinA, alpha) {};

/**
 * @return {!Laya.GraphicsAni}
 */
Laya.GraphicsAni.create = function() {};

/**
 * 回收清理
 * @param {!Laya.GraphicsAni} graphics
 * @return {void}
 */
Laya.GraphicsAni.recycle = function(graphics) {};
/**
 * @constructor
 * @struct
 */
Laya.KeyFramesContent = function() {};
/** @type {number} */
Laya.KeyFramesContent.prototype.startTime;
/** @type {number} */
Laya.KeyFramesContent.prototype.duration;
/** @type {!Array<?>} */
Laya.KeyFramesContent.prototype.interpolationData;
/** @type {!Float32Array} */
Laya.KeyFramesContent.prototype.data;
/** @type {!Float32Array} */
Laya.KeyFramesContent.prototype.dData;
/** @type {!Float32Array} */
Laya.KeyFramesContent.prototype.nextData;

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个 <code>MovieClip</code> 实例。
 * @param {!Laya.MovieClip=} parentMovieClip 父MovieClip,自己创建时不需要传该参数
 */
Laya.MovieClip = function(parentMovieClip) {};
/** @type {string} */
Laya.MovieClip.prototype.basePath;
/** @type {number} */
Laya.MovieClip.prototype.interval;
/** @type {boolean} */
Laya.MovieClip.prototype.loop;

/* TODO: GetAccessor: Laya.index */

/* TODO: SetAccessor: Laya.index */

/* TODO: GetAccessor: Laya.count */

/* TODO: GetAccessor: Laya.playing */

/* TODO: SetAccessor: Laya.url */

/**
 * <p>销毁此对象。以及销毁引用的Texture</p>
 * @override
 * @param {boolean=} destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
 * @return {void}
 */
Laya.MovieClip.prototype.destroy = function(destroyChild) {};

/**
 * @return {void}
 */
Laya.MovieClip.prototype.updates = function() {};

/**
 * 增加一个标签到index帧上，播放到此index后会派发label事件
 * @param {string} label 标签名称
 * @param {number} index 索引位置
 * @return {void}
 */
Laya.MovieClip.prototype.addLabel = function(label, index) {};

/**
 * 删除某个标签
 * @param {string} label 标签名字，如果label为空，则删除所有Label
 * @return {void}
 */
Laya.MovieClip.prototype.removeLabel = function(label) {};

/**
 * 停止播放动画。
 * @return {void}
 */
Laya.MovieClip.prototype.stop = function() {};

/**
 * 跳到某帧并停止播放动画。
 * @param {number} index
 * @return {void}
 */
Laya.MovieClip.prototype.gotoAndStop = function(index) {};

/**
 * 播放动画。
 * @param {number=} index 帧索引。
 * @param {boolean=} loop
 * @return {void}
 */
Laya.MovieClip.prototype.play = function(index, loop) {};

/**
 * 加载资源。
 * @param {string} url swf 资源地址。
 * @param {boolean=} atlas 是否使用图集资源
 * @param {string=} atlasPath 图集路径，默认使用与swf同名的图集
 * @return {void}
 */
Laya.MovieClip.prototype.load = function(url, atlas, atlasPath) {};

/**
 * 从开始索引播放到结束索引，结束之后出发complete回调
 * @param {number} start 开始索引
 * @param {number} end 结束索引
 * @param {!Handler=} complete 结束回调
 * @return {void}
 */
Laya.MovieClip.prototype.playTo = function(start, end, complete) {};

/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.CommonScript = function() {};

/* TODO: GetAccessor: Laya.isSingleton */

/**
 * 创建后只执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onAwake = function() {};

/**
 * 每次启动后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onEnable = function() {};

/**
 * 第一次执行update之前执行，只会执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onStart = function() {};

/**
 * 每帧更新时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onUpdate = function() {};

/**
 * 每帧更新时执行，在update之后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onLateUpdate = function() {};

/**
 * 禁用时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onDisable = function() {};

/**
 * 销毁时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.CommonScript.prototype.onDestroy = function() {};

/**
 * @implements {Laya.ISingletonElement|Laya.IDestroy}
 * @constructor
 * @struct
 * 创建一个新的 <code>Component</code> 实例。
 */
Laya.Component = function() {};
/** @type {!Laya.Node} */
Laya.Component.prototype.owner;

/* TODO: GetAccessor: Laya.id */

/* TODO: GetAccessor: Laya.enabled */

/* TODO: SetAccessor: Laya.enabled */

/* TODO: GetAccessor: Laya.isSingleton */

/* TODO: GetAccessor: Laya.destroyed */

/**
 * [实现IListPool接口]
 * @return {number}
 */
Laya.Component.prototype._getIndexInList = function() {};

/**
 * [实现IListPool接口]
 * @param {number} index
 * @return {void}
 */
Laya.Component.prototype._setIndexInList = function(index) {};

/**
 * 重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用
 * 如果没有重置，则不进行回收复用
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Component.prototype.onReset = function() {};

/**
 * 销毁组件
 * @return {void}
 */
Laya.Component.prototype.destroy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Prefab = function() {};
/** @type {?} */
Laya.Prefab.prototype.json;

/**
 * 通过预制创建实例
 * @return {?}
 */
Laya.Prefab.prototype.create = function() {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.Script = function() {};

/* TODO: GetAccessor: Laya.isSingleton */

/**
 * 组件被激活后执行，此时所有节点和组件均已创建完毕，次方法只执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onAwake = function() {};

/**
 * 组件被启用后执行，比如节点被添加到舞台后
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onEnable = function() {};

/**
 * 第一次执行update之前执行，只会执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onStart = function() {};

/**
 * 开始碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {?} other
 * @param {?} self
 * @param {?} contact
 * @return {void}
 */
Laya.Script.prototype.onTriggerEnter = function(other, self, contact) {};

/**
 * 持续碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {?} other
 * @param {?} self
 * @param {?} contact
 * @return {void}
 */
Laya.Script.prototype.onTriggerStay = function(other, self, contact) {};

/**
 * 结束碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {?} other
 * @param {?} self
 * @param {?} contact
 * @return {void}
 */
Laya.Script.prototype.onTriggerExit = function(other, self, contact) {};

/**
 * 鼠标按下时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onMouseDown = function(e) {};

/**
 * 鼠标抬起时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onMouseUp = function(e) {};

/**
 * 鼠标点击时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onClick = function(e) {};

/**
 * 鼠标在舞台按下时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onStageMouseDown = function(e) {};

/**
 * 鼠标在舞台抬起时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onStageMouseUp = function(e) {};

/**
 * 鼠标在舞台点击时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onStageClick = function(e) {};

/**
 * 鼠标在舞台移动时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onStageMouseMove = function(e) {};

/**
 * 鼠标双击时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onDoubleClick = function(e) {};

/**
 * 鼠标右键点击时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onRightClick = function(e) {};

/**
 * 鼠标移动时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onMouseMove = function(e) {};

/**
 * 鼠标经过节点时触发
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onMouseOver = function(e) {};

/**
 * 鼠标离开节点时触发
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onMouseOut = function(e) {};

/**
 * 键盘按下时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onKeyDown = function(e) {};

/**
 * 键盘产生一个字符时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onKeyPress = function(e) {};

/**
 * 键盘抬起时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Script.prototype.onKeyUp = function(e) {};

/**
 * 每帧更新时执行，尽量不要在这里写大循环逻辑或者使用getComponent方法
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onUpdate = function() {};

/**
 * 每帧更新时执行，在update之后执行，尽量不要在这里写大循环逻辑或者使用getComponent方法
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onLateUpdate = function() {};

/**
 * 渲染之前执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onPreRender = function() {};

/**
 * 渲染之后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onPostRender = function() {};

/**
 * 组件被禁用时执行，比如从节点从舞台移除后
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onDisable = function() {};

/**
 * 手动调用节点销毁时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script.prototype.onDestroy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Const = function() {};
/** @type {number} */
Laya.Const.NOT_ACTIVE;
/** @type {number} */
Laya.Const.ACTIVE_INHIERARCHY;
/** @type {number} */
Laya.Const.AWAKED;
/** @type {number} */
Laya.Const.NOT_READY;
/** @type {number} */
Laya.Const.DISPLAY;
/** @type {number} */
Laya.Const.HAS_ZORDER;
/** @type {number} */
Laya.Const.HAS_MOUSE;
/** @type {number} */
Laya.Const.DISPLAYED_INSTAGE;
/** @type {number} */
Laya.Const.DRAWCALL_OPTIMIZE;

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 * 创建一个 <code>AnimationClip</code> 实例。
 */
Laya.AnimationClip = function() {};
/** @type {string} */
Laya.AnimationClip.ANIMATIONCLIP;
/** @type {boolean} */
Laya.AnimationClip.prototype.islooping;
/** @type {?} */
Laya.AnimationClip.prototype._evaluateFrameNodeVector3DatasRealTime;
/** @type {?} */
Laya.AnimationClip.prototype._evaluateFrameNodeQuaternionDatasRealTime;
/** @type {?} */
Laya.AnimationClip.prototype._binarySearchEventIndex;

/**
 * 加载动画片段。
 * @param {string} url 动画片段地址。
 * @param {!Handler} complete 完成回掉。load
 * @return {void}
 */
Laya.AnimationClip.load = function(url, complete) {};

/**
 * 动画持续时间
 * @return {number} 返回动画持续时间
 */
Laya.AnimationClip.prototype.duration = function() {};

/**
 * 添加动画事件。
 * @param {!Laya.AnimationEvent} event 动画事件
 * @return {void}
 */
Laya.AnimationClip.prototype.addEvent = function(event) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.AnimationClip.prototype._disposeResource = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>AnimationEvent</code> 实例。
 */
Laya.AnimationEvent = function() {};
/** @type {number} */
Laya.AnimationEvent.prototype.time;
/** @type {string} */
Laya.AnimationEvent.prototype.eventName;
/** @type {!Array<?>} */
Laya.AnimationEvent.prototype.params;

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个新的 <code>AnimationNode</code> 实例。
 */
Laya.AnimationNode = function() {};
/** @type {?} */
Laya.AnimationNode.prototype._children;
/** @type {string} */
Laya.AnimationNode.prototype.name;

/**
 * 添加子节点。
 * @param {!Laya.AnimationNode} child 子节点。
 * @return {void}
 */
Laya.AnimationNode.prototype.addChild = function(child) {};

/**
 * 移除子节点。
 * @param {!Laya.AnimationNode} child 子节点。
 * @return {void}
 */
Laya.AnimationNode.prototype.removeChild = function(child) {};

/**
 * 根据名字获取子节点。
 * @param {string} name 名字。
 * @return {!Laya.AnimationNode}
 */
Laya.AnimationNode.prototype.getChildByName = function(name) {};

/**
 * 根据索引获取子节点。
 * @param {number} index 索引。
 * @return {!Laya.AnimationNode}
 */
Laya.AnimationNode.prototype.getChildByIndex = function(index) {};

/**
 * 获取子节点的个数。
 * @return {number}
 */
Laya.AnimationNode.prototype.getChildCount = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.AnimationNode.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.AnimationNode.prototype.clone = function() {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * 创建一个 <code>Transform3D</code> 实例。
 * @param {!Laya.AnimationNode} owner 所属精灵。
 */
Laya.AnimationTransform3D = function(owner) {};
/** @type {?} */
Laya.AnimationTransform3D._tempVector3;
/** @type {?} */
Laya.AnimationTransform3D._angleToRandin;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localMatrix;
/** @type {?} */
Laya.AnimationTransform3D.prototype._worldMatrix;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localPosition;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localRotation;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localScale;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localQuaternionUpdate;
/** @type {?} */
Laya.AnimationTransform3D.prototype._locaEulerlUpdate;
/** @type {?} */
Laya.AnimationTransform3D.prototype._localUpdate;
/** @type {?} */
Laya.AnimationTransform3D.prototype._parent;
/** @type {?} */
Laya.AnimationTransform3D.prototype._children;
/** @type {?} */
Laya.AnimationTransform3D.prototype._getlocalMatrix;
/** @type {?} */
Laya.AnimationTransform3D.prototype._onWorldTransform;

/**
 * 获取世界矩阵。
 * @return {!Float32Array} 世界矩阵。
 */
Laya.AnimationTransform3D.prototype.getWorldMatrix = function() {};

/**
 * 设置父3D变换。
 * @param {!Laya.AnimationTransform3D} value 父3D变换。
 * @return {void}
 */
Laya.AnimationTransform3D.prototype.setParent = function(value) {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>AnimatorStateScript</code> 实例。
 */
Laya.AnimatorStateScript = function() {};

/**
 * 动画状态开始时执行。
 * @return {void}
 */
Laya.AnimatorStateScript.prototype.onStateEnter = function() {};

/**
 * 动画状态更新时执行。
 * @return {void}
 */
Laya.AnimatorStateScript.prototype.onStateUpdate = function() {};

/**
 * 动画状态退出时执行。
 * @return {void}
 */
Laya.AnimatorStateScript.prototype.onStateExit = function() {};

/**
 * @extends {Laya.SingletonList<!Laya.ISingletonElement>}
 * @constructor
 * @struct
 * 创建一个新的 <code>CastShadowList</code> 实例。
 */
Laya.CastShadowList = function() {};

/** @enum {number} */
Laya.AnimatorUpdateMode = {
  Normal: 1,
  LowFrame: 1,
  UnScaleTime: 1,
};

/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 * 创建一个 <code>Animation</code> 实例。
 */
Laya.Animator = function() {};
/** @type {number} */
Laya.Animator.CULLINGMODE_ALWAYSANIMATE;
/** @type {number} */
Laya.Animator.CULLINGMODE_CULLCOMPLETELY;
/** @type {number} */
Laya.Animator.prototype.cullingMode;

/* TODO: GetAccessor: Laya.speed */

/* TODO: SetAccessor: Laya.speed */

/* TODO: SetAccessor: Laya.updateMode */

/* TODO: SetAccessor: Laya.lowUpdateDelty */

/* TODO: GetAccessor: Laya.controllerLayerCount */
/** @type {?} */
Laya.Animator.prototype._setClipDatasToNode;
/** @type {?} */
Laya.Animator.prototype._applyUpdateMode;

/* TODO: GetAccessor: Laya.avatar */

/* TODO: SetAccessor: Laya.avatar */

/**
 * 获取默认动画状态。
 * @param {number=} layerIndex 层索引。
 * @return {!Laya.AnimatorState} 默认动画状态。
 */
Laya.Animator.prototype.getDefaultState = function(layerIndex) {};

/**
 * 添加动画状态。
 * @param {!Laya.AnimatorState} state 动画状态。
 * @param {number=} layerIndex 层索引。
 * @return {void}
 */
Laya.Animator.prototype.addState = function(state, layerIndex) {};

/**
 * 移除动画状态。
 * @param {!Laya.AnimatorState} state 动画状态。
 * @param {number=} layerIndex 层索引。
 * @return {void}
 */
Laya.Animator.prototype.removeState = function(state, layerIndex) {};

/**
 * 添加控制器层。
 * @param {!Laya.AnimatorControllerLayer} controllderLayer
 * @return {void}
 */
Laya.Animator.prototype.addControllerLayer = function(controllderLayer) {};

/**
 * 获取控制器层。
 * @param {number=} layerInex
 * @return {!Laya.AnimatorControllerLayer}
 */
Laya.Animator.prototype.getControllerLayer = function(layerInex) {};

/**
 * 播放动画。
 * @param {string=} name 如果为null则播放默认动画，否则按名字播放动画片段。
 * @param {number=} layerIndex 层索引。
 * @param {number=} normalizedTime 归一化的播放起始时间。
 * @return {void}
 */
Laya.Animator.prototype.play = function(name, layerIndex, normalizedTime) {};

/**
 * 在当前动画状态和目标动画状态之间进行融合过渡播放。
 * @param {string} name 目标动画状态。
 * @param {number} transitionDuration 过渡时间,该值为当前动画状态的归一化时间，值在0.0~1.0之间。
 * @param {number=} layerIndex 层索引。
 * @param {number=} normalizedTime 归一化的播放起始时间。
 * @return {void}
 */
Laya.Animator.prototype.crossFade = function(name, transitionDuration, layerIndex, normalizedTime) {};

/**
 * @deprecated 请使用animator.getControllerLayer(layerIndex).getCurrentPlayState()替换。use animator.getControllerLayer(layerIndex).getCurrentPlayState() instead
 * @param {number=} layerInex
 * @return {!Laya.AnimatorPlayState} 动画播放状态。
 */
Laya.Animator.prototype.getCurrentAnimatorPlayState = function(layerInex) {};

/**
 * 关联精灵节点到Avatar节点,此Animator必须有Avatar文件。
 * @param {string} nodeName 关联节点的名字。
 * @param {!Laya.Sprite3D} sprite3D 精灵节点。
 * @return {boolean} 是否关联成功。
 */
Laya.Animator.prototype.linkSprite3DToAvatarNode = function(nodeName, sprite3D) {};

/**
 * 解除精灵节点到Avatar节点的关联,此Animator必须有Avatar文件。
 * @param {!Laya.Sprite3D} sprite3D 精灵节点。
 * @return {boolean} 是否解除关联成功。
 */
Laya.Animator.prototype.unLinkSprite3DToAvatarNode = function(sprite3D) {};

/**
 * @implements {Laya.IReferenceCounter|Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>AnimatorControllerLayer</code> 实例。
 * @param {string} name
 */
Laya.AnimatorControllerLayer = function(name) {};
/** @type {number} */
Laya.AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;
/** @type {number} */
Laya.AnimatorControllerLayer.BLENDINGMODE_ADDTIVE;
/** @type {string} */
Laya.AnimatorControllerLayer.prototype.name;
/** @type {number} */
Laya.AnimatorControllerLayer.prototype.blendingMode;
/** @type {number} */
Laya.AnimatorControllerLayer.prototype.defaultWeight;
/** @type {boolean} */
Laya.AnimatorControllerLayer.prototype.playOnWake;

/* TODO: GetAccessor: Laya.defaultState */

/* TODO: SetAccessor: Laya.defaultState */

/* TODO: GetAccessor: Laya.avatarMask */

/* TODO: SetAccessor: Laya.avatarMask */

/**
 * @return {number}
 */
Laya.AnimatorControllerLayer.prototype._getReferenceCount = function() {};

/**
 * @param {number=} count
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype._addReference = function(count) {};

/**
 * @param {number=} count
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype._removeReference = function(count) {};

/**
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype._clearReference = function() {};

/**
 * 获取当前的播放状态。
 * @return {!Laya.AnimatorPlayState} 动画播放状态。
 */
Laya.AnimatorControllerLayer.prototype.getCurrentPlayState = function() {};

/**
 * 获取动画状态。
 * @param {string} name
 * @return {!Laya.AnimatorState} 动画状态。
 */
Laya.AnimatorControllerLayer.prototype.getAnimatorState = function(name) {};

/**
 * 添加动画状态。
 * @param {!Laya.AnimatorState} state 动画状态。
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype.addState = function(state) {};

/**
 * 移除动画状态。
 * @param {!Laya.AnimatorState} state 动画状态。
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype.removeState = function(state) {};

/**
 * 销毁。
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype.destroy = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.AnimatorControllerLayer.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.AnimatorControllerLayer.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>AnimatorPlayState</code> 实例。
 */
Laya.AnimatorPlayState = function() {};

/* TODO: GetAccessor: Laya.normalizedTime */

/* TODO: GetAccessor: Laya.duration */

/* TODO: GetAccessor: Laya.animatorState */

/**
 * @implements {Laya.IReferenceCounter|Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>AnimatorState</code> 实例。
 */
Laya.AnimatorState = function() {};
/** @type {string} */
Laya.AnimatorState.prototype.name;
/** @type {number} */
Laya.AnimatorState.prototype.speed;
/** @type {number} */
Laya.AnimatorState.prototype.clipStart;
/** @type {number} */
Laya.AnimatorState.prototype.clipEnd;

/* TODO: GetAccessor: Laya.clip */

/* TODO: SetAccessor: Laya.clip */

/**
 * @return {number}
 */
Laya.AnimatorState.prototype._getReferenceCount = function() {};

/**
 * @param {number=} count
 * @return {void}
 */
Laya.AnimatorState.prototype._addReference = function(count) {};

/**
 * @param {number=} count
 * @return {void}
 */
Laya.AnimatorState.prototype._removeReference = function(count) {};

/**
 * @return {void}
 */
Laya.AnimatorState.prototype._clearReference = function() {};

/**
 * 添加脚本。
 * @param {function(new:Laya.AnimatorStateScript)} type 组件类型。
 * @return {!Laya.AnimatorStateScript} 脚本。
 */
Laya.AnimatorState.prototype.addScript = function(type) {};

/**
 * 获取脚本。
 * @param {function(new:Laya.AnimatorStateScript)} type 组件类型。
 * @return {!Laya.AnimatorStateScript} 脚本。
 */
Laya.AnimatorState.prototype.getScript = function(type) {};

/**
 * 获取脚本集合。
 * @param {function(new:Laya.AnimatorStateScript)} type 组件类型。
 * @return {!Array<!Laya.AnimatorStateScript>} 脚本集合。
 */
Laya.AnimatorState.prototype.getScripts = function(type) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.AnimatorState.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.AnimatorState.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个<code>AvatarMask</code>实例
 * @param {!Laya.Animator} animator
 */
Laya.AvatarMask = function(animator) {};
/** @type {?} */
Laya.AvatarMask.prototype._catchAnimator;

/* TODO: GetAccessor: Laya.getCatchAnimator */

/**
 * 查找节点路径遮罩
 * @param {string} path
 * @return {boolean}
 */
Laya.AvatarMask.prototype.getTransformActive = function(path) {};

/**
 * 设置
 * @param {string} path
 * @param {boolean} value
 * @return {void}
 */
Laya.AvatarMask.prototype.setTransformActive = function(path, value) {};

/**
 * 获得遮罩信息
 * @return {!Object<string,boolean>}
 */
Laya.AvatarMask.prototype.getAllTranfromPath = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>PostProcess</code> 实例。
 */
Laya.PostProcess = function() {};

/* TODO: GetAccessor: Laya.enable */

/* TODO: SetAccessor: Laya.enable */

/* TODO: SetAccessor: Laya.commandContext */

/**
 * 添加后期处理效果。
 * @param {!Laya.PostProcessEffect} effect
 * @return {void}
 */
Laya.PostProcess.prototype.addEffect = function(effect) {};

/**
 * 移除后期处理效果。
 * @param {!Laya.PostProcessEffect} effect
 * @return {void}
 */
Laya.PostProcess.prototype.removeEffect = function(effect) {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.Script3D = function() {};

/* TODO: GetAccessor: Laya.isSingleton */

/**
 * 创建后只执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onAwake = function() {};

/**
 * 每次启动后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onEnable = function() {};

/**
 * 第一次执行update之前执行，只会执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onStart = function() {};

/**
 * 开始触发时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.PhysicsComponent} other
 * @return {void}
 */
Laya.Script3D.prototype.onTriggerEnter = function(other) {};

/**
 * 持续触发时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.PhysicsComponent} other
 * @return {void}
 */
Laya.Script3D.prototype.onTriggerStay = function(other) {};

/**
 * 结束触发时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.PhysicsComponent} other
 * @return {void}
 */
Laya.Script3D.prototype.onTriggerExit = function(other) {};

/**
 * 开始碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Collision} collision
 * @return {void}
 */
Laya.Script3D.prototype.onCollisionEnter = function(collision) {};

/**
 * 持续碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Collision} collision
 * @return {void}
 */
Laya.Script3D.prototype.onCollisionStay = function(collision) {};

/**
 * 结束碰撞时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @param {!Laya.Collision} collision
 * @return {void}
 */
Laya.Script3D.prototype.onCollisionExit = function(collision) {};

/**
 * 关节破坏时执行此方法
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onJointBreak = function() {};

/**
 * 鼠标按下时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseDown = function() {};

/**
 * 鼠标拖拽时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseDrag = function() {};

/**
 * 鼠标点击时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseClick = function() {};

/**
 * 鼠标弹起时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseUp = function() {};

/**
 * 鼠标进入时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseEnter = function() {};

/**
 * 鼠标经过时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseOver = function() {};

/**
 * 鼠标离开时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onMouseOut = function() {};

/**
 * 每帧更新时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onUpdate = function() {};

/**
 * 每帧更新时执行，在update之后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onLateUpdate = function() {};

/**
 * 渲染之前执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onPreRender = function() {};

/**
 * 渲染之后执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onPostRender = function() {};

/**
 * 禁用时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onDisable = function() {};

/**
 * 销毁时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Script3D.prototype.onDestroy = function() {};

/**
 * @extends {Laya.SingletonList<!Laya.ISingletonElement>}
 * @constructor
 * @struct
 * 创建一个新的 <code>SimpleSingletonList</code> 实例。
 */
Laya.SimpleSingletonList = function() {};

/**
 * @return {void}
 */
Laya.SimpleSingletonList.prototype.clearElement = function() {};

/**
 * @template T
 * @constructor
 * @struct
 * 创建一个新的 <code>SingletonList</code> 实例。
 */
Laya.SingletonList = function() {};

/**
 * @extends {Laya.Resource}
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Avatar</code> 实例。
 */
Laya.Avatar = function() {};
/** @type {string} */
Laya.Avatar.AVATAR;
/** @type {?} */
Laya.Avatar.prototype._nativeNodeCount;
/** @type {?} */
Laya.Avatar.prototype._initCloneToAnimator;
/** @type {?} */
Laya.Avatar.prototype._parseNode;

/**
 * @inheritDoc
 * @param {?} data
 * @param {?=} propertyParams
 * @param {!Array<?>=} constructParams
 * @return {!Laya.Avatar}
 */
Laya.Avatar._parse = function(data, propertyParams, constructParams) {};

/**
 * 加载Avatar文件。
 * @param {string} url Avatar文件。
 * @param {!Handler} complete 完成回掉。
 * @return {void}
 */
Laya.Avatar.load = function(url, complete) {};

/**
 * 克隆数据到Avatr。
 * @param {!Laya.Animator} destAnimator
 * @return {void}
 */
Laya.Avatar.prototype._cloneDatasToAnimator = function(destAnimator) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Avatar.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Avatar.prototype.clone = function() {};

/**
 * @extends {Laya.Sprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>BaseCamera</code> 实例。
 * @param {number=} nearPlane 近裁面。
 * @param {number=} farPlane 远裁面。
 */
Laya.BaseCamera = function(nearPlane, farPlane) {};
/** @type {string} */
Laya.BaseCamera.RENDERINGTYPE_DEFERREDLIGHTING;
/** @type {string} */
Laya.BaseCamera.RENDERINGTYPE_FORWARDRENDERING;
/** @type {!Laya.Matrix4x4} */
Laya.BaseCamera._invertYScaleMatrix;
/** @type {!Laya.Matrix4x4} */
Laya.BaseCamera._invertYProjectionMatrix;
/** @type {!Laya.Matrix4x4} */
Laya.BaseCamera._invertYProjectionViewMatrix;
/** @type {number} */
Laya.BaseCamera.prototype._nearPlane;
/** @type {number} */
Laya.BaseCamera.prototype._farPlane;
/** @type {?} */
Laya.BaseCamera.prototype._fieldOfView;
/** @type {?} */
Laya.BaseCamera.prototype._orthographicVerticalSize;
/** @type {?} */
Laya.BaseCamera.prototype._skyRenderer;
/** @type {?} */
Laya.BaseCamera.prototype._forward;
/** @type {?} */
Laya.BaseCamera.prototype._up;
/** @type {!Laya.Vector4} */
Laya.BaseCamera.prototype.clearColor;
/** @type {number} */
Laya.BaseCamera.prototype.cullingMask;
/** @type {boolean} */
Laya.BaseCamera.prototype.useOcclusionCulling;

/* TODO: GetAccessor: Laya.skyRenderer */

/* TODO: GetAccessor: Laya.fieldOfView */

/* TODO: SetAccessor: Laya.fieldOfView */

/* TODO: GetAccessor: Laya.nearPlane */

/* TODO: SetAccessor: Laya.nearPlane */

/* TODO: GetAccessor: Laya.farPlane */

/* TODO: SetAccessor: Laya.farPlane */

/* TODO: GetAccessor: Laya.orthographic */

/* TODO: SetAccessor: Laya.orthographic */

/* TODO: GetAccessor: Laya.orthographicVerticalSize */

/* TODO: SetAccessor: Laya.orthographicVerticalSize */

/* TODO: GetAccessor: Laya.renderingOrder */

/* TODO: SetAccessor: Laya.renderingOrder */
/** @type {number} */
Laya.BaseCamera.CLEARFLAG_SOLIDCOLOR;
/** @type {number} */
Laya.BaseCamera.CLEARFLAG_SKY;
/** @type {number} */
Laya.BaseCamera.CLEARFLAG_DEPTHONLY;
/** @type {number} */
Laya.BaseCamera.CLEARFLAG_NONE;

/**
 * 相机渲染。
 * @param {!Laya.Shader3D=} shader 着色器。
 * @param {string=} replacementTag 着色器替换标记。
 * @return {void}
 */
Laya.BaseCamera.prototype.render = function(shader, replacementTag) {};

/**
 * 增加可视图层,layer值为0到31层。
 * @param {number} layer 图层。
 * @return {void}
 */
Laya.BaseCamera.prototype.addLayer = function(layer) {};

/**
 * 移除可视图层,layer值为0到31层。
 * @param {number} layer 图层。
 * @return {void}
 */
Laya.BaseCamera.prototype.removeLayer = function(layer) {};

/**
 * 增加所有图层。
 * @return {void}
 */
Laya.BaseCamera.prototype.addAllLayers = function() {};

/**
 * 移除所有图层。
 * @return {void}
 */
Laya.BaseCamera.prototype.removeAllLayers = function() {};

/**
 * 重算计算投影矩阵
 * @return {void}
 */
Laya.BaseCamera.prototype.resetProjectionMatrix = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.BaseCamera.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.BaseCamera.prototype._onInActive = function() {};

/**
 * 删除相机
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.BaseCamera.prototype.destroy = function(destroyChild) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Bounds</code> 实例。
 * @param {!Laya.Vector3} min min 最小坐标
 * @param {!Laya.Vector3} max max 最大坐标。
 */
Laya.Bounds = function(min, max) {};
/** @type {!Laya.Vector3} */
Laya.Bounds.TEMP_VECTOR3_MAX0;
/** @type {!Laya.Vector3} */
Laya.Bounds.TEMP_VECTOR3_MAX1;
/** @type {?} */
Laya.Bounds.prototype._updateFlag;
/** @type {!Laya.BoundBox} */
Laya.Bounds.prototype._boundBox;
/** @type {?} */
Laya.Bounds.prototype._getUpdateFlag;
/** @type {?} */
Laya.Bounds.prototype._setUpdateFlag;
/** @type {?} */
Laya.Bounds.prototype._getCenter;
/** @type {?} */
Laya.Bounds.prototype._getExtent;
/** @type {?} */
Laya.Bounds.prototype._getMin;
/** @type {?} */
Laya.Bounds.prototype._getMax;
/** @type {?} */
Laya.Bounds.prototype._rotateExtents;

/**
 * 设置包围盒的最小点。
 * @param {!Laya.Vector3} value 包围盒的最小点。
 * @return {void}
 */
Laya.Bounds.prototype.setMin = function(value) {};

/**
 * 获取包围盒的最小点。
 * @return {!Laya.Vector3} 包围盒的最小点。
 */
Laya.Bounds.prototype.getMin = function() {};

/**
 * 设置包围盒的最大点。
 * @param {!Laya.Vector3} value 包围盒的最大点。
 * @return {void}
 */
Laya.Bounds.prototype.setMax = function(value) {};

/**
 * 获取包围盒的最大点。
 * @return {!Laya.Vector3} 包围盒的最大点。
 */
Laya.Bounds.prototype.getMax = function() {};

/**
 * 设置包围盒的中心点。
 * @param {!Laya.Vector3} value 包围盒的中心点。
 * @return {void}
 */
Laya.Bounds.prototype.setCenter = function(value) {};

/**
 * 获取包围盒的中心点。
 * @return {!Laya.Vector3} 包围盒的中心点。
 */
Laya.Bounds.prototype.getCenter = function() {};

/**
 * 设置包围盒的范围。
 * @param {!Laya.Vector3} value 包围盒的范围。
 * @return {void}
 */
Laya.Bounds.prototype.setExtent = function(value) {};

/**
 * 获取包围盒的范围。
 * @return {!Laya.Vector3} 包围盒的范围。
 */
Laya.Bounds.prototype.getExtent = function() {};

/**
 * @param {!Laya.Bounds} bounds
 * @return {number} -1为不相交 不为0的时候返回值为相交体积
 */
Laya.Bounds.prototype.calculateBoundsintersection = function(bounds) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Bounds.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Bounds.prototype.clone = function() {};

/** @enum {number} */
Laya.CameraClearFlags = {
  SolidColor: 1,
  Sky: 1,
  DepthOnly: 1,
  Nothing: 1,
};

/** @enum {number} */
Laya.CameraEventFlags = {
  BeforeForwardOpaque: 1,
  BeforeSkyBox: 1,
  BeforeTransparent: 1,
  BeforeImageEffect: 1,
  AfterEveryThing: 1,
};

/**
 * @extends {Laya.BaseCamera}
 * @constructor
 * @struct
 * 创建一个 <code>Camera</code> 实例。
 * @param {number=} aspectRatio 横纵比。
 * @param {number=} nearPlane 近裁面。
 * @param {number=} farPlane 远裁面。
 */
Laya.Camera = function(aspectRatio, nearPlane, farPlane) {};

/* TODO: SetAccessor: Laya._updateMark */

/* TODO: GetAccessor: Laya._updateMark */
/** @type {?} */
Laya.Camera.prototype._depthTextureFormat;
/** @type {?} */
Laya.Camera.prototype._depthTexture;
/** @type {?} */
Laya.Camera.prototype._depthNormalsTexture;
/** @type {?} */
Laya.Camera.prototype._cameraEventCommandBuffer;
/** @type {boolean} */
Laya.Camera.prototype.enableRender;
/** @type {!Laya.CameraClearFlags} */
Laya.Camera.prototype.clearFlag;

/* TODO: GetAccessor: Laya.aspectRatio */

/* TODO: SetAccessor: Laya.aspectRatio */

/* TODO: GetAccessor: Laya.viewport */

/* TODO: SetAccessor: Laya.viewport */

/* TODO: GetAccessor: Laya.normalizedViewport */

/* TODO: SetAccessor: Laya.normalizedViewport */

/* TODO: GetAccessor: Laya.viewMatrix */

/* TODO: GetAccessor: Laya.projectionMatrix */

/* TODO: SetAccessor: Laya.projectionMatrix */

/* TODO: GetAccessor: Laya.projectionViewMatrix */

/* TODO: GetAccessor: Laya.boundFrustum */

/* TODO: GetAccessor: Laya.renderTarget */

/* TODO: SetAccessor: Laya.renderTarget */

/* TODO: GetAccessor: Laya.postProcess */

/* TODO: SetAccessor: Laya.postProcess */

/* TODO: GetAccessor: Laya.enableHDR */

/* TODO: SetAccessor: Laya.enableHDR */

/* TODO: GetAccessor: Laya.enableBuiltInRenderTexture */

/* TODO: SetAccessor: Laya.enableBuiltInRenderTexture */

/* TODO: GetAccessor: Laya.depthTextureMode */

/* TODO: SetAccessor: Laya.depthTextureMode */

/* TODO: GetAccessor: Laya.depthTextureFormat */

/* TODO: SetAccessor: Laya.depthTextureFormat */

/* TODO: SetAccessor: Laya.enableBlitDepth */

/* TODO: GetAccessor: Laya.canblitDepth */

/* TODO: SetAccessor: Laya.depthTexture */

/* TODO: SetAccessor: Laya.depthNormalTexture */

/**
 * 根据相机、scene信息获得scene中某一位置的渲染结果
 * @param {!Laya.Camera} camera 相机
 * @param {!Laya.Scene3D} scene 需要渲染的场景
 * @param {!Laya.RenderTexture} renderTexture
 * @param {!Laya.Shader3D=} shader 着色器
 * @param {string=} replaceFlag
 * @return {!Laya.RenderTexture}
 */
Laya.Camera.drawRenderTextureByScene = function(camera, scene, renderTexture, shader, replaceFlag) {};

/**
 * 通过蒙版值获取蒙版是否显示。
 * @param {number} layer 层。
 * @return {boolean} 是否显示。
 */
Laya.Camera.prototype._isLayerVisible = function(layer) {};

/**
 * @return {!Laya.Camera}
 */
Laya.Camera.prototype.clone = function() {};

/**
 * 调用渲染命令流
 * @param {number} event
 * @param {!Laya.RenderContext3D} context
 * @return {void}
 */
Laya.Camera.prototype._applyCommandBuffer = function(event, context) {};

/**
 * @override
 * @param {!Laya.Shader3D=} shader 着色器
 * @param {string=} replacementTag 替换标记。
 * @return {void}
 */
Laya.Camera.prototype.render = function(shader, replacementTag) {};

/**
 * 计算从屏幕空间生成的射线。
 * @param {!Laya.Vector2} point 屏幕空间的位置位置。
 * @param {!Laya.Ray} out 输出射线。
 * @return {void}
 */
Laya.Camera.prototype.viewportPointToRay = function(point, out) {};

/**
 * 计算从裁切空间生成的射线。
 * @param {!Laya.Vector2} point 裁切空间的位置。
 * @param {!Laya.Ray} out 输出射线。
 * @return {void}
 */
Laya.Camera.prototype.normalizedViewportPointToRay = function(point, out) {};

/**
 * 将一个点从世界空间转换到视口空间。
 * @param {!Laya.Vector3} position 世界空间的坐标。
 * @param {!Laya.Vector4} out x、y、z为视口空间坐标,w为相对于摄像机的z轴坐标。
 * @return {void}
 */
Laya.Camera.prototype.worldToViewportPoint = function(position, out) {};

/**
 * 将一个点从世界空间转换到归一化视口空间。
 * @param {!Laya.Vector3} position 世界空间的坐标。
 * @param {!Laya.Vector4} out x、y、z为归一化视口空间坐标,w为相对于摄像机的z轴坐标。
 * @return {void}
 */
Laya.Camera.prototype.worldToNormalizedViewportPoint = function(position, out) {};

/**
 * 转换2D屏幕坐标系统到3D正交投影下的坐标系统，注:只有正交模型下有效。
 * @param {!Laya.Vector3} source 源坐标。
 * @param {!Laya.Vector3} out 输出坐标。
 * @return {boolean} 是否转换成功。
 */
Laya.Camera.prototype.convertScreenCoordToOrthographicCoord = function(source, out) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Camera.prototype.destroy = function(destroyChild) {};

/**
 * 增加camera渲染节点渲染缓存
 * @param {!Laya.CameraEventFlags} event 相机事件标志
 * @param {!Laya.CommandBuffer} commandBuffer 渲染命令流
 * @return {void}
 */
Laya.Camera.prototype.addCommandBuffer = function(event, commandBuffer) {};

/**
 * 移除camera渲染节点渲染缓存
 * @param {!Laya.CameraEventFlags} event 相机事件标志
 * @param {!Laya.CommandBuffer} commandBuffer 渲染命令流
 * @return {void}
 */
Laya.Camera.prototype.removeCommandBuffer = function(event, commandBuffer) {};

/**
 * 移除camera相机节点的所有渲染缓存
 * @param {!Laya.CameraEventFlags} event 相机事件标志
 * @return {void}
 */
Laya.Camera.prototype.removeCommandBuffers = function(event) {};

/**
 * @extends {Laya.Keyframe}
 * @constructor
 * @struct
 * 创建一个 <code>FloatKeyFrame</code> 实例。
 */
Laya.FloatKeyframe = function() {};
/** @type {number} */
Laya.FloatKeyframe.prototype.inTangent;
/** @type {number} */
Laya.FloatKeyframe.prototype.outTangent;
/** @type {number} */
Laya.FloatKeyframe.prototype.value;

/**
 * 克隆数据
 * @inheritDoc
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.FloatKeyframe.prototype.cloneTo = function(destObject) {};

/**
 * @implements {Laya.IDestroy}
 * @constructor
 * @struct
 * 创建一个 <code>GeometryElement</code> 实例。
 */
Laya.GeometryElement = function() {};

/* TODO: GetAccessor: Laya.destroyed */

/**
 * 获取几何体类型。
 * @return {number}
 */
Laya.GeometryElement.prototype._getType = function() {};

/**
 * 销毁。
 * @return {void}
 */
Laya.GeometryElement.prototype.destroy = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Gradient</code> 实例。
 * @param {number} maxColorRGBKeyCount 最大RGB帧个数。
 * @param {number} maxColorAlphaKeyCount 最大Alpha帧个数。
 */
Laya.Gradient = function(maxColorRGBKeyCount, maxColorAlphaKeyCount) {};
/** @type {?} */
Laya.Gradient.prototype._mode;
/** @type {?} */
Laya.Gradient.prototype._maxColorRGBKeysCount;
/** @type {?} */
Laya.Gradient.prototype._maxColorAlphaKeysCount;
/** @type {?} */
Laya.Gradient.prototype._colorRGBKeysCount;
/** @type {?} */
Laya.Gradient.prototype._colorAlphaKeysCount;

/* TODO: GetAccessor: Laya.mode */

/* TODO: SetAccessor: Laya.mode */

/* TODO: GetAccessor: Laya.colorRGBKeysCount */

/* TODO: GetAccessor: Laya.colorAlphaKeysCount */

/* TODO: GetAccessor: Laya.maxColorRGBKeysCount */

/* TODO: GetAccessor: Laya.maxColorAlphaKeysCount */

/**
 * 增加颜色RGB帧。
 * @param {number} key 生命周期，范围为0到1。
 * @param {!Laya.Color} value RGB值。
 * @return {void}
 */
Laya.Gradient.prototype.addColorRGB = function(key, value) {};

/**
 * 增加颜色Alpha帧。
 * @param {number} key 生命周期，范围为0到1。
 * @param {number} value Alpha值。
 * @return {void}
 */
Laya.Gradient.prototype.addColorAlpha = function(key, value) {};

/**
 * 更新颜色RGB帧。
 * @param {number} index 索引。
 * @param {number} key 生命周期，范围为0到1。
 * @param {!Laya.Color} value RGB值。
 * @return {void}
 */
Laya.Gradient.prototype.updateColorRGB = function(index, key, value) {};

/**
 * 更新颜色Alpha帧。
 * @param {number} index 索引。
 * @param {number} key 生命周期，范围为0到1。
 * @param {number} value Alpha值。
 * @return {void}
 */
Laya.Gradient.prototype.updateColorAlpha = function(index, key, value) {};

/**
 * 通过插值获取RGB颜色。
 * @param {number} lerpFactor 插值因子。
 * @param {!Laya.Color} out 颜色结果。
 * @param {number=} startSearchIndex
 * @param {boolean=} reverseSearch
 * @return {number} 结果索引。
 */
Laya.Gradient.prototype.evaluateColorRGB = function(lerpFactor, out, startSearchIndex, reverseSearch) {};

/**
 * 通过插值获取透明值。
 * @param {number} lerpFactor 插值因子。
 * @param {!Laya.Color} outColor
 * @param {number=} startSearchIndex
 * @param {boolean=} reverseSearch
 * @return {number} 结果索引 。
 */
Laya.Gradient.prototype.evaluateColorAlpha = function(lerpFactor, outColor, startSearchIndex, reverseSearch) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Gradient.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Gradient.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
Laya.GradientMode = function() {};
/** @type {number} */
Laya.GradientMode.Blend;
/** @type {number} */
Laya.GradientMode.Fixed;

/**
 * @constructor
 * @struct
 * 创建一个 <code>HeightMap</code> 实例。
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @param {number} minHeight 最大高度。
 * @param {number} maxHeight 最大高度。
 */
Laya.HeightMap = function(width, height, minHeight, maxHeight) {};
/** @type {?} */
Laya.HeightMap._tempRay;
/** @type {?} */
Laya.HeightMap._getPosition;
/** @type {?} */
Laya.HeightMap.prototype._datas;
/** @type {?} */
Laya.HeightMap.prototype._w;
/** @type {?} */
Laya.HeightMap.prototype._h;
/** @type {?} */
Laya.HeightMap.prototype._minHeight;
/** @type {?} */
Laya.HeightMap.prototype._maxHeight;

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.maxHeight */

/* TODO: GetAccessor: Laya.minHeight */

/**
 * 从网格精灵生成高度图。
 * @param {!Laya.Mesh} mesh
 * @param {number} width 高度图宽度。
 * @param {number} height 高度图高度。
 * @param {!Laya.Vector2} outCellSize 输出 单元尺寸。
 * @return {!Laya.HeightMap}
 */
Laya.HeightMap.creatFromMesh = function(mesh, width, height, outCellSize) {};

/**
 * 从图片生成高度图。
 * @param {!Laya.Texture2D} texture
 * @param {number} minHeight
 * @param {number} maxHeight 最小高度。
 * @return {!Laya.HeightMap}
 */
Laya.HeightMap.createFromImage = function(texture, minHeight, maxHeight) {};

/**
 * 获取高度。
 * @param {number} row 列数。
 * @param {number} col 行数。
 * @return {number} 高度。
 */
Laya.HeightMap.prototype.getHeight = function(row, col) {};
/**
 * @record
 * @struct
 */
Laya.IClone = function() {};

/**
 * @return {?}
 */
Laya.IClone.prototype.clone = function() {};

/**
 * @param {?} destObject
 * @return {void}
 */
Laya.IClone.prototype.cloneTo = function(destObject) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>KeyFrame</code> 实例。
 */
Laya.Keyframe = function() {};
/** @type {number} */
Laya.Keyframe.prototype.time;

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Keyframe.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Keyframe.prototype.clone = function() {};

/**
 * @extends {Laya.LightSprite}
 * @constructor
 * @struct
 * 创建一个 <code>DirectionLight</code> 实例。
 */
Laya.DirectionLight = function() {};

/* TODO: GetAccessor: Laya.shadowCascadesMode */

/* TODO: SetAccessor: Laya.shadowCascadesMode */

/* TODO: GetAccessor: Laya.shadowTwoCascadeSplits */

/* TODO: SetAccessor: Laya.shadowTwoCascadeSplits */

/* TODO: GetAccessor: Laya.shadowFourCascadeSplits */

/* TODO: SetAccessor: Laya.shadowFourCascadeSplits */

/**
 * @extends {Laya.Sprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>LightSprite</code> 实例。
 */
Laya.LightSprite = function() {};
/** @type {number} */
Laya.LightSprite.LIGHTMAPBAKEDTYPE_REALTIME;
/** @type {number} */
Laya.LightSprite.LIGHTMAPBAKEDTYPE_MIXED;
/** @type {number} */
Laya.LightSprite.LIGHTMAPBAKEDTYPE_BAKED;
/** @type {!Laya.Vector3} */
Laya.LightSprite.prototype.color;

/* TODO: GetAccessor: Laya.intensity */

/* TODO: SetAccessor: Laya.intensity */

/* TODO: GetAccessor: Laya.shadowMode */

/* TODO: SetAccessor: Laya.shadowMode */

/* TODO: GetAccessor: Laya.shadowDistance */

/* TODO: SetAccessor: Laya.shadowDistance */

/* TODO: GetAccessor: Laya.shadowResolution */

/* TODO: SetAccessor: Laya.shadowResolution */

/* TODO: GetAccessor: Laya.shadowDepthBias */

/* TODO: SetAccessor: Laya.shadowDepthBias */

/* TODO: GetAccessor: Laya.shadowNormalBias */

/* TODO: SetAccessor: Laya.shadowNormalBias */

/* TODO: GetAccessor: Laya.shadowStrength */

/* TODO: SetAccessor: Laya.shadowStrength */

/* TODO: GetAccessor: Laya.shadowNearPlane */

/* TODO: SetAccessor: Laya.shadowNearPlane */

/* TODO: GetAccessor: Laya.lightmapBakedType */

/* TODO: SetAccessor: Laya.lightmapBakedType */

/* TODO: GetAccessor: Laya.lightWorldMatrix */

/* TODO: GetAccessor: Laya.diffuseColor */

/* TODO: SetAccessor: Laya.diffuseColor */

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.LightSprite.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.LightSprite.prototype._onInActive = function() {};

/**
 * @extends {Laya.LightSprite}
 * @constructor
 * @struct
 * 创建一个 <code>PointLight</code> 实例。
 */
Laya.PointLight = function() {};

/* TODO: GetAccessor: Laya.range */

/* TODO: SetAccessor: Laya.range */

/** @enum {number} */
Laya.ShadowCascadesMode = {
  NoCascades: 1,
  TwoCascades: 1,
  FourCascades: 1,
};

/** @enum {number} */
Laya.ShadowMode = {
  None: 1,
  Hard: 1,
  SoftLow: 1,
  SoftHigh: 1,
};

/**
 * @extends {Laya.LightSprite}
 * @constructor
 * @struct
 * 创建一个 <code>SpotLight</code> 实例。
 */
Laya.SpotLight = function() {};

/* TODO: GetAccessor: Laya.spotAngle */

/* TODO: SetAccessor: Laya.spotAngle */

/* TODO: GetAccessor: Laya.range */

/* TODO: SetAccessor: Laya.range */
/**
 * @constructor
 * @struct
 */
Laya.BaseMaterial = function() {};
/** @type {string} */
Laya.BaseMaterial.MATERIAL;
/** @type {number} */
Laya.BaseMaterial.RENDERQUEUE_OPAQUE;
/** @type {number} */
Laya.BaseMaterial.RENDERQUEUE_ALPHATEST;
/** @type {number} */
Laya.BaseMaterial.RENDERQUEUE_TRANSPARENT;
/** @type {number} */
Laya.BaseMaterial.ALPHATESTVALUE;
/** @type {!Laya.ShaderDefine} */
Laya.BaseMaterial.SHADERDEFINE_ALPHATEST;

/**
 * @deprecated 废弃请使用Material类 BaseMaterial has deprecated,please use Material instead.
 * @param {string} url
 * @param {!Handler} complete
 * @return {void}
 */
Laya.BaseMaterial.load = function(url, complete) {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>BlinnPhongMaterial</code> 实例。
 */
Laya.BlinnPhongMaterial = function() {};
/** @type {number} */
Laya.BlinnPhongMaterial.SPECULARSOURCE_DIFFUSEMAPALPHA;
/** @type {number} */
Laya.BlinnPhongMaterial.SPECULARSOURCE_SPECULARMAP;
/** @type {number} */
Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
/** @type {number} */
Laya.BlinnPhongMaterial.RENDERMODE_CUTOUT;
/** @type {number} */
Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT;
/** @type {!Laya.BlinnPhongMaterial} */
Laya.BlinnPhongMaterial.defaultMaterial;

/* TODO: SetAccessor: Laya._ColorR */

/* TODO: SetAccessor: Laya._ColorG */

/* TODO: SetAccessor: Laya._ColorB */

/* TODO: SetAccessor: Laya._ColorA */

/* TODO: SetAccessor: Laya._Color */

/* TODO: SetAccessor: Laya._SpecColorR */

/* TODO: SetAccessor: Laya._SpecColorG */

/* TODO: SetAccessor: Laya._SpecColorB */

/* TODO: SetAccessor: Laya._SpecColorA */

/* TODO: SetAccessor: Laya._SpecColor */

/* TODO: SetAccessor: Laya._Shininess */

/* TODO: SetAccessor: Laya._MainTex_STX */

/* TODO: SetAccessor: Laya._MainTex_STY */

/* TODO: SetAccessor: Laya._MainTex_STZ */

/* TODO: SetAccessor: Laya._MainTex_STW */

/* TODO: SetAccessor: Laya._MainTex_ST */

/* TODO: SetAccessor: Laya._Cutoff */

/* TODO: SetAccessor: Laya.renderMode */

/* TODO: GetAccessor: Laya.enableVertexColor */

/* TODO: SetAccessor: Laya.enableVertexColor */

/* TODO: GetAccessor: Laya.tilingOffsetX */

/* TODO: SetAccessor: Laya.tilingOffsetX */

/* TODO: GetAccessor: Laya.tilingOffsetY */

/* TODO: SetAccessor: Laya.tilingOffsetY */

/* TODO: GetAccessor: Laya.tilingOffsetZ */

/* TODO: SetAccessor: Laya.tilingOffsetZ */

/* TODO: GetAccessor: Laya.tilingOffsetW */

/* TODO: SetAccessor: Laya.tilingOffsetW */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/* TODO: GetAccessor: Laya.albedoColorR */

/* TODO: SetAccessor: Laya.albedoColorR */

/* TODO: GetAccessor: Laya.albedoColorG */

/* TODO: SetAccessor: Laya.albedoColorG */

/* TODO: GetAccessor: Laya.albedoColorB */

/* TODO: SetAccessor: Laya.albedoColorB */

/* TODO: GetAccessor: Laya.albedoColorA */

/* TODO: SetAccessor: Laya.albedoColorA */

/* TODO: GetAccessor: Laya.albedoColor */

/* TODO: SetAccessor: Laya.albedoColor */

/* TODO: GetAccessor: Laya.albedoIntensity */

/* TODO: SetAccessor: Laya.albedoIntensity */

/* TODO: GetAccessor: Laya.specularColorR */

/* TODO: SetAccessor: Laya.specularColorR */

/* TODO: GetAccessor: Laya.specularColorG */

/* TODO: SetAccessor: Laya.specularColorG */

/* TODO: GetAccessor: Laya.specularColorB */

/* TODO: SetAccessor: Laya.specularColorB */

/* TODO: GetAccessor: Laya.specularColorA */

/* TODO: SetAccessor: Laya.specularColorA */

/* TODO: GetAccessor: Laya.specularColor */

/* TODO: SetAccessor: Laya.specularColor */

/* TODO: GetAccessor: Laya.shininess */

/* TODO: SetAccessor: Laya.shininess */

/* TODO: GetAccessor: Laya.albedoTexture */

/* TODO: SetAccessor: Laya.albedoTexture */

/* TODO: GetAccessor: Laya.normalTexture */

/* TODO: SetAccessor: Laya.normalTexture */

/* TODO: GetAccessor: Laya.specularTexture */

/* TODO: SetAccessor: Laya.specularTexture */

/* TODO: GetAccessor: Laya.enableTransmission */

/* TODO: SetAccessor: Laya.enableTransmission */

/* TODO: GetAccessor: Laya.transmissionRate */

/* TODO: SetAccessor: Laya.transmissionRata */

/* TODO: GetAccessor: Laya.backDiffuse */

/* TODO: SetAccessor: Laya.backDiffuse */

/* TODO: GetAccessor: Laya.backScale */

/* TODO: SetAccessor: Laya.backScale */

/* TODO: GetAccessor: Laya.thinknessTexture */

/* TODO: SetAccessor: Laya.thinknessTexture */

/* TODO: GetAccessor: Laya.transmissionColor */

/* TODO: SetAccessor: Laya.transmissionColor */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.BlinnPhongMaterial.prototype.clone = function() {};

/**
 * @inheritDoc
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.BlinnPhongMaterial.prototype.cloneTo = function(destObject) {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>EffectMaterial</code> 实例。
 */
Laya.EffectMaterial = function() {};
/** @type {number} */
Laya.EffectMaterial.RENDERMODE_ADDTIVE;
/** @type {number} */
Laya.EffectMaterial.RENDERMODE_ALPHABLENDED;
/** @type {!Laya.EffectMaterial} */
Laya.EffectMaterial.defaultMaterial;

/* TODO: SetAccessor: Laya._TintColorR */

/* TODO: SetAccessor: Laya._TintColorG */

/* TODO: SetAccessor: Laya._TintColorB */

/* TODO: SetAccessor: Laya._TintColorA */

/* TODO: SetAccessor: Laya._TintColor */

/* TODO: SetAccessor: Laya._MainTex_STX */

/* TODO: SetAccessor: Laya._MainTex_STY */

/* TODO: SetAccessor: Laya._MainTex_STZ */

/* TODO: SetAccessor: Laya._MainTex_STW */

/* TODO: SetAccessor: Laya._MainTex_ST */

/* TODO: SetAccessor: Laya.renderMode */

/* TODO: GetAccessor: Laya.colorR */

/* TODO: SetAccessor: Laya.colorR */

/* TODO: GetAccessor: Laya.colorG */

/* TODO: SetAccessor: Laya.colorG */

/* TODO: GetAccessor: Laya.colorB */

/* TODO: SetAccessor: Laya.colorB */

/* TODO: GetAccessor: Laya.colorA */

/* TODO: SetAccessor: Laya.colorA */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.texture */

/* TODO: SetAccessor: Laya.texture */

/* TODO: GetAccessor: Laya.tilingOffsetX */

/* TODO: SetAccessor: Laya.tilingOffsetX */

/* TODO: GetAccessor: Laya.tilingOffsetY */

/* TODO: SetAccessor: Laya.tilingOffsetY */

/* TODO: GetAccessor: Laya.tilingOffsetZ */

/* TODO: SetAccessor: Laya.tilingOffsetZ */

/* TODO: GetAccessor: Laya.tilingOffsetW */

/* TODO: SetAccessor: Laya.tilingOffsetW */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.EffectMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>ExtendTerrainMaterial</code> 实例。
 */
Laya.ExtendTerrainMaterial = function() {};
/** @type {number} */
Laya.ExtendTerrainMaterial.RENDERMODE_OPAQUE;
/** @type {number} */
Laya.ExtendTerrainMaterial.RENDERMODE_TRANSPARENT;

/* TODO: GetAccessor: Laya.splatAlphaTexture */

/* TODO: SetAccessor: Laya.splatAlphaTexture */

/* TODO: GetAccessor: Laya.diffuseTexture1 */

/* TODO: SetAccessor: Laya.diffuseTexture1 */

/* TODO: GetAccessor: Laya.diffuseTexture2 */

/* TODO: SetAccessor: Laya.diffuseTexture2 */

/* TODO: GetAccessor: Laya.diffuseTexture3 */

/* TODO: SetAccessor: Laya.diffuseTexture3 */

/* TODO: GetAccessor: Laya.diffuseTexture4 */

/* TODO: SetAccessor: Laya.diffuseTexture4 */

/* TODO: GetAccessor: Laya.diffuseTexture5 */

/* TODO: SetAccessor: Laya.diffuseTexture5 */

/* TODO: SetAccessor: Laya.diffuseScaleOffset1 */

/* TODO: SetAccessor: Laya.diffuseScaleOffset2 */

/* TODO: SetAccessor: Laya.diffuseScaleOffset3 */

/* TODO: SetAccessor: Laya.diffuseScaleOffset4 */

/* TODO: SetAccessor: Laya.diffuseScaleOffset5 */

/* TODO: SetAccessor: Laya.renderMode */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.ExtendTerrainMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.Resource}
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>BaseMaterial</code> 实例。
 */
Laya.Material = function() {};
/** @type {string} */
Laya.Material.MATERIAL;
/** @type {number} */
Laya.Material.RENDERQUEUE_OPAQUE;
/** @type {number} */
Laya.Material.RENDERQUEUE_ALPHATEST;
/** @type {number} */
Laya.Material.RENDERQUEUE_TRANSPARENT;
/** @type {number} */
Laya.Material.ALPHATESTVALUE;
/** @type {!Laya.ShaderDefine} */
Laya.Material.SHADERDEFINE_ALPHATEST;
/** @type {!Laya.ShaderData} */
Laya.Material.prototype._shaderValues;
/** @type {number} */
Laya.Material.prototype.renderQueue;

/* TODO: GetAccessor: Laya.shaderData */

/* TODO: GetAccessor: Laya.alphaTestValue */

/* TODO: SetAccessor: Laya.alphaTestValue */

/* TODO: GetAccessor: Laya.alphaTest */

/* TODO: SetAccessor: Laya.alphaTest */

/* TODO: GetAccessor: Laya.depthWrite */

/* TODO: SetAccessor: Laya.depthWrite */

/* TODO: GetAccessor: Laya.cull */

/* TODO: SetAccessor: Laya.cull */

/* TODO: GetAccessor: Laya.blend */

/* TODO: SetAccessor: Laya.blend */

/* TODO: GetAccessor: Laya.blendSrc */

/* TODO: SetAccessor: Laya.blendSrc */

/* TODO: GetAccessor: Laya.blendDst */

/* TODO: SetAccessor: Laya.blendDst */

/* TODO: GetAccessor: Laya.depthTest */

/* TODO: SetAccessor: Laya.depthTest */

/* TODO: GetAccessor: Laya.MaterialProperty */

/* TODO: GetAccessor: Laya.MaterialDefine */

/* TODO: GetAccessor: Laya._defineDatas */

/**
 * 加载材质。
 * @param {string} url 材质地址。
 * @param {!Handler} complete 完成回掉。
 * @return {void}
 */
Laya.Material.load = function(url, complete) {};

/**
 * @inheritDoc
 * @param {?} data
 * @param {?=} propertyParams
 * @param {!Array<?>=} constructParams
 * @return {!Laya.Material}
 */
Laya.Material._parse = function(data, propertyParams, constructParams) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Material.prototype._disposeResource = function() {};

/**
 * 设置使用Shader名字。
 * @param {string} name 名称。
 * @return {void}
 */
Laya.Material.prototype.setShaderName = function(name) {};

/**
 * 设置属性值
 * @param {string} name
 * @param {?} value
 * @return {void}
 */
Laya.Material.prototype.setShaderPropertyValue = function(name, value) {};

/**
 * 获取属性值
 * @param {string} name
 * @return {?}
 */
Laya.Material.prototype.getShaderPropertyValue = function(name) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Material.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Material.prototype.clone = function() {};

/** @enum {number} */
Laya.PBRRenderMode = {
  Opaque: 1,
  Cutout: 1,
  Fade: 1,
  Transparent: 1,
};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 */
Laya.PBRMaterial = function() {};
/** @type {!Laya.PBRRenderQuality} */
Laya.PBRMaterial.renderQuality;

/* TODO: GetAccessor: Laya.albedoColor */

/* TODO: SetAccessor: Laya.albedoColor */

/* TODO: GetAccessor: Laya.albedoTexture */

/* TODO: SetAccessor: Laya.albedoTexture */

/* TODO: GetAccessor: Laya.normalTexture */

/* TODO: SetAccessor: Laya.normalTexture */

/* TODO: GetAccessor: Laya.normalTextureScale */

/* TODO: SetAccessor: Laya.normalTextureScale */

/* TODO: GetAccessor: Laya.parallaxTexture */

/* TODO: SetAccessor: Laya.parallaxTexture */

/* TODO: GetAccessor: Laya.parallaxTextureScale */

/* TODO: SetAccessor: Laya.parallaxTextureScale */

/* TODO: GetAccessor: Laya.occlusionTexture */

/* TODO: SetAccessor: Laya.occlusionTexture */

/* TODO: GetAccessor: Laya.occlusionTextureStrength */

/* TODO: SetAccessor: Laya.occlusionTextureStrength */

/* TODO: GetAccessor: Laya.smoothness */

/* TODO: SetAccessor: Laya.smoothness */

/* TODO: GetAccessor: Laya.smoothnessTextureScale */

/* TODO: SetAccessor: Laya.smoothnessTextureScale */

/* TODO: GetAccessor: Laya.enableEmission */

/* TODO: SetAccessor: Laya.enableEmission */

/* TODO: GetAccessor: Laya.emissionColor */

/* TODO: SetAccessor: Laya.emissionColor */

/* TODO: GetAccessor: Laya.emissionTexture */

/* TODO: SetAccessor: Laya.emissionTexture */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.renderMode */

/**
 * @return {void}
 */
Laya.PBRMaterial.__init__ = function() {};

/** @enum {number} */
Laya.PBRRenderQuality = {
  High: 1,
  Low: 1,
};

/** @enum {number} */
Laya.PBRSpecularSmoothnessSource = {
  SpecularTextureAlpha: 1,
  AlbedoTextureAlpha: 1,
};

/**
 * @extends {Laya.PBRMaterial}
 * @constructor
 * @struct
 * 创建一个 <code>PBRSpecularMaterial</code> 实例。
 */
Laya.PBRSpecularMaterial = function() {};
/** @type {!Laya.PBRSpecularMaterial} */
Laya.PBRSpecularMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.specularTexture */

/* TODO: SetAccessor: Laya.specularTexture */

/* TODO: GetAccessor: Laya.specularColor */

/* TODO: SetAccessor: Laya.specularColor */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.PBRSpecularMaterial.prototype.clone = function() {};

/** @enum {number} */
Laya.PBRMetallicSmoothnessSource = {
  MetallicGlossTextureAlpha: 1,
  AlbedoTextureAlpha: 1,
};

/**
 * @extends {Laya.PBRMaterial}
 * @constructor
 * @struct
 * 创建一个 <code>PBRStandardMaterial</code> 实例。
 */
Laya.PBRStandardMaterial = function() {};
/** @type {!Laya.PBRStandardMaterial} */
Laya.PBRStandardMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.metallicGlossTexture */

/* TODO: SetAccessor: Laya.metallicGlossTexture */

/* TODO: GetAccessor: Laya.metallic */

/* TODO: SetAccessor: Laya.metallic */

/* TODO: GetAccessor: Laya.smoothnessSource */

/* TODO: SetAccessor: Laya.smoothnessSource */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.PBRStandardMaterial.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>RenderState</code> 实例。
 */
Laya.RenderState = function() {};
/** @type {number} */
Laya.RenderState.CULL_NONE;
/** @type {number} */
Laya.RenderState.CULL_FRONT;
/** @type {number} */
Laya.RenderState.CULL_BACK;
/** @type {number} */
Laya.RenderState.BLEND_DISABLE;
/** @type {number} */
Laya.RenderState.BLEND_ENABLE_ALL;
/** @type {number} */
Laya.RenderState.BLEND_ENABLE_SEPERATE;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ZERO;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ONE;
/** @type {number} */
Laya.RenderState.BLENDPARAM_SRC_COLOR;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_COLOR;
/** @type {number} */
Laya.RenderState.BLENDPARAM_DST_COLOR;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ONE_MINUS_DST_COLOR;
/** @type {number} */
Laya.RenderState.BLENDPARAM_SRC_ALPHA;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA;
/** @type {number} */
Laya.RenderState.BLENDPARAM_DST_ALPHA;
/** @type {number} */
Laya.RenderState.BLENDPARAM_ONE_MINUS_DST_ALPHA;
/** @type {number} */
Laya.RenderState.BLENDPARAM_SRC_ALPHA_SATURATE;
/** @type {number} */
Laya.RenderState.BLENDEQUATION_ADD;
/** @type {number} */
Laya.RenderState.BLENDEQUATION_SUBTRACT;
/** @type {number} */
Laya.RenderState.BLENDEQUATION_REVERSE_SUBTRACT;
/** @type {number} */
Laya.RenderState.DEPTHTEST_OFF;
/** @type {number} */
Laya.RenderState.DEPTHTEST_NEVER;
/** @type {number} */
Laya.RenderState.DEPTHTEST_LESS;
/** @type {number} */
Laya.RenderState.DEPTHTEST_EQUAL;
/** @type {number} */
Laya.RenderState.DEPTHTEST_LEQUAL;
/** @type {number} */
Laya.RenderState.DEPTHTEST_GREATER;
/** @type {number} */
Laya.RenderState.DEPTHTEST_NOTEQUAL;
/** @type {number} */
Laya.RenderState.DEPTHTEST_GEQUAL;
/** @type {number} */
Laya.RenderState.DEPTHTEST_ALWAYS;
/** @type {number} */
Laya.RenderState.prototype.cull;
/** @type {number} */
Laya.RenderState.prototype.blend;
/** @type {number} */
Laya.RenderState.prototype.srcBlend;
/** @type {number} */
Laya.RenderState.prototype.dstBlend;
/** @type {number} */
Laya.RenderState.prototype.srcBlendRGB;
/** @type {number} */
Laya.RenderState.prototype.dstBlendRGB;
/** @type {number} */
Laya.RenderState.prototype.srcBlendAlpha;
/** @type {number} */
Laya.RenderState.prototype.dstBlendAlpha;
/** @type {!Laya.Vector4} */
Laya.RenderState.prototype.blendConstColor;
/** @type {number} */
Laya.RenderState.prototype.blendEquation;
/** @type {number} */
Laya.RenderState.prototype.blendEquationRGB;
/** @type {number} */
Laya.RenderState.prototype.blendEquationAlpha;
/** @type {number} */
Laya.RenderState.prototype.depthTest;
/** @type {boolean} */
Laya.RenderState.prototype.depthWrite;

/**
 * 克隆。
 * @param {?} dest
 * @return {void}
 */
Laya.RenderState.prototype.cloneTo = function(dest) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.RenderState.prototype.clone = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>SkyBoxMaterial</code> 实例。
 */
Laya.SkyBoxMaterial = function() {};
/** @type {number} */
Laya.SkyBoxMaterial.TINTCOLOR;
/** @type {number} */
Laya.SkyBoxMaterial.EXPOSURE;
/** @type {number} */
Laya.SkyBoxMaterial.ROTATION;
/** @type {number} */
Laya.SkyBoxMaterial.TEXTURECUBE;
/** @type {!Laya.SkyBoxMaterial} */
Laya.SkyBoxMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.tintColor */

/* TODO: SetAccessor: Laya.tintColor */

/* TODO: GetAccessor: Laya.exposure */

/* TODO: SetAccessor: Laya.exposure */

/* TODO: GetAccessor: Laya.rotation */

/* TODO: SetAccessor: Laya.rotation */

/* TODO: GetAccessor: Laya.textureCube */

/* TODO: SetAccessor: Laya.textureCube */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.SkyBoxMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>SkyPanoramicMaterial</code> 实例。
 */
Laya.SkyPanoramicMaterial = function() {};
/** @type {number} */
Laya.SkyPanoramicMaterial.TINTCOLOR;
/** @type {number} */
Laya.SkyPanoramicMaterial.EXPOSURE;
/** @type {number} */
Laya.SkyPanoramicMaterial.ROTATION;
/** @type {number} */
Laya.SkyPanoramicMaterial.TEXTURE;
/** @type {number} */
Laya.SkyPanoramicMaterial.TEXTURE_HDR_PARAMS;

/* TODO: GetAccessor: Laya.tintColor */

/* TODO: SetAccessor: Laya.tintColor */

/* TODO: GetAccessor: Laya.exposure */

/* TODO: SetAccessor: Laya.exposure */

/* TODO: GetAccessor: Laya.rotation */

/* TODO: SetAccessor: Laya.rotation */

/* TODO: GetAccessor: Laya.panoramicTexture */

/* TODO: SetAccessor: Laya.panoramicTexture */

/* TODO: GetAccessor: Laya.panoramicTextureDecodeFormat */

/* TODO: SetAccessor: Laya.panoramicTextureDecodeFormat */

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>SkyProceduralMaterial</code> 实例。
 */
Laya.SkyProceduralMaterial = function() {};
/** @type {number} */
Laya.SkyProceduralMaterial.SUN_NODE;
/** @type {number} */
Laya.SkyProceduralMaterial.SUN_SIMPLE;
/** @type {number} */
Laya.SkyProceduralMaterial.SUN_HIGH_QUALITY;
/** @type {!Laya.SkyProceduralMaterial} */
Laya.SkyProceduralMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.sunDisk */

/* TODO: SetAccessor: Laya.sunDisk */

/* TODO: GetAccessor: Laya.sunSize */

/* TODO: SetAccessor: Laya.sunSize */

/* TODO: GetAccessor: Laya.sunSizeConvergence */

/* TODO: SetAccessor: Laya.sunSizeConvergence */

/* TODO: GetAccessor: Laya.atmosphereThickness */

/* TODO: SetAccessor: Laya.atmosphereThickness */

/* TODO: GetAccessor: Laya.skyTint */

/* TODO: SetAccessor: Laya.skyTint */

/* TODO: GetAccessor: Laya.groundTint */

/* TODO: SetAccessor: Laya.groundTint */

/* TODO: GetAccessor: Laya.exposure */

/* TODO: SetAccessor: Laya.exposure */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.SkyProceduralMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 */
Laya.UnlitMaterial = function() {};
/** @type {number} */
Laya.UnlitMaterial.RENDERMODE_OPAQUE;
/** @type {number} */
Laya.UnlitMaterial.RENDERMODE_CUTOUT;
/** @type {number} */
Laya.UnlitMaterial.RENDERMODE_TRANSPARENT;
/** @type {number} */
Laya.UnlitMaterial.RENDERMODE_ADDTIVE;
/** @type {!Laya.ShaderDefine} */
Laya.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE;
/** @type {!Laya.ShaderDefine} */
Laya.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR;
/** @type {number} */
Laya.UnlitMaterial.ALBEDOTEXTURE;
/** @type {number} */
Laya.UnlitMaterial.ALBEDOCOLOR;
/** @type {number} */
Laya.UnlitMaterial.TILINGOFFSET;
/** @type {!Laya.UnlitMaterial} */
Laya.UnlitMaterial.defaultMaterial;
/** @type {?} */
Laya.UnlitMaterial.prototype._albedoIntensity;

/* TODO: SetAccessor: Laya._ColorR */

/* TODO: SetAccessor: Laya._ColorG */

/* TODO: SetAccessor: Laya._ColorB */

/* TODO: SetAccessor: Laya._ColorA */

/* TODO: SetAccessor: Laya._Color */

/* TODO: SetAccessor: Laya._AlbedoIntensity */

/* TODO: SetAccessor: Laya._MainTex_STX */

/* TODO: SetAccessor: Laya._MainTex_STY */

/* TODO: SetAccessor: Laya._MainTex_STZ */

/* TODO: SetAccessor: Laya._MainTex_STW */

/* TODO: SetAccessor: Laya._MainTex_ST */

/* TODO: SetAccessor: Laya._Cutoff */

/* TODO: GetAccessor: Laya.albedoColorR */

/* TODO: SetAccessor: Laya.albedoColorR */

/* TODO: GetAccessor: Laya.albedoColorG */

/* TODO: SetAccessor: Laya.albedoColorG */

/* TODO: GetAccessor: Laya.albedoColorB */

/* TODO: SetAccessor: Laya.albedoColorB */

/* TODO: GetAccessor: Laya.albedoColorA */

/* TODO: SetAccessor: Laya.albedoColorA */

/* TODO: GetAccessor: Laya.albedoColor */

/* TODO: SetAccessor: Laya.albedoColor */

/* TODO: GetAccessor: Laya.albedoIntensity */

/* TODO: SetAccessor: Laya.albedoIntensity */

/* TODO: GetAccessor: Laya.albedoTexture */

/* TODO: SetAccessor: Laya.albedoTexture */

/* TODO: GetAccessor: Laya.tilingOffsetX */

/* TODO: SetAccessor: Laya.tilingOffsetX */

/* TODO: GetAccessor: Laya.tilingOffsetY */

/* TODO: SetAccessor: Laya.tilingOffsetY */

/* TODO: GetAccessor: Laya.tilingOffsetZ */

/* TODO: SetAccessor: Laya.tilingOffsetZ */

/* TODO: GetAccessor: Laya.tilingOffsetW */

/* TODO: SetAccessor: Laya.tilingOffsetW */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/* TODO: GetAccessor: Laya.enableVertexColor */

/* TODO: SetAccessor: Laya.enableVertexColor */

/* TODO: SetAccessor: Laya.renderMode */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.UnlitMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 */
Laya.WaterPrimaryMaterial = function() {};
/** @type {number} */
Laya.WaterPrimaryMaterial.HORIZONCOLOR;
/** @type {number} */
Laya.WaterPrimaryMaterial.MAINTEXTURE;
/** @type {number} */
Laya.WaterPrimaryMaterial.NORMALTEXTURE;
/** @type {number} */
Laya.WaterPrimaryMaterial.WAVESCALE;
/** @type {number} */
Laya.WaterPrimaryMaterial.WAVESPEED;
/** @type {!Laya.ShaderDefine} */
Laya.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE;
/** @type {!Laya.ShaderDefine} */
Laya.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE;
/** @type {!Laya.WaterPrimaryMaterial} */
Laya.WaterPrimaryMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.horizonColor */

/* TODO: SetAccessor: Laya.horizonColor */

/* TODO: GetAccessor: Laya.mainTexture */

/* TODO: SetAccessor: Laya.mainTexture */

/* TODO: GetAccessor: Laya.normalTexture */

/* TODO: SetAccessor: Laya.normalTexture */

/* TODO: GetAccessor: Laya.waveScale */

/* TODO: SetAccessor: Laya.waveScale */

/* TODO: GetAccessor: Laya.waveSpeed */

/* TODO: SetAccessor: Laya.waveSpeed */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.WaterPrimaryMaterial.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>MeshFilter</code> 实例。
 * @param {!Laya.RenderableSprite3D} owner 所属网格精灵。
 */
Laya.MeshFilter = function(owner) {};

/* TODO: GetAccessor: Laya.sharedMesh */

/* TODO: SetAccessor: Laya.sharedMesh */

/**
 * @inheritDoc
 * @return {void}
 */
Laya.MeshFilter.prototype.destroy = function() {};

/**
 * @extends {Laya.BaseRender}
 * @constructor
 * @struct
 * 创建一个新的 <code>MeshRender</code> 实例。
 * @param {!Laya.RenderableSprite3D} owner
 */
Laya.MeshRenderer = function(owner) {};

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>MeshSprite3D</code> 实例。
 * @param {!Laya.Mesh=} mesh 网格,同时会加载网格所用默认材质。
 * @param {string=} name 名字。
 */
Laya.MeshSprite3D = function(mesh, name) {};
/** @type {?} */
Laya.MeshSprite3D.prototype._meshFilter;

/* TODO: GetAccessor: Laya.meshFilter */

/* TODO: GetAccessor: Laya.meshRenderer */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.MeshSprite3D.prototype.destroy = function(destroyChild) {};
/**
 * @constructor
 * @struct
 */
Laya.MeshSprite3DShaderDeclaration = function() {};
/** @type {!Laya.ShaderDefine} */
Laya.MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0;
/** @type {!Laya.ShaderDefine} */
Laya.MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR;
/** @type {!Laya.ShaderDefine} */
Laya.MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1;
/** @type {!Laya.ShaderDefine} */
Laya.MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE;
/** @type {!Laya.ShaderDefine} */
Laya.MeshSprite3DShaderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION;

/**
 * @extends {Laya.MeshSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>TerrainMeshSprite3D</code> 实例。
 * @param {!Laya.Mesh} mesh 网格。
 * @param {!Laya.HeightMap} heightMap 高度图。
 * @param {string=} name 名字。
 */
Laya.MeshTerrainSprite3D = function(mesh, heightMap, name) {};
/** @type {?} */
Laya.MeshTerrainSprite3D._tempVector3;
/** @type {?} */
Laya.MeshTerrainSprite3D._tempMatrix4x4;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._minX;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._minZ;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._cellSize;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._heightMap;

/* TODO: GetAccessor: Laya.minX */

/* TODO: GetAccessor: Laya.minZ */

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.depth */
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._disableRotation;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._getScaleX;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._getScaleZ;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._initCreateFromMesh;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._initCreateFromMeshHeightMap;
/** @type {?} */
Laya.MeshTerrainSprite3D.prototype._computeCellSize;

/**
 * 从网格创建一个TerrainMeshSprite3D实例和其高度图属性。
 * @param {!Laya.Mesh} mesh 网格。
 * @param {number} heightMapWidth 高度图宽度。
 * @param {number} heightMapHeight 高度图高度。
 * @param {string=} name 名字。
 * @return {!Laya.MeshTerrainSprite3D}
 */
Laya.MeshTerrainSprite3D.createFromMesh = function(mesh, heightMapWidth, heightMapHeight, name) {};

/**
 * 从网格创建一个TerrainMeshSprite3D实例、图片读取高度图属性。
 * @param {!Laya.Mesh} mesh 网格。
 * @param {!Laya.Texture2D} texture
 * @param {number} minHeight
 * @param {number} maxHeight
 * @param {string=} name 名字。
 * @return {!Laya.MeshTerrainSprite3D} 地形渲染节点
 */
Laya.MeshTerrainSprite3D.createFromMeshAndHeightMap = function(mesh, texture, minHeight, maxHeight, name) {};

/**
 * 获取地形高度。
 * @param {number} x X轴坐标。
 * @param {number} z Z轴坐标。
 * @return {number}
 */
Laya.MeshTerrainSprite3D.prototype.getHeight = function(x, z) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Burst</code> 实例。
 * @param {number} time 爆裂时间,单位为秒。
 * @param {number} minCount 爆裂的最小数量。
 * @param {number} maxCount
 */
Laya.Burst = function(time, minCount, maxCount) {};
/** @type {?} */
Laya.Burst.prototype._time;
/** @type {?} */
Laya.Burst.prototype._minCount;
/** @type {?} */
Laya.Burst.prototype._maxCount;

/* TODO: GetAccessor: Laya.time */

/* TODO: GetAccessor: Laya.minCount */

/* TODO: GetAccessor: Laya.maxCount */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Burst.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Burst.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>ColorOverLifetime</code> 实例。
 * @param {!Laya.GradientColor} color
 */
Laya.ColorOverLifetime = function(color) {};
/** @type {?} */
Laya.ColorOverLifetime.prototype._color;
/** @type {boolean} */
Laya.ColorOverLifetime.prototype.enable;

/* TODO: GetAccessor: Laya.color */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ColorOverLifetime.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ColorOverLifetime.prototype.clone = function() {};

/**
 * @implements {Laya.IClone|Laya.IDestroy}
 * @constructor
 * @struct
 * 创建一个 <code>Emission</code> 实例。
 */
Laya.Emission = function() {};
/** @type {boolean} */
Laya.Emission.prototype.enable;

/* TODO: SetAccessor: Laya.emissionRate */

/* TODO: GetAccessor: Laya.emissionRate */

/* TODO: GetAccessor: Laya.destroyed */

/**
 * @return {void}
 */
Laya.Emission.prototype.destroy = function() {};

/**
 * 获取粒子爆裂个数。
 * @return {number} 粒子爆裂个数。
 */
Laya.Emission.prototype.getBurstsCount = function() {};

/**
 * 通过索引获取粒子爆裂。
 * @param {number} index 爆裂索引。
 * @return {!Laya.Burst} 粒子爆裂。
 */
Laya.Emission.prototype.getBurstByIndex = function(index) {};

/**
 * 增加粒子爆裂。
 * @param {!Laya.Burst} burst 爆裂。
 * @return {void}
 */
Laya.Emission.prototype.addBurst = function(burst) {};

/**
 * 移除粒子爆裂。
 * @param {!Laya.Burst} burst 爆裂。
 * @return {void}
 */
Laya.Emission.prototype.removeBurst = function(burst) {};

/**
 * 通过索引移除粒子爆裂。
 * @param {number} index 爆裂索引。
 * @return {void}
 */
Laya.Emission.prototype.removeBurstByIndex = function(index) {};

/**
 * 清空粒子爆裂。
 * @return {void}
 */
Laya.Emission.prototype.clearBurst = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Emission.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Emission.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>FrameOverTime,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.FrameOverTime = function() {};
/** @type {?} */
Laya.FrameOverTime.prototype._type;
/** @type {?} */
Laya.FrameOverTime.prototype._constant;
/** @type {?} */
Laya.FrameOverTime.prototype._overTime;
/** @type {?} */
Laya.FrameOverTime.prototype._constantMin;
/** @type {?} */
Laya.FrameOverTime.prototype._constantMax;
/** @type {?} */
Laya.FrameOverTime.prototype._overTimeMin;
/** @type {?} */
Laya.FrameOverTime.prototype._overTimeMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.constant */

/* TODO: GetAccessor: Laya.frameOverTimeData */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/* TODO: GetAccessor: Laya.frameOverTimeDataMin */

/* TODO: GetAccessor: Laya.frameOverTimeDataMax */

/**
 * 通过固定帧创建一个 <code>FrameOverTime</code> 实例。
 * @param {number=} constant 固定帧。
 * @return {!Laya.FrameOverTime} 时间帧。
 */
Laya.FrameOverTime.createByConstant = function(constant) {};

/**
 * 通过时间帧创建一个 <code>FrameOverTime</code> 实例。
 * @param {!Laya.GradientDataInt} overTime 时间帧。
 * @return {!Laya.FrameOverTime} 时间帧。
 */
Laya.FrameOverTime.createByOverTime = function(overTime) {};

/**
 * 通过随机双固定帧创建一个 <code>FrameOverTime</code> 实例。
 * @param {number=} constantMin 最小固定帧。
 * @param {number=} constantMax 最大固定帧。
 * @return {!Laya.FrameOverTime} 时间帧。
 */
Laya.FrameOverTime.createByRandomTwoConstant = function(constantMin, constantMax) {};

/**
 * 通过随机双时间帧创建一个 <code>FrameOverTime</code> 实例。
 * @param {!Laya.GradientDataInt} gradientFrameMin 最小时间帧。
 * @param {!Laya.GradientDataInt} gradientFrameMax 最大时间帧。
 * @return {!Laya.FrameOverTime} 时间帧。
 */
Laya.FrameOverTime.createByRandomTwoOverTime = function(gradientFrameMin, gradientFrameMax) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.FrameOverTime.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.FrameOverTime.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientAngularVelocity,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.GradientAngularVelocity = function() {};
/** @type {?} */
Laya.GradientAngularVelocity.prototype._type;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._separateAxes;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constant;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constantSeparate;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradient;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientX;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientY;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientZ;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientW;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constantMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constantMax;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constantMinSeparate;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._constantMaxSeparate;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientMax;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientXMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientXMax;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientYMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientYMax;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientZMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientZMax;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientWMin;
/** @type {?} */
Laya.GradientAngularVelocity.prototype._gradientWMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.separateAxes */

/* TODO: GetAccessor: Laya.constant */

/* TODO: GetAccessor: Laya.constantSeparate */

/* TODO: GetAccessor: Laya.gradient */

/* TODO: GetAccessor: Laya.gradientX */

/* TODO: GetAccessor: Laya.gradientY */

/* TODO: GetAccessor: Laya.gradientZ */

/* TODO: GetAccessor: Laya.gradientW */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/* TODO: GetAccessor: Laya.constantMinSeparate */

/* TODO: GetAccessor: Laya.constantMaxSeparate */

/* TODO: GetAccessor: Laya.gradientMin */

/* TODO: GetAccessor: Laya.gradientMax */

/* TODO: GetAccessor: Laya.gradientXMin */

/* TODO: GetAccessor: Laya.gradientXMax */

/* TODO: GetAccessor: Laya.gradientYMin */

/* TODO: GetAccessor: Laya.gradientYMax */

/* TODO: GetAccessor: Laya.gradientZMin */

/* TODO: GetAccessor: Laya.gradientZMax */

/* TODO: GetAccessor: Laya.gradientWMin */

/* TODO: GetAccessor: Laya.gradientWMax */

/**
 * 通过固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {number} constant 固定角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByConstant = function(constant) {};

/**
 * 通过分轴固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.Vector3} separateConstant 分轴固定角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByConstantSeparate = function(separateConstant) {};

/**
 * 通过渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradient 渐变角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByGradient = function(gradient) {};

/**
 * 通过分轴渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientX X轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientY Y轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientZ Z轴渐变角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByGradientSeparate = function(gradientX, gradientY, gradientZ) {};

/**
 * 通过随机双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {number} constantMin 最小固定角速度。
 * @param {number} constantMax 最大固定角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByRandomTwoConstant = function(constantMin, constantMax) {};

/**
 * 通过随机分轴双固定角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.Vector3} separateConstantMin 最小分轴固定角速度。
 * @param {!Laya.Vector3} separateConstantMax 最大分轴固定角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByRandomTwoConstantSeparate = function(separateConstantMin, separateConstantMax) {};

/**
 * 通过随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientMin 最小渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientMax 最大渐变角速度。
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByRandomTwoGradient = function(gradientMin, gradientMax) {};

/**
 * 通过分轴随机双渐变角速度创建一个 <code>GradientAngularVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientXMin 最小X轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientXMax 最大X轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientYMin 最小Y轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientYMax 最大Y轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientZMin 最小Z轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientZMax 最大Z轴渐变角速度。
 * @param {!Laya.GradientDataNumber} gradientWMin
 * @param {!Laya.GradientDataNumber} gradientWMax
 * @return {!Laya.GradientAngularVelocity} 渐变角速度。
 */
Laya.GradientAngularVelocity.createByRandomTwoGradientSeparate = function(gradientXMin, gradientXMax, gradientYMin, gradientYMax, gradientZMin, gradientZMax, gradientWMin, gradientWMax) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientAngularVelocity.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientAngularVelocity.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientColor,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.GradientColor = function() {};
/** @type {?} */
Laya.GradientColor.prototype._type;
/** @type {?} */
Laya.GradientColor.prototype._constant;
/** @type {?} */
Laya.GradientColor.prototype._constantMin;
/** @type {?} */
Laya.GradientColor.prototype._constantMax;
/** @type {?} */
Laya.GradientColor.prototype._gradient;
/** @type {?} */
Laya.GradientColor.prototype._gradientMin;
/** @type {?} */
Laya.GradientColor.prototype._gradientMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.constant */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/* TODO: GetAccessor: Laya.gradient */

/* TODO: GetAccessor: Laya.gradientMin */

/* TODO: GetAccessor: Laya.gradientMax */

/**
 * 通过固定颜色创建一个 <code>GradientColor</code> 实例。
 * @param {!Laya.Vector4} constant 固定颜色。
 * @return {!Laya.GradientColor}
 */
Laya.GradientColor.createByConstant = function(constant) {};

/**
 * 通过渐变颜色创建一个 <code>GradientColor</code> 实例。
 * @param {!Laya.Gradient} gradient 渐变色。
 * @return {!Laya.GradientColor}
 */
Laya.GradientColor.createByGradient = function(gradient) {};

/**
 * 通过随机双固定颜色创建一个 <code>GradientColor</code> 实例。
 * @param {!Laya.Vector4} minConstant 最小固定颜色。
 * @param {!Laya.Vector4} maxConstant 最大固定颜色。
 * @return {!Laya.GradientColor}
 */
Laya.GradientColor.createByRandomTwoConstant = function(minConstant, maxConstant) {};

/**
 * 通过随机双渐变颜色创建一个 <code>GradientColor</code> 实例。
 * @param {!Laya.Gradient} minGradient 最小渐变颜色。
 * @param {!Laya.Gradient} maxGradient 最大渐变颜色。
 * @return {!Laya.GradientColor}
 */
Laya.GradientColor.createByRandomTwoGradient = function(minGradient, maxGradient) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientColor.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientColor.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientDataInt</code> 实例。
 */
Laya.GradientDataInt = function() {};
/** @type {?} */
Laya.GradientDataInt.prototype._currentLength;

/* TODO: GetAccessor: Laya.gradientCount */

/**
 * 增加整形渐变。
 * @param {number} key 生命周期，范围为0到1。
 * @param {number} value 整形值。
 * @return {void}
 */
Laya.GradientDataInt.prototype.add = function(key, value) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientDataInt.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientDataInt.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientDataNumber</code> 实例。
 */
Laya.GradientDataNumber = function() {};
/** @type {?} */
Laya.GradientDataNumber.prototype._currentLength;

/* TODO: GetAccessor: Laya.gradientCount */

/**
 * 增加浮点渐变。
 * @param {number} key 生命周期，范围为0到1。
 * @param {number} value 浮点值。
 * @return {void}
 */
Laya.GradientDataNumber.prototype.add = function(key, value) {};

/**
 * 通过索引获取键。
 * @param {number} index 索引。
 * @return {number} value 键。
 */
Laya.GradientDataNumber.prototype.getKeyByIndex = function(index) {};

/**
 * 通过索引获取值。
 * @param {number} index 索引。
 * @return {number} value 值。
 */
Laya.GradientDataNumber.prototype.getValueByIndex = function(index) {};

/**
 * 获取平均值。
 * @return {number}
 */
Laya.GradientDataNumber.prototype.getAverageValue = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientDataNumber.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientDataNumber.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientDataVector2</code> 实例。
 */
Laya.GradientDataVector2 = function() {};
/** @type {?} */
Laya.GradientDataVector2.prototype._currentLength;

/* TODO: GetAccessor: Laya.gradientCount */

/**
 * 增加二维向量渐变。
 * @param {number} key 生命周期，范围为0到1。
 * @param {!Laya.Vector2} value 二维向量值。
 * @return {void}
 */
Laya.GradientDataVector2.prototype.add = function(key, value) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientDataVector2.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientDataVector2.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientSize,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.GradientSize = function() {};
/** @type {?} */
Laya.GradientSize.prototype._type;
/** @type {?} */
Laya.GradientSize.prototype._separateAxes;
/** @type {?} */
Laya.GradientSize.prototype._gradient;
/** @type {?} */
Laya.GradientSize.prototype._gradientX;
/** @type {?} */
Laya.GradientSize.prototype._gradientY;
/** @type {?} */
Laya.GradientSize.prototype._gradientZ;
/** @type {?} */
Laya.GradientSize.prototype._constantMin;
/** @type {?} */
Laya.GradientSize.prototype._constantMax;
/** @type {?} */
Laya.GradientSize.prototype._constantMinSeparate;
/** @type {?} */
Laya.GradientSize.prototype._constantMaxSeparate;
/** @type {?} */
Laya.GradientSize.prototype._gradientMin;
/** @type {?} */
Laya.GradientSize.prototype._gradientMax;
/** @type {?} */
Laya.GradientSize.prototype._gradientXMin;
/** @type {?} */
Laya.GradientSize.prototype._gradientXMax;
/** @type {?} */
Laya.GradientSize.prototype._gradientYMin;
/** @type {?} */
Laya.GradientSize.prototype._gradientYMax;
/** @type {?} */
Laya.GradientSize.prototype._gradientZMin;
/** @type {?} */
Laya.GradientSize.prototype._gradientZMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.separateAxes */

/* TODO: GetAccessor: Laya.gradient */

/* TODO: GetAccessor: Laya.gradientX */

/* TODO: GetAccessor: Laya.gradientY */

/* TODO: GetAccessor: Laya.gradientZ */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/* TODO: GetAccessor: Laya.constantMinSeparate */

/* TODO: GetAccessor: Laya.constantMaxSeparate */

/* TODO: GetAccessor: Laya.gradientMin */

/* TODO: GetAccessor: Laya.gradientMax */

/* TODO: GetAccessor: Laya.gradientXMin */

/* TODO: GetAccessor: Laya.gradientXMax */

/* TODO: GetAccessor: Laya.gradientYMin */

/* TODO: GetAccessor: Laya.gradientYMax */

/* TODO: GetAccessor: Laya.gradientZMin */

/* TODO: GetAccessor: Laya.gradientZMax */

/**
 * 通过渐变尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {!Laya.GradientDataNumber} gradient 渐变尺寸。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByGradient = function(gradient) {};

/**
 * 通过分轴渐变尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientX 渐变尺寸X。
 * @param {!Laya.GradientDataNumber} gradientY 渐变尺寸Y。
 * @param {!Laya.GradientDataNumber} gradientZ 渐变尺寸Z。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByGradientSeparate = function(gradientX, gradientY, gradientZ) {};

/**
 * 通过随机双固定尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {number} constantMin 最小固定尺寸。
 * @param {number} constantMax 最大固定尺寸。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByRandomTwoConstant = function(constantMin, constantMax) {};

/**
 * 通过分轴随机双固定尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {!Laya.Vector3} constantMinSeparate 分轴最小固定尺寸.
 * @param {!Laya.Vector3} constantMaxSeparate 分轴最大固定尺寸。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByRandomTwoConstantSeparate = function(constantMinSeparate, constantMaxSeparate) {};

/**
 * 通过随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientMin 最小渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientMax 最大渐变尺寸。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByRandomTwoGradient = function(gradientMin, gradientMax) {};

/**
 * 通过分轴随机双渐变尺寸创建一个 <code>GradientSize</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientXMin X轴最小渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientXMax X轴最大渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientYMin Y轴最小渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientYMax Y轴最大渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientZMin Z轴最小渐变尺寸。
 * @param {!Laya.GradientDataNumber} gradientZMax Z轴最大渐变尺寸。
 * @return {!Laya.GradientSize} 渐变尺寸。
 */
Laya.GradientSize.createByRandomTwoGradientSeparate = function(gradientXMin, gradientXMax, gradientYMin, gradientYMax, gradientZMin, gradientZMax) {};

/**
 * 获取最大尺寸。
 * @param {boolean=} meshMode
 * @return {number}
 */
Laya.GradientSize.prototype.getMaxSizeInGradient = function(meshMode) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientSize.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientSize.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>GradientVelocity,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.GradientVelocity = function() {};
/** @type {?} */
Laya.GradientVelocity.prototype._type;
/** @type {?} */
Laya.GradientVelocity.prototype._constant;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientX;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientY;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientZ;
/** @type {?} */
Laya.GradientVelocity.prototype._constantMin;
/** @type {?} */
Laya.GradientVelocity.prototype._constantMax;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientXMin;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientXMax;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientYMin;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientYMax;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientZMin;
/** @type {?} */
Laya.GradientVelocity.prototype._gradientZMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.constant */

/* TODO: GetAccessor: Laya.gradientX */

/* TODO: GetAccessor: Laya.gradientY */

/* TODO: GetAccessor: Laya.gradientZ */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/* TODO: GetAccessor: Laya.gradientXMin */

/* TODO: GetAccessor: Laya.gradientXMax */

/* TODO: GetAccessor: Laya.gradientYMin */

/* TODO: GetAccessor: Laya.gradientYMax */

/* TODO: GetAccessor: Laya.gradientZMin */

/* TODO: GetAccessor: Laya.gradientZMax */

/**
 * 通过固定速度创建一个 <code>GradientVelocity</code> 实例。
 * @param {!Laya.Vector3} constant 固定速度。
 * @return {!Laya.GradientVelocity} 渐变速度。
 */
Laya.GradientVelocity.createByConstant = function(constant) {};

/**
 * 通过渐变速度创建一个 <code>GradientVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientX 渐变速度X。
 * @param {!Laya.GradientDataNumber} gradientY 渐变速度Y。
 * @param {!Laya.GradientDataNumber} gradientZ 渐变速度Z。
 * @return {!Laya.GradientVelocity} 渐变速度。
 */
Laya.GradientVelocity.createByGradient = function(gradientX, gradientY, gradientZ) {};

/**
 * 通过随机双固定速度创建一个 <code>GradientVelocity</code> 实例。
 * @param {!Laya.Vector3} constantMin 最小固定角速度。
 * @param {!Laya.Vector3} constantMax 最大固定角速度。
 * @return {!Laya.GradientVelocity} 渐变速度。
 */
Laya.GradientVelocity.createByRandomTwoConstant = function(constantMin, constantMax) {};

/**
 * 通过随机双渐变速度创建一个 <code>GradientVelocity</code> 实例。
 * @param {!Laya.GradientDataNumber} gradientXMin X轴最小渐变速度。
 * @param {!Laya.GradientDataNumber} gradientXMax X轴最大渐变速度。
 * @param {!Laya.GradientDataNumber} gradientYMin Y轴最小渐变速度。
 * @param {!Laya.GradientDataNumber} gradientYMax Y轴最大渐变速度。
 * @param {!Laya.GradientDataNumber} gradientZMin Z轴最小渐变速度。
 * @param {!Laya.GradientDataNumber} gradientZMax Z轴最大渐变速度。
 * @return {!Laya.GradientVelocity} 渐变速度。
 */
Laya.GradientVelocity.createByRandomTwoGradient = function(gradientXMin, gradientXMax, gradientYMin, gradientYMax, gradientZMin, gradientZMax) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.GradientVelocity.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.GradientVelocity.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>RotationOverLifetime,不允许new，请使用静态创建函数。</code> 实例。
 * @param {!Laya.GradientAngularVelocity} angularVelocity
 */
Laya.RotationOverLifetime = function(angularVelocity) {};
/** @type {?} */
Laya.RotationOverLifetime.prototype._angularVelocity;
/** @type {boolean} */
Laya.RotationOverLifetime.prototype.enable;

/* TODO: GetAccessor: Laya.angularVelocity */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.RotationOverLifetime.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.RotationOverLifetime.prototype.clone = function() {};

/** @enum {number} */
Laya.ParticleSystemShapeType = {
  Box: 1,
  Circle: 1,
  Cone: 1,
  Hemisphere: 1,
  Sphere: 1,
};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>BaseShape</code> 实例。
 */
Laya.BaseShape = function() {};
/** @type {boolean} */
Laya.BaseShape.prototype.enable;
/** @type {number} */
Laya.BaseShape.prototype.randomDirection;
/** @type {!Laya.ParticleSystemShapeType} */
Laya.BaseShape.prototype.shapeType;

/**
 * 用于生成粒子初始位置和方向。
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.BaseShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.BaseShape.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.BaseShape.prototype.clone = function() {};

/**
 * @extends {Laya.BaseShape}
 * @constructor
 * @struct
 * 创建一个 <code>BoxShape</code> 实例。
 */
Laya.BoxShape = function() {};
/** @type {number} */
Laya.BoxShape.prototype.x;
/** @type {number} */
Laya.BoxShape.prototype.y;
/** @type {number} */
Laya.BoxShape.prototype.z;

/**
 * 用于生成粒子初始位置和方向。
 * @override
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.BoxShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.BoxShape.prototype.cloneTo = function(destObject) {};

/**
 * @override 克隆。
 * @return {?} 克隆副本。
 */
Laya.BoxShape.prototype.clone = function() {};

/**
 * @extends {Laya.BaseShape}
 * @constructor
 * @struct
 * 创建一个 <code>CircleShape</code> 实例。
 */
Laya.CircleShape = function() {};
/** @type {number} */
Laya.CircleShape.prototype.radius;
/** @type {number} */
Laya.CircleShape.prototype.arc;
/** @type {boolean} */
Laya.CircleShape.prototype.emitFromEdge;

/**
 * 用于生成粒子初始位置和方向。
 * @override
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.CircleShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.CircleShape.prototype.cloneTo = function(destObject) {};

/**
 * @override 克隆。
 * @return {?} 克隆副本。
 */
Laya.CircleShape.prototype.clone = function() {};

/**
 * @extends {Laya.BaseShape}
 * @constructor
 * @struct
 * 创建一个 <code>ConeShape</code> 实例。
 */
Laya.ConeShape = function() {};
/** @type {number} */
Laya.ConeShape.prototype.angle;
/** @type {number} */
Laya.ConeShape.prototype.radius;
/** @type {number} */
Laya.ConeShape.prototype.length;
/** @type {number} */
Laya.ConeShape.prototype.emitType;

/**
 * 用于生成粒子初始位置和方向。
 * @override
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.ConeShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.ConeShape.prototype.cloneTo = function(destObject) {};

/**
 * @override 克隆。
 * @return {?} 克隆副本。
 */
Laya.ConeShape.prototype.clone = function() {};

/**
 * @extends {Laya.BaseShape}
 * @constructor
 * @struct
 * 创建一个 <code>HemisphereShape</code> 实例。
 */
Laya.HemisphereShape = function() {};
/** @type {number} */
Laya.HemisphereShape.prototype.radius;
/** @type {boolean} */
Laya.HemisphereShape.prototype.emitFromShell;

/**
 * 用于生成粒子初始位置和方向。
 * @override
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.HemisphereShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.HemisphereShape.prototype.cloneTo = function(destObject) {};

/**
 * @override 克隆。
 * @return {?} 克隆副本。
 */
Laya.HemisphereShape.prototype.clone = function() {};

/**
 * @extends {Laya.BaseShape}
 * @constructor
 * @struct
 * 创建一个 <code>SphereShape</code> 实例。
 */
Laya.SphereShape = function() {};
/** @type {number} */
Laya.SphereShape.prototype.radius;
/** @type {boolean} */
Laya.SphereShape.prototype.emitFromShell;

/**
 * 用于生成粒子初始位置和方向。
 * @override
 * @param {!Laya.Vector3} position 粒子位置。
 * @param {!Laya.Vector3} direction 粒子方向。
 * @param {!Laya.Rand=} rand
 * @param {!Uint32Array=} randomSeeds
 * @return {void}
 */
Laya.SphereShape.prototype.generatePositionAndDirection = function(position, direction, rand, randomSeeds) {};

/**
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.SphereShape.prototype.cloneTo = function(destObject) {};

/**
 * @override 克隆。
 * @return {?} 克隆副本。
 */
Laya.SphereShape.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>SizeOverLifetime</code> 实例。
 * @param {!Laya.GradientSize} size
 */
Laya.SizeOverLifetime = function(size) {};
/** @type {?} */
Laya.SizeOverLifetime.prototype._size;
/** @type {boolean} */
Laya.SizeOverLifetime.prototype.enable;

/* TODO: GetAccessor: Laya.size */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.SizeOverLifetime.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.SizeOverLifetime.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>StartFrame,不允许new，请使用静态创建函数。</code> 实例。
 */
Laya.StartFrame = function() {};
/** @type {?} */
Laya.StartFrame.prototype._type;
/** @type {?} */
Laya.StartFrame.prototype._constant;
/** @type {?} */
Laya.StartFrame.prototype._constantMin;
/** @type {?} */
Laya.StartFrame.prototype._constantMax;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.constant */

/* TODO: GetAccessor: Laya.constantMin */

/* TODO: GetAccessor: Laya.constantMax */

/**
 * 通过随机常量旋转创建一个 <code>StartFrame</code> 实例。
 * @param {number=} constant 固定帧。
 * @return {!Laya.StartFrame} 开始帧。
 */
Laya.StartFrame.createByConstant = function(constant) {};

/**
 * 通过随机双常量旋转创建一个 <code>StartFrame</code> 实例。
 * @param {number=} constantMin 最小固定帧。
 * @param {number=} constantMax 最大固定帧。
 * @return {!Laya.StartFrame} 开始帧。
 */
Laya.StartFrame.createByRandomTwoConstant = function(constantMin, constantMax) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.StartFrame.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.StartFrame.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>TextureSheetAnimation</code> 实例。
 * @param {!Laya.FrameOverTime} frame 动画帧。
 * @param {!Laya.StartFrame} startFrame 开始帧。
 */
Laya.TextureSheetAnimation = function(frame, startFrame) {};
/** @type {!Laya.Vector2} */
Laya.TextureSheetAnimation.prototype.tiles;
/** @type {number} */
Laya.TextureSheetAnimation.prototype.type;
/** @type {boolean} */
Laya.TextureSheetAnimation.prototype.randomRow;
/** @type {number} */
Laya.TextureSheetAnimation.prototype.rowIndex;
/** @type {number} */
Laya.TextureSheetAnimation.prototype.cycles;
/** @type {number} */
Laya.TextureSheetAnimation.prototype.enableUVChannels;
/** @type {boolean} */
Laya.TextureSheetAnimation.prototype.enable;

/* TODO: GetAccessor: Laya.frame */

/* TODO: GetAccessor: Laya.startFrame */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.TextureSheetAnimation.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.TextureSheetAnimation.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>VelocityOverLifetime</code> 实例。
 * @param {!Laya.GradientVelocity} velocity
 */
Laya.VelocityOverLifetime = function(velocity) {};
/** @type {boolean} */
Laya.VelocityOverLifetime.prototype.enable;
/** @type {number} */
Laya.VelocityOverLifetime.prototype.space;

/* TODO: GetAccessor: Laya.velocity */

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.VelocityOverLifetime.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.VelocityOverLifetime.prototype.clone = function() {};

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>Particle3D</code> 实例。
 */
Laya.ShuriKenParticle3D = function() {};

/* TODO: GetAccessor: Laya.particleSystem */

/* TODO: GetAccessor: Laya.particleRenderer */

/**
 * <p>销毁此对象。</p>
 * @override
 * @param {boolean=} destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
 * @return {void}
 */
Laya.ShuriKenParticle3D.prototype.destroy = function(destroyChild) {};

/**
 * @extends {Laya.ShurikenParticleSystem}
 * @constructor
 * @struct
 * @param {!Laya.ShuriKenParticle3D} owner
 */
Laya.ShurikenParticleInstanceSystem = function(owner) {};
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._instanceParticleVertexBuffer;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._instanceVertex;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._instanceBufferState;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._meshIndexCount;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._meshFloatCountPreVertex;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._floatCountPerParticleData;
/** @type {?} */
Laya.ShurikenParticleInstanceSystem.prototype._initMeshVertex;

/**
 * 初始化 buffer
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype._initBufferDatas = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype._retireActiveParticles = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype._freeRetiredParticles = function() {};

/**
 * @param {!Laya.Vector3} position
 * @param {!Laya.Vector3} direction
 * @param {number} time
 * @return {boolean}
 */
Laya.ShurikenParticleInstanceSystem.prototype.addParticle = function(position, direction, time) {};

/**
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype.addNewParticlesToVertexBuffer = function() {};

/**
 * @param {!Laya.RenderContext3D} stage
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype._render = function(stage) {};

/**
 * @return {void}
 */
Laya.ShurikenParticleInstanceSystem.prototype.destroy = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>ShurikenParticleMaterial</code> 实例。
 */
Laya.ShurikenParticleMaterial = function() {};
/** @type {number} */
Laya.ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED;
/** @type {number} */
Laya.ShurikenParticleMaterial.RENDERMODE_ADDTIVE;
/** @type {!Laya.ShaderDefine} */
Laya.ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG;
/** @type {!Laya.ShurikenParticleMaterial} */
Laya.ShurikenParticleMaterial.defaultMaterial;

/* TODO: SetAccessor: Laya.renderMode */

/* TODO: GetAccessor: Laya.colorR */

/* TODO: SetAccessor: Laya.colorR */

/* TODO: GetAccessor: Laya.colorG */

/* TODO: SetAccessor: Laya.colorG */

/* TODO: GetAccessor: Laya.colorB */

/* TODO: SetAccessor: Laya.colorB */

/* TODO: GetAccessor: Laya.colorA */

/* TODO: SetAccessor: Laya.colorA */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.tilingOffsetX */

/* TODO: SetAccessor: Laya.tilingOffsetX */

/* TODO: GetAccessor: Laya.tilingOffsetY */

/* TODO: SetAccessor: Laya.tilingOffsetY */

/* TODO: GetAccessor: Laya.tilingOffsetZ */

/* TODO: SetAccessor: Laya.tilingOffsetZ */

/* TODO: GetAccessor: Laya.tilingOffsetW */

/* TODO: SetAccessor: Laya.tilingOffsetW */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/* TODO: GetAccessor: Laya.texture */

/* TODO: SetAccessor: Laya.texture */

/**
 * 克隆。
 * @override
 * @return {?} 克隆副本。
 */
Laya.ShurikenParticleMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.BaseRender}
 * @constructor
 * @struct
 * 创建一个 <code>ShurikenParticleRender</code> 实例。
 * @param {!Laya.ShuriKenParticle3D} owner
 */
Laya.ShurikenParticleRenderer = function(owner) {};
/** @type {number} */
Laya.ShurikenParticleRenderer.prototype.stretchedBillboardCameraSpeedScale;
/** @type {number} */
Laya.ShurikenParticleRenderer.prototype.stretchedBillboardSpeedScale;
/** @type {number} */
Laya.ShurikenParticleRenderer.prototype.stretchedBillboardLengthScale;

/* TODO: GetAccessor: Laya.renderMode */

/* TODO: SetAccessor: Laya.renderMode */

/* TODO: GetAccessor: Laya.mesh */

/* TODO: SetAccessor: Laya.mesh */

/* TODO: GetAccessor: Laya.bounds */

/**
 * @extends {Laya.GeometryElement}
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * @param {!Laya.ShuriKenParticle3D} owner
 */
Laya.ShurikenParticleSystem = function(owner) {};
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.duration;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.looping;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.prewarm;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startDelayType;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startDelay;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startDelayMin;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startDelayMax;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSpeedType;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSpeedConstant;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSpeedConstantMin;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSpeedConstantMax;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.threeDStartSize;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSizeType;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSizeConstant;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startSizeConstantSeparate;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSizeConstantMin;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startSizeConstantMax;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startSizeConstantMinSeparate;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startSizeConstantMaxSeparate;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.threeDStartRotation;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startRotationType;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startRotationConstant;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startRotationConstantSeparate;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startRotationConstantMin;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startRotationConstantMax;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startRotationConstantMinSeparate;
/** @type {!Laya.Vector3} */
Laya.ShurikenParticleSystem.prototype.startRotationConstantMaxSeparate;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.randomizeRotationDirection;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.startColorType;
/** @type {!Laya.Vector4} */
Laya.ShurikenParticleSystem.prototype.startColorConstant;
/** @type {!Laya.Vector4} */
Laya.ShurikenParticleSystem.prototype.startColorConstantMin;
/** @type {!Laya.Vector4} */
Laya.ShurikenParticleSystem.prototype.startColorConstantMax;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.gravityModifier;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.simulationSpace;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.simulationSpeed;
/** @type {number} */
Laya.ShurikenParticleSystem.prototype.scaleMode;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.playOnAwake;
/** @type {!Uint32Array} */
Laya.ShurikenParticleSystem.prototype.randomSeed;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.autoRandomSeed;
/** @type {boolean} */
Laya.ShurikenParticleSystem.prototype.isPerformanceMode;

/* TODO: GetAccessor: Laya.maxParticles */

/* TODO: SetAccessor: Laya.maxParticles */

/* TODO: GetAccessor: Laya.emission */

/* TODO: GetAccessor: Laya.aliveParticleCount */

/* TODO: GetAccessor: Laya.emissionTime */

/* TODO: GetAccessor: Laya.shape */

/* TODO: SetAccessor: Laya.shape */

/* TODO: GetAccessor: Laya.isAlive */

/* TODO: GetAccessor: Laya.isEmitting */

/* TODO: GetAccessor: Laya.isPlaying */

/* TODO: GetAccessor: Laya.isPaused */

/* TODO: GetAccessor: Laya.startLifetimeType */

/* TODO: SetAccessor: Laya.startLifetimeType */

/* TODO: GetAccessor: Laya.startLifetimeConstant */

/* TODO: SetAccessor: Laya.startLifetimeConstant */

/* TODO: GetAccessor: Laya.startLifeTimeGradient */

/* TODO: SetAccessor: Laya.startLifeTimeGradient */

/* TODO: GetAccessor: Laya.startLifetimeConstantMin */

/* TODO: SetAccessor: Laya.startLifetimeConstantMin */

/* TODO: GetAccessor: Laya.startLifetimeConstantMax */

/* TODO: SetAccessor: Laya.startLifetimeConstantMax */

/* TODO: GetAccessor: Laya.startLifeTimeGradientMin */

/* TODO: SetAccessor: Laya.startLifeTimeGradientMin */

/* TODO: GetAccessor: Laya.startLifeTimeGradientMax */

/* TODO: SetAccessor: Laya.startLifeTimeGradientMax */

/* TODO: GetAccessor: Laya.velocityOverLifetime */

/* TODO: SetAccessor: Laya.velocityOverLifetime */

/* TODO: GetAccessor: Laya.colorOverLifetime */

/* TODO: SetAccessor: Laya.colorOverLifetime */

/* TODO: GetAccessor: Laya.sizeOverLifetime */

/* TODO: SetAccessor: Laya.sizeOverLifetime */

/* TODO: GetAccessor: Laya.rotationOverLifetime */

/* TODO: SetAccessor: Laya.rotationOverLifetime */

/* TODO: GetAccessor: Laya.textureSheetAnimation */

/* TODO: SetAccessor: Laya.textureSheetAnimation */

/* TODO: GetAccessor: Laya.customBounds */

/* TODO: SetAccessor: Laya.customBounds */

/**
 * 发射一个粒子。
 * @param {number} time
 * @return {boolean}
 */
Laya.ShurikenParticleSystem.prototype.emit = function(time) {};

/**
 * @param {!Laya.Vector3} position
 * @param {!Laya.Vector3} direction
 * @param {number} time
 * @return {boolean}
 */
Laya.ShurikenParticleSystem.prototype.addParticle = function(position, direction, time) {};

/**
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.addNewParticlesToVertexBuffer = function() {};

/**
 * @inheritDoc
 * @override
 * @return {number}
 */
Laya.ShurikenParticleSystem.prototype._getType = function() {};

/**
 * 开始发射粒子。
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.play = function() {};

/**
 * 暂停发射粒子。
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.pause = function() {};

/**
 * 通过指定时间增加粒子播放进度，并暂停播放。
 * @param {number} time 进度时间.如果restart为true,粒子播放时间会归零后再更新进度。
 * @param {boolean=} restart 是否重置播放状态。
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.simulate = function(time, restart) {};

/**
 * 停止发射粒子。
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.stop = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ShurikenParticleSystem.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ShurikenParticleSystem.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
Laya.PixelLineData = function() {};
/** @type {!Laya.Vector3} */
Laya.PixelLineData.prototype.startPosition;
/** @type {!Laya.Vector3} */
Laya.PixelLineData.prototype.endPosition;
/** @type {!Laya.Color} */
Laya.PixelLineData.prototype.startColor;
/** @type {!Laya.Color} */
Laya.PixelLineData.prototype.endColor;

/**
 * 克隆。
 * @param {!Laya.PixelLineData} destObject 克隆源。
 * @return {void}
 */
Laya.PixelLineData.prototype.cloneTo = function(destObject) {};

/**
 * @extends {Laya.GeometryElement}
 * @constructor
 * @struct
 * 创建一个PixelLineFilter实例
 * @param {!Laya.PixelLineSprite3D} owner 渲染精灵节点
 * @param {number} maxLineCount 最大线长
 */
Laya.PixelLineFilter = function(owner, maxLineCount) {};
/** @type {?} */
Laya.PixelLineFilter._tempVector0;
/** @type {?} */
Laya.PixelLineFilter._tempVector1;

/**
 * 获取线段数据
 * @param {number} index
 * @param {!Laya.PixelLineData} out
 * @return {void} 线段数据。
 */
Laya.PixelLineFilter.prototype._getLineData = function(index, out) {};

/**
 * @inheritDoc
 * @override 删除
 * @return {void}
 */
Laya.PixelLineFilter.prototype.destroy = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 * 创建一个 <code>PixelLineMaterial</code> 实例。
 */
Laya.PixelLineMaterial = function() {};
/** @type {!Laya.PixelLineMaterial} */
Laya.PixelLineMaterial.defaultMaterial;

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/**
 * @extends {Laya.BaseRender}
 * @constructor
 * @struct
 * 创建一个PixelLineRenderer实例
 * @param {!Laya.PixelLineSprite3D} owner 线渲染精灵
 */
Laya.PixelLineRenderer = function(owner) {};

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>PixelLineSprite3D</code> 实例。
 * @param {number=} maxCount 最大线段数量。
 * @param {string=} name 名字。
 */
Laya.PixelLineSprite3D = function(maxCount, name) {};
/** @type {?} */
Laya.PixelLineSprite3D.prototype._isRenderActive;
/** @type {?} */
Laya.PixelLineSprite3D.prototype._isInRenders;

/* TODO: GetAccessor: Laya.maxLineCount */

/* TODO: SetAccessor: Laya.maxLineCount */

/* TODO: GetAccessor: Laya.lineCount */

/* TODO: SetAccessor: Laya.lineCount */

/* TODO: GetAccessor: Laya.pixelLineRenderer */

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype._onInActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @param {number} index
 * @param {!Laya.Material} material
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype._changeRenderObjects = function(index, material) {};

/**
 * 增加一条线。
 * @param {!Laya.Vector3} startPosition 初始点位置
 * @param {!Laya.Vector3} endPosition 结束点位置
 * @param {!Laya.Color} startColor 初始点颜色
 * @param {!Laya.Color} endColor 结束点颜色
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.addLine = function(startPosition, endPosition, startColor, endColor) {};

/**
 * 添加多条线段。
 * @param {!Array<!Laya.PixelLineData>} lines 线段数据
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.addLines = function(lines) {};

/**
 * 移除一条线段。
 * @param {number} index 索引。
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.removeLine = function(index) {};

/**
 * 更新线
 * @param {number} index 索引
 * @param {!Laya.Vector3} startPosition 初始点位置
 * @param {!Laya.Vector3} endPosition 结束点位置
 * @param {!Laya.Color} startColor 初始点颜色
 * @param {!Laya.Color} endColor 结束点颜色
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.setLine = function(index, startPosition, endPosition, startColor, endColor) {};

/**
 * 获取线段数据
 * @param {number} index
 * @param {!Laya.PixelLineData} out 线段数据。
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.getLine = function(index, out) {};

/**
 * 清除所有线段。
 * @return {void}
 */
Laya.PixelLineSprite3D.prototype.clear = function() {};

/**
 * @extends {Laya.Keyframe}
 * @constructor
 * @struct
 * 创建一个 <code>QuaternionKeyframe</code> 实例。
 */
Laya.QuaternionKeyframe = function() {};
/** @type {!Laya.Vector4} */
Laya.QuaternionKeyframe.prototype.inTangent;
/** @type {!Laya.Vector4} */
Laya.QuaternionKeyframe.prototype.outTangent;
/** @type {!Laya.Quaternion} */
Laya.QuaternionKeyframe.prototype.value;

/**
 * 克隆。
 * @override
 * @param {?} dest
 * @return {void}
 */
Laya.QuaternionKeyframe.prototype.cloneTo = function(dest) {};

/** @enum {number} */
Laya.ReflectionProbeMode = {
  off: 1,
  simple: 1,
};

/**
 * @extends {Laya.Sprite3D}
 * @constructor
 * @struct
 */
Laya.ReflectionProbe = function() {};
/** @type {!Laya.Vector3} */
Laya.ReflectionProbe.TEMPVECTOR3;
/** @type {!Laya.Vector4} */
Laya.ReflectionProbe.defaultTextureHDRDecodeValues;
/** @type {?} */
Laya.ReflectionProbe.prototype._boxProjection;
/** @type {?} */
Laya.ReflectionProbe.prototype._importance;
/** @type {?} */
Laya.ReflectionProbe.prototype._reflectionTexture;
/** @type {?} */
Laya.ReflectionProbe.prototype._size;
/** @type {?} */
Laya.ReflectionProbe.prototype._offset;
/** @type {?} */
Laya.ReflectionProbe.prototype._bounds;
/** @type {?} */
Laya.ReflectionProbe.prototype._intensity;
/** @type {?} */
Laya.ReflectionProbe.prototype._reflectionHDRParams;
/** @type {?} */
Laya.ReflectionProbe.prototype._reflectionDecodeFormat;
/** @type {?} */
Laya.ReflectionProbe.prototype._indexInReflectProbList;
/** @type {boolean} */
Laya.ReflectionProbe.prototype._isScene;

/* TODO: GetAccessor: Laya.boxProjection */

/* TODO: SetAccessor: Laya.boxProjection */

/* TODO: GetAccessor: Laya.importance */

/* TODO: SetAccessor: Laya.importance */

/* TODO: GetAccessor: Laya.intensity */

/* TODO: SetAccessor: Laya.intensity */

/* TODO: GetAccessor: Laya.reflectionTexture */

/* TODO: SetAccessor: Laya.reflectionTexture */

/* TODO: GetAccessor: Laya.bounds */

/* TODO: GetAccessor: Laya.boundsMax */

/* TODO: GetAccessor: Laya.boundsMin */

/* TODO: GetAccessor: Laya.probePosition */

/* TODO: GetAccessor: Laya.reflectionHDRParams */

/**
 * 设置队列索引
 * @param {number} value
 * @return {void}
 */
Laya.ReflectionProbe.prototype._setIndexInReflectionList = function(value) {};

/**
 * 获得队列索引
 * @return {number}
 */
Laya.ReflectionProbe.prototype._getIndexInReflectionList = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ReflectionProbe.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ReflectionProbe.prototype._onInActive = function() {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.ReflectionProbe.prototype.destroy = function(destroyChild) {};

/**
 * @extends {Laya.SingletonList<!Laya.ReflectionProbe>}
 * @constructor
 * @struct
 * 创建一个新的 <code>ReflectionProbeList</code> 实例。
 */
Laya.ReflectionProbeList = function() {};

/**
 * @constructor
 * @struct
 */
Laya.ReflectionProbeManager = function() {};

/* TODO: SetAccessor: Laya.sceneReflectionProbe */

/* TODO: SetAccessor: Laya.sceneReflectionCubeHDRParam */

/**
 * 更新baseRender的反射探针
 * @param {!Laya.BaseRender} baseRender
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype._updateMotionObjects = function(baseRender) {};

/**
 * 添加运动物体。
 * @param {!Laya.BaseRender} renderObject
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype.addMotionObject = function(renderObject) {};

/**
 * 更新运动物体的反射探针信息
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype.update = function() {};

/**
 * 更新传入所有渲染器反射探针
 * @param {!Laya.SimpleSingletonList} baseRenders
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype.updateAllRenderObjects = function(baseRenders) {};

/**
 * 清楚变动队列
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype.clearMotionObjects = function() {};

/**
 * @return {void}
 */
Laya.ReflectionProbeManager.prototype.destroy = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @implements {Laya.ISingletonElement}
 * @implements {Laya.IOctreeObject}
 * @constructor
 * @struct
 */
Laya.BaseRender = function() {};
/** @type {!Array<!Laya.RenderElement>} */
Laya.BaseRender.prototype._renderElements;
/** @type {number} */
Laya.BaseRender.prototype.sortingFudge;

/* TODO: GetAccessor: Laya.id */

/* TODO: GetAccessor: Laya.lightmapIndex */

/* TODO: SetAccessor: Laya.lightmapIndex */

/* TODO: GetAccessor: Laya.lightmapScaleOffset */

/* TODO: SetAccessor: Laya.lightmapScaleOffset */

/* TODO: GetAccessor: Laya.enable */

/* TODO: SetAccessor: Laya.enable */

/* TODO: GetAccessor: Laya.material */

/* TODO: SetAccessor: Laya.material */

/* TODO: GetAccessor: Laya.materials */

/* TODO: SetAccessor: Laya.materials */

/* TODO: GetAccessor: Laya.sharedMaterial */

/* TODO: SetAccessor: Laya.sharedMaterial */

/* TODO: GetAccessor: Laya.sharedMaterials */

/* TODO: SetAccessor: Laya.sharedMaterials */

/* TODO: GetAccessor: Laya.bounds */

/* TODO: SetAccessor: Laya.receiveShadow */

/* TODO: GetAccessor: Laya.receiveShadow */

/* TODO: GetAccessor: Laya.castShadow */

/* TODO: SetAccessor: Laya.castShadow */

/* TODO: GetAccessor: Laya.isPartOfStaticBatch */

/* TODO: GetAccessor: Laya.isRender */

/* TODO: SetAccessor: Laya.reflectionMode */

/* TODO: GetAccessor: Laya.reflectionMode */

/**
 *
 * @return {!Laya.BoundsOctreeNode}
 */
Laya.BaseRender.prototype._getOctreeNode = function() {};

/**
 *
 * @param {!Laya.BoundsOctreeNode} value
 * @return {void}
 */
Laya.BaseRender.prototype._setOctreeNode = function(value) {};

/**
 *
 * @return {number}
 */
Laya.BaseRender.prototype._getIndexInMotionList = function() {};

/**
 *
 * @param {number} value
 * @return {void}
 */
Laya.BaseRender.prototype._setIndexInMotionList = function(value) {};

/**
 * [实现ISingletonElement接口]
 * @return {number}
 */
Laya.BaseRender.prototype._getIndexInList = function() {};

/**
 * [实现ISingletonElement接口]
 * @param {number} index
 * @return {void}
 */
Laya.BaseRender.prototype._setIndexInList = function(index) {};

/**
 * @return {void}
 */
Laya.BaseRender.prototype._setUnBelongScene = function() {};

/**
 * 标记为非静态,静态合并后可用于取消静态限制。
 * @return {void}
 */
Laya.BaseRender.prototype.markAsUnStatic = function() {};

/**
 * @extends {Laya.PostProcessEffect}
 * @constructor
 * @struct
 * 创建一个 <code>BloomEffect</code> 实例。
 */
Laya.BloomEffect = function() {};
/** @type {number} */
Laya.BloomEffect.prototype.clamp;
/** @type {!Laya.Color} */
Laya.BloomEffect.prototype.color;
/** @type {boolean} */
Laya.BloomEffect.prototype.fastMode;
/** @type {!Laya.Texture2D} */
Laya.BloomEffect.prototype.dirtTexture;

/* TODO: GetAccessor: Laya.intensity */

/* TODO: SetAccessor: Laya.intensity */

/* TODO: GetAccessor: Laya.threshold */

/* TODO: SetAccessor: Laya.threshold */

/* TODO: GetAccessor: Laya.softKnee */

/* TODO: SetAccessor: Laya.softKnee */

/* TODO: GetAccessor: Laya.diffusion */

/* TODO: SetAccessor: Laya.diffusion */

/* TODO: GetAccessor: Laya.anamorphicRatio */

/* TODO: SetAccessor: Laya.anamorphicRatio */

/* TODO: GetAccessor: Laya.dirtIntensity */

/* TODO: SetAccessor: Laya.dirtIntensity */
/**
 * @extends {Laya.Command}
 * @constructor
 * @struct
 */
Laya.BlitScreenQuadCMD = function() {};

/**
 * 创建命令流
 * @param {!Laya.BaseTexture} source 原始贴图 如果设置为null  将会使用默认的Camera流程中的原RenderTexture
 * @param {!Laya.RenderTexture} dest 目标贴图 如果设置为null，将会使用默认的camera渲染目标
 * @param {!Laya.Vector4=} offsetScale 偏移缩放
 * @param {!Laya.Shader3D=} shader 渲染shader
 * @param {!Laya.ShaderData=} shaderData 渲染数据
 * @param {number=} subShader subshader的节点
 * @param {number=} screenType
 * @param {!Laya.CommandBuffer=} commandbuffer
 * @param {boolean=} definedCanvas
 * @return {!Laya.BlitScreenQuadCMD}
 */
Laya.BlitScreenQuadCMD.create = function(source, dest, offsetScale, shader, shaderData, subShader, screenType, commandbuffer, definedCanvas) {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.BlitScreenQuadCMD.prototype.run = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.BlitScreenQuadCMD.prototype.recover = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Command</code> 实例。
 */
Laya.Command = function() {};

/**
 * 运行渲染指令
 * @return {void}
 */
Laya.Command.prototype.run = function() {};

/**
 * 回收渲染指令
 * @return {void}
 */
Laya.Command.prototype.recover = function() {};

/**
 * 设置渲染上下文
 * @param {!Laya.RenderContext3D} context 渲染上下文
 * @return {void}
 */
Laya.Command.prototype.setContext = function(context) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>CommandBuffer</code> 实例。
 */
Laya.CommandBuffer = function() {};

/**
 * 设置shader图片数据
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 图片UniformID
 * @param {!Laya.BaseTexture} source 图片源
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataTexture = function(shaderData, nameID, source) {};

/**
 * 设置全局纹理数据
 * @param {number} nameID 图片uniformID
 * @param {!Laya.BaseTexture} source 图片源
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalTexture = function(nameID, source) {};

/**
 * 设置shader Vector4数据
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {!Laya.Vector4} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataVector = function(shaderData, nameID, value) {};

/**
 * 设置全局Vector4数据
 * @param {number} nameID Vector4数据ID
 * @param {!Laya.Vector4} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalVector = function(nameID, source) {};

/**
 * 设置shader Vector3数据
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {!Laya.Vector3} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataVector3 = function(shaderData, nameID, value) {};

/**
 * 设置全局Vector3数据
 * @param {number} nameID 数据ID
 * @param {!Laya.Vector3} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalVector3 = function(nameID, source) {};

/**
 * 设置shader Vector2数据
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {!Laya.Vector2} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataVector2 = function(shaderData, nameID, value) {};

/**
 * 设置全局Vector2数据
 * @param {number} nameID 数据ID
 * @param {!Laya.Vector2} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalVector2 = function(nameID, source) {};

/**
 * 设置shader Number属性
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {number} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataNumber = function(shaderData, nameID, value) {};

/**
 * 设置全局number属性
 * @param {number} nameID 数据ID
 * @param {number} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalNumber = function(nameID, source) {};

/**
 * 设置shader Int属性
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {number} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataInt = function(shaderData, nameID, value) {};

/**
 * 设置全局int属性
 * @param {number} nameID 数据ID
 * @param {number} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalInt = function(nameID, source) {};

/**
 * 设置shader Matrix属性
 * @param {!Laya.ShaderData} shaderData shader数据集合
 * @param {number} nameID 数据ID
 * @param {!Laya.Matrix4x4} value 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setShaderDataMatrix = function(shaderData, nameID, value) {};

/**
 * 设置全局Matrix属性
 * @param {number} nameID 数据ID
 * @param {number} source 数据
 * @return {void}
 */
Laya.CommandBuffer.prototype.setGlobalMatrix = function(nameID, source) {};

/**
 * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。
 * @param {!Laya.BaseTexture} source 源纹理. 如果为null,前渲染结果为原纹理
 * @param {!Laya.RenderTexture} dest 目标纹理. 如果为null，直接渲染到最终画布
 * @param {!Laya.Vector4=} offsetScale 偏移缩放。
 * @param {!Laya.Shader3D=} shader 着色器,如果为null使用内部拷贝着色器,不做任何处理。
 * @param {!Laya.ShaderData=} shaderData 着色器数据,如果为null只接收sourceTexture。
 * @param {number=} subShader subShader索引,默认值为0。
 * @param {boolean=} definedCanvas
 * @return {void}
 */
Laya.CommandBuffer.prototype.blitScreenQuad = function(source, dest, offsetScale, shader, shaderData, subShader, definedCanvas) {};

/**
 * 添加一条通过全屏四边形将源纹理渲染到目标渲染纹理指令。
 * @param {!Laya.BaseTexture} source 源纹理 如果为null,前渲染结果为原纹理
 * @param {!Laya.RenderTexture} dest 目标纹理 如果为null，直接渲染到最终画布
 * @param {!Laya.Vector4=} offsetScale 偏移缩放
 * @param {!Laya.Material=} material 材质
 * @param {number=} subShader shader索引
 * @return {void}
 */
Laya.CommandBuffer.prototype.blitScreenQuadByMaterial = function(source, dest, offsetScale, material, subShader) {};

/**
 * 添加一条通过全屏三角形将源纹理渲染到目标渲染纹理指令。
 * @param {!Laya.BaseTexture} source 源纹理。
 * @param {!Laya.RenderTexture} dest 目标纹理。
 * @param {!Laya.Vector4=} offsetScale 偏移缩放。
 * @param {!Laya.Shader3D=} shader 着色器,如果为null使用内部拷贝着色器,不做任何处理。
 * @param {!Laya.ShaderData=} shaderData 着色器数据,如果为null只接收sourceTexture。
 * @param {number=} subShader subShader索引,默认值为0。
 * @param {boolean=} defineCanvas
 * @return {void}
 */
Laya.CommandBuffer.prototype.blitScreenTriangle = function(source, dest, offsetScale, shader, shaderData, subShader, defineCanvas) {};

/**
 * 设置指令渲染目标
 * @param {!Laya.RenderTexture} renderTexture RT渲染目标
 * @return {void}
 */
Laya.CommandBuffer.prototype.setRenderTarget = function(renderTexture) {};

/**
 * clear渲染纹理
 * @param {boolean} clearColor
 * @param {boolean} clearDepth
 * @param {!Laya.Vector4} backgroundColor
 * @param {number=} depth
 * @return {void}
 */
Laya.CommandBuffer.prototype.clearRenderTarget = function(clearColor, clearDepth, backgroundColor, depth) {};

/**
 * 渲染一个Mesh
 * @param {!Laya.Mesh} mesh 原始网格信息
 * @param {!Laya.Matrix4x4} matrix 网格世界矩阵
 * @param {!Laya.Material} material 材质
 * @param {number} submeshIndex 子网格索引 如果索引为
 * @param {number} subShaderIndex 子shader索引 一般为0
 * @return {void}
 */
Laya.CommandBuffer.prototype.drawMesh = function(mesh, matrix, material, submeshIndex, subShaderIndex) {};

/**
 * 渲染一个Render
 * @param {!Laya.BaseRender} render 渲染器
 * @param {!Laya.Material} material 材质
 * @param {number} subShaderIndex 子shader索引 一般为0
 * @return {void}
 */
Laya.CommandBuffer.prototype.drawRender = function(render, material, subShaderIndex) {};

/**
 * 使用instance动态合批的方式渲染一个Mesh
 * @param {!Laya.Mesh} mesh 原始网格信息
 * @param {number} subMeshIndex mesh索引
 * @param {!Array<!Laya.Matrix4x4>} matrixs 渲染的世界矩阵数组，用来描述每个Mesh需要渲染的位置,如果为null，将不创建更新世界矩阵Buffer
 * @param {!Laya.Material} material 渲染材质
 * @param {number} subShaderIndex 渲染材质shader索引
 * @param {!Laya.MaterialInstancePropertyBlock} instanceProperty Instance自定义属性
 * @param {number} drawnums 渲染个数
 * @return {?}
 */
Laya.CommandBuffer.prototype.drawMeshInstance = function(mesh, subMeshIndex, matrixs, material, subShaderIndex, instanceProperty, drawnums) {};

/**
 * @extends {Laya.Command}
 * @constructor
 * @struct
 */
Laya.DrawMeshInstancedCMD = function() {};
/** @type {number} */
Laya.DrawMeshInstancedCMD.maxInstanceCount;

/* TODO: GetAccessor: Laya.bufferState */

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.DrawMeshInstancedCMD.prototype.run = function() {};

/**
 * 重置DrawInstance的世界矩阵数组
 * @param {!Array<!Laya.Matrix4x4>} worldMatrixArray
 * @return {void}
 */
Laya.DrawMeshInstancedCMD.prototype.setWorldMatrix = function(worldMatrixArray) {};

/**
 * 重置渲染个数
 * @param {number} drawNums
 * @return {void}
 */
Laya.DrawMeshInstancedCMD.prototype.setDrawNums = function(drawNums) {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.DrawMeshInstancedCMD.prototype.recover = function() {};

/** @enum {number} */
Laya.InstanceLocation = {
  CUSTOME0: 1,
  CUSTOME1: 1,
  CUSTOME2: 1,
  CUSTOME3: 1,
};

/**
 * @constructor
 * @struct
 */
Laya.MaterialInstancePropertyBlock = function() {};
/** @type {number} */
Laya.MaterialInstancePropertyBlock.INSTANCETYPE_ATTRIBUTE;
/** @type {number} */
Laya.MaterialInstancePropertyBlock.INSTANCETYPE_UNIFORMBUFFER;
/** @type {?} */
Laya.MaterialInstancePropertyBlock.prototype._creatProperty;

/**
 * 设置Vector4材质数组属性
 * @param {string} attributeName 属性名称（要对应到Shader中）
 * @param {(!Float32Array|!Array<!Laya.Vector4>)} arrays 数据
 * @param {!Laya.InstanceLocation} attributeLocation 属性Shader位置（需要与shader中的声明Attribute一一对应）
 * @return {void}
 */
Laya.MaterialInstancePropertyBlock.prototype.setVectorArray = function(attributeName, arrays, attributeLocation) {};

/**
 * 设置Vector3材质数组属性
 * @param {string} attributeName 属性名称（要对应到Shader中）
 * @param {(!Float32Array|!Array<!Laya.Vector3>)} arrays 数据
 * @param {!Laya.InstanceLocation} attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）
 * @return {void}
 */
Laya.MaterialInstancePropertyBlock.prototype.setVector3Array = function(attributeName, arrays, attributeLocation) {};

/**
 * 设置Vector2材质数组属性
 * @param {string} attributeName 属性名称（要对应到Shader中）
 * @param {(!Float32Array|!Array<!Laya.Vector2>)} arrays 数据
 * @param {!Laya.InstanceLocation} attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）
 * @return {void}
 */
Laya.MaterialInstancePropertyBlock.prototype.setVector2Array = function(attributeName, arrays, attributeLocation) {};

/**
 * 设置Number材质数组属性
 * @param {string} attributeName 属性名称（要对应到Shader中）
 * @param {!Float32Array} arrays 数据
 * @param {!Laya.InstanceLocation} attributeLocation 属性shader位置（需要与shader中的声明Attribute一一对应）
 * @return {void}
 */
Laya.MaterialInstancePropertyBlock.prototype.setNumberArray = function(attributeName, arrays, attributeLocation) {};

/**
 * 获得属性数据
 * @param {!Laya.InstanceLocation} attributeLocation 属性shader位置
 * @return {(!Float32Array|!Array<!Laya.Vector4>|!Array<!Laya.Vector3>|!Array<!Laya.Vector2>)}
 */
Laya.MaterialInstancePropertyBlock.prototype.getPropertyArray = function(attributeLocation) {};

/**
 * @return {void}
 */
Laya.MaterialInstancePropertyBlock.prototype.clear = function() {};

/** @enum {number} */
Laya.ShaderDataType = {
  Int: 1,
  Bool: 1,
  Number: 1,
  Vector2: 1,
  Vector3: 1,
  Vector4: 1,
  Quaternion: 1,
  Matrix4x4: 1,
  Buffer: 1,
  Texture: 1,
};

/**
 * @constructor
 * @struct
 * 创建一个 <code>PostProcessEffect</code> 实例。
 */
Laya.PostProcessEffect = function() {};
/**
 * @constructor
 * @struct
 */
Laya.PostProcessRenderContext = function() {};
/** @type {!Laya.RenderTexture} */
Laya.PostProcessRenderContext.prototype.source;
/** @type {!Laya.RenderTexture} */
Laya.PostProcessRenderContext.prototype.destination;
/** @type {!Laya.Camera} */
Laya.PostProcessRenderContext.prototype.camera;
/** @type {!Laya.ShaderData} */
Laya.PostProcessRenderContext.prototype.compositeShaderData;
/** @type {!Laya.CommandBuffer} */
Laya.PostProcessRenderContext.prototype.command;
/** @type {!Array<!Laya.RenderTexture>} */
Laya.PostProcessRenderContext.prototype.deferredReleaseTextures;

/**
 * @constructor
 * @struct
 * 创建一个 <code>RenderContext3D</code> 实例。
 */
Laya.RenderContext3D = function() {};
/** @type {number} */
Laya.RenderContext3D.clientWidth;
/** @type {number} */
Laya.RenderContext3D.clientHeight;
/** @type {string} */
Laya.RenderContext3D.prototype.configPipeLineMode;

/**
 * @constructor
 * @struct
 * 创建一个 <code>RenderElement</code> 实例。
 */
Laya.RenderElement = function() {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 * 创建一个 <code>ScreenQuad</code> 实例,禁止使用。
 */
Laya.ScreenQuad = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.ScreenQuad.prototype.destroy = function() {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 * 创建一个 <code>ScreenTriangle</code> 实例,禁止使用。
 */
Laya.ScreenTriangle = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.ScreenTriangle.prototype.destroy = function() {};

/**
 * @extends {Laya.Sprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>RenderableSprite3D</code> 实例。
 * @param {string} name
 */
Laya.RenderableSprite3D = function(name) {};
/** @type {!Laya.ShaderDefine} */
Laya.RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW;
/** @type {!Laya.ShaderDefine} */
Laya.RenderableSprite3D.SAHDERDEFINE_LIGHTMAP;
/** @type {!Laya.ShaderDefine} */
Laya.RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL;
/** @type {number} */
Laya.RenderableSprite3D.LIGHTMAPSCALEOFFSET;
/** @type {number} */
Laya.RenderableSprite3D.LIGHTMAP;
/** @type {number} */
Laya.RenderableSprite3D.LIGHTMAP_DIRECTION;
/** @type {number} */
Laya.RenderableSprite3D.PICKCOLOR;
/** @type {number} */
Laya.RenderableSprite3D.REFLECTIONTEXTURE;
/** @type {number} */
Laya.RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS;
/** @type {number} */
Laya.RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION;
/** @type {number} */
Laya.RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX;
/** @type {number} */
Laya.RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN;
/** @type {!Laya.Vector4} */
Laya.RenderableSprite3D.prototype.pickColor;

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.RenderableSprite3D.prototype._onInActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.RenderableSprite3D.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.RenderableSprite3D.prototype._onActiveInScene = function() {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.RenderableSprite3D.prototype.destroy = function(destroyChild) {};

/**
 * @implements {Laya.ISceneRenderManager}
 * @constructor
 * @struct
 * 创建一个 <code>BoundsOctree</code> 实例。
 * @param {number} initialWorldSize 八叉树尺寸
 * @param {!Laya.Vector3} initialWorldPos 八叉树中心
 * @param {number} minNodeSize 节点最小尺寸
 * @param {number} looseness
 */
Laya.BoundsOctree = function(initialWorldSize, initialWorldPos, minNodeSize, looseness) {};

/**
 * 添加物体
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.BoundsOctree.prototype.addRender = function(object) {};

/**
 * 移除物体
 * @param {!Laya.IOctreeObject} object
 * @return {boolean} 是否成功
 */
Laya.BoundsOctree.prototype.removeRender = function(object) {};

/**
 * 更新物体
 * @param {!Laya.IOctreeObject} object
 * @return {boolean}
 */
Laya.BoundsOctree.prototype.update = function(object) {};

/**
 * 如果可能则收缩根节点。
 * @return {void}
 */
Laya.BoundsOctree.prototype.shrinkRootIfPossible = function() {};

/**
 * 添加运动物体。
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.BoundsOctree.prototype.addMotionObject = function(object) {};

/**
 * 移除运动物体。
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.BoundsOctree.prototype.removeMotionObject = function(object) {};

/**
 * 裁剪更新
 * @return {void}
 */
Laya.BoundsOctree.prototype.preFruUpdate = function() {};

/**
 * 直射光阴影裁剪
 * @param {!Laya.ShadowCullInfo} cullInfo
 * @param {!Laya.RenderContext3D} context
 * @return {void}
 */
Laya.BoundsOctree.prototype.cullingShadow = function(cullInfo, context) {};

/**
 * 更新所有运动物体。
 * @return {void}
 */
Laya.BoundsOctree.prototype.updateMotionObjects = function() {};

/**
 * 获取是否与指定包围盒相交。
 * @param {!Laya.BoundBox} checkBounds
 * @return {boolean} 是否相交。
 */
Laya.BoundsOctree.prototype.isCollidingWithBoundBox = function(checkBounds) {};

/**
 * 获取是否与指定射线相交。
 * @param {!Laya.Ray} ray 射线。
 * @param {number=} maxDistance 射线的最大距离。
 * @return {boolean} 是否相交。
 */
Laya.BoundsOctree.prototype.isCollidingWithRay = function(ray, maxDistance) {};

/**
 * 获取与指定包围盒相交的物体列表。
 * @param {!Laya.BoundBox} checkBound AABB包围盒。
 * @param {!Array<?>} result 相交物体列表
 * @return {void}
 */
Laya.BoundsOctree.prototype.getCollidingWithBoundBox = function(checkBound, result) {};

/**
 * 获取与指定射线相交的的物理列表。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Array<?>} result 相交物体列表。
 * @param {number=} maxDistance 射线的最大距离。
 * @return {void}
 */
Laya.BoundsOctree.prototype.getCollidingWithRay = function(ray, result, maxDistance) {};

/**
 * 获取与指定视锥相交的的物理列表。
 * @param {!Laya.CameraCullInfo} cameraCullInfo
 * @param {!Laya.RenderContext3D} context
 * @param {!Laya.Shader3D} shader
 * @param {string} replacementTag
 * @param {boolean} isShadowCasterCull
 * @return {void}
 */
Laya.BoundsOctree.prototype.getCollidingWithFrustum = function(cameraCullInfo, context, shader, replacementTag, isShadowCasterCull) {};

/**
 * 获取最大包围盒
 * @return {!Laya.BoundBox} 最大包围盒
 */
Laya.BoundsOctree.prototype.getMaxBounds = function() {};

/**
 * @return {void}
 */
Laya.BoundsOctree.prototype.destroy = function() {};

/**
 * @implements {Laya.IRenderNodeObject}
 * @constructor
 * @struct
 * 创建一个 <code>BoundsOctreeNode</code> 实例。
 * @param {!Laya.BoundsOctree} octree 所属八叉树。
 * @param {!Laya.BoundsOctreeNode} parent 父节点。
 * @param {number} baseLength 节点基本长度。
 * @param {!Laya.Vector3} center 节点的中心位置。
 */
Laya.BoundsOctreeNode = function(octree, parent, baseLength, center) {};
/** @type {?} */
Laya.BoundsOctreeNode.prototype._getCollidingWithCastShadowFrustum;

/**
 * @return {!Laya.BoundsOctree}
 */
Laya.BoundsOctreeNode.prototype.getManagerNode = function() {};

/**
 * 添加指定物体。
 * @param {!Laya.IOctreeObject} object 指定物体。
 * @return {boolean}
 */
Laya.BoundsOctreeNode.prototype.add = function(object) {};

/**
 * 移除指定物体。
 * @param {!Laya.IOctreeObject} object
 * @return {boolean} 是否成功。
 */
Laya.BoundsOctreeNode.prototype.remove = function(object) {};

/**
 * 更新制定物体，
 * @param {!Laya.IOctreeObject} object
 * @return {boolean} 是否成功。
 */
Laya.BoundsOctreeNode.prototype.update = function(object) {};

/**
 * 收缩八叉树节点。
 * -所有物体都在根节点的八分之一区域
 * -该节点无子节点或有子节点但1/8的子节点不包含物体
 * @param {number} minLength 最小尺寸。
 * @return {!Laya.BoundsOctreeNode} 新的根节点。
 */
Laya.BoundsOctreeNode.prototype.shrinkIfPossible = function(minLength) {};

/**
 * 检查该节点和其子节点是否包含任意物体。
 * @return {boolean} 是否包含任意物体。
 */
Laya.BoundsOctreeNode.prototype.hasAnyObjects = function() {};

/**
 * 获取与指定包围盒相交的物体列表。
 * @param {!Laya.BoundBox} checkBound AABB包围盒。
 * @param {!Array<?>} result 相交物体列表
 * @return {void}
 */
Laya.BoundsOctreeNode.prototype.getCollidingWithBoundBox = function(checkBound, result) {};

/**
 * 获取与指定射线相交的的物理列表。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Array<?>} result 相交物体列表。
 * @param {number=} maxDistance 射线的最大距离。
 * @return {void}
 */
Laya.BoundsOctreeNode.prototype.getCollidingWithRay = function(ray, result, maxDistance) {};

/**
 * 获取与指定视锥相交的的物理列表。
 * @param {!Laya.CameraCullInfo} cameraCullInfo
 * @param {!Laya.RenderContext3D} context
 * @param {!Laya.Shader3D} customShader
 * @param {string} replacementTag
 * @param {boolean} isShadowCasterCull
 * @return {void}
 */
Laya.BoundsOctreeNode.prototype.getCollidingWithFrustum = function(cameraCullInfo, context, customShader, replacementTag, isShadowCasterCull) {};

/**
 * @param {!Laya.ShadowCullInfo} cameraCullInfo
 * @param {!Laya.RenderContext3D} contect
 * @return {void}
 */
Laya.BoundsOctreeNode.prototype.getCollidingWithCastShadowFrustum = function(cameraCullInfo, contect) {};

/**
 * 获取是否与指定包围盒相交。
 * @param {!Laya.BoundBox} checkBound AABB包围盒。
 * @return {boolean} 是否相交。
 */
Laya.BoundsOctreeNode.prototype.isCollidingWithBoundBox = function(checkBound) {};

/**
 * 获取是否与指定射线相交。
 * @param {!Laya.Ray} ray 射线。
 * @param {number=} maxDistance 射线的最大距离。
 * @return {boolean} 是否相交。
 */
Laya.BoundsOctreeNode.prototype.isCollidingWithRay = function(ray, maxDistance) {};

/**
 * 获取包围盒。
 * @return {!Laya.BoundBox}
 */
Laya.BoundsOctreeNode.prototype.getBound = function() {};
/**
 * @record
 * @struct
 */
Laya.IOctreeObject = function() {};
/** @type {!Laya.Bounds} */
Laya.IOctreeObject.prototype.bounds;

/**
 * 获得八叉树节点
 * @return {!Laya.IRenderNodeObject}
 */
Laya.IOctreeObject.prototype._getOctreeNode = function() {};

/**
 * 设置八叉树节点
 * @param {!Laya.IRenderNodeObject} value
 * @return {void}
 */
Laya.IOctreeObject.prototype._setOctreeNode = function(value) {};

/**
 * 获得动态列表中的Index
 * @return {number}
 */
Laya.IOctreeObject.prototype._getIndexInMotionList = function() {};

/**
 * 设置动态列表中的Index
 * @param {number} value
 * @return {void}
 */
Laya.IOctreeObject.prototype._setIndexInMotionList = function(value) {};
/**
 * @constructor
 * @struct
 */
Laya.Lightmap = function() {};
/** @type {!Laya.Texture2D} */
Laya.Lightmap.prototype.lightmapColor;
/** @type {!Laya.Texture2D} */
Laya.Lightmap.prototype.lightmapDirection;

/**
 * @extends {Laya.SingletonList<!Laya.IOctreeObject>}
 * @constructor
 * @struct
 * 创建一个新的 <code>OctreeMotionList</code> 实例。
 */
Laya.OctreeMotionList = function() {};

/** @enum {number} */
Laya.AmbientMode = {
  SolidColor: 1,
  SphericalHarmonics: 1,
};

/**
 * @extends {Laya.Sprite}
 * @implements {Laya.ISubmit|Laya.ICreateResource}
 * @constructor
 * @struct
 * 创建一个 <code>Scene3D</code> 实例。
 */
Laya.Scene3D = function() {};
/** @type {string} */
Laya.Scene3D.HIERARCHY;
/** @type {boolean} */
Laya.Scene3D.octreeCulling;
/** @type {number} */
Laya.Scene3D.octreeInitialSize;
/** @type {!Laya.Vector3} */
Laya.Scene3D.octreeInitialCenter;
/** @type {number} */
Laya.Scene3D.octreeMinNodeSize;
/** @type {number} */
Laya.Scene3D.octreeLooseness;
/** @type {number} */
Laya.Scene3D.REFLECTIONMODE_SKYBOX;
/** @type {number} */
Laya.Scene3D.REFLECTIONMODE_CUSTOM;
/** @type {number} */
Laya.Scene3D.SCENERENDERFLAG_RENDERQPAQUE;
/** @type {number} */
Laya.Scene3D.SCENERENDERFLAG_SKYBOX;
/** @type {number} */
Laya.Scene3D.SCENERENDERFLAG_RENDERTRANSPARENT;

/* TODO: SetAccessor: Laya._updateMark */

/* TODO: GetAccessor: Laya._updateMark */
/** @type {number} */
Laya.Scene3D.prototype.currentCreationLayer;
/** @type {boolean} */
Laya.Scene3D.prototype.enableLight;

/* TODO: GetAccessor: Laya.url */

/* TODO: SetAccessor: Laya.sceneRenderableManager */

/* TODO: GetAccessor: Laya.enableFog */

/* TODO: SetAccessor: Laya.enableFog */

/* TODO: GetAccessor: Laya.fogColor */

/* TODO: SetAccessor: Laya.fogColor */

/* TODO: GetAccessor: Laya.fogStart */

/* TODO: SetAccessor: Laya.fogStart */

/* TODO: GetAccessor: Laya.fogRange */

/* TODO: SetAccessor: Laya.fogRange */

/* TODO: GetAccessor: Laya.ambientMode */

/* TODO: SetAccessor: Laya.ambientMode */

/* TODO: GetAccessor: Laya.ambientColor */

/* TODO: SetAccessor: Laya.ambientColor */

/* TODO: GetAccessor: Laya.ambientSphericalHarmonics */

/* TODO: SetAccessor: Laya.ambientSphericalHarmonics */

/* TODO: GetAccessor: Laya.ambientSphericalHarmonicsIntensity */

/* TODO: SetAccessor: Laya.ambientSphericalHarmonicsIntensity */

/* TODO: GetAccessor: Laya.reflection */

/* TODO: SetAccessor: Laya.reflection */

/* TODO: GetAccessor: Laya.reflectionDecodingFormat */

/* TODO: SetAccessor: Laya.reflectionDecodingFormat */

/* TODO: GetAccessor: Laya.reflectionIntensity */

/* TODO: SetAccessor: Laya.reflectionIntensity */

/* TODO: GetAccessor: Laya.skyRenderer */

/* TODO: GetAccessor: Laya.physicsSimulation */

/* TODO: GetAccessor: Laya.cannonPhysicsSimulation */

/* TODO: GetAccessor: Laya.timer */

/* TODO: SetAccessor: Laya.timer */

/* TODO: GetAccessor: Laya.input */

/* TODO: GetAccessor: Laya.lightmaps */

/* TODO: SetAccessor: Laya.lightmaps */
/** @type {?} */
Laya.Scene3D.prototype._removeScriptInPool;

/* TODO: GetAccessor: Laya.customReflection */

/* TODO: SetAccessor: Laya.customReflection */

/* TODO: GetAccessor: Laya.reflectionMode */

/* TODO: SetAccessor: Laya.reflectionMode */

/**
 * 加载场景,注意:不缓存。
 * @param {string} url 模板地址。
 * @param {!Handler} complete 完成回调。
 * @return {void}
 */
Laya.Scene3D.load = function(url, complete) {};

/**
 * @param {string} url 路径
 * @return {void}
 */
Laya.Scene3D.prototype._setCreateURL = function(url) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Scene3D.prototype._onActive = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Scene3D.prototype._onInActive = function() {};

/**
 * @inheritDoc
 * @override 删除资源
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Scene3D.prototype.destroy = function(destroyChild) {};

/**
 * 渲染入口
 * @return {number}
 */
Laya.Scene3D.prototype.renderSubmit = function() {};

/**
 * 获得渲染类型
 * @return {number}
 */
Laya.Scene3D.prototype.getRenderType = function() {};

/**
 * 删除渲染
 * @return {void}
 */
Laya.Scene3D.prototype.releaseRender = function() {};

/**
 * 设置全局渲染数据
 * @param {string} name 数据对应着色器名字
 * @param {!Laya.ShaderDataType} shaderDataType 渲染数据类型
 * @param {?} value 渲染数据值
 * @return {void}
 */
Laya.Scene3D.prototype.setGlobalShaderValue = function(name, shaderDataType, value) {};

/**
 * @deprecated 设置光照贴图。
 * @param {!Array<!Laya.Texture2D>} value 光照贴图。
 * @return {void}
 */
Laya.Scene3D.prototype.setlightmaps = function(value) {};

/**
 * @deprecated 获取光照贴图浅拷贝列表。
 * @return {!Array<!Laya.Texture2D>} 获取光照贴图浅拷贝列表。
 */
Laya.Scene3D.prototype.getlightmaps = function() {};
/**
 * @record
 * @struct
 */
Laya.IRenderNodeObject = function() {};

/**
 * 获得管理节点
 * @return {!Laya.ISceneRenderManager}
 */
Laya.IRenderNodeObject.prototype.getManagerNode = function() {};
/**
 * @record
 * @struct
 */
Laya.ISceneRenderManager = function() {};

/**
 * 增加一个渲染节点
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.addRender = function(object) {};

/**
 * 减少一个渲染节点
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.removeRender = function(object) {};

/**
 * 添加运动物体。
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.addMotionObject = function(object) {};

/**
 * 移除运动物体。
 * @param {!Laya.IOctreeObject} object
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.removeMotionObject = function(object) {};

/**
 * 释放一个管理节点
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.destroy = function() {};

/**
 * 裁剪之前的更新
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.preFruUpdate = function() {};

/**
 * 直射光裁剪
 * @param {!Laya.ShadowCullInfo} cullInfo
 * @param {!Laya.RenderContext3D} context
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.cullingShadow = function(cullInfo, context) {};

/**
 * 获取与指定视锥相交的的物理列表。
 * @param {!Laya.CameraCullInfo} cameraCullInfo
 * @param {!Laya.RenderContext3D} context
 * @param {!Laya.Shader3D} shader
 * @param {string} replacementTag
 * @param {boolean} isShadowCasterCull
 * @return {void}
 */
Laya.ISceneRenderManager.prototype.getCollidingWithFrustum = function(cameraCullInfo, context, shader, replacementTag, isShadowCasterCull) {};

/**
 * @extends {Laya.SkinnedMeshRenderer}
 * @constructor
 * @struct
 * 创建一个 <code>SkinnedMeshRender</code> 实例。
 * @param {!Laya.RenderableSprite3D} owner
 */
Laya.SimpleSkinnedMeshRenderer = function(owner) {};

/**
 * 删除节点
 * @return {void}
 */
Laya.SimpleSkinnedMeshRenderer.prototype._destroy = function() {};

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>MeshSprite3D</code> 实例。
 * @param {!Laya.Mesh=} mesh 网格,同时会加载网格所用默认材质。
 * @param {string=} name 名字。
 */
Laya.SimpleSkinnedMeshSprite3D = function(mesh, name) {};
/** @type {number} */
Laya.SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE;
/** @type {number} */
Laya.SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS;
/** @type {number} */
Laya.SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE;

/* TODO: GetAccessor: Laya.meshFilter */

/* TODO: GetAccessor: Laya.simpleSkinnedMeshRenderer */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.SimpleSkinnedMeshSprite3D.prototype.destroy = function(destroyChild) {};

/**
 * @extends {Laya.MeshRenderer}
 * @constructor
 * @struct
 * 创建一个 <code>SkinnedMeshRender</code> 实例。
 * @param {!Laya.RenderableSprite3D} owner
 */
Laya.SkinnedMeshRenderer = function(owner) {};

/* TODO: GetAccessor: Laya.localBounds */

/* TODO: SetAccessor: Laya.localBounds */

/* TODO: GetAccessor: Laya.rootBone */

/* TODO: SetAccessor: Laya.rootBone */

/* TODO: GetAccessor: Laya.bones */

/* TODO: GetAccessor: Laya.bounds */

/**
 * @protected
 * @return {void}
 */
Laya.SkinnedMeshRenderer.prototype._computeSkinnedData = function() {};

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * 创建一个 <code>MeshSprite3D</code> 实例。
 * @param {!Laya.Mesh=} mesh 网格,同时会加载网格所用默认材质。
 * @param {string=} name 名字。
 */
Laya.SkinnedMeshSprite3D = function(mesh, name) {};
/** @type {number} */
Laya.SkinnedMeshSprite3D.BONES;
/** @type {number} */
Laya.SkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE;
/** @type {number} */
Laya.SkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS;
/** @type {number} */
Laya.SkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE;

/* TODO: GetAccessor: Laya.meshFilter */

/* TODO: GetAccessor: Laya.skinnedMeshRenderer */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.SkinnedMeshSprite3D.prototype.destroy = function(destroyChild) {};
/**
 * @constructor
 * @struct
 */
Laya.SkinnedMeshSprite3DShaderDeclaration = function() {};
/** @type {!Laya.ShaderDefine} */
Laya.SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE;
/** @type {!Laya.ShaderDefine} */
Laya.SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE;

/**
 * @extends {Laya.Node}
 * @implements {Laya.ICreateResource}
 * @constructor
 * @struct
 * 创建一个 <code>Sprite3D</code> 实例。
 * @param {string=} name 精灵名称。
 * @param {boolean=} isStatic 是否为静态。
 */
Laya.Sprite3D = function(name, isStatic) {};
/** @type {string} */
Laya.Sprite3D.HIERARCHY;

/* TODO: GetAccessor: Laya.id */

/* TODO: GetAccessor: Laya.layer */

/* TODO: SetAccessor: Laya.layer */

/* TODO: GetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.isStatic */

/* TODO: GetAccessor: Laya.transform */

/**
 * 创建精灵的克隆实例。
 * @param {!Laya.Sprite3D} original 原始精灵。
 * @param {!Laya.Node=} parent 父节点。
 * @param {boolean=} worldPositionStays 是否保持自身世界变换。
 * @param {!Laya.Vector3=} position 世界位置,worldPositionStays为false时生效。
 * @param {!Laya.Quaternion=} rotation 世界旋转,worldPositionStays为false时生效。
 * @return {!Laya.Sprite3D} 克隆实例。
 */
Laya.Sprite3D.instantiate = function(original, parent, worldPositionStays, position, rotation) {};

/**
 * 加载网格模板。
 * @param {string} url 模板地址。
 * @param {!Handler} complete 完成回掉。
 * @return {void}
 */
Laya.Sprite3D.load = function(url, complete) {};

/**
 *
 * @param {string} url
 * @return {void}
 */
Laya.Sprite3D.prototype._setCreateURL = function(url) {};

/**
 * @protected
 * @return {void}
 */
Laya.Sprite3D.prototype._onInActiveInScene = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Sprite3D.prototype._onAdded = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Sprite3D.prototype._onRemoved = function() {};

/**
 * 克隆。
 * @return {!Laya.Node} 克隆副本。
 */
Laya.Sprite3D.prototype.clone = function() {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Sprite3D.prototype.destroy = function(destroyChild) {};
/**
 * @constructor
 * @struct
 */
Laya.TextureMode = function() {};
/** @type {number} */
Laya.TextureMode.Stretch;
/** @type {number} */
Laya.TextureMode.Tile;

/** @enum {number} */
Laya.TrailAlignment = {
  View: 1,
  TransformZ: 1,
};

/**
 * @constructor
 * @struct
 * @param {!Laya.TrailSprite3D} owner
 */
Laya.TrailFilter = function(owner) {};
/** @type {number} */
Laya.TrailFilter.CURTIME;
/** @type {number} */
Laya.TrailFilter.LIFETIME;
/** @type {number} */
Laya.TrailFilter.WIDTHCURVE;
/** @type {number} */
Laya.TrailFilter.WIDTHCURVEKEYLENGTH;
/** @type {!Laya.TrailSprite3D} */
Laya.TrailFilter.prototype._owner;
/** @type {!Laya.Vector3} */
Laya.TrailFilter.prototype._lastPosition;
/** @type {number} */
Laya.TrailFilter.prototype._curtime;
/** @type {number} */
Laya.TrailFilter.prototype.alignment;

/* TODO: GetAccessor: Laya.time */

/* TODO: SetAccessor: Laya.time */

/* TODO: GetAccessor: Laya.minVertexDistance */

/* TODO: SetAccessor: Laya.minVertexDistance */

/* TODO: GetAccessor: Laya.widthMultiplier */

/* TODO: SetAccessor: Laya.widthMultiplier */

/* TODO: GetAccessor: Laya.widthCurve */

/* TODO: SetAccessor: Laya.widthCurve */

/* TODO: GetAccessor: Laya.colorGradient */

/* TODO: SetAccessor: Laya.colorGradient */

/* TODO: GetAccessor: Laya.textureMode */

/* TODO: SetAccessor: Laya.textureMode */
/** @type {number} */
Laya.TrailFilter.ALIGNMENT_VIEW;
/** @type {number} */
Laya.TrailFilter.ALIGNMENT_TRANSFORM_Z;

/**
 * @return {void}
 */
Laya.TrailFilter.prototype.clear = function() {};

/**
 * @extends {Laya.GeometryElement}
 * @constructor
 * @struct
 * @param {!Laya.TrailFilter} owner
 */
Laya.TrailGeometry = function(owner) {};
/** @type {number} */
Laya.TrailGeometry.ALIGNMENT_VIEW;
/** @type {number} */
Laya.TrailGeometry.ALIGNMENT_TRANSFORM_Z;
/** @type {?} */
Laya.TrailGeometry.prototype.tmpColor;
/** @type {?} */
Laya.TrailGeometry.prototype._disappearBoundsMode;

/**
 * @inheritDoc
 * @override
 * @return {number}
 */
Laya.TrailGeometry.prototype._getType = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.TrailGeometry.prototype.destroy = function() {};

/**
 * @return {void}
 */
Laya.TrailGeometry.prototype.clear = function() {};

/**
 * @extends {Laya.Material}
 * @constructor
 * @struct
 */
Laya.TrailMaterial = function() {};
/** @type {number} */
Laya.TrailMaterial.RENDERMODE_ALPHABLENDED;
/** @type {number} */
Laya.TrailMaterial.RENDERMODE_ADDTIVE;
/** @type {!Laya.TrailMaterial} */
Laya.TrailMaterial.defaultMaterial;
/** @type {!Laya.ShaderDefine} */
Laya.TrailMaterial.SHADERDEFINE_MAINTEXTURE;
/** @type {!Laya.ShaderDefine} */
Laya.TrailMaterial.SHADERDEFINE_ADDTIVEFOG;
/** @type {number} */
Laya.TrailMaterial.MAINTEXTURE;
/** @type {number} */
Laya.TrailMaterial.TINTCOLOR;
/** @type {number} */
Laya.TrailMaterial.TILINGOFFSET;

/* TODO: SetAccessor: Laya.renderMode */

/* TODO: GetAccessor: Laya.colorR */

/* TODO: SetAccessor: Laya.colorR */

/* TODO: GetAccessor: Laya.colorG */

/* TODO: SetAccessor: Laya.colorG */

/* TODO: GetAccessor: Laya.colorB */

/* TODO: SetAccessor: Laya.colorB */

/* TODO: GetAccessor: Laya.colorA */

/* TODO: SetAccessor: Laya.colorA */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.texture */

/* TODO: SetAccessor: Laya.texture */

/* TODO: GetAccessor: Laya.tilingOffsetX */

/* TODO: SetAccessor: Laya.tilingOffsetX */

/* TODO: GetAccessor: Laya.tilingOffsetY */

/* TODO: SetAccessor: Laya.tilingOffsetY */

/* TODO: GetAccessor: Laya.tilingOffsetZ */

/* TODO: SetAccessor: Laya.tilingOffsetZ */

/* TODO: GetAccessor: Laya.tilingOffsetW */

/* TODO: SetAccessor: Laya.tilingOffsetW */

/* TODO: GetAccessor: Laya.tilingOffset */

/* TODO: SetAccessor: Laya.tilingOffset */

/**
 * \@inheritdoc
 * @override
 * @return {?}
 */
Laya.TrailMaterial.prototype.clone = function() {};

/**
 * @extends {Laya.BaseRender}
 * @constructor
 * @struct
 * @param {!Laya.TrailSprite3D} owner
 */
Laya.TrailRenderer = function(owner) {};
/** @type {!Laya.Matrix4x4} */
Laya.TrailRenderer.prototype._projectionViewWorldMatrix;

/**
 * @extends {Laya.RenderableSprite3D}
 * @constructor
 * @struct
 * @param {string=} name
 */
Laya.TrailSprite3D = function(name) {};

/* TODO: GetAccessor: Laya.trailFilter */

/* TODO: GetAccessor: Laya.trailRenderer */

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.TrailSprite3D.prototype._onActive = function() {};

/**
 * <p>销毁此对象。</p>
 * @override
 * @param {boolean=} destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
 * @return {void}
 */
Laya.TrailSprite3D.prototype.destroy = function(destroyChild) {};

/**
 * @return {void}
 */
Laya.TrailSprite3D.prototype.clear = function() {};
/**
 * @implements {Laya.IVertex}
 * @constructor
 * @struct
 */
Laya.VertexTrail = function() {};
/** @type {number} */
Laya.VertexTrail.TRAIL_POSITION0;
/** @type {number} */
Laya.VertexTrail.TRAIL_OFFSETVECTOR;
/** @type {number} */
Laya.VertexTrail.TRAIL_TIME0;
/** @type {number} */
Laya.VertexTrail.TRAIL_TEXTURECOORDINATE0Y;
/** @type {number} */
Laya.VertexTrail.TRAIL_TEXTURECOORDINATE0X;
/** @type {number} */
Laya.VertexTrail.TRAIL_COLOR;

/* TODO: GetAccessor: Laya.vertexDeclaration1 */

/* TODO: GetAccessor: Laya.vertexDeclaration2 */

/* TODO: GetAccessor: Laya.vertexDeclaration */

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * 创建一个 <code>Transform3D</code> 实例。
 * @param {!Laya.Sprite3D} owner 所属精灵。
 */
Laya.Transform3D = function(owner) {};

/* TODO: GetAccessor: Laya.owner */

/* TODO: GetAccessor: Laya.worldNeedUpdate */

/* TODO: GetAccessor: Laya.localPositionX */

/* TODO: SetAccessor: Laya.localPositionX */

/* TODO: GetAccessor: Laya.localPositionY */

/* TODO: SetAccessor: Laya.localPositionY */

/* TODO: GetAccessor: Laya.localPositionZ */

/* TODO: SetAccessor: Laya.localPositionZ */

/* TODO: GetAccessor: Laya.localPosition */

/* TODO: SetAccessor: Laya.localPosition */

/* TODO: GetAccessor: Laya.localRotationX */

/* TODO: SetAccessor: Laya.localRotationX */

/* TODO: GetAccessor: Laya.localRotationY */

/* TODO: SetAccessor: Laya.localRotationY */

/* TODO: GetAccessor: Laya.localRotationZ */

/* TODO: SetAccessor: Laya.localRotationZ */

/* TODO: GetAccessor: Laya.localRotationW */

/* TODO: SetAccessor: Laya.localRotationW */

/* TODO: GetAccessor: Laya.localRotation */

/* TODO: SetAccessor: Laya.localRotation */

/* TODO: GetAccessor: Laya.localScaleX */

/* TODO: SetAccessor: Laya.localScaleX */

/* TODO: GetAccessor: Laya.localScaleY */

/* TODO: SetAccessor: Laya.localScaleY */

/* TODO: GetAccessor: Laya.localScaleZ */

/* TODO: SetAccessor: Laya.localScaleZ */

/* TODO: GetAccessor: Laya.localScale */

/* TODO: SetAccessor: Laya.localScale */

/* TODO: GetAccessor: Laya.localRotationEulerX */

/* TODO: SetAccessor: Laya.localRotationEulerX */

/* TODO: GetAccessor: Laya.localRotationEulerY */

/* TODO: SetAccessor: Laya.localRotationEulerY */

/* TODO: GetAccessor: Laya.localRotationEulerZ */

/* TODO: SetAccessor: Laya.localRotationEulerZ */

/* TODO: GetAccessor: Laya.localRotationEuler */

/* TODO: SetAccessor: Laya.localRotationEuler */

/* TODO: GetAccessor: Laya.localMatrix */

/* TODO: SetAccessor: Laya.localMatrix */

/* TODO: GetAccessor: Laya.position */

/* TODO: SetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.rotation */

/* TODO: SetAccessor: Laya.rotation */

/* TODO: GetAccessor: Laya.rotationEuler */

/* TODO: SetAccessor: Laya.rotationEuler */

/* TODO: GetAccessor: Laya.worldMatrix */

/* TODO: SetAccessor: Laya.worldMatrix */

/* TODO: GetAccessor: Laya.scale */

/* TODO: SetAccessor: Laya.scale */
/** @type {!Laya.Vector3} */
Laya.Transform3D.tmpVec3;

/**
 * 平移变换。
 * @param {!Laya.Vector3} translation 移动距离。
 * @param {boolean=} isLocal 是否局部空间。
 * @return {void}
 */
Laya.Transform3D.prototype.translate = function(translation, isLocal) {};

/**
 * 旋转变换。
 * @param {!Laya.Vector3} rotation
 * @param {boolean=} isLocal 是否局部空间。
 * @param {boolean=} isRadian 是否弧度制。
 * @return {void}
 */
Laya.Transform3D.prototype.rotate = function(rotation, isLocal, isRadian) {};

/**
 * 获取向前方向。
 * @param {!Laya.Vector3} forward 前方向。
 * @return {void}
 */
Laya.Transform3D.prototype.getForward = function(forward) {};

/**
 * 获取向上方向。
 * @param {!Laya.Vector3} up 上方向。
 * @return {void}
 */
Laya.Transform3D.prototype.getUp = function(up) {};

/**
 * 获取向右方向。
 * @param {!Laya.Vector3} right
 * @return {void}
 */
Laya.Transform3D.prototype.getRight = function(right) {};

/**
 * 观察目标位置。
 * @param {!Laya.Vector3} target 观察目标。
 * @param {!Laya.Vector3} up 向上向量。
 * @param {boolean=} isLocal 是否局部空间。
 * @return {void}
 */
Laya.Transform3D.prototype.lookAt = function(target, up, isLocal) {};

/**
 * 世界缩放。
 * 某种条件下获取该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。
 * @return {!Laya.Vector3} 世界缩放。
 */
Laya.Transform3D.prototype.getWorldLossyScale = function() {};

/**
 * 设置世界缩放。
 * 某种条件下设置该值可能不正确（例如：父节点有缩放，子节点有旋转），缩放会倾斜，无法使用Vector3正确表示,必须使用Matrix3x3矩阵才能正确表示。
 * @param {!Laya.Vector3} value
 * @return {void} 世界缩放。
 */
Laya.Transform3D.prototype.setWorldLossyScale = function(value) {};

/**
 * @param {!Laya.Vector3} value
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.Transform3D.prototype.localToGlobal = function(value, out) {};

/**
 * 转化成局部坐标
 * @param {!Laya.Vector3} pos
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.Transform3D.prototype.globalToLocal = function(pos, out) {};

/**
 * 转化成局部向量
 * @param {!Laya.Vector3} pos
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.Transform3D.prototype.toLocalNormal = function(pos, out) {};

/**
 * @param {!Laya.Vector3} forward
 * @param {!Laya.Vector3} dir
 * @return {void}
 */
Laya.Transform3D.prototype.toDir = function(forward, dir) {};

/**
 * 这是一个 glmatrix中的函数
 * a,b都是规格化以后的向量
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 * 
 * Both vectors are assumed to be unit length.
 * @param {!Laya.Quaternion} out the receiving quaternion.
 * @param {!Laya.Vector3} a the initial vector
 * @param {!Laya.Vector3} b the destination vector
 * @return {boolean} out
 */
Laya.Transform3D.prototype.rotationTo = function(out, a, b) {};

/**
 * @extends {Laya.Keyframe}
 * @constructor
 * @struct
 * 创建一个 <code>Vector3Keyframe</code> 实例。
 */
Laya.Vector3Keyframe = function() {};
/** @type {!Laya.Vector3} */
Laya.Vector3Keyframe.prototype.inTangent;
/** @type {!Laya.Vector3} */
Laya.Vector3Keyframe.prototype.outTangent;
/** @type {!Laya.Vector3} */
Laya.Vector3Keyframe.prototype.value;

/**
 * 克隆。
 * @override
 * @param {?} dest
 * @return {void}
 */
Laya.Vector3Keyframe.prototype.cloneTo = function(dest) {};

/** @enum {number} */
Laya.DepthTextureMode = {
  None: 1,
  Depth: 1,
  DepthNormals: 1,
  MotionVectors: 1,
};

/**
 * @constructor
 * @struct
 */
Laya.DepthPass = function() {};
/** @type {?} */
Laya.DepthPass.SHADOW_BIAS;

/**
 * 渲染深度更新
 * @param {!Laya.Camera} camera
 * @param {!Laya.DepthTextureMode} depthType
 * @param {!Laya.RenderTextureDepthFormat} depthTextureFormat
 * @return {void}
 */
Laya.DepthPass.prototype.update = function(camera, depthType, depthTextureFormat) {};

/**
 * 渲染深度帧缓存
 * @param {!Laya.RenderContext3D} context
 * @param {!Laya.DepthTextureMode} depthType
 * @return {void}
 */
Laya.DepthPass.prototype.render = function(context, depthType) {};
/**
 * @constructor
 * @struct
 */
Laya.CameraCullInfo = function() {};
/** @type {!Laya.Vector3} */
Laya.CameraCullInfo.prototype.position;
/** @type {!Boolean} */
Laya.CameraCullInfo.prototype.useOcclusionCulling;
/** @type {!Laya.BoundFrustum} */
Laya.CameraCullInfo.prototype.boundFrustum;
/** @type {number} */
Laya.CameraCullInfo.prototype.cullingMask;
/**
 * @constructor
 * @struct
 */
Laya.ShadowCullInfo = function() {};
/** @type {!Laya.Vector3} */
Laya.ShadowCullInfo.prototype.position;
/** @type {!Array<!Laya.Plane>} */
Laya.ShadowCullInfo.prototype.cullPlanes;
/** @type {!Laya.BoundSphere} */
Laya.ShadowCullInfo.prototype.cullSphere;
/** @type {number} */
Laya.ShadowCullInfo.prototype.cullPlaneCount;
/** @type {!Laya.Vector3} */
Laya.ShadowCullInfo.prototype.direction;

/**
 * @extends {Laya.Buffer}
 * @constructor
 * @struct
 * 创建一个 <code>IndexBuffer3D,不建议开发者使用并用IndexBuffer3D.create()代替</code> 实例。
 * @param {!Laya.IndexFormat} indexType 索引类型。
 * @param {number} indexCount 索引个数。
 * @param {number=} bufferUsage IndexBuffer3D用途类型。
 * @param {boolean=} canRead 是否可读。
 */
Laya.IndexBuffer3D = function(indexType, indexCount, bufferUsage, canRead) {};

/* TODO: GetAccessor: Laya.indexType */

/* TODO: GetAccessor: Laya.indexTypeByteCount */

/* TODO: GetAccessor: Laya.indexCount */

/* TODO: GetAccessor: Laya.canRead */

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.IndexBuffer3D.prototype._bindForVAO = function() {};

/**
 * @inheritDoc
 * @override
 * @return {boolean}
 */
Laya.IndexBuffer3D.prototype.bind = function() {};

/**
 * 设置数据。
 * @param {?} data 索引数据。
 * @param {number=} bufferOffset 索引缓冲中的偏移。
 * @param {number=} dataStartIndex 索引数据的偏移。
 * @param {number=} dataCount 索引数据的数量。
 * @return {void}
 */
Laya.IndexBuffer3D.prototype.setData = function(data, bufferOffset, dataStartIndex, dataCount) {};

/**
 * 获取索引数据。
 * @return {!Uint16Array} 索引数据。
 */
Laya.IndexBuffer3D.prototype.getData = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.IndexBuffer3D.prototype.destroy = function() {};

/** @enum {number} */
Laya.IndexFormat = {
  UInt8: 1,
  UInt16: 1,
  UInt32: 1,
};
/**
 * @record
 * @struct
 */
Laya.IVertex = function() {};
/** @type {!Laya.VertexDeclaration} */
Laya.IVertex.prototype.vertexDeclaration;
/**
 * @constructor
 * @struct
 */
Laya.SphericalHarmonicsL2 = function() {};

/**
 * 获取颜色通道的系数。
 * @param {number} i 通道索引，范围0到2。
 * @param {number} j 系数索引，范围0到8。
 * @return {number}
 */
Laya.SphericalHarmonicsL2.prototype.getCoefficient = function(i, j) {};

/**
 * 设置颜色通道的系数。
 * @param {number} i 通道索引，范围0到2。
 * @param {number} j 系数索引，范围0到8。
 * @param {number} coefficient
 * @return {void}
 */
Laya.SphericalHarmonicsL2.prototype.setCoefficient = function(i, j, coefficient) {};

/**
 * 设置颜色通道的系数。
 * @param {number} i 通道索引，范围0到2。
 * @param {number} coefficient0 系数0
 * @param {number} coefficient1 系数1
 * @param {number} coefficient2 系数2
 * @param {number} coefficient3 系数3
 * @param {number} coefficient4 系数4
 * @param {number} coefficient5 系数5
 * @param {number} coefficient6 系数6
 * @param {number} coefficient7 系数7
 * @param {number} coefficient8 系数8
 * @return {void}
 */
Laya.SphericalHarmonicsL2.prototype.setCoefficients = function(i, coefficient0, coefficient1, coefficient2, coefficient3, coefficient4, coefficient5, coefficient6, coefficient7, coefficient8) {};

/**
 * 克隆
 * @param {!Laya.SphericalHarmonicsL2} dest
 * @return {void}
 */
Laya.SphericalHarmonicsL2.prototype.cloneTo = function(dest) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>StaticBatchManager</code> 实例。
 */
Laya.StaticBatchManager = function() {};

/**
 * 静态批处理合并，合并后子节点修改Transform属性无效，根节点staticBatchRoot可为null,如果根节点不为null，根节点可移动。
 * 如果renderableSprite3Ds为null，合并staticBatchRoot以及其所有子节点为静态批处理，staticBatchRoot作为静态根节点。
 * 如果renderableSprite3Ds不为null,合并renderableSprite3Ds为静态批处理，staticBatchRoot作为静态根节点。
 * @param {!Laya.Sprite3D} staticBatchRoot 静态批处理根节点。
 * @param {!Array<!Laya.RenderableSprite3D>=} renderableSprite3Ds 静态批处理子节点队列。
 * @return {void}
 */
Laya.StaticBatchManager.combine = function(staticBatchRoot, renderableSprite3Ds) {};
/**
 * @constructor
 * @struct
 */
Laya.VertexMesh = function() {};
/** @type {number} */
Laya.VertexMesh.MESH_POSITION0;
/** @type {number} */
Laya.VertexMesh.MESH_COLOR0;
/** @type {number} */
Laya.VertexMesh.MESH_TEXTURECOORDINATE0;
/** @type {number} */
Laya.VertexMesh.MESH_NORMAL0;
/** @type {number} */
Laya.VertexMesh.MESH_TANGENT0;
/** @type {number} */
Laya.VertexMesh.MESH_BLENDINDICES0;
/** @type {number} */
Laya.VertexMesh.MESH_BLENDWEIGHT0;
/** @type {number} */
Laya.VertexMesh.MESH_TEXTURECOORDINATE1;
/** @type {number} */
Laya.VertexMesh.MESH_WORLDMATRIX_ROW0;
/** @type {number} */
Laya.VertexMesh.MESH_WORLDMATRIX_ROW1;
/** @type {number} */
Laya.VertexMesh.MESH_WORLDMATRIX_ROW2;
/** @type {number} */
Laya.VertexMesh.MESH_WORLDMATRIX_ROW3;
/** @type {number} */
Laya.VertexMesh.MESH_SIMPLEANIMATOR;
/** @type {!Laya.VertexDeclaration} */
Laya.VertexMesh.instanceWorldMatrixDeclaration;
/** @type {!Laya.VertexDeclaration} */
Laya.VertexMesh.instanceSimpleAnimatorDeclaration;
/** @type {number} */
Laya.VertexMesh.MESH_CUSTOME0;
/** @type {number} */
Laya.VertexMesh.MESH_CUSTOME1;
/** @type {number} */
Laya.VertexMesh.MESH_CUSTOME2;
/** @type {number} */
Laya.VertexMesh.MESH_CUSTOME3;

/**
 * 获取顶点声明。
 * @param {string} vertexFlag 顶点声明标记字符,格式为:"POSITION,NORMAL,COLOR,UV,UV1,BLENDWEIGHT,BLENDINDICES,TANGENT"。
 * @param {boolean=} compatible
 * @return {!Laya.VertexDeclaration} 顶点声明。
 */
Laya.VertexMesh.getVertexDeclaration = function(vertexFlag, compatible) {};

/**
 * @extends {Laya.Buffer}
 * @constructor
 * @struct
 * 创建一个 <code>VertexBuffer3D</code> 实例。
 * @param {number} byteLength 字节长度。
 * @param {number} bufferUsage VertexBuffer3D用途类型。
 * @param {boolean=} canRead 是否可读。
 */
Laya.VertexBuffer3D = function(byteLength, bufferUsage, canRead) {};
/** @type {number} */
Laya.VertexBuffer3D.DATATYPE_FLOAT32ARRAY;
/** @type {number} */
Laya.VertexBuffer3D.DATATYPE_UINT8ARRAY;

/* TODO: GetAccessor: Laya.vertexDeclaration */

/* TODO: SetAccessor: Laya.vertexDeclaration */

/* TODO: GetAccessor: Laya.canRead */

/**
 * @inheritDoc
 * @override
 * @return {boolean}
 */
Laya.VertexBuffer3D.prototype.bind = function() {};

/**
 * 剥离内存块存储。
 * @return {void}
 */
Laya.VertexBuffer3D.prototype.orphanStorage = function() {};

/**
 * 设置数据。
 * @param {!ArrayBuffer} buffer
 * @param {number=} bufferOffset 顶点缓冲中的偏移,以字节为单位。
 * @param {number=} dataStartIndex 顶点数据的偏移,以字节为单位。
 * @param {number=} dataCount 顶点数据的长度,以字节为单位。
 * @return {void}
 */
Laya.VertexBuffer3D.prototype.setData = function(buffer, bufferOffset, dataStartIndex, dataCount) {};

/**
 * 获取顶点数据。
 * @return {!Uint8Array} 顶点数据。
 */
Laya.VertexBuffer3D.prototype.getUint8Data = function() {};

/**
 * @ignore
 * @return {!Float32Array}
 */
Laya.VertexBuffer3D.prototype.getFloat32Data = function() {};

/**
 * @ignore
 * @return {void}
 */
Laya.VertexBuffer3D.prototype.markAsUnreadbale = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.VertexBuffer3D.prototype.destroy = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>VertexDeclaration</code> 实例。
 * @param {number} vertexStride 顶点跨度。
 * @param {!Array<!Laya.VertexElement>} vertexElements 顶点元素集合。
 */
Laya.VertexDeclaration = function(vertexStride, vertexElements) {};

/* TODO: GetAccessor: Laya.id */

/* TODO: GetAccessor: Laya.vertexStride */

/* TODO: GetAccessor: Laya.vertexElementCount */

/**
 * 通过索引获取顶点元素。
 * @param {number} index 索引。
 * @return {!Laya.VertexElement}
 */
Laya.VertexDeclaration.prototype.getVertexElementByIndex = function(index) {};

/**
 * @constructor
 * @struct
 * 创建顶点结构分配实例
 * @param {number} offset 顶点偏移
 * @param {string} elementFormat 顶点数据格式名称
 * @param {number} elementUsage 顶点宏标记
 */
Laya.VertexElement = function(offset, elementFormat, elementUsage) {};

/* TODO: GetAccessor: Laya.offset */

/* TODO: GetAccessor: Laya.elementFormat */

/* TODO: GetAccessor: Laya.elementUsage */
/**
 * @constructor
 * @struct
 */
Laya.VertexElementFormat = function() {};
/** @type {string} */
Laya.VertexElementFormat.Single;
/** @type {string} */
Laya.VertexElementFormat.Vector2;
/** @type {string} */
Laya.VertexElementFormat.Vector3;
/** @type {string} */
Laya.VertexElementFormat.Vector4;
/** @type {string} */
Laya.VertexElementFormat.Color;
/** @type {string} */
Laya.VertexElementFormat.Byte4;
/** @type {string} */
Laya.VertexElementFormat.Byte3;
/** @type {string} */
Laya.VertexElementFormat.Byte2;
/** @type {string} */
Laya.VertexElementFormat.ByteOne;
/** @type {string} */
Laya.VertexElementFormat.Short2;
/** @type {string} */
Laya.VertexElementFormat.Short4;
/** @type {string} */
Laya.VertexElementFormat.NormalizedShort2;
/** @type {string} */
Laya.VertexElementFormat.NormalizedShort4;

/**
 * 获取顶点元素格式信息。
 * @param {string} element 元素名称
 * @return {!Array<?>} 返回顶点元素信息
 */
Laya.VertexElementFormat.getElementInfos = function(element) {};
/**
 * @constructor
 * @struct
 */
Laya.Input3D = function() {};

/* TODO: GetAccessor: Laya.multiTouchEnabled */

/* TODO: SetAccessor: Laya.multiTouchEnabled */

/**
 * 获取触摸点个数。
 * @return {number} 触摸点个数。
 */
Laya.Input3D.prototype.touchCount = function() {};

/**
 * 获取触摸点。
 * @param {number} index 索引。
 * @return {!Laya.Touch} 触摸点。
 */
Laya.Input3D.prototype.getTouch = function(index) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>BoundBox</code> 实例。
 * @param {!Laya.Vector3} min 包围盒的最小顶点。
 * @param {!Laya.Vector3} max 包围盒的最大顶点。
 */
Laya.BoundBox = function(min, max) {};
/** @type {!Laya.Vector3} */
Laya.BoundBox.prototype.min;
/** @type {!Laya.Vector3} */
Laya.BoundBox.prototype.max;

/**
 * 获取包围盒的8个角顶点。
 * @param {!Array<!Laya.Vector3>} corners 返回顶点的输出队列。
 * @return {void}
 */
Laya.BoundBox.prototype.getCorners = function(corners) {};

/**
 * 获取中心点。
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.BoundBox.prototype.getCenter = function(out) {};

/**
 * 获取范围。
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.BoundBox.prototype.getExtent = function(out) {};

/**
 * 设置中心点和范围。
 * @param {!Laya.Vector3} center
 * @param {!Laya.Vector3} extent
 * @return {void}
 */
Laya.BoundBox.prototype.setCenterAndExtent = function(center, extent) {};

/**
 * @return {void}
 */
Laya.BoundBox.prototype.toDefault = function() {};

/**
 * 从顶点生成包围盒。
 * @param {!Array<!Laya.Vector3>} points 所需顶点队列。
 * @param {!Laya.BoundBox} out 生成的包围盒。
 * @return {void}
 */
Laya.BoundBox.createfromPoints = function(points, out) {};

/**
 * 合并两个包围盒。
 * @param {!Laya.BoundBox} box1 包围盒1。
 * @param {!Laya.BoundBox} box2 包围盒2。
 * @param {!Laya.BoundBox} out 生成的包围盒。
 * @return {void}
 */
Laya.BoundBox.merge = function(box1, box2, out) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.BoundBox.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.BoundBox.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>BoundFrustum</code> 实例。
 * @param {!Laya.Matrix4x4} matrix 锥截体的描述4x4矩阵。
 */
Laya.BoundFrustum = function(matrix) {};

/* TODO: GetAccessor: Laya.matrix */

/* TODO: SetAccessor: Laya.matrix */

/* TODO: GetAccessor: Laya.near */

/* TODO: GetAccessor: Laya.far */

/* TODO: GetAccessor: Laya.left */

/* TODO: GetAccessor: Laya.right */

/* TODO: GetAccessor: Laya.top */

/* TODO: GetAccessor: Laya.bottom */

/**
 * 根据矩阵获取6个包围平面。
 * @param {!Laya.Matrix4x4} m 描述矩阵。
 * @param {!Laya.Plane} np 近平面。
 * @param {!Laya.Plane} fp 远平面。
 * @param {!Laya.Plane} lp 左平面。
 * @param {!Laya.Plane} rp 右平面。
 * @param {!Laya.Plane} tp 顶平面。
 * @param {!Laya.Plane} bp 底平面。
 * @return {void}
 */
Laya.BoundFrustum.getPlanesFromMatrix = function(m, np, fp, lp, rp, tp, bp) {};

/**
 * 判断是否与其他锥截体相等。
 * @param {!Laya.BoundFrustum} other 锥截体。
 * @return {boolean}
 */
Laya.BoundFrustum.prototype.equalsBoundFrustum = function(other) {};

/**
 * 判断是否与其他对象相等。
 * @param {?} obj 对象。
 * @return {boolean}
 */
Laya.BoundFrustum.prototype.equalsObj = function(obj) {};

/**
 * 获取锥截体的任意一平面。
 * 0:近平面
 * 1:远平面
 * 2:左平面
 * 3:右平面
 * 4:顶平面
 * 5:底平面
 * @param {number} index 索引。
 * @return {!Laya.Plane}
 */
Laya.BoundFrustum.prototype.getPlane = function(index) {};

/**
 * 锥截体三个相交平面的交点。
 * @param {!Laya.Plane} p1 平面1。
 * @param {!Laya.Plane} p2 平面2。
 * @param {!Laya.Plane} p3 平面3。
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.BoundFrustum.get3PlaneInterPoint = function(p1, p2, p3, out) {};

/**
 * 锥截体的8个顶点。
 * @param {!Array<!Laya.Vector3>} corners 返回顶点的输出队列。
 * @return {void}
 */
Laya.BoundFrustum.prototype.getCorners = function(corners) {};

/**
 * 与点的关系。
 * @param {!Laya.Vector3} point 点。
 * @return {number} 包涵:1,相交:2,不相交:0
 */
Laya.BoundFrustum.prototype.containsPoint = function(point) {};

/**
 * 是否与包围盒交叉。
 * @param {!Laya.BoundBox} box 包围盒。
 * @return {boolean} boolean 是否相交
 */
Laya.BoundFrustum.prototype.intersects = function(box) {};

/**
 * 与包围盒的位置关系。
 * @param {!Laya.BoundBox} box 包围盒。
 * @return {number} 包涵:1,相交:2,不相交:0
 */
Laya.BoundFrustum.prototype.containsBoundBox = function(box) {};

/**
 * 与包围球的位置关系
 * @param {!Laya.BoundSphere} sphere 包围球。
 * @return {number} 包涵:1,相交:2,不相交:0
 */
Laya.BoundFrustum.prototype.containsBoundSphere = function(sphere) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>BoundSphere</code> 实例。
 * @param {!Laya.Vector3} center 包围球的中心。
 * @param {number} radius 包围球的半径。
 */
Laya.BoundSphere = function(center, radius) {};
/** @type {?} */
Laya.BoundSphere._tempVector3;
/** @type {!Laya.Vector3} */
Laya.BoundSphere.prototype.center;
/** @type {number} */
Laya.BoundSphere.prototype.radius;

/**
 * @return {void}
 */
Laya.BoundSphere.prototype.toDefault = function() {};

/**
 * 从顶点的子队列生成包围球。
 * @param {!Array<!Laya.Vector3>} points 顶点的队列。
 * @param {number} start 顶点子队列的起始偏移。
 * @param {number} count 顶点子队列的顶点数。
 * @param {!Laya.BoundSphere} out
 * @return {void}
 */
Laya.BoundSphere.createFromSubPoints = function(points, start, count, out) {};

/**
 * 从顶点队列生成包围球。
 * @param {!Array<!Laya.Vector3>} points 顶点的队列。
 * @param {!Laya.BoundSphere} out
 * @return {void}
 */
Laya.BoundSphere.createfromPoints = function(points, out) {};

/**
 * 判断射线是否与碰撞球交叉，并返回交叉距离。
 * @param {!Laya.Ray} ray 射线。
 * @return {number} 距离交叉点的距离，-1表示不交叉。
 */
Laya.BoundSphere.prototype.intersectsRayDistance = function(ray) {};

/**
 * 判断射线是否与碰撞球交叉，并返回交叉点。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Laya.Vector3} outPoint 交叉点。
 * @return {number} 距离交叉点的距离，-1表示不交叉。
 */
Laya.BoundSphere.prototype.intersectsRayPoint = function(ray, outPoint) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.BoundSphere.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.BoundSphere.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Collision</code> 实例。
 */
Laya.CollisionUtils = function() {};

/**
 * 空间中点到平面的距离
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.Vector3} point 点
 * @return {number}
 */
Laya.CollisionUtils.distancePlaneToPoint = function(plane, point) {};

/**
 * 空间中点到包围盒的距离
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.Vector3} point 点
 * @return {number}
 */
Laya.CollisionUtils.distanceBoxToPoint = function(box, point) {};

/**
 * 空间中包围盒到包围盒的距离
 * @param {!Laya.BoundBox} box1 包围盒1
 * @param {!Laya.BoundBox} box2 包围盒2
 * @return {number}
 */
Laya.CollisionUtils.distanceBoxToBox = function(box1, box2) {};

/**
 * 空间中点到包围球的距离
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.Vector3} point 点
 * @return {number}
 */
Laya.CollisionUtils.distanceSphereToPoint = function(sphere, point) {};

/**
 * 空间中包围球到包围球的距离
 * @param {!Laya.BoundSphere} sphere1 包围球1
 * @param {!Laya.BoundSphere} sphere2 包围球2
 * @return {number}
 */
Laya.CollisionUtils.distanceSphereToSphere = function(sphere1, sphere2) {};

/**
 * 空间中射线和三角面是否相交,输出距离
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @param {number} out 点和三角面的距离
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsRayAndTriangleRD = function(ray, vertex1, vertex2, vertex3, out) {};

/**
 * 空间中射线和三角面是否相交,输出相交点
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @param {!Laya.Vector3} out 相交点
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsRayAndTriangleRP = function(ray, vertex1, vertex2, vertex3, out) {};

/**
 * 空间中射线和点是否相交
 * @param {!Laya.Ray} ray
 * @param {!Laya.Vector3} point
 * @return {boolean}
 */
Laya.CollisionUtils.intersectsRayAndPoint = function(ray, point) {};

/**
 * 空间中射线和射线是否相交
 * @param {!Laya.Ray} ray1 射线1
 * @param {!Laya.Ray} ray2 射线2
 * @param {!Laya.Vector3} out 相交点
 * @return {boolean}
 */
Laya.CollisionUtils.intersectsRayAndRay = function(ray1, ray2, out) {};

/**
 * 空间中平面和三角面是否相交
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @return {number} 返回空间位置关系
 */
Laya.CollisionUtils.intersectsPlaneAndTriangle = function(plane, vertex1, vertex2, vertex3) {};

/**
 * 射线和平面是否相交,并返回相交距离。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Laya.Plane} plane 平面。
 * @return {number} 相交距离,-1为不相交。
 */
Laya.CollisionUtils.intersectsRayAndPlaneRD = function(ray, plane) {};

/**
 * 空间中射线和平面是否相交，并返回相交点。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Laya.Plane} plane 平面。
 * @param {!Laya.Vector3} out 相交点。
 * @return {boolean}
 */
Laya.CollisionUtils.intersectsRayAndPlaneRP = function(ray, plane, out) {};

/**
 * 空间中射线和包围盒是否相交
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.BoundBox} box 包围盒
 * @return {number}
 */
Laya.CollisionUtils.intersectsRayAndBoxRD = function(ray, box) {};

/**
 * 空间中射线和包围盒是否相交
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.Vector3} out 相交点
 * @return {number}
 */
Laya.CollisionUtils.intersectsRayAndBoxRP = function(ray, box, out) {};

/**
 * 空间中射线和包围球是否相交
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.BoundSphere} sphere 包围球
 * @return {number} 相交距离,-1表示不相交
 */
Laya.CollisionUtils.intersectsRayAndSphereRD = function(ray, sphere) {};

/**
 * 空间中射线和包围球是否相交
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.Vector3} out 相交点
 * @return {number} 相交距离,-1表示不相交
 */
Laya.CollisionUtils.intersectsRayAndSphereRP = function(ray, sphere, out) {};

/**
 * 空间中包围球和三角面是否相交
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @return {boolean} 返回是否相交
 */
Laya.CollisionUtils.intersectsSphereAndTriangle = function(sphere, vertex1, vertex2, vertex3) {};

/**
 * 空间中点和平面是否相交
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.Vector3} point 点
 * @return {number} 碰撞状态
 */
Laya.CollisionUtils.intersectsPlaneAndPoint = function(plane, point) {};

/**
 * 空间中平面和平面是否相交
 * @param {!Laya.Plane} plane1 平面1
 * @param {!Laya.Plane} plane2 平面2
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsPlaneAndPlane = function(plane1, plane2) {};

/**
 * 空间中平面和平面是否相交
 * @param {!Laya.Plane} plane1 平面1
 * @param {!Laya.Plane} plane2 平面2
 * @param {!Laya.Ray} line 相交线
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsPlaneAndPlaneRL = function(plane1, plane2, line) {};

/**
 * 空间中平面和包围盒是否相交
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.BoundBox} box 包围盒
 * @return {number} 碰撞状态
 */
Laya.CollisionUtils.intersectsPlaneAndBox = function(plane, box) {};

/**
 * 空间中平面和包围球是否相交
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.BoundSphere} sphere 包围球
 * @return {number} 碰撞状态
 */
Laya.CollisionUtils.intersectsPlaneAndSphere = function(plane, sphere) {};

/**
 * 空间中包围盒和包围盒是否相交
 * @param {!Laya.BoundBox} box1 包围盒1
 * @param {!Laya.BoundBox} box2 包围盒2
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsBoxAndBox = function(box1, box2) {};

/**
 * 空间中包围盒和包围球是否相交
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.BoundSphere} sphere 包围球
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsBoxAndSphere = function(box, sphere) {};

/**
 * 空间中包围球和包围球是否相交
 * @param {!Laya.BoundSphere} sphere1 包围球1
 * @param {!Laya.BoundSphere} sphere2 包围球2
 * @return {boolean} 是否相交
 */
Laya.CollisionUtils.intersectsSphereAndSphere = function(sphere1, sphere2) {};

/**
 * 空间中包围盒是否包含另一个点
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.Vector3} point 点
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.boxContainsPoint = function(box, point) {};

/**
 * 空间中包围盒是否包含另一个包围盒
 * @param {!Laya.BoundBox} box1 包围盒1
 * @param {!Laya.BoundBox} box2 包围盒2
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.boxContainsBox = function(box1, box2) {};

/**
 * 空间中包围盒是否包含另一个包围球
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.BoundSphere} sphere 包围球
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.boxContainsSphere = function(box, sphere) {};

/**
 * 空间中包围球是否包含另一个点
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.Vector3} point 点
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.sphereContainsPoint = function(sphere, point) {};

/**
 * 空间中包围球是否包含另一个三角面
 * @param {!Laya.BoundSphere} sphere
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @return {number} 返回空间位置关系
 */
Laya.CollisionUtils.sphereContainsTriangle = function(sphere, vertex1, vertex2, vertex3) {};

/**
 * 空间中包围球是否包含另一包围盒
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.BoundBox} box 包围盒
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.sphereContainsBox = function(sphere, box) {};

/**
 * 空间中包围球是否包含另一包围球
 * @param {!Laya.BoundSphere} sphere1 包围球
 * @param {!Laya.BoundSphere} sphere2 包围球
 * @return {number} 位置关系:0 不想交,1 包含, 2 相交
 */
Laya.CollisionUtils.sphereContainsSphere = function(sphere1, sphere2) {};

/**
 * 空间中点与三角面的最近点
 * @param {!Laya.Vector3} point 点
 * @param {!Laya.Vector3} vertex1 三角面顶点1
 * @param {!Laya.Vector3} vertex2 三角面顶点2
 * @param {!Laya.Vector3} vertex3 三角面顶点3
 * @param {!Laya.Vector3} out 最近点
 * @return {void}
 */
Laya.CollisionUtils.closestPointPointTriangle = function(point, vertex1, vertex2, vertex3, out) {};

/**
 * 空间中平面与一点的最近点
 * @param {!Laya.Plane} plane 平面
 * @param {!Laya.Vector3} point 点
 * @param {!Laya.Vector3} out 最近点
 * @return {void}
 */
Laya.CollisionUtils.closestPointPlanePoint = function(plane, point, out) {};

/**
 * 空间中包围盒与一点的最近点
 * @param {!Laya.BoundBox} box 包围盒
 * @param {!Laya.Vector3} point 点
 * @param {!Laya.Vector3} out 最近点
 * @return {void}
 */
Laya.CollisionUtils.closestPointBoxPoint = function(box, point, out) {};

/**
 * 空间中包围球与一点的最近点
 * @param {!Laya.BoundSphere} sphere 包围球
 * @param {!Laya.Vector3} point 点
 * @param {!Laya.Vector3} out 最近点
 * @return {void}
 */
Laya.CollisionUtils.closestPointSpherePoint = function(sphere, point, out) {};

/**
 * 空间中包围球与包围球的最近点
 * @param {!Laya.BoundSphere} sphere1 包围球1
 * @param {!Laya.BoundSphere} sphere2 包围球2
 * @param {!Laya.Vector3} out 最近点
 * @return {void}
 */
Laya.CollisionUtils.closestPointSphereSphere = function(sphere1, sphere2, out) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Color</code> 实例。
 * @param {number=} r 颜色的red分量。
 * @param {number=} g 颜色的green分量。
 * @param {number=} b 颜色的blue分量。
 * @param {number=} a 颜色的alpha分量。
 */
Laya.Color = function(r, g, b, a) {};
/** @type {!Laya.Color} */
Laya.Color.RED;
/** @type {!Laya.Color} */
Laya.Color.GREEN;
/** @type {!Laya.Color} */
Laya.Color.BLUE;
/** @type {!Laya.Color} */
Laya.Color.CYAN;
/** @type {!Laya.Color} */
Laya.Color.YELLOW;
/** @type {!Laya.Color} */
Laya.Color.MAGENTA;
/** @type {!Laya.Color} */
Laya.Color.GRAY;
/** @type {!Laya.Color} */
Laya.Color.WHITE;
/** @type {!Laya.Color} */
Laya.Color.BLACK;
/** @type {number} */
Laya.Color.prototype.r;
/** @type {number} */
Laya.Color.prototype.g;
/** @type {number} */
Laya.Color.prototype.b;
/** @type {number} */
Laya.Color.prototype.a;

/**
 * Gamma空间值转换到线性空间。
 * @param {number} value gamma空间值。
 * @return {number}
 */
Laya.Color.gammaToLinearSpace = function(value) {};

/**
 * 线性空间值转换到Gamma空间。
 * @param {number} value 线性空间值。
 * @return {number}
 */
Laya.Color.linearToGammaSpace = function(value) {};

/**
 * Gamma空间转换到线性空间。
 * @param {!Laya.Color} out
 * @return {void}
 */
Laya.Color.prototype.toLinear = function(out) {};

/**
 * 线性空间转换到Gamma空间。
 * @param {!Laya.Color} out
 * @return {void}
 */
Laya.Color.prototype.toGamma = function(out) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Color.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Color.prototype.clone = function() {};

/**
 * @return {void}
 */
Laya.Color.prototype.forNativeElement = function() {};
/**
 * @constructor
 * @struct
 */
Laya.ContainmentType = function() {};
/** @type {number} */
Laya.ContainmentType.Disjoint;
/** @type {number} */
Laya.ContainmentType.Contains;
/** @type {number} */
Laya.ContainmentType.Intersects;

/**
 * @constructor
 * @struct
 * 创建一个 <code>MathUtils</code> 实例。
 */
Laya.MathUtils3D = function() {};
/** @type {number} */
Laya.MathUtils3D.zeroTolerance;
/** @type {number} */
Laya.MathUtils3D.MaxValue;
/** @type {number} */
Laya.MathUtils3D.MinValue;
/** @type {number} */
Laya.MathUtils3D.Deg2Rad;

/**
 * 是否在容差的范围内近似于0
 * @param {number} v
 * @return {boolean} 是否近似于0
 */
Laya.MathUtils3D.isZero = function(v) {};

/**
 * 两个值是否在容差的范围内近似相等Sqr Magnitude
 * @param {number} n1
 * @param {number} n2
 * @return {boolean} 是否近似于0
 */
Laya.MathUtils3D.nearEqual = function(n1, n2) {};

/**
 * @param {number} value
 * @return {number}
 */
Laya.MathUtils3D.fastInvSqrt = function(value) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Matrix3x3</code> 实例。
 */
Laya.Matrix3x3 = function() {};
/** @type {!Laya.Matrix3x3} */
Laya.Matrix3x3.DEFAULT;
/** @type {!Float32Array} */
Laya.Matrix3x3.prototype.elements;

/**
 * 通过四元数创建旋转矩阵。
 * @param {!Laya.Quaternion} rotation 旋转四元数。
 * @param {!Laya.Matrix3x3} out 旋转矩阵。
 * @return {void}
 */
Laya.Matrix3x3.createRotationQuaternion = function(rotation, out) {};

/**
 * 根据指定平移生成3x3矩阵
 * @param {!Laya.Vector2} trans
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.createFromTranslation = function(trans, out) {};

/**
 * 根据指定旋转生成3x3矩阵
 * @param {number} rad 旋转值
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.createFromRotation = function(rad, out) {};

/**
 * 根据制定缩放生成3x3矩阵
 * @param {!Laya.Vector3} scale 缩放值
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.createFromScaling = function(scale, out) {};

/**
 * 从4x4矩阵转换为一个3x3的矩阵（原则为upper-left,忽略第四行四列）
 * @param {!Laya.Matrix4x4} sou 4x4源矩阵
 * @param {!Laya.Matrix3x3} out 3x3输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.createFromMatrix4x4 = function(sou, out) {};

/**
 * 两个3x3矩阵的相乘
 * @param {!Laya.Matrix3x3} left 左矩阵
 * @param {!Laya.Matrix3x3} right 右矩阵
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.multiply = function(left, right, out) {};

/**
 * 计算3x3矩阵的行列式
 * @return {number} 矩阵的行列式
 */
Laya.Matrix3x3.prototype.determinant = function() {};

/**
 * 通过一个二维向量转换3x3矩阵
 * @param {!Laya.Vector2} trans
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.translate = function(trans, out) {};

/**
 * 根据指定角度旋转3x3矩阵
 * @param {number} rad 旋转角度
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.rotate = function(rad, out) {};

/**
 * 根据制定缩放3x3矩阵
 * @param {!Laya.Vector2} scale 缩放值
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.scale = function(scale, out) {};

/**
 * 计算3x3矩阵的逆矩阵
 * @param {!Laya.Matrix3x3} out 输出的逆矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.invert = function(out) {};

/**
 * 计算3x3矩阵的转置矩阵
 * @param {!Laya.Matrix3x3} out 输出矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.transpose = function(out) {};

/**
 * 设置已有的矩阵为单位矩阵
 * @return {void}
 */
Laya.Matrix3x3.prototype.identity = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Matrix3x3.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Matrix3x3.prototype.clone = function() {};

/**
 * 计算观察3x3矩阵
 * @param {!Laya.Vector3} eye 观察者位置
 * @param {!Laya.Vector3} target 目标位置
 * @param {!Laya.Vector3} up 上向量
 * @param {!Laya.Matrix3x3} out 输出3x3矩阵
 * @return {void}
 */
Laya.Matrix3x3.lookAt = function(eye, target, up, out) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Matrix4x4</code> 实例。
 * @param {number=} m11
 * @param {number=} m12
 * @param {number=} m13
 * @param {number=} m14
 * @param {number=} m21
 * @param {number=} m22
 * @param {number=} m23
 * @param {number=} m24
 * @param {number=} m31
 * @param {number=} m32
 * @param {number=} m33
 * @param {number=} m34
 * @param {number=} m41
 * @param {number=} m42
 * @param {number=} m43
 * @param {number=} m44
 * @param {!Float32Array=} elements
 */
Laya.Matrix4x4 = function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, elements) {};
/** @type {!Laya.Matrix4x4} */
Laya.Matrix4x4.DEFAULT;
/** @type {!Laya.Matrix4x4} */
Laya.Matrix4x4.ZERO;
/** @type {!Float32Array} */
Laya.Matrix4x4.prototype.elements;

/**
 * 绕X轴旋转
 * @param {number} rad 旋转角度
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createRotationX = function(rad, out) {};

/**
 * 绕Y轴旋转
 * @param {number} rad 旋转角度
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createRotationY = function(rad, out) {};

/**
 * 绕Z轴旋转
 * @param {number} rad 旋转角度
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createRotationZ = function(rad, out) {};

/**
 * 通过yaw pitch roll旋转创建旋转矩阵。
 * @param {number} yaw
 * @param {number} pitch
 * @param {number} roll
 * @param {!Laya.Matrix4x4} result
 * @return {void}
 */
Laya.Matrix4x4.createRotationYawPitchRoll = function(yaw, pitch, roll, result) {};

/**
 * 通过旋转轴axis和旋转角度angle计算旋转矩阵。
 * @param {!Laya.Vector3} axis 旋转轴,假定已经归一化。
 * @param {number} angle 旋转角度。
 * @param {!Laya.Matrix4x4} result 结果矩阵。
 * @return {void}
 */
Laya.Matrix4x4.createRotationAxis = function(axis, angle, result) {};

/**
 * @param {!Laya.Quaternion} rotation
 * @return {void}
 */
Laya.Matrix4x4.prototype.setRotation = function(rotation) {};

/**
 * @param {!Laya.Vector3} position
 * @return {void}
 */
Laya.Matrix4x4.prototype.setPosition = function(position) {};

/**
 * 通过四元数创建旋转矩阵。
 * @param {!Laya.Quaternion} rotation 旋转四元数。
 * @param {!Laya.Matrix4x4} result 输出旋转矩阵
 * @return {void}
 */
Laya.Matrix4x4.createRotationQuaternion = function(rotation, result) {};

/**
 * 根据平移计算输出矩阵
 * @param {!Laya.Vector3} trans 平移向量
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createTranslate = function(trans, out) {};

/**
 * 根据缩放计算输出矩阵
 * @param {!Laya.Vector3} scale 缩放值
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createScaling = function(scale, out) {};

/**
 * 计算两个矩阵的乘法
 * @param {!Laya.Matrix4x4} left left矩阵
 * @param {!Laya.Matrix4x4} right right矩阵
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.multiply = function(left, right, out) {};

/**
 * @param {!Laya.Matrix4x4} left
 * @param {!Laya.Matrix4x4} right
 * @param {!Laya.Matrix4x4} out
 * @return {void}
 */
Laya.Matrix4x4.multiplyForNative = function(left, right, out) {};

/**
 * 从四元数计算旋转矩阵
 * @param {!Laya.Quaternion} rotation 四元数
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createFromQuaternion = function(rotation, out) {};

/**
 * 计算仿射矩阵
 * @param {!Laya.Vector3} trans 平移
 * @param {!Laya.Quaternion} rot 旋转
 * @param {!Laya.Vector3} scale 缩放
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createAffineTransformation = function(trans, rot, scale, out) {};

/**
 * 计算观察矩阵
 * @param {!Laya.Vector3} eye 视点位置
 * @param {!Laya.Vector3} target 视点目标
 * @param {!Laya.Vector3} up 向上向量
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.createLookAt = function(eye, target, up, out) {};

/**
 * 通过FOV创建透视投影矩阵。
 * @param {number} fov 视角。
 * @param {number} aspect 横纵比。
 * @param {number} znear
 * @param {number} zfar
 * @param {!Laya.Matrix4x4} out 输出矩阵。
 * @return {void}
 */
Laya.Matrix4x4.createPerspective = function(fov, aspect, znear, zfar, out) {};

/**
 * 创建透视投影矩阵。
 * @param {number} left 视椎左边界。
 * @param {number} right 视椎右边界。
 * @param {number} bottom 视椎底边界。
 * @param {number} top 视椎顶边界。
 * @param {number} znear 视椎近边界。
 * @param {number} zfar 视椎远边界。
 * @param {!Laya.Matrix4x4} out 输出矩阵。
 * @return {void}
 */
Laya.Matrix4x4.createPerspectiveOffCenter = function(left, right, bottom, top, znear, zfar, out) {};

/**
 * 计算正交投影矩阵。
 * @param {number} left 视椎左边界。
 * @param {number} right 视椎右边界。
 * @param {number} bottom 视椎底边界。
 * @param {number} top 视椎顶边界。
 * @param {number} znear
 * @param {number} zfar
 * @param {!Laya.Matrix4x4} out 输出矩阵。
 * @return {void}
 */
Laya.Matrix4x4.createOrthoOffCenter = function(left, right, bottom, top, znear, zfar, out) {};

/**
 * @param {number} row
 * @param {number} column
 * @return {number}
 */
Laya.Matrix4x4.prototype.getElementByRowColumn = function(row, column) {};

/**
 * @param {number} row
 * @param {number} column
 * @param {number} value
 * @return {void}
 */
Laya.Matrix4x4.prototype.setElementByRowColumn = function(row, column, value) {};

/**
 * 判断两个4x4矩阵的值是否相等。
 * @param {!Laya.Matrix4x4} other 4x4矩阵
 * @return {boolean}
 */
Laya.Matrix4x4.prototype.equalsOtherMatrix = function(other) {};

/**
 * 分解矩阵为平移向量、旋转四元数、缩放向量。
 * @param {!Laya.Vector3} translation 平移向量。
 * @param {!Laya.Quaternion} rotation 旋转四元数。
 * @param {!Laya.Vector3} scale 缩放向量。
 * @return {boolean} 是否分解成功。
 */
Laya.Matrix4x4.prototype.decomposeTransRotScale = function(translation, rotation, scale) {};

/**
 * 分解矩阵为平移向量、旋转矩阵、缩放向量。
 * @param {!Laya.Vector3} translation 平移向量。
 * @param {!Laya.Matrix4x4} rotationMatrix 旋转矩阵。
 * @param {!Laya.Vector3} scale 缩放向量。
 * @return {boolean} 是否分解成功。
 */
Laya.Matrix4x4.prototype.decomposeTransRotMatScale = function(translation, rotationMatrix, scale) {};

/**
 * 分解旋转矩阵的旋转为YawPitchRoll欧拉角。
 * @param {!Laya.Vector3} yawPitchRoll
 * @return {void}
 */
Laya.Matrix4x4.prototype.decomposeYawPitchRoll = function(yawPitchRoll) {};

/**
 * 归一化矩阵
 * @return {void}
 */
Laya.Matrix4x4.prototype.normalize = function() {};

/**
 * 计算矩阵的转置矩阵
 * @return {!Laya.Matrix4x4}
 */
Laya.Matrix4x4.prototype.transpose = function() {};

/**
 * 计算一个矩阵的逆矩阵
 * @param {!Laya.Matrix4x4} out 输出矩阵
 * @return {void}
 */
Laya.Matrix4x4.prototype.invert = function(out) {};

/**
 * 计算BlillBoard矩阵
 * @param {!Laya.Vector3} objectPosition 物体位置
 * @param {!Laya.Vector3} cameraPosition 相机位置
 * @param {!Laya.Vector3} cameraUp 相机上向量
 * @param {!Laya.Vector3} cameraForward 相机前向量
 * @param {!Laya.Matrix4x4} mat 变换矩阵
 * @return {void}
 */
Laya.Matrix4x4.billboard = function(objectPosition, cameraPosition, cameraUp, cameraForward, mat) {};

/**
 * 设置矩阵为单位矩阵
 * @return {void}
 */
Laya.Matrix4x4.prototype.identity = function() {};

/**
 * 判断是否是单位矩阵
 * @return {boolean}
 */
Laya.Matrix4x4.prototype.isIdentity = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Matrix4x4.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Matrix4x4.prototype.clone = function() {};

/**
 * @param {!Laya.Vector3} v3
 * @param {!Laya.Matrix4x4} out
 * @return {void}
 */
Laya.Matrix4x4.translation = function(v3, out) {};

/**
 * 获取平移向量。
 * @param {!Laya.Vector3} out 平移向量。
 * @return {void}
 */
Laya.Matrix4x4.prototype.getTranslationVector = function(out) {};

/**
 * 设置平移向量。
 * @param {!Laya.Vector3} translate 平移向量。
 * @return {void}
 */
Laya.Matrix4x4.prototype.setTranslationVector = function(translate) {};

/**
 * 获取前向量。
 * @param {!Laya.Vector3} out 前向量。
 * @return {void}
 */
Laya.Matrix4x4.prototype.getForward = function(out) {};

/**
 * 设置前向量。
 * @param {!Laya.Vector3} forward 前向量。
 * @return {void}
 */
Laya.Matrix4x4.prototype.setForward = function(forward) {};

/**
 * 判断此矩阵是否是反向矩阵
 * @return {boolean}
 */
Laya.Matrix4x4.prototype.getInvertFront = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Quaternion</code> 实例。
 * @param {number=} x 四元数的x值
 * @param {number=} y 四元数的y值
 * @param {number=} z 四元数的z值
 * @param {number=} w 四元数的w值
 * @param {!Float32Array=} nativeElements
 */
Laya.ConchQuaternion = function(x, y, z, w, nativeElements) {};
/** @type {!Laya.ConchQuaternion} */
Laya.ConchQuaternion.DEFAULT;
/** @type {!Laya.ConchQuaternion} */
Laya.ConchQuaternion.NAN;
/** @type {?} */
Laya.ConchQuaternion.arcTanAngle;
/** @type {?} */
Laya.ConchQuaternion.angleTo;
/** @type {!Float32Array} */
Laya.ConchQuaternion.prototype.elements;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.z */

/* TODO: SetAccessor: Laya.z */

/* TODO: GetAccessor: Laya.w */

/* TODO: SetAccessor: Laya.w */

/**
 * 从欧拉角生成四元数（顺序为Yaw、Pitch、Roll）
 * @param {number} yaw yaw值
 * @param {number} pitch pitch值
 * @param {number} roll roll值
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.createFromYawPitchRoll = function(yaw, pitch, roll, out) {};

/**
 * 计算两个四元数相乘
 * @param {!Laya.ConchQuaternion} left left四元数
 * @param {!Laya.ConchQuaternion} right right四元数
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.multiply = function(left, right, out) {};

/**
 * 从指定的轴和角度计算四元数
 * @param {!Laya.ConchVector3} axis 轴
 * @param {number} rad 角度
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.createFromAxisAngle = function(axis, rad, out) {};

/**
 * 根据3x3矩阵计算四元数
 * @param {!Laya.Matrix3x3} sou 源矩阵
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.createFromMatrix3x3 = function(sou, out) {};

/**
 * 从旋转矩阵计算四元数
 * @param {!Laya.Matrix4x4} mat 旋转矩阵
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.createFromMatrix4x4 = function(mat, out) {};

/**
 * 球面插值
 * @param {!Laya.ConchQuaternion} left left四元数
 * @param {!Laya.ConchQuaternion} right right四元数
 * @param {number} t
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {!Float32Array} 输出Float32Array
 */
Laya.ConchQuaternion.slerp = function(left, right, t, out) {};

/**
 * 计算两个四元数的线性插值
 * @param {!Laya.ConchQuaternion} left left四元数
 * @param {!Laya.ConchQuaternion} right right四元数b
 * @param {number} amount
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.lerp = function(left, right, amount, out) {};

/**
 * 计算两个四元数的和
 * @param {?} left left四元数
 * @param {!Laya.ConchQuaternion} right right 四元数
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.add = function(left, right, out) {};

/**
 * 计算两个四元数的点积
 * @param {?} left left四元数
 * @param {!Laya.ConchQuaternion} right right四元数
 * @return {number} 点积
 */
Laya.ConchQuaternion.dot = function(left, right) {};

/**
 * 根据缩放值缩放四元数
 * @param {number} scaling
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.scaling = function(scaling, out) {};

/**
 * 归一化四元数
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.normalize = function(out) {};

/**
 * 计算四元数的长度
 * @return {number} 长度
 */
Laya.ConchQuaternion.prototype.length = function() {};

/**
 * 根据绕X轴的角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.rotateX = function(rad, out) {};

/**
 * 根据绕Y轴的制定角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.rotateY = function(rad, out) {};

/**
 * 根据绕Z轴的制定角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.rotateZ = function(rad, out) {};

/**
 * 分解四元数到欧拉角（顺序为Yaw、Pitch、Roll），参考自http://xboxforums.create.msdn.com/forums/p/4574/23988.aspx#23988,问题绕X轴翻转超过±90度时有，会产生瞬间反转
 * @param {!Laya.ConchVector3} out 欧拉角值
 * @return {void}
 */
Laya.ConchQuaternion.prototype.getYawPitchRoll = function(out) {};

/**
 * 求四元数的逆
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.invert = function(out) {};

/**
 * 设置四元数为单位算数
 * @return {void}
 */
Laya.ConchQuaternion.prototype.identity = function() {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.ConchQuaternion.prototype.fromArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ConchQuaternion.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ConchQuaternion.prototype.clone = function() {};

/**
 * @param {!Laya.ConchQuaternion} b
 * @return {boolean}
 */
Laya.ConchQuaternion.prototype.equals = function(b) {};

/**
 * 计算旋转观察四元数
 * @param {!Laya.ConchVector3} forward 方向
 * @param {!Laya.ConchVector3} up 上向量
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.rotationLookAt = function(forward, up, out) {};

/**
 * 计算观察四元数
 * @param {?} eye 观察者位置
 * @param {?} target 目标位置
 * @param {?} up 上向量
 * @param {!Laya.ConchQuaternion} out 输出四元数
 * @return {void}
 */
Laya.ConchQuaternion.lookAt = function(eye, target, up, out) {};

/**
 * 计算长度的平方。
 * @return {number} 长度的平方。
 */
Laya.ConchQuaternion.prototype.lengthSquared = function() {};

/**
 * 计算四元数的逆四元数。
 * @param {!Laya.ConchQuaternion} value 四元数。
 * @param {!Laya.ConchQuaternion} out 逆四元数。
 * @return {void}
 */
Laya.ConchQuaternion.invert = function(value, out) {};

/**
 * 通过一个3x3矩阵创建一个四元数
 * @param {!Laya.Matrix3x3} matrix3x3 3x3矩阵
 * @param {!Laya.ConchQuaternion} out 四元数
 * @return {void}
 */
Laya.ConchQuaternion.rotationMatrix = function(matrix3x3, out) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Vector3</code> 实例。
 * @param {number=} x X轴坐标。
 * @param {number=} y Y轴坐标。
 * @param {number=} z Z轴坐标。
 * @param {!Float32Array=} nativeElements
 */
Laya.ConchVector3 = function(x, y, z, nativeElements) {};
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.ZERO;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.ONE;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.NegativeUnitX;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.UnitX;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.UnitY;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.UnitZ;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.ForwardRH;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.ForwardLH;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.Up;
/** @type {!Laya.ConchVector3} */
Laya.ConchVector3.NAN;
/** @type {!Float32Array} */
Laya.ConchVector3.prototype.elements;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.z */

/* TODO: SetAccessor: Laya.z */

/**
 * 两个三维向量距离的平方。
 * @param {!Laya.ConchVector3} value1 向量1。
 * @param {!Laya.ConchVector3} value2 向量2。
 * @return {number} 距离的平方。
 */
Laya.ConchVector3.distanceSquared = function(value1, value2) {};

/**
 * 两个三维向量距离。
 * @param {!Laya.ConchVector3} value1 向量1。
 * @param {!Laya.ConchVector3} value2 向量2。
 * @return {number} 距离。
 */
Laya.ConchVector3.distance = function(value1, value2) {};

/**
 * 分别取两个三维向量x、y、z的最小值计算新的三维向量。
 * @param {!Laya.ConchVector3} a 。
 * @param {!Laya.ConchVector3} b 。
 * @param {!Laya.ConchVector3} out 。
 * @return {void}
 */
Laya.ConchVector3.min = function(a, b, out) {};

/**
 * 分别取两个三维向量x、y、z的最大值计算新的三维向量。
 * @param {!Laya.ConchVector3} a a三维向量。
 * @param {!Laya.ConchVector3} b b三维向量。
 * @param {!Laya.ConchVector3} out 结果三维向量。
 * @return {void}
 */
Laya.ConchVector3.max = function(a, b, out) {};

/**
 * 根据四元数旋转三维向量。
 * @param {!Laya.ConchVector3} source 源三维向量。
 * @param {!Laya.ConchQuaternion} rotation 旋转四元数。
 * @param {!Laya.ConchVector3} out 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.transformQuat = function(source, rotation, out) {};

/**
 * 计算标量长度。
 * @param {!Laya.ConchVector3} a 源三维向量。
 * @return {number} 标量长度。
 */
Laya.ConchVector3.scalarLength = function(a) {};

/**
 * 计算标量长度的平方。
 * @param {!Laya.ConchVector3} a 源三维向量。
 * @return {number} 标量长度的平方。
 */
Laya.ConchVector3.scalarLengthSquared = function(a) {};

/**
 * 归一化三维向量。
 * @param {!Laya.ConchVector3} s 源三维向量。
 * @param {!Laya.ConchVector3} out 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.normalize = function(s, out) {};

/**
 * 计算两个三维向量的乘积。
 * @param {!Laya.ConchVector3} a left三维向量。
 * @param {!Laya.ConchVector3} b right三维向量。
 * @param {!Laya.ConchVector3} out 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.multiply = function(a, b, out) {};

/**
 * 缩放三维向量。
 * @param {!Laya.ConchVector3} a 源三维向量。
 * @param {number} b 缩放值。
 * @param {!Laya.ConchVector3} out 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.scale = function(a, b, out) {};

/**
 * 插值三维向量。
 * @param {!Laya.ConchVector3} a left向量。
 * @param {!Laya.ConchVector3} b right向量。
 * @param {number} t 插值比例。
 * @param {!Laya.ConchVector3} out 输出向量。
 * @return {void}
 */
Laya.ConchVector3.lerp = function(a, b, t, out) {};

/**
 * 通过矩阵转换一个三维向量到另外一个三维向量。
 * @param {!Laya.ConchVector3} vector 源三维向量。
 * @param {?} transform 变换矩阵。
 * @param {!Laya.ConchVector3} result 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.transformV3ToV3 = function(vector, transform, result) {};

/**
 * 通过矩阵转换一个三维向量到另外一个四维向量。
 * @param {!Laya.ConchVector3} vector 源三维向量。
 * @param {?} transform 变换矩阵。
 * @param {!Laya.ConchVector4} result 输出四维向量。
 * @return {void}
 */
Laya.ConchVector3.transformV3ToV4 = function(vector, transform, result) {};

/**
 * 通过法线矩阵转换一个法线三维向量到另外一个三维向量。
 * @param {!Laya.ConchVector3} normal 源法线三维向量。
 * @param {?} transform 法线变换矩阵。
 * @param {!Laya.ConchVector3} result 输出法线三维向量。
 * @return {void}
 */
Laya.ConchVector3.TransformNormal = function(normal, transform, result) {};

/**
 * 通过矩阵转换一个三维向量到另外一个归一化的三维向量。
 * @param {!Laya.ConchVector3} coordinate
 * @param {?} transform 变换矩阵。
 * @param {!Laya.ConchVector3} result 输出三维向量。
 * @return {void}
 */
Laya.ConchVector3.transformCoordinate = function(coordinate, transform, result) {};

/**
 * 求一个指定范围的向量
 * @param {!Laya.ConchVector3} value clamp向量
 * @param {!Laya.ConchVector3} min 最小
 * @param {!Laya.ConchVector3} max 最大
 * @param {!Laya.ConchVector3} out 输出向量
 * @return {void}
 */
Laya.ConchVector3.Clamp = function(value, min, max, out) {};

/**
 * 求两个三维向量的和。
 * @param {!Laya.ConchVector3} a left三维向量。
 * @param {!Laya.ConchVector3} b right三维向量。
 * @param {!Laya.ConchVector3} out 输出向量。
 * @return {void}
 */
Laya.ConchVector3.add = function(a, b, out) {};

/**
 * 求两个三维向量的差。
 * @param {!Laya.ConchVector3} a left三维向量。
 * @param {!Laya.ConchVector3} b right三维向量。
 * @param {!Laya.ConchVector3} o out 输出向量。
 * @return {void}
 */
Laya.ConchVector3.subtract = function(a, b, o) {};

/**
 * 求两个三维向量的叉乘。
 * @param {!Laya.ConchVector3} a left向量。
 * @param {!Laya.ConchVector3} b right向量。
 * @param {!Laya.ConchVector3} o 输出向量。
 * @return {void}
 */
Laya.ConchVector3.cross = function(a, b, o) {};

/**
 * 求两个三维向量的点积。
 * @param {!Laya.ConchVector3} a left向量。
 * @param {!Laya.ConchVector3} b right向量。
 * @return {number} 点积。
 */
Laya.ConchVector3.dot = function(a, b) {};

/**
 * 判断两个三维向量是否相等。
 * @param {!Laya.ConchVector3} a 三维向量。
 * @param {!Laya.ConchVector3} b 三维向量。
 * @return {boolean} 是否相等。
 */
Laya.ConchVector3.equals = function(a, b) {};

/**
 * 设置xyz值。
 * @param {number} x X值。
 * @param {number} y Y值。
 * @param {number} z Z值。
 * @return {void}
 */
Laya.ConchVector3.prototype.setValue = function(x, y, z) {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.ConchVector3.prototype.fromArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ConchVector3.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ConchVector3.prototype.clone = function() {};

/**
 * @return {void}
 */
Laya.ConchVector3.prototype.toDefault = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Vector4</code> 实例。
 * @param {number=} x X轴坐标。
 * @param {number=} y Y轴坐标。
 * @param {number=} z Z轴坐标。
 * @param {number=} w W轴坐标。
 */
Laya.ConchVector4 = function(x, y, z, w) {};
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.ZERO;
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.ONE;
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.UnitX;
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.UnitY;
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.UnitZ;
/** @type {!Laya.ConchVector4} */
Laya.ConchVector4.UnitW;
/** @type {!Float32Array} */
Laya.ConchVector4.prototype.elements;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.z */

/* TODO: SetAccessor: Laya.z */

/* TODO: GetAccessor: Laya.w */

/* TODO: SetAccessor: Laya.w */

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.ConchVector4.prototype.fromArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ConchVector4.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ConchVector4.prototype.clone = function() {};

/**
 * 插值四维向量。
 * @param {!Laya.ConchVector4} a left向量。
 * @param {!Laya.ConchVector4} b right向量。
 * @param {number} t 插值比例。
 * @param {!Laya.ConchVector4} out 输出向量。
 * @return {void}
 */
Laya.ConchVector4.lerp = function(a, b, t, out) {};

/**
 * 通过4x4矩阵把一个四维向量转换为另一个四维向量
 * @param {!Laya.ConchVector4} vector4 带转换四维向量。
 * @param {?} m4x4
 * @param {!Laya.ConchVector4} out 转换后四维向量。
 * @return {void}
 */
Laya.ConchVector4.transformByM4x4 = function(vector4, m4x4, out) {};

/**
 * 判断两个四维向量是否相等。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @return {boolean} 是否相等。
 */
Laya.ConchVector4.equals = function(a, b) {};

/**
 * 求四维向量的长度。
 * @return {number} 长度。
 */
Laya.ConchVector4.prototype.length = function() {};

/**
 * 求四维向量长度的平方。
 * @return {number} 长度的平方。
 */
Laya.ConchVector4.prototype.lengthSquared = function() {};

/**
 * 归一化四维向量。
 * @param {!Laya.ConchVector4} s 源四维向量。
 * @param {!Laya.ConchVector4} out 输出四维向量。
 * @return {void}
 */
Laya.ConchVector4.normalize = function(s, out) {};

/**
 * 求两个四维向量的和。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @param {!Laya.ConchVector4} out 输出向量。
 * @return {void}
 */
Laya.ConchVector4.add = function(a, b, out) {};

/**
 * 求两个四维向量的差。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @param {!Laya.ConchVector4} out 输出向量。
 * @return {void}
 */
Laya.ConchVector4.subtract = function(a, b, out) {};

/**
 * 计算两个四维向量的乘积。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @param {!Laya.ConchVector4} out 输出向量。
 * @return {void}
 */
Laya.ConchVector4.multiply = function(a, b, out) {};

/**
 * 缩放四维向量。
 * @param {!Laya.ConchVector4} a 源四维向量。
 * @param {number} b 缩放值。
 * @param {!Laya.ConchVector4} out 输出四维向量。
 * @return {void}
 */
Laya.ConchVector4.scale = function(a, b, out) {};

/**
 * 求一个指定范围的四维向量
 * @param {!Laya.ConchVector4} value clamp向量
 * @param {!Laya.ConchVector4} min 最小
 * @param {!Laya.ConchVector4} max 最大
 * @param {!Laya.ConchVector4} out 输出向量
 * @return {void}
 */
Laya.ConchVector4.Clamp = function(value, min, max, out) {};

/**
 * 两个四维向量距离的平方。
 * @param {!Laya.ConchVector4} value1 向量1。
 * @param {!Laya.ConchVector4} value2 向量2。
 * @return {number} 距离的平方。
 */
Laya.ConchVector4.distanceSquared = function(value1, value2) {};

/**
 * 两个四维向量距离。
 * @param {!Laya.ConchVector4} value1 向量1。
 * @param {!Laya.ConchVector4} value2 向量2。
 * @return {number} 距离。
 */
Laya.ConchVector4.distance = function(value1, value2) {};

/**
 * 求两个四维向量的点积。
 * @param {!Laya.ConchVector4} a 向量。
 * @param {!Laya.ConchVector4} b 向量。
 * @return {number} 点积。
 */
Laya.ConchVector4.dot = function(a, b) {};

/**
 * 分别取两个四维向量x、y、z的最小值计算新的四维向量。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @param {!Laya.ConchVector4} out 结果三维向量。
 * @return {void}
 */
Laya.ConchVector4.min = function(a, b, out) {};

/**
 * 分别取两个四维向量x、y、z的最大值计算新的四维向量。
 * @param {!Laya.ConchVector4} a 四维向量。
 * @param {!Laya.ConchVector4} b 四维向量。
 * @param {!Laya.ConchVector4} out 结果三维向量。
 * @return {void}
 */
Laya.ConchVector4.max = function(a, b, out) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Plane</code> 实例。
 * @param {!Laya.Vector3} normal 平面的向量
 * @param {number=} d 平面到原点的距离
 */
Laya.Plane = function(normal, d) {};
/** @type {!Laya.Vector3} */
Laya.Plane.prototype.normal;
/** @type {number} */
Laya.Plane.prototype.distance;
/** @type {number} */
Laya.Plane.PlaneIntersectionType_Back;
/** @type {number} */
Laya.Plane.PlaneIntersectionType_Front;
/** @type {number} */
Laya.Plane.PlaneIntersectionType_Intersecting;

/**
 * 通过三个点创建一个平面。
 * @param {!Laya.Vector3} point0 第零个点
 * @param {!Laya.Vector3} point1 第一个点
 * @param {!Laya.Vector3} point2 第二个点
 * @param {!Laya.Plane} out
 * @return {void}
 */
Laya.Plane.createPlaneBy3P = function(point0, point1, point2, out) {};

/**
 * 更改平面法线向量的系数，使之成单位长度。
 * @return {void}
 */
Laya.Plane.prototype.normalize = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Plane.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {!Laya.Plane} 克隆副本。
 */
Laya.Plane.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Quaternion</code> 实例。
 * @param {number=} x 四元数的x值
 * @param {number=} y 四元数的y值
 * @param {number=} z 四元数的z值
 * @param {number=} w 四元数的w值
 */
Laya.Quaternion = function(x, y, z, w) {};
/** @type {!Laya.Quaternion} */
Laya.Quaternion.DEFAULT;
/** @type {!Laya.Quaternion} */
Laya.Quaternion.NAN;
/** @type {?} */
Laya.Quaternion.arcTanAngle;
/** @type {?} */
Laya.Quaternion.angleTo;
/** @type {number} */
Laya.Quaternion.prototype.x;
/** @type {number} */
Laya.Quaternion.prototype.y;
/** @type {number} */
Laya.Quaternion.prototype.z;
/** @type {number} */
Laya.Quaternion.prototype.w;

/**
 * 从欧拉角生成四元数（顺序为Yaw、Pitch、Roll）
 * @param {number} yaw yaw值
 * @param {number} pitch pitch值
 * @param {number} roll roll值
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.createFromYawPitchRoll = function(yaw, pitch, roll, out) {};

/**
 * 计算两个四元数相乘
 * @param {!Laya.Quaternion} left left四元数
 * @param {!Laya.Quaternion} right right四元数
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.multiply = function(left, right, out) {};

/**
 * 从指定的轴和角度计算四元数
 * @param {!Laya.Vector3} axis 轴
 * @param {number} rad 角度
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.createFromAxisAngle = function(axis, rad, out) {};

/**
 * 从旋转矩阵计算四元数
 * @param {!Laya.Matrix4x4} mat 旋转矩阵
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.createFromMatrix4x4 = function(mat, out) {};

/**
 * 球面插值
 * @param {!Laya.Quaternion} left left四元数
 * @param {!Laya.Quaternion} right right四元数
 * @param {number} t 插值比例
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {!Laya.Quaternion} 输出Float32Array
 */
Laya.Quaternion.slerp = function(left, right, t, out) {};

/**
 * 计算两个四元数的线性插值
 * @param {!Laya.Quaternion} left left四元数
 * @param {!Laya.Quaternion} right right四元数b
 * @param {number} amount
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.lerp = function(left, right, amount, out) {};

/**
 * 计算两个四元数的和
 * @param {!Laya.Quaternion} left left四元数
 * @param {!Laya.Quaternion} right right 四元数
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.add = function(left, right, out) {};

/**
 * 计算两个四元数的点积
 * @param {!Laya.Quaternion} left left四元数
 * @param {!Laya.Quaternion} right right四元数
 * @return {number} 点积
 */
Laya.Quaternion.dot = function(left, right) {};

/**
 * 根据缩放值缩放四元数
 * @param {number} scaling
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.scaling = function(scaling, out) {};

/**
 * 归一化四元数
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.normalize = function(out) {};

/**
 * 计算四元数的长度
 * @return {number} 长度
 */
Laya.Quaternion.prototype.length = function() {};

/**
 * 根据绕X轴的角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.rotateX = function(rad, out) {};

/**
 * 根据绕Y轴的制定角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.rotateY = function(rad, out) {};

/**
 * 根据绕Z轴的制定角度旋转四元数
 * @param {number} rad 角度
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.rotateZ = function(rad, out) {};

/**
 * 分解四元数到欧拉角（顺序为Yaw、Pitch、Roll），参考自http://xboxforums.create.msdn.com/forums/p/4574/23988.aspx#23988,问题绕X轴翻转超过±90度时有，会产生瞬间反转
 * @param {!Laya.Vector3} out 欧拉角值
 * @return {void}
 */
Laya.Quaternion.prototype.getYawPitchRoll = function(out) {};

/**
 * 求四元数的逆
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.prototype.invert = function(out) {};

/**
 * 设置四元数为单位算数
 * @return {void}
 */
Laya.Quaternion.prototype.identity = function() {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Quaternion.prototype.fromArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Quaternion.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Quaternion.prototype.clone = function() {};

/**
 * @param {!Laya.Quaternion} b
 * @return {boolean}
 */
Laya.Quaternion.prototype.equals = function(b) {};

/**
 * 计算旋转观察四元数
 * @param {!Laya.Vector3} forward 方向
 * @param {!Laya.Vector3} up 上向量
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.rotationLookAt = function(forward, up, out) {};

/**
 * 计算观察四元数
 * @param {!Laya.Vector3} eye 观察者位置
 * @param {!Laya.Vector3} target 目标位置
 * @param {!Laya.Vector3} up 上向量
 * @param {!Laya.Quaternion} out 输出四元数
 * @return {void}
 */
Laya.Quaternion.lookAt = function(eye, target, up, out) {};

/**
 * 计算长度的平方。
 * @return {number} 长度的平方。
 */
Laya.Quaternion.prototype.lengthSquared = function() {};

/**
 * 计算四元数的逆四元数。
 * @param {!Laya.Quaternion} value 四元数。
 * @param {!Laya.Quaternion} out 逆四元数。
 * @return {void}
 */
Laya.Quaternion.invert = function(value, out) {};

/**
 * 通过一个3x3矩阵创建一个四元数
 * @param {!Laya.Matrix3x3} matrix3x3 3x3矩阵
 * @param {!Laya.Quaternion} out 四元数
 * @return {void}
 */
Laya.Quaternion.rotationMatrix = function(matrix3x3, out) {};

/**
 * @param {!Float32Array=} nativeElements
 * @return {void}
 */
Laya.Quaternion.prototype.forNativeElement = function(nativeElements) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Rand</code> 实例。
 * @param {number} seed 32位无符号整型随机种子。
 */
Laya.Rand = function(seed) {};
/** @type {!Uint32Array} */
Laya.Rand.prototype.seeds;

/* TODO: GetAccessor: Laya.seed */

/* TODO: SetAccessor: Laya.seed */

/**
 * 通过无符号32位整形，获取32位浮点随机数。
 * @param {number} v
 * @return {number} 32位浮点随机数。
 */
Laya.Rand.getFloatFromInt = function(v) {};

/**
 * 通过无符号32位整形，获取无符号8位字节随机数。
 * @param {number} v
 * @return {number} 无符号8位字节随机数。
 */
Laya.Rand.getByteFromInt = function(v) {};

/**
 * 获取无符号32位整形随机数。
 * @return {number} 无符号32位整形随机数。
 */
Laya.Rand.prototype.getUint = function() {};

/**
 * 获取0到1之间的浮点随机数。
 * @return {number} 0到1之间的浮点随机数。
 */
Laya.Rand.prototype.getFloat = function() {};

/**
 * 获取-1到1之间的浮点随机数。
 * @return {number} -1到1之间的浮点随机数。
 */
Laya.Rand.prototype.getSignedFloat = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Rand</code> 实例。
 * @param {!Array<?>} seed 随机种子。
 */
Laya.RandX = function(seed) {};
/** @type {!Laya.RandX} */
Laya.RandX.defaultRand;

/**
 * 通过2x32位的数组，返回64位的随机数。
 * @return {!Array<?>} 64位的随机数。
 */
Laya.RandX.prototype.randomint = function() {};

/**
 * 返回[0,1)之间的随机数。
 * @return {number}
 */
Laya.RandX.prototype.random = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Ray</code> 实例。
 * @param {!Laya.Vector3} origin 射线的起点
 * @param {!Laya.Vector3} direction 射线的方向
 */
Laya.Ray = function(origin, direction) {};
/** @type {!Laya.Vector3} */
Laya.Ray.prototype.origin;
/** @type {!Laya.Vector3} */
Laya.Ray.prototype.direction;

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Vector2</code> 实例。
 * @param {number=} x X轴坐标。
 * @param {number=} y Y轴坐标。
 */
Laya.Vector2 = function(x, y) {};
/** @type {!Laya.Vector2} */
Laya.Vector2.ZERO;
/** @type {!Laya.Vector2} */
Laya.Vector2.ONE;
/** @type {number} */
Laya.Vector2.prototype.x;
/** @type {number} */
Laya.Vector2.prototype.y;

/**
 * 设置xy值。
 * @param {number} x X值。
 * @param {number} y Y值。
 * @return {void}
 */
Laya.Vector2.prototype.setValue = function(x, y) {};

/**
 * 缩放二维向量。
 * @param {!Laya.Vector2} a 源二维向量。
 * @param {number} b 缩放值。
 * @param {!Laya.Vector2} out 输出二维向量。
 * @return {void}
 */
Laya.Vector2.scale = function(a, b, out) {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector2.prototype.fromArray = function(array, offset) {};

/**
 * 写入Array数组
 * @param {!Float32Array} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector2.prototype.toArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Vector2.prototype.cloneTo = function(destObject) {};

/**
 * 求两个二维向量的点积。
 * @param {!Laya.Vector2} a left向量。
 * @param {!Laya.Vector2} b right向量。
 * @return {number} 点积。
 */
Laya.Vector2.dot = function(a, b) {};

/**
 * 归一化二维向量。
 * @param {!Laya.Vector2} s 源三维向量。
 * @param {!Laya.Vector2} out 输出三维向量。
 * @return {void}
 */
Laya.Vector2.normalize = function(s, out) {};

/**
 * 计算标量长度。
 * @param {!Laya.Vector2} a 源三维向量。
 * @return {number} 标量长度。
 */
Laya.Vector2.scalarLength = function(a) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Vector2.prototype.clone = function() {};

/**
 * @param {!Float32Array=} nativeElements
 * @return {void}
 */
Laya.Vector2.prototype.forNativeElement = function(nativeElements) {};

/**
 * @param {?} proto
 * @param {string} name
 * @param {number} index
 * @return {void}
 */
Laya.Vector2.rewriteNumProperty = function(proto, name, index) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Vector3</code> 实例。
 * @param {number=} x X轴坐标。
 * @param {number=} y Y轴坐标。
 * @param {number=} z Z轴坐标。
 */
Laya.Vector3 = function(x, y, z) {};
/** @type {number} */
Laya.Vector3.prototype.x;
/** @type {number} */
Laya.Vector3.prototype.y;
/** @type {number} */
Laya.Vector3.prototype.z;

/**
 * 两个三维向量距离的平方。
 * @param {!Laya.Vector3} value1 向量1。
 * @param {!Laya.Vector3} value2 向量2。
 * @return {number} 距离的平方。
 */
Laya.Vector3.distanceSquared = function(value1, value2) {};

/**
 * 两个三维向量距离。
 * @param {!Laya.Vector3} value1 向量1。
 * @param {!Laya.Vector3} value2 向量2。
 * @return {number} 距离。
 */
Laya.Vector3.distance = function(value1, value2) {};

/**
 * 分别取两个三维向量x、y、z的最小值计算新的三维向量。
 * @param {!Laya.Vector3} a 。
 * @param {!Laya.Vector3} b 。
 * @param {!Laya.Vector3} out 。
 * @return {void}
 */
Laya.Vector3.min = function(a, b, out) {};

/**
 * 分别取两个三维向量x、y、z的最大值计算新的三维向量。
 * @param {!Laya.Vector3} a a三维向量。
 * @param {!Laya.Vector3} b b三维向量。
 * @param {!Laya.Vector3} out 结果三维向量。
 * @return {void}
 */
Laya.Vector3.max = function(a, b, out) {};

/**
 * 根据四元数旋转三维向量。
 * @param {!Laya.Vector3} source 源三维向量。
 * @param {!Laya.Quaternion} rotation 旋转四元数。
 * @param {!Laya.Vector3} out 输出三维向量。
 * @return {void}
 */
Laya.Vector3.transformQuat = function(source, rotation, out) {};

/**
 * 计算标量长度。
 * @param {!Laya.Vector3} a 源三维向量。
 * @return {number} 标量长度。
 */
Laya.Vector3.scalarLength = function(a) {};

/**
 * 计算标量长度的平方。
 * @param {!Laya.Vector3} a 源三维向量。
 * @return {number} 标量长度的平方。
 */
Laya.Vector3.scalarLengthSquared = function(a) {};

/**
 * 归一化三维向量。
 * @param {!Laya.Vector3} s 源三维向量。
 * @param {!Laya.Vector3} out 输出三维向量。
 * @return {void}
 */
Laya.Vector3.normalize = function(s, out) {};

/**
 * 计算两个三维向量的乘积。
 * @param {!Laya.Vector3} a left三维向量。
 * @param {!Laya.Vector3} b right三维向量。
 * @param {!Laya.Vector3} out 输出三维向量。
 * @return {void}
 */
Laya.Vector3.multiply = function(a, b, out) {};

/**
 * 缩放三维向量。
 * @param {!Laya.Vector3} a 源三维向量。
 * @param {number} b 缩放值。
 * @param {!Laya.Vector3} out 输出三维向量。
 * @return {void}
 */
Laya.Vector3.scale = function(a, b, out) {};

/**
 * 插值三维向量。
 * @param {!Laya.Vector3} a left向量。
 * @param {!Laya.Vector3} b right向量。
 * @param {number} t 插值比例。
 * @param {!Laya.Vector3} out 输出向量。
 * @return {void}
 */
Laya.Vector3.lerp = function(a, b, t, out) {};

/**
 * 通过矩阵转换一个三维向量到另外一个三维向量。
 * @param {!Laya.Vector3} vector 源三维向量。
 * @param {!Laya.Matrix4x4} transform 变换矩阵。
 * @param {!Laya.Vector3} result 输出三维向量。
 * @return {void}
 */
Laya.Vector3.transformV3ToV3 = function(vector, transform, result) {};

/**
 * 通过矩阵转换一个三维向量到另外一个四维向量。
 * @param {!Laya.Vector3} vector 源三维向量。
 * @param {!Laya.Matrix4x4} transform 变换矩阵。
 * @param {!Laya.Vector4} result 输出四维向量。
 * @return {void}
 */
Laya.Vector3.transformV3ToV4 = function(vector, transform, result) {};

/**
 * 通过法线矩阵转换一个法线三维向量到另外一个三维向量。
 * @param {!Laya.Vector3} normal 源法线三维向量。
 * @param {!Laya.Matrix4x4} transform 法线变换矩阵。
 * @param {!Laya.Vector3} result 输出法线三维向量。
 * @return {void}
 */
Laya.Vector3.TransformNormal = function(normal, transform, result) {};

/**
 * 通过矩阵转换一个三维向量到另外一个归一化的三维向量。
 * @param {!Laya.Vector3} coordinate
 * @param {!Laya.Matrix4x4} transform 变换矩阵。
 * @param {!Laya.Vector3} result 输出三维向量。
 * @return {void}
 */
Laya.Vector3.transformCoordinate = function(coordinate, transform, result) {};

/**
 * 求一个指定范围的向量
 * @param {!Laya.Vector3} value clamp向量
 * @param {!Laya.Vector3} min 最小
 * @param {!Laya.Vector3} max 最大
 * @param {!Laya.Vector3} out 输出向量
 * @return {void}
 */
Laya.Vector3.Clamp = function(value, min, max, out) {};

/**
 * 求两个三维向量的和。
 * @param {!Laya.Vector3} a left三维向量。
 * @param {!Laya.Vector3} b right三维向量。
 * @param {!Laya.Vector3} out 输出向量。
 * @return {void}
 */
Laya.Vector3.add = function(a, b, out) {};

/**
 * 求两个三维向量的差。
 * @param {!Laya.Vector3} a left三维向量。
 * @param {!Laya.Vector3} b right三维向量。
 * @param {!Laya.Vector3} o out 输出向量。
 * @return {void}
 */
Laya.Vector3.subtract = function(a, b, o) {};

/**
 * 求两个三维向量的叉乘。
 * @param {!Laya.Vector3} a left向量。
 * @param {!Laya.Vector3} b right向量。
 * @param {!Laya.Vector3} o 输出向量。
 * @return {void}
 */
Laya.Vector3.cross = function(a, b, o) {};

/**
 * 求两个三维向量的点积。
 * @param {!Laya.Vector3} a left向量。
 * @param {!Laya.Vector3} b right向量。
 * @return {number} 点积。
 */
Laya.Vector3.dot = function(a, b) {};

/**
 * 判断两个三维向量是否相等。
 * @param {!Laya.Vector3} a 三维向量。
 * @param {!Laya.Vector3} b 三维向量。
 * @return {boolean} 是否相等。
 */
Laya.Vector3.equals = function(a, b) {};

/**
 * 设置xyz值。
 * @param {number} x X值。
 * @param {number} y Y值。
 * @param {number} z Z值。
 * @return {void}
 */
Laya.Vector3.prototype.setValue = function(x, y, z) {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector3.prototype.fromArray = function(array, offset) {};

/**
 * 写入Array数组
 * @param {!Float32Array} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector3.prototype.toArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Vector3.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Vector3.prototype.clone = function() {};

/**
 * @return {void}
 */
Laya.Vector3.prototype.toDefault = function() {};

/**
 * @param {!Float32Array=} nativeElements
 * @return {void}
 */
Laya.Vector3.prototype.forNativeElement = function(nativeElements) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Vector4</code> 实例。
 * @param {number=} x X轴坐标。
 * @param {number=} y Y轴坐标。
 * @param {number=} z Z轴坐标。
 * @param {number=} w W轴坐标。
 */
Laya.Vector4 = function(x, y, z, w) {};
/** @type {!Laya.Vector4} */
Laya.Vector4.ZERO;
/** @type {!Laya.Vector4} */
Laya.Vector4.ONE;
/** @type {!Laya.Vector4} */
Laya.Vector4.UnitX;
/** @type {!Laya.Vector4} */
Laya.Vector4.UnitY;
/** @type {!Laya.Vector4} */
Laya.Vector4.UnitZ;
/** @type {!Laya.Vector4} */
Laya.Vector4.UnitW;
/** @type {number} */
Laya.Vector4.prototype.x;
/** @type {number} */
Laya.Vector4.prototype.y;
/** @type {number} */
Laya.Vector4.prototype.z;
/** @type {number} */
Laya.Vector4.prototype.w;

/**
 * 设置xyzw值。
 * @param {number} x X值。
 * @param {number} y Y值。
 * @param {number} z Z值。
 * @param {number} w W值。
 * @return {void}
 */
Laya.Vector4.prototype.setValue = function(x, y, z, w) {};

/**
 * 从Array数组拷贝值。
 * @param {!Array<?>} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector4.prototype.fromArray = function(array, offset) {};

/**
 * 写入Array数组
 * @param {!Float32Array} array 数组。
 * @param {number=} offset 数组偏移。
 * @return {void}
 */
Laya.Vector4.prototype.toArray = function(array, offset) {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Vector4.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Vector4.prototype.clone = function() {};

/**
 * 插值四维向量。
 * @param {!Laya.Vector4} a left向量。
 * @param {!Laya.Vector4} b right向量。
 * @param {number} t 插值比例。
 * @param {!Laya.Vector4} out 输出向量。
 * @return {void}
 */
Laya.Vector4.lerp = function(a, b, t, out) {};

/**
 * 通过4x4矩阵把一个四维向量转换为另一个四维向量
 * @param {!Laya.Vector4} vector4 带转换四维向量。
 * @param {!Laya.Matrix4x4} m4x4
 * @param {!Laya.Vector4} out 转换后四维向量。
 * @return {void}
 */
Laya.Vector4.transformByM4x4 = function(vector4, m4x4, out) {};

/**
 * 判断两个四维向量是否相等。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @return {boolean} 是否相等。
 */
Laya.Vector4.equals = function(a, b) {};

/**
 * 求四维向量的长度。
 * @return {number} 长度。
 */
Laya.Vector4.prototype.length = function() {};

/**
 * 求四维向量长度的平方。
 * @return {number} 长度的平方。
 */
Laya.Vector4.prototype.lengthSquared = function() {};

/**
 * 归一化四维向量。
 * @param {!Laya.Vector4} s 源四维向量。
 * @param {!Laya.Vector4} out 输出四维向量。
 * @return {void}
 */
Laya.Vector4.normalize = function(s, out) {};

/**
 * 求两个四维向量的和。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @param {!Laya.Vector4} out 输出向量。
 * @return {void}
 */
Laya.Vector4.add = function(a, b, out) {};

/**
 * 求两个四维向量的差。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @param {!Laya.Vector4} out 输出向量。
 * @return {void}
 */
Laya.Vector4.subtract = function(a, b, out) {};

/**
 * 计算两个四维向量的乘积。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @param {!Laya.Vector4} out 输出向量。
 * @return {void}
 */
Laya.Vector4.multiply = function(a, b, out) {};

/**
 * 缩放四维向量。
 * @param {!Laya.Vector4} a 源四维向量。
 * @param {number} b 缩放值。
 * @param {!Laya.Vector4} out 输出四维向量。
 * @return {void}
 */
Laya.Vector4.scale = function(a, b, out) {};

/**
 * 求一个指定范围的四维向量
 * @param {!Laya.Vector4} value clamp向量
 * @param {!Laya.Vector4} min 最小
 * @param {!Laya.Vector4} max 最大
 * @param {!Laya.Vector4} out 输出向量
 * @return {void}
 */
Laya.Vector4.Clamp = function(value, min, max, out) {};

/**
 * 两个四维向量距离的平方。
 * @param {!Laya.Vector4} value1 向量1。
 * @param {!Laya.Vector4} value2 向量2。
 * @return {number} 距离的平方。
 */
Laya.Vector4.distanceSquared = function(value1, value2) {};

/**
 * 两个四维向量距离。
 * @param {!Laya.Vector4} value1 向量1。
 * @param {!Laya.Vector4} value2 向量2。
 * @return {number} 距离。
 */
Laya.Vector4.distance = function(value1, value2) {};

/**
 * 求两个四维向量的点积。
 * @param {!Laya.Vector4} a 向量。
 * @param {!Laya.Vector4} b 向量。
 * @return {number} 点积。
 */
Laya.Vector4.dot = function(a, b) {};

/**
 * 分别取两个四维向量x、y、z的最小值计算新的四维向量。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @param {!Laya.Vector4} out 结果三维向量。
 * @return {void}
 */
Laya.Vector4.min = function(a, b, out) {};

/**
 * 分别取两个四维向量x、y、z的最大值计算新的四维向量。
 * @param {!Laya.Vector4} a 四维向量。
 * @param {!Laya.Vector4} b 四维向量。
 * @param {!Laya.Vector4} out 结果三维向量。
 * @return {void}
 */
Laya.Vector4.max = function(a, b, out) {};

/**
 * @param {!Float32Array=} nativeElements
 * @return {void}
 */
Laya.Vector4.prototype.forNativeElement = function(nativeElements) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Viewport</code> 实例。
 * @param {number} x x坐标。
 * @param {number} y y坐标。
 * @param {number} width 宽度。
 * @param {number} height 高度。
 */
Laya.Viewport = function(x, y, width, height) {};
/** @type {number} */
Laya.Viewport.prototype.x;
/** @type {number} */
Laya.Viewport.prototype.y;
/** @type {number} */
Laya.Viewport.prototype.width;
/** @type {number} */
Laya.Viewport.prototype.height;
/** @type {number} */
Laya.Viewport.prototype.minDepth;
/** @type {number} */
Laya.Viewport.prototype.maxDepth;

/**
 * 投影一个三维向量到视口空间。
 * @param {!Laya.Vector3} source 三维向量。
 * @param {!Laya.Matrix4x4} matrix 变换矩阵。
 * @param {!Laya.Vector4} out x、y、z为视口空间坐标,透视投影下w为相对于变换矩阵的z轴坐标。
 * @return {void}
 */
Laya.Viewport.prototype.project = function(source, matrix, out) {};

/**
 * 反变换一个三维向量。
 * @param {!Laya.Vector3} source 源三维向量。
 * @param {!Laya.Matrix4x4} matrix 变换矩阵。
 * @param {!Laya.Vector3} out 输出三维向量。
 * @return {void}
 */
Laya.Viewport.prototype.unprojectFromMat = function(source, matrix, out) {};

/**
 * 反变换一个三维向量。
 * @param {!Laya.Vector3} source 源三维向量。
 * @param {!Laya.Matrix4x4} projection 透视投影矩阵。
 * @param {!Laya.Matrix4x4} view 视图矩阵。
 * @param {!Laya.Matrix4x4} world 世界矩阵,可设置为null。
 * @param {!Laya.Vector3} out 输出向量。
 * @return {void}
 */
Laya.Viewport.prototype.unprojectFromWVP = function(source, projection, view, world, out) {};

/**
 * 克隆
 * @param {!Laya.Viewport} out
 * @return {void}
 */
Laya.Viewport.prototype.cloneTo = function(out) {};

/**
 * @extends {Laya.PhysicsComponent}
 * @constructor
 * @struct
 * 创建一个 <code>CharacterController</code> 实例。
 * @param {number=} stepheight 角色脚步高度。
 * @param {!Laya.Vector3=} upAxis 角色Up轴
 * @param {number=} collisionGroup 所属碰撞组。
 * @param {number=} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.CharacterController = function(stepheight, upAxis, collisionGroup, canCollideWith) {};
/** @type {number} */
Laya.CharacterController.UPAXIS_X;
/** @type {number} */
Laya.CharacterController.UPAXIS_Y;
/** @type {number} */
Laya.CharacterController.UPAXIS_Z;

/* TODO: GetAccessor: Laya.fallSpeed */

/* TODO: SetAccessor: Laya.fallSpeed */

/* TODO: GetAccessor: Laya.jumpSpeed */

/* TODO: SetAccessor: Laya.jumpSpeed */

/* TODO: GetAccessor: Laya.gravity */

/* TODO: SetAccessor: Laya.gravity */

/* TODO: GetAccessor: Laya.maxSlope */

/* TODO: SetAccessor: Laya.maxSlope */

/* TODO: GetAccessor: Laya.isGrounded */

/* TODO: GetAccessor: Laya.stepHeight */

/* TODO: SetAccessor: Laya.stepHeight */

/* TODO: GetAccessor: Laya.upAxis */

/* TODO: SetAccessor: Laya.upAxis */

/**
 * 通过指定移动向量移动角色。
 * @param {!Laya.Vector3} movement 移动向量。
 * @return {void}
 */
Laya.CharacterController.prototype.move = function(movement) {};

/**
 * 跳跃。
 * @param {!Laya.Vector3=} velocity 跳跃速度。
 * @return {void}
 */
Laya.CharacterController.prototype.jump = function(velocity) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Collision</code> 实例。
 */
Laya.Collision = function() {};
/** @type {!Array<!Laya.ContactPoint>} */
Laya.Collision.prototype.contacts;
/** @type {!Laya.PhysicsComponent} */
Laya.Collision.prototype.other;

/**
 * @constructor
 * @struct
 * 创建一个 <code>CollisionMap</code> 实例。
 */
Laya.CollisionTool = function() {};

/**
 * @constructor
 * @struct
 */
Laya.Constraint3D = function() {};
/** @type {!Laya.Rigidbody3D} */
Laya.Constraint3D.prototype.rigidbodyA;
/** @type {!Laya.Rigidbody3D} */
Laya.Constraint3D.prototype.rigidbodyB;

/**
 * @extends {Laya.ConstraintComponent}
 * @constructor
 * @struct
 * 创建一个<code>ConfigurableConstraint</code>实例	可设置的约束组件
 */
Laya.ConfigurableConstraint = function() {};
/** @type {number} */
Laya.ConfigurableConstraint.CONFIG_MOTION_TYPE_LOCKED;
/** @type {number} */
Laya.ConfigurableConstraint.CONFIG_MOTION_TYPE_LIMITED;
/** @type {number} */
Laya.ConfigurableConstraint.CONFIG_MOTION_TYPE_FREE;

/* TODO: GetAccessor: Laya.axis */

/* TODO: GetAccessor: Laya.secondaryAxis */

/* TODO: SetAccessor: Laya.maxAngularLimit */

/* TODO: SetAccessor: Laya.minAngularLimit */

/* TODO: GetAccessor: Laya.maxAngularLimit */

/* TODO: GetAccessor: Laya.minAngularLimit */

/* TODO: SetAccessor: Laya.maxLinearLimit */

/* TODO: SetAccessor: Laya.minLinearLimit */

/* TODO: GetAccessor: Laya.maxLinearLimit */

/* TODO: GetAccessor: Laya.minLinearLimit */

/* TODO: SetAccessor: Laya.XMotion */

/* TODO: GetAccessor: Laya.XMotion */

/* TODO: SetAccessor: Laya.YMotion */

/* TODO: GetAccessor: Laya.YMotion */

/* TODO: SetAccessor: Laya.ZMotion */

/* TODO: GetAccessor: Laya.ZMotion */

/* TODO: SetAccessor: Laya.angularXMotion */

/* TODO: GetAccessor: Laya.angularXMotion */

/* TODO: SetAccessor: Laya.angularYMotion */

/* TODO: GetAccessor: Laya.angularYMotion */

/* TODO: SetAccessor: Laya.angularZMotion */

/* TODO: GetAccessor: Laya.angularZMotion */

/* TODO: SetAccessor: Laya.linearLimitSpring */

/* TODO: GetAccessor: Laya.linearLimitSpring */

/* TODO: SetAccessor: Laya.angularLimitSpring */

/* TODO: GetAccessor: Laya.angularLimitSpring */

/* TODO: SetAccessor: Laya.linearBounce */

/* TODO: GetAccessor: Laya.linearBounce */

/* TODO: SetAccessor: Laya.angularBounce */

/* TODO: GetAccessor: Laya.angularBounce */

/* TODO: SetAccessor: Laya.linearDamp */

/* TODO: GetAccessor: Laya.linearDamp */

/* TODO: SetAccessor: Laya.angularDamp */

/* TODO: GetAccessor: Laya.angularDamp */

/* TODO: SetAccessor: Laya.anchor */

/* TODO: GetAccessor: Laya.anchor */

/* TODO: SetAccessor: Laya.connectAnchor */

/* TODO: GetAccessor: Laya.connectAnchor */

/**
 * 设置对象自然旋转的局部轴主轴，axis2为副轴
 * @param {!Laya.Vector3} axis
 * @param {!Laya.Vector3} secondaryAxis
 * @return {void}
 */
Laya.ConfigurableConstraint.prototype.setAxis = function(axis, secondaryAxis) {};

/**
 * @return {void}
 */
Laya.ConfigurableConstraint.prototype._initAllConstraintInfo = function() {};

/**
 * @return {void}
 */
Laya.ConfigurableConstraint.prototype._onDisable = function() {};

/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 * 创建一个 <code>ConstraintComponent</code> 实例。
 * @param {number} constraintType
 */
Laya.ConstraintComponent = function(constraintType) {};

/* TODO: GetAccessor: Laya.enabled */

/* TODO: SetAccessor: Laya.enabled */

/* TODO: GetAccessor: Laya.appliedImpulse */

/* TODO: GetAccessor: Laya.connectedBody */

/* TODO: GetAccessor: Laya.ownBody */

/* TODO: GetAccessor: Laya.currentForce */

/* TODO: GetAccessor: Laya.currentTorque */

/* TODO: GetAccessor: Laya.breakForce */

/* TODO: SetAccessor: Laya.breakForce */

/* TODO: GetAccessor: Laya.breakTorque */

/* TODO: SetAccessor: Laya.breakTorque */

/* TODO: SetAccessor: Laya.anchor */

/* TODO: GetAccessor: Laya.anchor */

/* TODO: SetAccessor: Laya.connectAnchor */

/* TODO: GetAccessor: Laya.connectAnchor */

/**
 * 设置迭代的次数，次数越高，越精确
 * @param {number} overideNumIterations
 * @return {void}
 */
Laya.ConstraintComponent.prototype.setOverrideNumSolverIterations = function(overideNumIterations) {};

/**
 * 设置约束是否可用
 * @param {boolean} enable
 * @return {void}
 */
Laya.ConstraintComponent.prototype.setConstraintEnabled = function(enable) {};

/**
 * @return {void}
 */
Laya.ConstraintComponent.prototype._onDisable = function() {};

/**
 * 设置约束刚体
 * @override
 * @param {!Laya.Rigidbody3D} ownerRigid
 * @param {!Laya.Rigidbody3D} connectRigidBody
 * @return {void}
 */
Laya.ConstraintComponent.prototype.setConnectRigidBody = function(ownerRigid, connectRigidBody) {};

/**
 * 获得当前力
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.ConstraintComponent.prototype.getcurrentForce = function(out) {};

/**
 * 获得当前力矩
 * @param {!Laya.Vector3} out
 * @return {void}
 */
Laya.ConstraintComponent.prototype.getcurrentTorque = function(out) {};

/**
 * @extends {Laya.ConstraintComponent}
 * @constructor
 * @struct
 * 创建一个<code>FixedConstraint</code>实例
 */
Laya.FixedConstraint = function() {};

/**
 * @return {void}
 */
Laya.FixedConstraint.prototype._onDisable = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>ContactPoint</code> 实例。
 */
Laya.ContactPoint = function() {};
/** @type {!Laya.PhysicsComponent} */
Laya.ContactPoint.prototype.colliderA;
/** @type {!Laya.PhysicsComponent} */
Laya.ContactPoint.prototype.colliderB;
/** @type {number} */
Laya.ContactPoint.prototype.distance;
/** @type {!Laya.Vector3} */
Laya.ContactPoint.prototype.normal;
/** @type {!Laya.Vector3} */
Laya.ContactPoint.prototype.positionOnA;
/** @type {!Laya.Vector3} */
Laya.ContactPoint.prototype.positionOnB;

/**
 * @constructor
 * @struct
 * 创建一个 <code>HitResult</code> 实例。
 */
Laya.HitResult = function() {};
/** @type {boolean} */
Laya.HitResult.prototype.succeeded;
/** @type {!Laya.PhysicsComponent} */
Laya.HitResult.prototype.collider;
/** @type {!Laya.Vector3} */
Laya.HitResult.prototype.point;
/** @type {!Laya.Vector3} */
Laya.HitResult.prototype.normal;
/** @type {number} */
Laya.HitResult.prototype.hitFraction;

/**
 * @extends {Laya.PhysicsTriggerComponent}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsCollider</code> 实例。
 * @param {number=} collisionGroup 所属碰撞组。
 * @param {number=} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.PhysicsCollider = function(collisionGroup, canCollideWith) {};

/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsComponent</code> 实例。
 * @param {number} collisionGroup 所属碰撞组。
 * @param {number} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.PhysicsComponent = function(collisionGroup, canCollideWith) {};
/** @type {boolean} */
Laya.PhysicsComponent.prototype.canScaleShape;

/* TODO: GetAccessor: Laya.restitution */

/* TODO: SetAccessor: Laya.restitution */

/* TODO: GetAccessor: Laya.friction */

/* TODO: SetAccessor: Laya.friction */

/* TODO: GetAccessor: Laya.rollingFriction */

/* TODO: SetAccessor: Laya.rollingFriction */

/* TODO: GetAccessor: Laya.ccdMotionThreshold */

/* TODO: SetAccessor: Laya.ccdMotionThreshold */

/* TODO: GetAccessor: Laya.ccdSweptSphereRadius */

/* TODO: SetAccessor: Laya.ccdSweptSphereRadius */

/* TODO: GetAccessor: Laya.isActive */

/* TODO: GetAccessor: Laya.colliderShape */

/* TODO: SetAccessor: Laya.colliderShape */

/* TODO: GetAccessor: Laya.simulation */

/* TODO: GetAccessor: Laya.collisionGroup */

/* TODO: SetAccessor: Laya.collisionGroup */

/* TODO: GetAccessor: Laya.canCollideWith */

/* TODO: SetAccessor: Laya.canCollideWith */

/**
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsSettings</code> 实例。
 */
Laya.PhysicsSettings = function() {};
/** @type {number} */
Laya.PhysicsSettings.prototype.flags;
/** @type {number} */
Laya.PhysicsSettings.prototype.maxSubSteps;
/** @type {number} */
Laya.PhysicsSettings.prototype.fixedTimeStep;
/**
 * @constructor
 * @struct
 */
Laya.PhysicsSimulation = function() {};
/** @type {boolean} */
Laya.PhysicsSimulation.disableSimulation;
/** @type {number} */
Laya.PhysicsSimulation.prototype.maxSubSteps;
/** @type {number} */
Laya.PhysicsSimulation.prototype.fixedTimeStep;

/* TODO: GetAccessor: Laya.continuousCollisionDetection */

/* TODO: SetAccessor: Laya.continuousCollisionDetection */

/* TODO: GetAccessor: Laya.gravity */

/* TODO: SetAccessor: Laya.gravity */

/**
 * 创建限制刚体运动的约束条件。
 * @return {void}
 */
Laya.PhysicsSimulation.createConstraint = function() {};

/**
 * 射线检测第一个碰撞物体。
 * @param {!Laya.Vector3} from 起始位置。
 * @param {!Laya.Vector3} to 结束位置。
 * @param {!Laya.HitResult=} out 碰撞结果。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否成功。
 */
Laya.PhysicsSimulation.prototype.raycastFromTo = function(from, to, out, collisonGroup, collisionMask) {};

/**
 * 射线检测所有碰撞的物体。
 * @param {!Laya.Vector3} from 起始位置。
 * @param {!Laya.Vector3} to 结束位置。
 * @param {!Array<!Laya.HitResult>} out 碰撞结果[数组元素会被回收]。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否成功。
 */
Laya.PhysicsSimulation.prototype.raycastAllFromTo = function(from, to, out, collisonGroup, collisionMask) {};

/**
 * 射线检测第一个碰撞物体。
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.HitResult=} outHitResult
 * @param {number=} distance 射线长度,默认为最大值
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否检测成功。
 */
Laya.PhysicsSimulation.prototype.rayCast = function(ray, outHitResult, distance, collisonGroup, collisionMask) {};

/**
 * 射线检测所有碰撞的物体。
 * @param {!Laya.Ray} ray 射线
 * @param {!Array<!Laya.HitResult>} out 碰撞结果[数组元素会被回收]。
 * @param {number=} distance 射线长度,默认为最大值
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否检测成功。
 */
Laya.PhysicsSimulation.prototype.rayCastAll = function(ray, out, distance, collisonGroup, collisionMask) {};

/**
 * 形状检测第一个碰撞的物体。
 * @param {!Laya.ColliderShape} shape 形状。
 * @param {!Laya.Vector3} fromPosition 世界空间起始位置。
 * @param {!Laya.Vector3} toPosition 世界空间结束位置。
 * @param {!Laya.HitResult=} out 碰撞结果。
 * @param {!Laya.Quaternion=} fromRotation 起始旋转。
 * @param {!Laya.Quaternion=} toRotation 结束旋转。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @param {number=} allowedCcdPenetration
 * @return {boolean} 是否成功。
 */
Laya.PhysicsSimulation.prototype.shapeCast = function(shape, fromPosition, toPosition, out, fromRotation, toRotation, collisonGroup, collisionMask, allowedCcdPenetration) {};

/**
 * 形状检测所有碰撞的物体。
 * @param {!Laya.ColliderShape} shape 形状。
 * @param {!Laya.Vector3} fromPosition 世界空间起始位置。
 * @param {!Laya.Vector3} toPosition 世界空间结束位置。
 * @param {!Array<!Laya.HitResult>} out 碰撞结果[数组元素会被回收]。
 * @param {!Laya.Quaternion=} fromRotation 起始旋转。
 * @param {!Laya.Quaternion=} toRotation 结束旋转。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @param {number=} allowedCcdPenetration
 * @return {boolean} 是否成功。
 */
Laya.PhysicsSimulation.prototype.shapeCastAll = function(shape, fromPosition, toPosition, out, fromRotation, toRotation, collisonGroup, collisionMask, allowedCcdPenetration) {};

/**
 * 添加刚体运动的约束条件。
 * @param {!Laya.ConstraintComponent} constraint 约束。
 * @param {boolean=} disableCollisionsBetweenLinkedBodies 是否禁用
 * @return {void}
 */
Laya.PhysicsSimulation.prototype.addConstraint = function(constraint, disableCollisionsBetweenLinkedBodies) {};

/**
 * 移除刚体运动的约束条件。
 * @param {!Laya.ConstraintComponent} constraint
 * @return {void}
 */
Laya.PhysicsSimulation.prototype.removeConstraint = function(constraint) {};

/**
 * 设置射线检测回调
 * @param {number=} flag
 * @return {void}
 */
Laya.PhysicsSimulation.prototype.setHitsRayResultCallbackFlag = function(flag) {};

/**
 * 清除力。
 * @return {void}
 */
Laya.PhysicsSimulation.prototype.clearForces = function() {};

/**
 * @extends {Laya.PhysicsComponent}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsTriggerComponent</code> 实例。
 * @param {number} collisionGroup 所属碰撞组。
 * @param {number} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.PhysicsTriggerComponent = function(collisionGroup, canCollideWith) {};

/* TODO: GetAccessor: Laya.isTrigger */

/* TODO: SetAccessor: Laya.isTrigger */

/**
 * @extends {Laya.SingletonList<!Laya.ISingletonElement>}
 * @constructor
 * @struct
 * 创建一个新的 <code>PhysicsUpdateList</code> 实例。
 */
Laya.PhysicsUpdateList = function() {};

/**
 * @extends {Laya.PhysicsTriggerComponent}
 * @constructor
 * @struct
 * 创建一个 <code>RigidBody3D</code> 实例。
 * @param {number=} collisionGroup 所属碰撞组。
 * @param {number=} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.Rigidbody3D = function(collisionGroup, canCollideWith) {};
/** @type {number} */
Laya.Rigidbody3D.TYPE_STATIC;
/** @type {number} */
Laya.Rigidbody3D.TYPE_DYNAMIC;
/** @type {number} */
Laya.Rigidbody3D.TYPE_KINEMATIC;

/* TODO: GetAccessor: Laya.mass */

/* TODO: SetAccessor: Laya.mass */

/* TODO: GetAccessor: Laya.isKinematic */

/* TODO: SetAccessor: Laya.isKinematic */

/* TODO: GetAccessor: Laya.linearDamping */

/* TODO: SetAccessor: Laya.linearDamping */

/* TODO: GetAccessor: Laya.angularDamping */

/* TODO: SetAccessor: Laya.angularDamping */

/* TODO: GetAccessor: Laya.overrideGravity */

/* TODO: SetAccessor: Laya.overrideGravity */

/* TODO: GetAccessor: Laya.gravity */

/* TODO: SetAccessor: Laya.gravity */

/* TODO: GetAccessor: Laya.totalForce */

/* TODO: GetAccessor: Laya.linearFactor */

/* TODO: SetAccessor: Laya.linearFactor */

/* TODO: GetAccessor: Laya.linearVelocity */

/* TODO: SetAccessor: Laya.linearVelocity */

/* TODO: GetAccessor: Laya.angularFactor */

/* TODO: SetAccessor: Laya.angularFactor */

/* TODO: GetAccessor: Laya.angularVelocity */

/* TODO: SetAccessor: Laya.angularVelocity */

/* TODO: GetAccessor: Laya.totalTorque */

/* TODO: GetAccessor: Laya.detectCollisions */

/* TODO: SetAccessor: Laya.detectCollisions */

/* TODO: GetAccessor: Laya.isSleeping */

/* TODO: GetAccessor: Laya.sleepLinearVelocity */

/* TODO: SetAccessor: Laya.sleepLinearVelocity */

/* TODO: GetAccessor: Laya.sleepAngularVelocity */

/* TODO: SetAccessor: Laya.sleepAngularVelocity */

/* TODO: GetAccessor: Laya.btColliderObject */

/**
 * 应用作用力。
 * @param {!Laya.Vector3} force 作用力。
 * @param {!Laya.Vector3=} localOffset 偏移,如果为null则为中心点
 * @return {void}
 */
Laya.Rigidbody3D.prototype.applyForce = function(force, localOffset) {};

/**
 * 应用扭转力。
 * @param {!Laya.Vector3} torque 扭转力。
 * @return {void}
 */
Laya.Rigidbody3D.prototype.applyTorque = function(torque) {};

/**
 * 应用冲量。
 * @param {!Laya.Vector3} impulse 冲量。
 * @param {!Laya.Vector3=} localOffset 偏移,如果为null则为中心点。
 * @return {void}
 */
Laya.Rigidbody3D.prototype.applyImpulse = function(impulse, localOffset) {};

/**
 * 应用扭转冲量。
 * @param {!Laya.Vector3} torqueImpulse
 * @return {void}
 */
Laya.Rigidbody3D.prototype.applyTorqueImpulse = function(torqueImpulse) {};

/**
 * 唤醒刚体。
 * @return {void}
 */
Laya.Rigidbody3D.prototype.wakeUp = function() {};

/**
 * 清除应用到刚体上的所有力。
 * @return {void}
 */
Laya.Rigidbody3D.prototype.clearForces = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>BoxColliderShape</code> 实例。
 * @param {number=} sizeX 盒子X轴尺寸。
 * @param {number=} sizeY 盒子Y轴尺寸。
 * @param {number=} sizeZ 盒子Z轴尺寸。
 */
Laya.BoxColliderShape = function(sizeX, sizeY, sizeZ) {};

/* TODO: GetAccessor: Laya.sizeX */

/* TODO: GetAccessor: Laya.sizeY */

/* TODO: GetAccessor: Laya.sizeZ */

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.BoxColliderShape.prototype.clone = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>CapsuleColliderShape</code> 实例。
 * @param {number=} radius
 * @param {number=} length
 * @param {number=} orientation 胶囊体方向。
 */
Laya.CapsuleColliderShape = function(radius, length, orientation) {};

/* TODO: GetAccessor: Laya.radius */

/* TODO: GetAccessor: Laya.length */

/* TODO: GetAccessor: Laya.orientation */

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CapsuleColliderShape.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个新的 <code>ColliderShape</code> 实例。
 */
Laya.ColliderShape = function() {};
/** @type {number} */
Laya.ColliderShape.SHAPEORIENTATION_UPX;
/** @type {number} */
Laya.ColliderShape.SHAPEORIENTATION_UPY;
/** @type {number} */
Laya.ColliderShape.SHAPEORIENTATION_UPZ;
/** @type {boolean} */
Laya.ColliderShape.prototype.needsCustomCollisionCallback;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.localOffset */

/* TODO: SetAccessor: Laya.localOffset */

/* TODO: GetAccessor: Laya.localRotation */

/* TODO: SetAccessor: Laya.localRotation */

/**
 * 更新本地偏移,如果修改LocalOffset或LocalRotation需要调用。
 * @return {void}
 */
Laya.ColliderShape.prototype.updateLocalTransformations = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ColliderShape.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ColliderShape.prototype.clone = function() {};

/**
 * 销毁。
 * @return {void}
 */
Laya.ColliderShape.prototype.destroy = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>CompoundColliderShape</code> 实例。
 */
Laya.CompoundColliderShape = function() {};

/**
 * 添加子碰撞器形状。
 * @param {!Laya.ColliderShape} shape 子碰撞器形状。
 * @return {void}
 */
Laya.CompoundColliderShape.prototype.addChildShape = function(shape) {};

/**
 * 移除子碰撞器形状。
 * @param {!Laya.ColliderShape} shape 子碰撞器形状。
 * @return {void}
 */
Laya.CompoundColliderShape.prototype.removeChildShape = function(shape) {};

/**
 * 清空子碰撞器形状。
 * @return {void}
 */
Laya.CompoundColliderShape.prototype.clearChildShape = function() {};

/**
 * 获取子形状数量。
 * @return {number}
 */
Laya.CompoundColliderShape.prototype.getChildShapeCount = function() {};

/**
 * @inheritDoc
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.CompoundColliderShape.prototype.cloneTo = function(destObject) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CompoundColliderShape.prototype.clone = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.CompoundColliderShape.prototype.destroy = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>ConeColliderShape</code> 实例。
 * @param {number=} radius 半径。
 * @param {number=} height 高。
 * @param {number=} orientation
 */
Laya.ConeColliderShape = function(radius, height, orientation) {};
/** @type {?} */
Laya.ConeColliderShape.prototype._orientation;
/** @type {?} */
Laya.ConeColliderShape.prototype._radius;
/** @type {?} */
Laya.ConeColliderShape.prototype._height;

/* TODO: GetAccessor: Laya.radius */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.orientation */

/**
 * 克隆
 * @inheritDoc
 * @override
 * @return {?} 克隆的ConeColliderShape实例
 */
Laya.ConeColliderShape.prototype.clone = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>CylinderColliderShape</code> 实例。
 * @param {number=} radius 半径。
 * @param {number=} height 高。
 * @param {number=} orientation
 */
Laya.CylinderColliderShape = function(radius, height, orientation) {};
/** @type {?} */
Laya.CylinderColliderShape.prototype._orientation;
/** @type {?} */
Laya.CylinderColliderShape.prototype._radius;
/** @type {?} */
Laya.CylinderColliderShape.prototype._height;

/* TODO: GetAccessor: Laya.radius */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.orientation */

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CylinderColliderShape.prototype.clone = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>MeshColliderShape</code> 实例。
 */
Laya.MeshColliderShape = function() {};

/* TODO: GetAccessor: Laya.mesh */

/* TODO: SetAccessor: Laya.mesh */

/* TODO: GetAccessor: Laya.convex */

/* TODO: SetAccessor: Laya.convex */

/**
 * @inheritDoc
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.MeshColliderShape.prototype.cloneTo = function(destObject) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.MeshColliderShape.prototype.clone = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>SphereColliderShape</code> 实例。
 * @param {number=} radius 半径。
 */
Laya.SphereColliderShape = function(radius) {};

/* TODO: GetAccessor: Laya.radius */

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.SphereColliderShape.prototype.clone = function() {};

/**
 * @extends {Laya.ColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>StaticPlaneColliderShape</code> 实例。
 * @param {!Laya.Vector3} normal
 * @param {number} offset
 */
Laya.StaticPlaneColliderShape = function(normal, offset) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.StaticPlaneColliderShape.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Physics3D = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Collision</code> 实例。
 */
Laya.CannonCollision = function() {};
/** @type {!Array<!Laya.CannonContactPoint>} */
Laya.CannonCollision.prototype.contacts;
/** @type {!Laya.CannonPhysicsComponent} */
Laya.CannonCollision.prototype.other;

/**
 * @constructor
 * @struct
 * 创建一个 <code>CollisionMap</code> 实例。
 */
Laya.CannonCollisionTool = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>ContactPoint</code> 实例。
 */
Laya.CannonContactPoint = function() {};
/** @type {!Laya.CannonPhysicsComponent} */
Laya.CannonContactPoint.prototype.colliderA;
/** @type {!Laya.CannonPhysicsComponent} */
Laya.CannonContactPoint.prototype.colliderB;
/** @type {number} */
Laya.CannonContactPoint.prototype.distance;
/** @type {!Laya.Vector3} */
Laya.CannonContactPoint.prototype.normal;
/** @type {!Laya.Vector3} */
Laya.CannonContactPoint.prototype.positionOnA;
/** @type {!Laya.Vector3} */
Laya.CannonContactPoint.prototype.positionOnB;

/**
 * @constructor
 * @struct
 * 创建一个 <code>HitResult</code> 实例。
 */
Laya.CannonHitResult = function() {};
/** @type {boolean} */
Laya.CannonHitResult.prototype.succeeded;
/** @type {!Laya.CannonPhysicsComponent} */
Laya.CannonHitResult.prototype.collider;
/** @type {!Laya.Vector3} */
Laya.CannonHitResult.prototype.point;
/** @type {!Laya.Vector3} */
Laya.CannonHitResult.prototype.normal;
/** @type {number} */
Laya.CannonHitResult.prototype.hitFraction;

/**
 * @extends {Laya.CannonPhysicsTriggerComponent}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsCollider</code> 实例。
 * @param {number=} collisionGroup 所属碰撞组。
 * @param {number=} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.CannonPhysicsCollider = function(collisionGroup, canCollideWith) {};

/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsComponent</code> 实例。
 * @param {number} collisionGroup 所属碰撞组。
 * @param {number} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.CannonPhysicsComponent = function(collisionGroup, canCollideWith) {};
/** @type {boolean} */
Laya.CannonPhysicsComponent.prototype.canScaleShape;

/* TODO: GetAccessor: Laya.restitution */

/* TODO: SetAccessor: Laya.restitution */

/* TODO: GetAccessor: Laya.friction */

/* TODO: SetAccessor: Laya.friction */

/* TODO: GetAccessor: Laya.colliderShape */

/* TODO: SetAccessor: Laya.colliderShape */

/* TODO: GetAccessor: Laya.simulation */

/* TODO: GetAccessor: Laya.collisionGroup */

/* TODO: SetAccessor: Laya.collisionGroup */

/* TODO: GetAccessor: Laya.canCollideWith */

/* TODO: SetAccessor: Laya.canCollideWith */

/**
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsSettings</code> 实例。
 */
Laya.CannonPhysicsSettings = function() {};
/** @type {number} */
Laya.CannonPhysicsSettings.prototype.flags;
/** @type {number} */
Laya.CannonPhysicsSettings.prototype.maxSubSteps;
/** @type {number} */
Laya.CannonPhysicsSettings.prototype.fixedTimeStep;
/** @type {number} */
Laya.CannonPhysicsSettings.prototype.contactEquationRelaxation;
/** @type {number} */
Laya.CannonPhysicsSettings.prototype.contactEquationStiffness;
/**
 * @constructor
 * @struct
 */
Laya.CannonPhysicsSimulation = function() {};
/** @type {?} */
Laya.CannonPhysicsSimulation._cannonPhysicsSimulation;
/** @type {boolean} */
Laya.CannonPhysicsSimulation.disableSimulation;
/** @type {number} */
Laya.CannonPhysicsSimulation.prototype.maxSubSteps;
/** @type {number} */
Laya.CannonPhysicsSimulation.prototype.fixedTimeStep;

/* TODO: GetAccessor: Laya.gravity */

/* TODO: SetAccessor: Laya.gravity */

/* TODO: GetAccessor: Laya.solverIterations */

/* TODO: SetAccessor: Laya.solverIterations */

/**
 * 创建限制刚体运动的约束条件。
 * @return {void}
 */
Laya.CannonPhysicsSimulation.createConstraint = function() {};

/**
 * 射线检测第一个碰撞物体。
 * @param {!Laya.Vector3} from 起始位置。
 * @param {!Laya.Vector3} to 结束位置。
 * @param {!Laya.CannonHitResult=} out 碰撞结果。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否成功。
 */
Laya.CannonPhysicsSimulation.prototype.raycastFromTo = function(from, to, out, collisonGroup, collisionMask) {};

/**
 * 射线检测所有碰撞的物体。
 * @param {!Laya.Vector3} from 起始位置。
 * @param {!Laya.Vector3} to 结束位置。
 * @param {!Array<!Laya.CannonHitResult>} out 碰撞结果[数组元素会被回收]。
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否成功。
 */
Laya.CannonPhysicsSimulation.prototype.raycastAllFromTo = function(from, to, out, collisonGroup, collisionMask) {};

/**
 * 射线检测第一个碰撞物体。
 * @param {!Laya.Ray} ray 射线
 * @param {!Laya.CannonHitResult=} outHitResult
 * @param {number=} distance 射线长度,默认为最大值
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否检测成功。
 */
Laya.CannonPhysicsSimulation.prototype.rayCast = function(ray, outHitResult, distance, collisonGroup, collisionMask) {};

/**
 * 射线检测所有碰撞的物体。
 * @param {!Laya.Ray} ray 射线
 * @param {!Array<!Laya.CannonHitResult>} out 碰撞结果[数组元素会被回收]。
 * @param {number=} distance 射线长度,默认为最大值
 * @param {number=} collisonGroup 射线所属碰撞组。
 * @param {number=} collisionMask 与射线可产生碰撞的组。
 * @return {boolean} 是否检测成功。
 */
Laya.CannonPhysicsSimulation.prototype.rayCastAll = function(ray, out, distance, collisonGroup, collisionMask) {};

/**
 * 清除力。
 * @return {void}
 */
Laya.CannonPhysicsSimulation.prototype.clearForces = function() {};

/**
 * @extends {Laya.CannonPhysicsComponent}
 * @constructor
 * @struct
 * 创建一个 <code>PhysicsTriggerComponent</code> 实例。
 * @param {number} collisionGroup 所属碰撞组。
 * @param {number} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.CannonPhysicsTriggerComponent = function(collisionGroup, canCollideWith) {};

/* TODO: GetAccessor: Laya.isTrigger */

/* TODO: SetAccessor: Laya.isTrigger */

/**
 * @extends {Laya.SingletonList<!Laya.ISingletonElement>}
 * @constructor
 * @struct
 * 创建一个新的 <code>PhysicsUpdateList</code> 实例。
 */
Laya.CannonPhysicsUpdateList = function() {};

/**
 * @extends {Laya.CannonPhysicsCollider}
 * @constructor
 * @struct
 * 创建一个 <code>RigidBody3D</code> 实例。
 * @param {number=} collisionGroup 所属碰撞组。
 * @param {number=} canCollideWith 可产生碰撞的碰撞组。
 */
Laya.CannonRigidbody3D = function(collisionGroup, canCollideWith) {};
/** @type {number} */
Laya.CannonRigidbody3D.TYPE_STATIC;
/** @type {number} */
Laya.CannonRigidbody3D.TYPE_DYNAMIC;
/** @type {number} */
Laya.CannonRigidbody3D.TYPE_KINEMATIC;

/* TODO: GetAccessor: Laya.mass */

/* TODO: SetAccessor: Laya.mass */

/* TODO: GetAccessor: Laya.isKinematic */

/* TODO: SetAccessor: Laya.isKinematic */

/* TODO: GetAccessor: Laya.linearDamping */

/* TODO: SetAccessor: Laya.linearDamping */

/* TODO: GetAccessor: Laya.angularDamping */

/* TODO: SetAccessor: Laya.angularDamping */

/* TODO: GetAccessor: Laya.totalForce */

/* TODO: GetAccessor: Laya.linearVelocity */

/* TODO: SetAccessor: Laya.linearVelocity */

/* TODO: GetAccessor: Laya.angularVelocity */

/* TODO: SetAccessor: Laya.angularVelocity */

/* TODO: GetAccessor: Laya.totalTorque */

/* TODO: GetAccessor: Laya.isSleeping */

/* TODO: GetAccessor: Laya.sleepLinearVelocity */

/* TODO: SetAccessor: Laya.sleepLinearVelocity */

/* TODO: GetAccessor: Laya.btColliderObject */

/**
 * 应用作用力。
 * @param {!Laya.Vector3} force 作用力。
 * @param {!Laya.Vector3=} localOffset 偏移,如果为null则为中心点
 * @return {void}
 */
Laya.CannonRigidbody3D.prototype.applyForce = function(force, localOffset) {};

/**
 * 应用扭转力。
 * @param {!Laya.Vector3} torque 扭转力。
 * @return {void}
 */
Laya.CannonRigidbody3D.prototype.applyTorque = function(torque) {};

/**
 * 应用冲量。
 * @param {!Laya.Vector3} impulse 冲量。
 * @param {!Laya.Vector3=} localOffset 偏移,如果为null则为中心点。
 * @return {void}
 */
Laya.CannonRigidbody3D.prototype.applyImpulse = function(impulse, localOffset) {};

/**
 * 唤醒刚体。
 * @return {void}
 */
Laya.CannonRigidbody3D.prototype.wakeUp = function() {};

/**
 * 清除应用到刚体上的所有力。
 * @return {void}
 */
Laya.CannonRigidbody3D.prototype.clearForces = function() {};

/**
 * @extends {Laya.CannonColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>BoxColliderShape</code> 实例。
 * @param {number=} sizeX 盒子X轴尺寸。
 * @param {number=} sizeY 盒子Y轴尺寸。
 * @param {number=} sizeZ 盒子Z轴尺寸。
 */
Laya.CannonBoxColliderShape = function(sizeX, sizeY, sizeZ) {};

/* TODO: GetAccessor: Laya.sizeX */

/* TODO: GetAccessor: Laya.sizeY */

/* TODO: GetAccessor: Laya.sizeZ */

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Vector3} scale
 * @return {void}
 */
Laya.CannonBoxColliderShape.prototype._setScale = function(scale) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CannonBoxColliderShape.prototype.clone = function() {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个新的 <code>ColliderShape</code> 实例。
 */
Laya.CannonColliderShape = function() {};
/** @type {number} */
Laya.CannonColliderShape.SHAPEORIENTATION_UPX;
/** @type {number} */
Laya.CannonColliderShape.SHAPEORIENTATION_UPY;
/** @type {number} */
Laya.CannonColliderShape.SHAPEORIENTATION_UPZ;
/** @type {boolean} */
Laya.CannonColliderShape.prototype.needsCustomCollisionCallback;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.localOffset */

/* TODO: SetAccessor: Laya.localOffset */

/* TODO: GetAccessor: Laya.localRotation */

/* TODO: SetAccessor: Laya.localRotation */

/**
 * 更新本地偏移,如果修改LocalOffset或LocalRotation需要调用。
 * @return {void}
 */
Laya.CannonColliderShape.prototype.updateLocalTransformations = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.CannonColliderShape.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.CannonColliderShape.prototype.clone = function() {};

/**
 * 销毁。
 * @return {void}
 */
Laya.CannonColliderShape.prototype.destroy = function() {};

/**
 * @extends {Laya.CannonColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>CompoundColliderShape</code> 实例。
 */
Laya.CannonCompoundColliderShape = function() {};
/** @type {?} */
Laya.CannonCompoundColliderShape._tempCannonQue;
/** @type {?} */
Laya.CannonCompoundColliderShape._tempCannonVec;
/** @type {?} */
Laya.CannonCompoundColliderShape.prototype.physicColliderObject;

/**
 * @param {!Laya.CannonColliderShape} shape
 * @param {!Laya.Vector3=} localOffset
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype.addChildShape = function(shape, localOffset) {};

/**
 * 移除子碰撞器形状。
 * @param {!Laya.CannonColliderShape} shape 子碰撞器形状。
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype.removeChildShape = function(shape) {};

/**
 * @param {!Laya.CannonPhysicsComponent} rigidbody
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype.bindRigidBody = function(rigidbody) {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Vector3} scale
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype._setScale = function(scale) {};

/**
 * 获取子形状数量。
 * @return {number}
 */
Laya.CannonCompoundColliderShape.prototype.getChildShapeCount = function() {};

/**
 * @inheritDoc
 * @override
 * @param {?} destObject
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype.cloneTo = function(destObject) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CannonCompoundColliderShape.prototype.clone = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.CannonCompoundColliderShape.prototype.destroy = function() {};

/**
 * @extends {Laya.CannonColliderShape}
 * @constructor
 * @struct
 * 创建一个新的 <code>SphereColliderShape</code> 实例。
 * @param {number=} radius 半径。
 */
Laya.CannonSphereColliderShape = function(radius) {};

/* TODO: GetAccessor: Laya.radius */

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Vector3} scale
 * @return {void}
 */
Laya.CannonSphereColliderShape.prototype._setScale = function(scale) {};

/**
 * @inheritDoc
 * @override
 * @return {?}
 */
Laya.CannonSphereColliderShape.prototype.clone = function() {};
/**
 * @record
 * @struct
 */
Laya.IReferenceCounter = function() {};

/**
 * 获得引用计数
 * @return {number}
 */
Laya.IReferenceCounter.prototype._getReferenceCount = function() {};

/**
 * 增加引用计数
 * @param {number} count
 * @return {void}
 */
Laya.IReferenceCounter.prototype._addReference = function(count) {};

/**
 * 删除引用计数
 * @param {number} count
 * @return {void}
 */
Laya.IReferenceCounter.prototype._removeReference = function(count) {};

/**
 * 清除引用计数
 * @return {void}
 */
Laya.IReferenceCounter.prototype._clearReference = function() {};

/**
 * @extends {Laya.Resource}
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>Mesh</code> 实例,禁止使用。
 * @param {boolean=} isReadable 是否可读。
 */
Laya.Mesh = function(isReadable) {};
/** @type {string} */
Laya.Mesh.MESH;
/** @type {number} */
Laya.Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL;
/** @type {number} */
Laya.Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR;

/* TODO: GetAccessor: Laya.inverseAbsoluteBindPoses */

/* TODO: GetAccessor: Laya.vertexCount */

/* TODO: GetAccessor: Laya.indexCount */

/* TODO: GetAccessor: Laya.subMeshCount */

/* TODO: GetAccessor: Laya.bounds */

/* TODO: SetAccessor: Laya.bounds */

/* TODO: GetAccessor: Laya.indexFormat */

/**
 * 加载网格模板。
 * @param {string} url 模板地址。
 * @param {!Handler} complete 完成回调。
 * @return {void}
 */
Laya.Mesh.load = function(url, complete) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Mesh.prototype._disposeResource = function() {};

/**
 * 根据获取子网格。
 * @param {number} index 索引。
 * @return {!Laya.SubMesh}
 */
Laya.Mesh.prototype.getSubMesh = function(index) {};

/**
 * 拷贝并填充位置数据至数组。
 * \@remark 该方法为拷贝操作，比较耗费性能。
 * @param {!Array<!Laya.Vector3>} positions 位置数组。
 * @return {void}
 */
Laya.Mesh.prototype.getPositions = function(positions) {};

/**
 * 设置位置数据。
 * @param {!Array<!Laya.Vector3>} positions 位置。
 * @return {void}
 */
Laya.Mesh.prototype.setPositions = function(positions) {};

/**
 * 拷贝并填充颜色数据至数组。
 * \@remark 该方法为拷贝操作，比较耗费性能。
 * @param {!Array<!Laya.Color>} colors 颜色数组。
 * @return {void}
 */
Laya.Mesh.prototype.getColors = function(colors) {};

/**
 * 设置颜色数据。
 * @param {!Array<!Laya.Color>} colors 颜色。
 * @return {void}
 */
Laya.Mesh.prototype.setColors = function(colors) {};

/**
 * 拷贝并填充纹理坐标数据至数组。
 * \@remark 该方法为拷贝操作，比较耗费性能。
 * @param {!Array<!Laya.Vector2>} uvs 纹理坐标数组。
 * @param {number=} channel 纹理坐标通道。
 * @return {void}
 */
Laya.Mesh.prototype.getUVs = function(uvs, channel) {};

/**
 * 设置纹理坐标数据。
 * @param {!Array<!Laya.Vector2>} uvs 纹理坐标。
 * @param {number=} channel 纹理坐标通道。
 * @return {void}
 */
Laya.Mesh.prototype.setUVs = function(uvs, channel) {};

/**
 * 拷贝并填充法线数据至数组。
 * \@remark 该方法为拷贝操作，比较耗费性能。
 * @param {!Array<!Laya.Vector3>} normals 法线数组。
 * @return {void}
 */
Laya.Mesh.prototype.getNormals = function(normals) {};

/**
 * 设置法线数据。
 * @param {!Array<!Laya.Vector3>} normals 法线。
 * @return {void}
 */
Laya.Mesh.prototype.setNormals = function(normals) {};

/**
 * 拷贝并填充切线数据至数组。
 * @param {!Array<!Laya.Vector4>} tangents 切线。
 * @return {void}
 */
Laya.Mesh.prototype.getTangents = function(tangents) {};

/**
 * 设置切线数据。
 * @param {!Array<!Laya.Vector4>} tangents 切线。
 * @return {void}
 */
Laya.Mesh.prototype.setTangents = function(tangents) {};

/**
 * 获取骨骼权重。
 * @param {!Array<!Laya.Vector4>} boneWeights 骨骼权重。
 * @return {void}
 */
Laya.Mesh.prototype.getBoneWeights = function(boneWeights) {};

/**
 * 拷贝并填充骨骼权重数据至数组。
 * @param {!Array<!Laya.Vector4>} boneWeights 骨骼权重。
 * @return {void}
 */
Laya.Mesh.prototype.setBoneWeights = function(boneWeights) {};

/**
 * 获取骨骼索引。
 * @param {!Array<!Laya.Vector4>} boneIndices 骨骼索引。
 * @return {void}
 */
Laya.Mesh.prototype.getBoneIndices = function(boneIndices) {};

/**
 * 拷贝并填充骨骼索引数据至数组。
 * @param {!Array<!Laya.Vector4>} boneIndices
 * @return {void}
 */
Laya.Mesh.prototype.setBoneIndices = function(boneIndices) {};

/**
 * 将Mesh标记为不可读,可减少内存，标记后不可再调用相关读取方法。
 * @return {void}
 */
Laya.Mesh.prototype.markAsUnreadbale = function() {};

/**
 * 获取顶点声明。
 * @return {!Laya.VertexDeclaration}
 */
Laya.Mesh.prototype.getVertexDeclaration = function() {};

/**
 * 拷贝并获取顶点数据的副本。
 * @return {!ArrayBuffer} 顶点数据。
 */
Laya.Mesh.prototype.getVertices = function() {};

/**
 * 设置顶点数据。
 * @param {!ArrayBuffer} vertices 顶点数据。
 * @return {void}
 */
Laya.Mesh.prototype.setVertices = function(vertices) {};

/**
 * 拷贝并获取网格索引的副本。
 * @return {(!Uint32Array|!Uint16Array|!Uint8Array)} 网格索引。
 */
Laya.Mesh.prototype.getIndices = function() {};

/**
 * 设置网格索引。
 * @param {(!Uint32Array|!Uint16Array|!Uint8Array)} indices 网格索引。
 * @return {void}
 */
Laya.Mesh.prototype.setIndices = function(indices) {};

/**
 * 从模型位置数据生成包围盒。
 * @return {void}
 */
Laya.Mesh.prototype.calculateBounds = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.Mesh.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.Mesh.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
Laya.PrimitiveMesh = function() {};

/**
 * @return {void}
 */
Laya.PrimitiveMesh.__init__ = function() {};

/**
 * 创建Box网格。
 * @param {number=} long 半径
 * @param {number=} height 垂直层数
 * @param {number=} width 水平层数
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createBox = function(long, height, width) {};

/**
 * 创建一个胶囊体模型
 * @param {number=} radius 半径
 * @param {number=} height 高度
 * @param {number=} stacks 水平层数,一般设为垂直层数的一半
 * @param {number=} slices 垂直层数
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createCapsule = function(radius, height, stacks, slices) {};

/**
 * 创建一个圆锥体模型
 * @param {number=} radius 半径
 * @param {number=} height 高度
 * @param {number=} slices 分段数
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createCone = function(radius, height, slices) {};

/**
 * 创建一个圆柱体模型
 * @param {number=} radius 半径
 * @param {number=} height 高度
 * @param {number=} slices 垂直层数
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createCylinder = function(radius, height, slices) {};

/**
 * 创建一个平面模型
 * @param {number=} long 长
 * @param {number=} width 宽
 * @param {number=} stacks
 * @param {number=} slices
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createPlane = function(long, width, stacks, slices) {};

/**
 * 创建一个四边形模型
 * @param {number=} long 长
 * @param {number=} width 宽
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createQuad = function(long, width) {};

/**
 * 创建一个球体模型
 * @param {number=} radius 半径
 * @param {number=} stacks 水平层数
 * @param {number=} slices 垂直层数
 * @return {!Laya.Mesh}
 */
Laya.PrimitiveMesh.createSphere = function(radius, stacks, slices) {};

/**
 * @extends {Laya.SkyMesh}
 * @constructor
 * @struct
 * 创建一个 <code>SkyBox</code> 实例。
 */
Laya.SkyBox = function() {};
/** @type {!Laya.SkyBox} */
Laya.SkyBox.instance;

/**
 * @extends {Laya.SkyMesh}
 * @constructor
 * @struct
 * 创建一个 <code>SkyDome</code> 实例。
 * @param {number=} stacks 堆数。
 * @param {number=} slices 层数。
 */
Laya.SkyDome = function(stacks, slices) {};
/** @type {!Laya.SkyDome} */
Laya.SkyDome.instance;

/* TODO: GetAccessor: Laya.stacks */

/* TODO: GetAccessor: Laya.slices */

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>SkyMesh</code> 实例。
 */
Laya.SkyMesh = function() {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>SkyRenderer</code> 实例。
 */
Laya.SkyRenderer = function() {};

/* TODO: GetAccessor: Laya.material */

/* TODO: SetAccessor: Laya.material */

/* TODO: GetAccessor: Laya.mesh */

/* TODO: SetAccessor: Laya.mesh */

/**
 * @extends {Laya.GeometryElement}
 * @constructor
 * @struct
 * 创建一个 <code>SubMesh</code> 实例。
 * @param {!Laya.Mesh} mesh 网格数据模板。
 */
Laya.SubMesh = function(mesh) {};

/* TODO: GetAccessor: Laya.indexCount */

/**
 * 拷贝并获取子网格索引数据的副本。
 * @return {(!Uint32Array|!Uint16Array)}
 */
Laya.SubMesh.prototype.getIndices = function() {};

/**
 * 设置子网格索引。
 * @param {!Uint16Array} indices
 * @return {void}
 */
Laya.SubMesh.prototype.setIndices = function(indices) {};

/**
 * {\@inheritDoc GeometryElement.destroy}
 * @override
 * @return {void}
 */
Laya.SubMesh.prototype.destroy = function() {};

/**
 * @extends {Laya.RenderTexture}
 * @constructor
 * @struct
 * @param {number} width
 * @param {number} height
 * @param {!Laya.RenderTextureFormat=} format
 * @param {!Laya.RenderTextureDepthFormat=} depthStencilFormat
 * @param {number=} mulSampler
 */
Laya.MulSampleRenderTexture = function(width, height, format, depthStencilFormat, mulSampler) {};
/** @type {number} */
Laya.MulSampleRenderTexture.prototype._mulSampler;
/** @type {boolean} */
Laya.MulSampleRenderTexture.prototype._mulSamplerRT;

/**
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.MulSampleRenderTexture.prototype._create = function(width, height) {};

/**
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.MulSampleRenderTexture.prototype._createGLDepthRenderbuffer = function(width, height) {};

/**
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.MulSampleRenderTexture.prototype._createGLDepthTexture = function(width, height) {};

/**
 * @return {void}
 */
Laya.MulSampleRenderTexture.prototype._end = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.MulSampleRenderTexture.prototype._disposeResource = function() {};

/**
 * @extends {Laya.BaseTexture}
 * @constructor
 * @struct
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @param {!Laya.RenderTextureFormat=} format 纹理格式。
 * @param {!Laya.RenderTextureDepthFormat=} depthStencilFormat 深度格式。
 */
Laya.RenderTexture = function(width, height, format, depthStencilFormat) {};

/* TODO: GetAccessor: Laya.currentActive */

/* TODO: GetAccessor: Laya.bindCanvasRender */

/* TODO: SetAccessor: Laya.bindCanvasRender */
/** @type {number} */
Laya.RenderTexture.prototype._mulSampler;
/** @type {boolean} */
Laya.RenderTexture.prototype._mulSamplerRT;
/** @type {!Laya.RTDEPTHATTACHMODE} */
Laya.RenderTexture.prototype._depthAttachMode;

/* TODO: GetAccessor: Laya.depthStencilFormat */

/* TODO: GetAccessor: Laya.defaulteTexture */

/* TODO: GetAccessor: Laya.mulSampler */

/* TODO: GetAccessor: Laya.depthStencilTexture */

/* TODO: SetAccessor: Laya.depthAttachMode */

/* TODO: GetAccessor: Laya.depthAttachMode */

/**
 * 从对象池获取临时渲染目标。
 * @param {number} width
 * @param {number} height
 * @param {number=} format
 * @param {number=} depthStencilFormat
 * @param {number=} mulSamples
 * @return {!Laya.RenderTexture}
 */
Laya.RenderTexture.createFromPool = function(width, height, format, depthStencilFormat, mulSamples) {};

/**
 * 回收渲染目标到对象池,释放后可通过createFromPool复用。
 * @param {!Laya.RenderTexture} renderTexture
 * @return {void}
 */
Laya.RenderTexture.recoverToPool = function(renderTexture) {};

/**
 * 创建gl_Texture的类型，当渲染器拿到此RT时，会将gl_texture的值传给渲染
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.RenderTexture.prototype._creatGlTexture = function(width, height) {};

/**
 * 创建gl_DepthTexture的类型，用来存储深度信息，可以拷贝出来当贴图用
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.RenderTexture.prototype._createGLDepthTexture = function(width, height) {};

/**
 * 创建gl_DepthRender的类型，用来存储深度信息
 * @protected
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.RenderTexture.prototype._createGLDepthRenderbuffer = function(width, height) {};

/**
 * 获得像素数据。
 * @param {number} x X像素坐标。
 * @param {number} y Y像素坐标。
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @param {(!Float32Array|!Uint8Array)} out
 * @return {(!Float32Array|!Uint8Array)} 像素数据。
 */
Laya.RenderTexture.prototype.getData = function(x, y, width, height, out) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.RenderTexture.prototype._disposeResource = function() {};

/** @enum {number} */
Laya.TextureCubeFace = {
  PositiveX: 1,
  NegativeX: 1,
  PositiveY: 1,
  NegativeY: 1,
  PositiveZ: 1,
  NegativeZ: 1,
};

/**
 * @extends {Laya.BaseTexture}
 * @constructor
 * @struct
 * 创建一个 <code>TextureCube</code> 实例。
 * @param {number} size
 * @param {number=} format 贴图格式。
 * @param {boolean=} mipmap 是否生成mipmap。
 */
Laya.TextureCube = function(size, format, mipmap) {};
/** @type {string} */
Laya.TextureCube.TEXTURECUBE;
/** @type {string} */
Laya.TextureCube.TEXTURECUBEBIN;
/** @type {?} */
Laya.TextureCube._blackTexture;
/** @type {?} */
Laya.TextureCube._grayTexture;

/* TODO: GetAccessor: Laya.blackTexture */

/* TODO: GetAccessor: Laya.grayTexture */

/* TODO: GetAccessor: Laya.defaulteTexture */
/** @type {?} */
Laya.TextureCube.prototype._setPixels;

/**
 * @inheritDoc
 * @param {?} data
 * @param {?=} propertyParams
 * @param {!Array<?>=} constructParams
 * @return {!Laya.TextureCube}
 */
Laya.TextureCube._parse = function(data, propertyParams, constructParams) {};

/**
 * @inheritDoc
 * @param {?} data
 * @param {?=} propertyParams
 * @param {!Array<?>=} constructParams
 * @return {!Laya.TextureCube}
 */
Laya.TextureCube._parseBin = function(data, propertyParams, constructParams) {};

/**
 * 加载TextureCube。
 * @param {string} url TextureCube地址。
 * @param {!Handler} complete 完成回调。
 * @return {void}
 */
Laya.TextureCube.load = function(url, complete) {};

/**
 * 通过六张图片源填充纹理。
 * @param {!Array<?>} source
 * @param {boolean=} premultiplyAlpha
 * @return {void}
 */
Laya.TextureCube.prototype.setSixSideImageSources = function(source, premultiplyAlpha) {};

/**
 * 通过六张图片源填充纹理。
 * @param {!Array<!Uint8Array>} pixels
 * @param {number=} miplevel
 * @return {void}
 */
Laya.TextureCube.prototype.setSixSidePixels = function(pixels, miplevel) {};

/**
 * 通过图源设置一个面的颜色。
 * @param {!Laya.TextureCubeFace} face 面。
 * @param {(!Laya.HTMLImageElement|!HTMLCanvasElement)} imageSource 图源。
 * @param {number=} miplevel 层级。
 * @return {void}
 */
Laya.TextureCube.prototype.setImageSource = function(face, imageSource, miplevel) {};

/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 * 创建一个 <code>DefineDatas</code> 实例。
 */
Laya.DefineDatas = function() {};

/**
 * 添加宏定义值。
 * @param {!Laya.ShaderDefine} define 宏定义值。
 * @return {void}
 */
Laya.DefineDatas.prototype.add = function(define) {};

/**
 * 移除宏定义。
 * @param {!Laya.ShaderDefine} define 宏定义。
 * @return {void}
 */
Laya.DefineDatas.prototype.remove = function(define) {};

/**
 * 添加宏定义集合。
 * @param {!Laya.DefineDatas} define 宏定义集合。
 * @return {void}
 */
Laya.DefineDatas.prototype.addDefineDatas = function(define) {};

/**
 * 移除宏定义集合。
 * @param {!Laya.DefineDatas} define 宏定义集合。
 * @return {void}
 */
Laya.DefineDatas.prototype.removeDefineDatas = function(define) {};

/**
 * 是否有宏定义。
 * @param {!Laya.ShaderDefine} define 宏定义。
 * @return {boolean}
 */
Laya.DefineDatas.prototype.has = function(define) {};

/**
 * 清空宏定义。
 * @return {void}
 */
Laya.DefineDatas.prototype.clear = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.DefineDatas.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.DefineDatas.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Shader3D</code> 实例。
 * @param {string} name
 * @param {?} attributeMap
 * @param {?} uniformMap
 * @param {boolean} enableInstancing
 * @param {boolean} supportReflectionProbe
 */
Laya.Shader3D = function(name, attributeMap, uniformMap, enableInstancing, supportReflectionProbe) {};
/** @type {number} */
Laya.Shader3D.RENDER_STATE_CULL;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_SRC;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_DST;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_SRC_RGB;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_DST_RGB;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_SRC_ALPHA;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_DST_ALPHA;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_CONST_COLOR;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_EQUATION;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_EQUATION_RGB;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_BLEND_EQUATION_ALPHA;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_DEPTH_TEST;
/** @type {number} */
Laya.Shader3D.RENDER_STATE_DEPTH_WRITE;
/** @type {number} */
Laya.Shader3D.PERIOD_CUSTOM;
/** @type {number} */
Laya.Shader3D.PERIOD_MATERIAL;
/** @type {number} */
Laya.Shader3D.PERIOD_SPRITE;
/** @type {number} */
Laya.Shader3D.PERIOD_CAMERA;
/** @type {number} */
Laya.Shader3D.PERIOD_SCENE;
/** @type {boolean} */
Laya.Shader3D.debugMode;
/** @type {!Laya.ShaderVariantCollection} */
Laya.Shader3D.debugShaderVariantCollection;

/* TODO: GetAccessor: Laya.name */

/**
 * 注册宏定义。
 * @param {string} name
 * @return {!Laya.ShaderDefine}
 */
Laya.Shader3D.getDefineByName = function(name) {};

/**
 * 通过Shader属性名称获得唯一ID。
 * @param {string} name Shader属性名称。
 * @return {number} 唯一ID。
 */
Laya.Shader3D.propertyNameToID = function(name) {};

/**
 * 添加函数库引用。
 * @param {string} fileName 文件名字。
 * @param {string} txt 文件内容
 * @return {void}
 */
Laya.Shader3D.addInclude = function(fileName, txt) {};

/**
 * 通过宏定义名字编译shader。
 * @param {string} shaderName Shader名称。
 * @param {number} subShaderIndex 子着色器索引。
 * @param {number} passIndex 通道索引。
 * @param {!Array<string>} defineNames 宏定义名字集合。
 * @return {void}
 */
Laya.Shader3D.compileShaderByDefineNames = function(shaderName, subShaderIndex, passIndex, defineNames) {};

/**
 * 添加预编译shader文件，主要是处理宏定义
 * @param {string} name
 * @param {?=} attributeMap
 * @param {?=} uniformMap
 * @param {boolean=} enableInstancing
 * @param {boolean=} supportReflectionProbe
 * @return {!Laya.Shader3D}
 */
Laya.Shader3D.add = function(name, attributeMap, uniformMap, enableInstancing, supportReflectionProbe) {};

/**
 * 获取ShaderCompile3D。
 * @param {string} name
 * @return {!Laya.Shader3D} ShaderCompile3D。
 */
Laya.Shader3D.find = function(name) {};

/**
 * 添加子着色器。
 * @param {!Laya.SubShader} subShader
 * @return {void}
 */
Laya.Shader3D.prototype.addSubShader = function(subShader) {};

/**
 * 在特定索引获取子着色器。
 * @param {number} index 索引。
 * @return {!Laya.SubShader} 子着色器。
 */
Laya.Shader3D.prototype.getSubShaderAt = function(index) {};

/**
 * @deprecated 通过宏定义遮罩编译shader,建议使用compileShaderByDefineNames。
 * @param {string} shaderName Shader名称。
 * @param {number} subShaderIndex 子着色器索引。
 * @param {number} passIndex 通道索引。
 * @param {...?} defineMask 宏定义遮罩集合。
 * @return {void}
 */
Laya.Shader3D.compileShader = function(shaderName, subShaderIndex, passIndex, defineMask) {};
/**
 * @implements {Laya.IClone}
 * @constructor
 * @struct
 */
Laya.ShaderData = function() {};

/**
 * 增加Shader宏定义。
 * @param {!Laya.ShaderDefine} define
 * @return {void}
 */
Laya.ShaderData.prototype.addDefine = function(define) {};

/**
 * 移除Shader宏定义。
 * @param {!Laya.ShaderDefine} define
 * @return {void}
 */
Laya.ShaderData.prototype.removeDefine = function(define) {};

/**
 * 是否包含Shader宏定义。
 * @param {!Laya.ShaderDefine} define
 * @return {boolean}
 */
Laya.ShaderData.prototype.hasDefine = function(define) {};

/**
 * 清空宏定义。
 * @return {void}
 */
Laya.ShaderData.prototype.clearDefine = function() {};

/**
 * 获取布尔。
 * @param {number} index shader索引。
 * @return {boolean} 布尔。
 */
Laya.ShaderData.prototype.getBool = function(index) {};

/**
 * 设置布尔。
 * @param {number} index shader索引。
 * @param {boolean} value 布尔。
 * @return {void}
 */
Laya.ShaderData.prototype.setBool = function(index, value) {};

/**
 * 获取整形。
 * @param {number} index shader索引。
 * @return {number} 整形。
 */
Laya.ShaderData.prototype.getInt = function(index) {};

/**
 * 设置整型。
 * @param {number} index shader索引。
 * @param {number} value 整形。
 * @return {void}
 */
Laya.ShaderData.prototype.setInt = function(index, value) {};

/**
 * 获取浮点。
 * @param {number} index shader索引。
 * @return {number} 浮点。
 */
Laya.ShaderData.prototype.getNumber = function(index) {};

/**
 * 设置浮点。
 * @param {number} index shader索引。
 * @param {number} value 浮点。
 * @return {void}
 */
Laya.ShaderData.prototype.setNumber = function(index, value) {};

/**
 * 获取Vector2向量。
 * @param {number} index shader索引。
 * @return {!Laya.Vector2} Vector2向量。
 */
Laya.ShaderData.prototype.getVector2 = function(index) {};

/**
 * 设置Vector2向量。
 * @param {number} index shader索引。
 * @param {!Laya.Vector2} value Vector2向量。
 * @return {void}
 */
Laya.ShaderData.prototype.setVector2 = function(index, value) {};

/**
 * 获取Vector3向量。
 * @param {number} index shader索引。
 * @return {!Laya.Vector3} Vector3向量。
 */
Laya.ShaderData.prototype.getVector3 = function(index) {};

/**
 * 设置Vector3向量。
 * @param {number} index shader索引。
 * @param {!Laya.Vector3} value Vector3向量。
 * @return {void}
 */
Laya.ShaderData.prototype.setVector3 = function(index, value) {};

/**
 * 获取颜色。
 * @param {number} index shader索引。
 * @return {!Laya.Vector4} 颜色向量。
 */
Laya.ShaderData.prototype.getVector = function(index) {};

/**
 * 设置向量。
 * @param {number} index shader索引。
 * @param {!Laya.Vector4} value 向量。
 * @return {void}
 */
Laya.ShaderData.prototype.setVector = function(index, value) {};

/**
 * 获取四元数。
 * @param {number} index shader索引。
 * @return {!Laya.Quaternion} 四元。
 */
Laya.ShaderData.prototype.getQuaternion = function(index) {};

/**
 * 设置四元数。
 * @param {number} index shader索引。
 * @param {!Laya.Quaternion} value 四元数。
 * @return {void}
 */
Laya.ShaderData.prototype.setQuaternion = function(index, value) {};

/**
 * 获取矩阵。
 * @param {number} index shader索引。
 * @return {!Laya.Matrix4x4} 矩阵。
 */
Laya.ShaderData.prototype.getMatrix4x4 = function(index) {};

/**
 * 设置矩阵。
 * @param {number} index shader索引。
 * @param {!Laya.Matrix4x4} value 矩阵。
 * @return {void}
 */
Laya.ShaderData.prototype.setMatrix4x4 = function(index, value) {};

/**
 * 获取Buffer。
 * @param {number} shaderIndex
 * @return {!Float32Array}
 */
Laya.ShaderData.prototype.getBuffer = function(shaderIndex) {};

/**
 * 设置Buffer。
 * @param {number} index shader索引。
 * @param {!Float32Array} value buffer数据。
 * @return {void}
 */
Laya.ShaderData.prototype.setBuffer = function(index, value) {};

/**
 * 设置纹理。
 * @param {number} index shader索引。
 * @param {!Laya.BaseTexture} value 纹理。
 * @return {void}
 */
Laya.ShaderData.prototype.setTexture = function(index, value) {};

/**
 * 获取纹理。
 * @param {number} index shader索引。
 * @return {!Laya.BaseTexture} 纹理。
 */
Laya.ShaderData.prototype.getTexture = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
Laya.ShaderData.prototype.setValueData = function(index, value) {};

/**
 * @param {number} index
 * @return {?}
 */
Laya.ShaderData.prototype.getValueData = function(index) {};

/**
 * 设置Attribute。
 * @param {number} index shader索引。
 * @param {!Int32Array} value 纹理。
 * @return {void}
 */
Laya.ShaderData.prototype.setAttribute = function(index, value) {};

/**
 * 获取Attribute。
 * @param {number} index shader索引。
 * @return {!Array<?>} 纹理。
 */
Laya.ShaderData.prototype.getAttribute = function(index) {};

/**
 * 获取长度。
 * @return {number} 长度。
 */
Laya.ShaderData.prototype.getLength = function() {};

/**
 * 设置长度。
 * @param {number} value
 * @return {void}
 */
Laya.ShaderData.prototype.setLength = function(value) {};

/**
 * 克隆。
 * @param {!Laya.ShaderData} destObject 克隆源。
 * @return {void}
 */
Laya.ShaderData.prototype.cloneTo = function(destObject) {};

/**
 * 克隆。
 * @return {?} 克隆副本。
 */
Laya.ShaderData.prototype.clone = function() {};

/**
 * 克隆。
 * @param {?} destObject 克隆源。
 * @return {void}
 */
Laya.ShaderData.prototype.cloneToForNative = function(destObject) {};

/**
 * @param {number} index
 * @return {void}
 */
Laya.ShaderData.prototype.needRenewArrayBufferForNative = function(index) {};

/**
 * @return {!Array<?>}
 */
Laya.ShaderData.prototype.getDataForNative = function() {};

/**
 * @param {?} value
 * @return {number}
 */
Laya.ShaderData.prototype.setReferenceForNative = function(value) {};

/**
 * @param {boolean} bReference
 * @return {void}
 */
Laya.ShaderData.setRuntimeValueMode = function(bReference) {};

/**
 * @return {void}
 */
Laya.ShaderData.prototype.clearRuntimeCopyArray = function() {};

/**
 * @constructor
 * @struct
 * 创建一个宏定义的实例
 * @param {number} index 宏索引
 * @param {number} value 宏值
 */
Laya.ShaderDefine = function(index, value) {};

/**
 * @extends {Laya.ShaderCompile}
 * @constructor
 * @struct
 * @param {!Laya.SubShader} owner
 * @param {string} vs
 * @param {string} ps
 * @param {!Object<string,number>} stateMap
 */
Laya.ShaderPass = function(owner, vs, ps, stateMap) {};

/* TODO: GetAccessor: Laya.renderState */

/**
 * @protected
 * @param {!Laya.ShaderNode} parent
 * @param {!Array<?>} lines
 * @param {number} start
 * @param {!Array<?>} includefiles
 * @param {?} defs
 * @return {void}
 */
Laya.ShaderPass.prototype._compileToTree = function(parent, lines, start, includefiles, defs) {};

/**
 * 添加标记。
 * @param {string} key 标记键。
 * @param {string} value 标记值。
 * @return {void}
 */
Laya.ShaderPass.prototype.setTag = function(key, value) {};

/**
 * 获取标记值。
 * @param {string} key
 * @return {string} key 标记键。
 */
Laya.ShaderPass.prototype.getTag = function(key) {};

/**
 * @constructor
 * @struct
 * 创建着色器变种。
 * @param {!Laya.Shader3D} shader 着色器
 * @param {number} subShaderIndex 子着色器索引
 * @param {number} passIndex 通道索引
 * @param {!Array<string>} defines 宏定义集合
 */
Laya.ShaderVariant = function(shader, subShaderIndex, passIndex, defines) {};

/* TODO: GetAccessor: Laya.shader */

/* TODO: GetAccessor: Laya.subShaderIndex */

/* TODO: GetAccessor: Laya.passIndex */

/* TODO: GetAccessor: Laya.defineNames */

/**
 * 给着色器变种赋值。
 * @param {!Laya.Shader3D} shader 着色器
 * @param {number} subShaderIndex 子着色器索引
 * @param {number} passIndex 通道索引
 * @param {!Array<string>} defineNames 宏定义集合
 * @return {void}
 */
Laya.ShaderVariant.prototype.setValue = function(shader, subShaderIndex, passIndex, defineNames) {};

/**
 * 是否相等。
 * @param {!Laya.ShaderVariant} other 其它着色器变种
 * @return {boolean} 是否相等。
 */
Laya.ShaderVariant.prototype.equal = function(other) {};

/**
 * 克隆。
 * @return {!Laya.ShaderVariant} 着色器变种。
 */
Laya.ShaderVariant.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
Laya.ShaderVariantCollection = function() {};

/* TODO: GetAccessor: Laya.allCompiled */

/* TODO: GetAccessor: Laya.variantCount */

/**
 * 添加着色器变种。
 * @param {!Laya.ShaderVariant} variant 着色器变种。
 * @return {boolean}
 */
Laya.ShaderVariantCollection.prototype.add = function(variant) {};

/**
 * 移除着色器变种。
 * @param {!Laya.ShaderVariant} variant 着色器变种。
 * @return {boolean} 是否移除成功。
 */
Laya.ShaderVariantCollection.prototype.remove = function(variant) {};

/**
 * 是否包含着色器变种。
 * @param {!Laya.ShaderVariant} variant 着色器变种。
 * @return {boolean}
 */
Laya.ShaderVariantCollection.prototype.contatins = function(variant) {};

/**
 * 通过索引获取着色器变种。
 * @param {number} index 索引。
 * @return {!Laya.ShaderVariant} 着色器变种。
 */
Laya.ShaderVariantCollection.prototype.getByIndex = function(index) {};

/**
 * 清空。
 * @return {void}
 */
Laya.ShaderVariantCollection.prototype.clear = function() {};

/**
 * 执行编译。
 * @return {void}
 */
Laya.ShaderVariantCollection.prototype.compile = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>SubShader</code> 实例。
 * @param {?} attributeMap 顶点属性表。
 * @param {?} uniformMap uniform属性表。
 */
Laya.SubShader = function(attributeMap, uniformMap) {};

/**
 * 添加标记。
 * @param {string} key 标记键。
 * @param {string} value 标记值。
 * @return {void}
 */
Laya.SubShader.prototype.setFlag = function(key, value) {};

/**
 * 获取标记值。
 * @param {string} key
 * @return {string} key 标记键。
 */
Laya.SubShader.prototype.getFlag = function(key) {};

/**
 * 添加着色器Pass
 * @param {string} vs
 * @param {string} ps
 * @param {!Object<string,number>=} stateMap
 * @param {string=} pipelineMode 渲染管线模式。
 * @return {!Laya.ShaderPass}
 */
Laya.SubShader.prototype.addShaderPass = function(vs, ps, stateMap, pipelineMode) {};

/** @enum {number} */
Laya.ShadowLightType = {
  DirectionLight: 1,
  SpotLight: 1,
  PointLight: 1,
};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>TextMesh</code> 实例。
 */
Laya.TextMesh = function() {};
/** @type {?} */
Laya.TextMesh.prototype._text;
/** @type {?} */
Laya.TextMesh.prototype._fontSize;
/** @type {?} */
Laya.TextMesh.prototype._color;

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.fontSize */

/* TODO: SetAccessor: Laya.fontSize */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */
/**
 * @implements {Laya.ISingletonElement}
 * @constructor
 * @struct
 */
Laya.Touch = function() {};
/** @type {?} */
Laya.Touch.prototype._indexInList;

/* TODO: GetAccessor: Laya.identifier */

/* TODO: GetAccessor: Laya.position */

/**
 * [实现ISingletonElement接口]
 * @return {number}
 */
Laya.Touch.prototype._getIndexInList = function() {};

/**
 * [实现ISingletonElement接口]
 * @param {number} index
 * @return {void}
 */
Laya.Touch.prototype._setIndexInList = function(index) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Physics</code> 实例。
 */
Laya.Physics3DUtils = function() {};
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_STATICFILTER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_KINEMATICFILTER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_DEBRISFILTER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_SENSORTRIGGER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CHARACTERFILTER;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER3;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER4;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER6;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER7;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER8;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER9;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER10;
/** @type {number} */
Laya.Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER;
/** @type {!Laya.Vector3} */
Laya.Physics3DUtils.gravity;

/**
 * 是否忽略两个碰撞器的碰撞检测。
 * @param {!Laya.PhysicsComponent} collider1 碰撞器一。
 * @param {!Laya.PhysicsComponent} collider2 碰撞器二。
 * @param {boolean} collsion
 * @return {void}
 */
Laya.Physics3DUtils.setColliderCollision = function(collider1, collider2, collsion) {};

/**
 * 获取是否忽略两个碰撞器的碰撞检测。
 * @param {!Laya.PhysicsComponent} collider1 碰撞器一。
 * @param {!Laya.PhysicsComponent} collider2 碰撞器二。
 * @return {boolean} 是否忽略。
 */
Laya.Physics3DUtils.getIColliderCollision = function(collider1, collider2) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Picker</code> 实例。
 */
Laya.Picker = function() {};
/** @type {?} */
Laya.Picker._tempVector30;
/** @type {?} */
Laya.Picker._tempVector31;
/** @type {?} */
Laya.Picker._tempVector32;
/** @type {?} */
Laya.Picker._tempVector33;
/** @type {?} */
Laya.Picker._tempVector34;

/**
 * 计算鼠标生成的射线。
 * @param {!Laya.Vector2} point 鼠标位置。
 * @param {!Laya.Viewport} viewPort 视口。
 * @param {!Laya.Matrix4x4} projectionMatrix 透视投影矩阵。
 * @param {!Laya.Matrix4x4} viewMatrix 视图矩阵。
 * @param {!Laya.Matrix4x4} world 世界偏移矩阵。
 * @param {!Laya.Ray} out
 * @return {void} out  输出射线。
 */
Laya.Picker.calculateCursorRay = function(point, viewPort, projectionMatrix, viewMatrix, world, out) {};

/**
 * 计算射线和三角形碰撞并返回碰撞距离。
 * @param {!Laya.Ray} ray 射线。
 * @param {!Laya.Vector3} vertex1 顶点1。
 * @param {!Laya.Vector3} vertex2 顶点2。
 * @param {!Laya.Vector3} vertex3 顶点3。
 * @return {number} 射线距离三角形的距离，返回Number.NaN则不相交。
 */
Laya.Picker.rayIntersectsTriangle = function(ray, vertex1, vertex2, vertex3) {};

/**
 * @constructor
 * @struct
 * 创建Size实例
 * @param {number} width 宽度
 * @param {number} height 高度
 */
Laya.Size = function(width, height) {};

/* TODO: GetAccessor: Laya.fullScreen */
/** @type {?} */
Laya.Size.prototype._width;
/** @type {?} */
Laya.Size.prototype._height;

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */
/**
 * @constructor
 * @struct
 */
Laya.Utils3D = function() {};
/** @type {?} */
Laya.Utils3D._tempVector3_0;
/** @type {?} */
Laya.Utils3D._tempVector3_1;
/** @type {?} */
Laya.Utils3D._tempArray16_0;
/** @type {?} */
Laya.Utils3D._tempArray16_1;
/** @type {?} */
Laya.Utils3D._tempArray16_2;
/** @type {?} */
Laya.Utils3D._tempArray16_3;
/** @type {?} */
Laya.Utils3D._rotationTransformScaleSkinAnimation;

/**
 * 根据四元数旋转三维向量。
 * @param {!Float32Array} sourceArray
 * @param {number} sourceOffset
 * @param {!Laya.Quaternion} rotation 旋转四元数。
 * @param {!Float32Array} outArray
 * @param {number} outOffset
 * @return {void}
 */
Laya.Utils3D.transformVector3ArrayByQuat = function(sourceArray, sourceOffset, rotation, outArray, outOffset) {};

/**
 * 通过数组数据计算矩阵乘法。
 * @param {!Float32Array} leftArray left矩阵数组。
 * @param {number} leftOffset left矩阵数组的偏移。
 * @param {!Float32Array} rightArray right矩阵数组。
 * @param {number} rightOffset right矩阵数组的偏移。
 * @param {!Float32Array} outArray 输出矩阵数组。
 * @param {number} outOffset 输出矩阵数组的偏移。
 * @return {void}
 */
Laya.Utils3D.mulMatrixByArray = function(leftArray, leftOffset, rightArray, rightOffset, outArray, outOffset) {};

/**
 * 通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。
 * @param {!Float32Array} leftArray left矩阵数组。
 * @param {number} leftOffset left矩阵数组的偏移。
 * @param {!Float32Array} rightArray right矩阵数组。
 * @param {number} rightOffset right矩阵数组的偏移。
 * @param {!Float32Array} outArray 结果矩阵数组。
 * @param {number} outOffset 结果矩阵数组的偏移。
 * @return {void}
 */
Laya.Utils3D.mulMatrixByArrayFast = function(leftArray, leftOffset, rightArray, rightOffset, outArray, outOffset) {};

/**
 * 通过数组数据计算矩阵乘法,rightArray和outArray不能为同一数组引用。
 * @param {!Float32Array} leftArray left矩阵数组。
 * @param {number} leftOffset left矩阵数组的偏移。
 * @param {!Laya.Matrix4x4} rightMatrix right矩阵。
 * @param {!Float32Array} outArray 结果矩阵数组。
 * @param {number} outOffset 结果矩阵数组的偏移。
 * @return {void}
 */
Laya.Utils3D.mulMatrixByArrayAndMatrixFast = function(leftArray, leftOffset, rightMatrix, outArray, outOffset) {};

/**
 * 通过数平移、旋转、缩放值计算到结果矩阵数组。
 * @param {number} tX left矩阵数组。
 * @param {number} tY left矩阵数组的偏移。
 * @param {number} tZ right矩阵数组。
 * @param {number} rX
 * @param {number} rY
 * @param {number} rZ
 * @param {number} rW
 * @param {number} sX 输出矩阵数组的偏移。
 * @param {number} sY 输出矩阵数组的偏移。
 * @param {number} sZ 输出矩阵数组的偏移。
 * @param {!Float32Array} outArray 结果矩阵数组。
 * @param {number} outOffset 结果矩阵数组的偏移。
 * @return {void}
 */
Laya.Utils3D.createAffineTransformationArray = function(tX, tY, tZ, rX, rY, rZ, rW, sX, sY, sZ, outArray, outOffset) {};

/**
 * 通过矩阵转换一个三维向量数组到另外一个三维向量数组。
 * @param {!Float32Array} source 源三维向量所在数组。
 * @param {number} sourceOffset 源三维向量数组偏移。
 * @param {!Laya.Matrix4x4} transform 变换矩阵。
 * @param {!Float32Array} result 输出三维向量所在数组。
 * @param {number} resultOffset 输出三维向量数组偏移。
 * @return {void}
 */
Laya.Utils3D.transformVector3ArrayToVector3ArrayCoordinate = function(source, sourceOffset, transform, result, resultOffset) {};

/**
 * 通过矩阵转换一个三维向量数组到另外一个归一化的三维向量数组。
 * @param {!Float32Array} source 源三维向量所在数组。
 * @param {number} sourceOffset 源三维向量数组偏移。
 * @param {!Laya.Matrix4x4} transform 变换矩阵。
 * @param {!Float32Array} result 输出三维向量所在数组。
 * @param {number} resultOffset 输出三维向量数组偏移。
 * @return {void}
 */
Laya.Utils3D.transformVector3ArrayToVector3ArrayNormal = function(source, sourceOffset, transform, result, resultOffset) {};

/**
 * 获取URL版本字符。
 * @param {string} url
 * @return {string}
 */
Laya.Utils3D.getURLVerion = function(url) {};

/**
 * 四元数旋转矩阵
 * @param {!Laya.Vector3} source 源数据
 * @param {!Float32Array} rotation 旋转四元数Array
 * @param {!Laya.Vector3} out 输出数据
 * @return {void}
 */
Laya.Utils3D.transformQuat = function(source, rotation, out) {};

/**
 * 修改四元数权重
 * @param {!Laya.Quaternion} f 元数据
 * @param {number} weight 权重
 * @param {!Laya.Quaternion} e 目标数据
 * @return {void}
 */
Laya.Utils3D.quaternionWeight = function(f, weight, e) {};

/**
 * 将RenderTexture转换为Base64
 * @param {!Laya.RenderTexture} rendertexture 渲染Buffer
 * @return {!String}
 */
Laya.Utils3D.uint8ArrayToArrayBuffer = function(rendertexture) {};

/**
 * @constructor
 * @struct
 */
Laya.Geolocation = function() {};
/** @type {?} */
Laya.Geolocation.navigator;
/** @type {?} */
Laya.Geolocation.position;
/** @type {number} */
Laya.Geolocation.PERMISSION_DENIED;
/** @type {number} */
Laya.Geolocation.POSITION_UNAVAILABLE;
/** @type {number} */
Laya.Geolocation.TIMEOUT;
/** @type {boolean} */
Laya.Geolocation.supported;
/** @type {boolean} */
Laya.Geolocation.enableHighAccuracy;
/** @type {number} */
Laya.Geolocation.timeout;
/** @type {number} */
Laya.Geolocation.maximumAge;

/**
 * 获取设备当前位置。
 * @param {!Handler} onSuccess 带有唯一<code>Position</code>参数的回调处理器。
 * @param {!Handler=} onError 可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。
 * @return {void}
 */
Laya.Geolocation.getCurrentPosition = function(onSuccess, onError) {};

/**
 * 监视设备当前位置。回调处理器在设备位置改变时被执行。
 * @param {!Handler} onSuccess 带有唯一<code>Position</code>参数的回调处理器。
 * @param {!Handler} onError 可选的。带有错误信息的回调处理器。错误代码为Geolocation.PERMISSION_DENIED、Geolocation.POSITION_UNAVAILABLE和Geolocation.TIMEOUT之一。
 * @return {number}
 */
Laya.Geolocation.watchPosition = function(onSuccess, onError) {};

/**
 * 移除<code>watchPosition</code>安装的指定处理器。
 * @param {number} id
 * @return {void}
 */
Laya.Geolocation.clearWatch = function(id) {};
/**
 * @constructor
 * @struct
 */
Laya.GeolocationInfo = function() {};
/** @type {?} */
Laya.GeolocationInfo.prototype.pos;
/** @type {?} */
Laya.GeolocationInfo.prototype.coords;

/* TODO: GetAccessor: Laya.latitude */

/* TODO: GetAccessor: Laya.longitude */

/* TODO: GetAccessor: Laya.altitude */

/* TODO: GetAccessor: Laya.accuracy */

/* TODO: GetAccessor: Laya.altitudeAccuracy */

/* TODO: GetAccessor: Laya.heading */

/* TODO: GetAccessor: Laya.speed */

/* TODO: GetAccessor: Laya.timestamp */

/**
 * 设置设备经纬度
 * @param {?} pos
 * @return {void}
 */
Laya.GeolocationInfo.prototype.setPosition = function(pos) {};

/**
 * @extends {Laya.Bitmap}
 * @constructor
 * @struct
 */
Laya.HtmlVideo = function() {};
/** @type {!HTMLVideoElement} */
Laya.HtmlVideo.prototype.video;
/** @type {?} */
Laya.HtmlVideo.prototype._source;
/** @type {number} */
Laya.HtmlVideo.prototype._w;
/** @type {number} */
Laya.HtmlVideo.prototype._h;
/** @type {!Function} */
Laya.HtmlVideo.create;
/** @type {?} */
Laya.HtmlVideo.prototype.createDomElement;
/** @type {?} */
Laya.HtmlVideo.prototype.appendSource;

/**
 * 设置播放源路径
 * @param {string} url 播放源路径
 * @param {number} extension 播放源类型(1: MP4, 2: OGG)
 * @return {void}
 */
Laya.HtmlVideo.prototype.setSource = function(url, extension) {};

/**
 * 获取播放源
 * @return {?}
 */
Laya.HtmlVideo.prototype.getVideo = function() {};

/**
 * 销毁
 * @override
 * @return {void}
 */
Laya.HtmlVideo.prototype.destroy = function() {};

/**
 * @constructor
 * @struct
 */
Laya.Media = function() {};

/**
 * 检查浏览器兼容性。
 * @return {boolean}
 */
Laya.Media.supported = function() {};

/**
 * 获取用户媒体。
 * @param {?} options 简单的可选项可以使<code>{ audio:true, video:true }</code>表示同时捕捉两者。详情见<i>https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia</i>。
 * @param {!Handler} onSuccess 获取成功的处理器，唯一参数返回媒体的Blob地址，可以将其传给Video。
 * @param {!Handler} onError 获取失败的处理器，唯一参数是Error。
 * @return {void}
 */
Laya.Media.getMedia = function(options, onSuccess, onError) {};

/** @enum {number} */
Laya.VIDEOTYPE = {
  MP4: 1,
  OGG: 1,
  CAMERA: 1,
  WEBM: 1,
};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 */
Laya.Video = function(width, height) {};
/** @type {number} */
Laya.Video.MP4;
/** @type {number} */
Laya.Video.OGG;
/** @type {number} */
Laya.Video.CAMERA;
/** @type {number} */
Laya.Video.WEBM;
/** @type {string} */
Laya.Video.SUPPORT_PROBABLY;
/** @type {string} */
Laya.Video.SUPPORT_MAYBY;
/** @type {string} */
Laya.Video.SUPPORT_NO;
/** @type {?} */
Laya.Video.prototype.htmlVideo;
/** @type {?} */
Laya.Video.prototype.videoElement;
/** @type {?} */
Laya.Video.prototype.internalTexture;
/** @type {?} */
Laya.Video.prototype._clickhandle;
/** @type {?} */
Laya.Video.onAbort;
/** @type {?} */
Laya.Video.onCanplay;
/** @type {?} */
Laya.Video.onCanplaythrough;
/** @type {?} */
Laya.Video.onDurationchange;
/** @type {?} */
Laya.Video.onEmptied;
/** @type {?} */
Laya.Video.onError;
/** @type {?} */
Laya.Video.onLoadeddata;
/** @type {?} */
Laya.Video.onLoadedmetadata;
/** @type {?} */
Laya.Video.onLoadstart;
/** @type {?} */
Laya.Video.onPause;
/** @type {?} */
Laya.Video.onPlay;
/** @type {?} */
Laya.Video.onPlaying;
/** @type {?} */
Laya.Video.onProgress;
/** @type {?} */
Laya.Video.onRatechange;
/** @type {?} */
Laya.Video.onSeeked;
/** @type {?} */
Laya.Video.onSeeking;
/** @type {?} */
Laya.Video.onStalled;
/** @type {?} */
Laya.Video.onSuspend;
/** @type {?} */
Laya.Video.onTimeupdate;
/** @type {?} */
Laya.Video.onVolumechange;
/** @type {?} */
Laya.Video.onWaiting;
/** @type {?} */
Laya.Video.prototype.onPlayComplete;
/** @type {?} */
Laya.Video.prototype.renderCanvas;
/** @type {?} */
Laya.Video.prototype.onDocumentClick;

/* TODO: GetAccessor: Laya.buffered */

/* TODO: GetAccessor: Laya.currentSrc */

/* TODO: GetAccessor: Laya.currentTime */

/* TODO: SetAccessor: Laya.currentTime */

/* TODO: SetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.readyState */

/* TODO: GetAccessor: Laya.videoWidth */

/* TODO: GetAccessor: Laya.videoHeight */

/* TODO: GetAccessor: Laya.duration */

/* TODO: GetAccessor: Laya.ended */

/* TODO: GetAccessor: Laya.error */

/* TODO: GetAccessor: Laya.loop */

/* TODO: SetAccessor: Laya.loop */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.playbackRate */

/* TODO: SetAccessor: Laya.playbackRate */

/* TODO: GetAccessor: Laya.muted */

/* TODO: SetAccessor: Laya.muted */

/* TODO: GetAccessor: Laya.paused */

/* TODO: GetAccessor: Laya.preload */

/* TODO: SetAccessor: Laya.preload */

/* TODO: GetAccessor: Laya.seekable */

/* TODO: GetAccessor: Laya.seeking */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */
/** @type {?} */
Laya.Video.prototype.syncVideoPosition;

/**
 * 设置播放源。
 * @param {string} url 播放源路径。
 * @return {void}
 */
Laya.Video.prototype.load = function(url) {};

/**
 * 开始播放视频。
 * @return {void}
 */
Laya.Video.prototype.play = function() {};

/**
 * 暂停视频播放。
 * @return {void}
 */
Laya.Video.prototype.pause = function() {};

/**
 * 重新加载视频。
 * @return {void}
 */
Laya.Video.prototype.reload = function() {};

/**
 * 检测是否支持播放指定格式视频。
 * @param {number} type 参数为Video.MP4 / Video.OGG / Video.WEBM之一。
 * @return {string} 表示支持的级别。可能的值：
 */
Laya.Video.prototype.canPlayType = function(type) {};

/**
 * @override
 * @param {number} width
 * @param {number} height
 * @return {!Laya.Sprite}
 */
Laya.Video.prototype.size = function(width, height) {};

/**
 * 销毁内部事件绑定。
 * @override
 * @param {boolean=} detroyChildren
 * @return {void}
 */
Laya.Video.prototype.destroy = function(detroyChildren) {};

/**
 * @constructor
 * @struct
 */
Laya.AccelerationInfo = function() {};
/** @type {number} */
Laya.AccelerationInfo.prototype.x;
/** @type {number} */
Laya.AccelerationInfo.prototype.y;
/** @type {number} */
Laya.AccelerationInfo.prototype.z;

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * @param {number} singleton
 */
Laya.Accelerator = function(singleton) {};
/** @type {?} */
Laya.Accelerator._instance;

/* TODO: GetAccessor: Laya.instance */
/** @type {?} */
Laya.Accelerator.acceleration;
/** @type {?} */
Laya.Accelerator.accelerationIncludingGravity;
/** @type {?} */
Laya.Accelerator.rotationRate;
/** @type {?} */
Laya.Accelerator.prototype.onDeviceOrientationChange;
/** @type {?} */
Laya.Accelerator.transformedAcceleration;

/**
 * 侦听加速器运动。
 * @override
 * @param {string} type
 * @param {?} caller
 * @param {!Function} listener
 * @param {!Array<?>=} args
 * @return {!Laya.EventDispatcher}
 */
Laya.Accelerator.prototype.on = function(type, caller, listener, args) {};

/**
 * 取消侦听加速器。
 * @override
 * @param {string} type
 * @param {?} caller
 * @param {!Function} listener
 * @param {boolean=} onceOnly
 * @return {!Laya.EventDispatcher}
 */
Laya.Accelerator.prototype.off = function(type, caller, listener, onceOnly) {};

/**
 * 把加速度值转换为视觉上正确的加速度值。依赖于Browser.window.orientation，可能在部分低端机无效。
 * @param {!Laya.AccelerationInfo} acceleration
 * @return {!Laya.AccelerationInfo}
 */
Laya.Accelerator.getTransformedAcceleration = function(acceleration) {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * @param {number} singleton
 */
Laya.Gyroscope = function(singleton) {};
/** @type {?} */
Laya.Gyroscope.info;
/** @type {?} */
Laya.Gyroscope._instance;

/* TODO: GetAccessor: Laya.instance */
/** @type {?} */
Laya.Gyroscope.prototype.onDeviceOrientationChange;

/**
 * 监视陀螺仪运动。
 * @override
 * @param {string} type
 * @param {?} caller
 * @param {!Function} listener
 * @param {!Array<?>=} args
 * @return {!Laya.EventDispatcher}
 */
Laya.Gyroscope.prototype.on = function(type, caller, listener, args) {};

/**
 * 取消指定处理器对陀螺仪的监视。
 * @override
 * @param {string} type
 * @param {?} caller
 * @param {!Function} listener
 * @param {boolean=} onceOnly
 * @return {!Laya.EventDispatcher}
 */
Laya.Gyroscope.prototype.off = function(type, caller, listener, onceOnly) {};

/**
 * @constructor
 * @struct
 */
Laya.RotationInfo = function() {};
/** @type {boolean} */
Laya.RotationInfo.prototype.absolute;
/** @type {number} */
Laya.RotationInfo.prototype.alpha;
/** @type {number} */
Laya.RotationInfo.prototype.beta;
/** @type {number} */
Laya.RotationInfo.prototype.gamma;
/** @type {number} */
Laya.RotationInfo.prototype.compassAccuracy;

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.Shake = function() {};
/** @type {?} */
Laya.Shake.prototype.throushold;
/** @type {?} */
Laya.Shake.prototype.shakeInterval;
/** @type {?} */
Laya.Shake.prototype.callback;
/** @type {?} */
Laya.Shake.prototype.lastX;
/** @type {?} */
Laya.Shake.prototype.lastY;
/** @type {?} */
Laya.Shake.prototype.lastZ;
/** @type {?} */
Laya.Shake.prototype.lastMillSecond;
/** @type {?} */
Laya.Shake._instance;

/* TODO: GetAccessor: Laya.instance */
/** @type {?} */
Laya.Shake.prototype.onShake;
/** @type {?} */
Laya.Shake.prototype.isShaked;

/**
 * 开始响应设备摇晃。
 * @param {number} throushold 响应的瞬时速度阈值，轻度摇晃的值约在5~10间。
 * @param {number} interval
 * @return {void}
 */
Laya.Shake.prototype.start = function(throushold, interval) {};

/**
 * 停止响应设备摇晃。
 * @return {void}
 */
Laya.Shake.prototype.stop = function() {};

/**
 * @extends {Laya.AnimationBase}
 * @constructor
 * @struct
 * 创建一个新的 <code>Animation</code> 实例。
 */
Laya.Animation = function() {};
/** @type {?} */
Laya.Animation.framesMap;
/** @type {!Array<?>} */
Laya.Animation.prototype._frames;
/** @type {string} */
Laya.Animation.prototype._url;
/** @type {?} */
Laya.Animation.prototype._copyLabels;

/* TODO: GetAccessor: Laya.frames */

/* TODO: SetAccessor: Laya.frames */

/* TODO: SetAccessor: Laya.source */

/* TODO: SetAccessor: Laya.autoAnimation */

/* TODO: SetAccessor: Laya.autoPlay */
/** @type {?} */
Laya.Animation.prototype._loadAnimationData;

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Animation.prototype.destroy = function(destroyChild) {};

/**
 * <p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
 * <p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
 * <p>配合wrapMode属性，可设置动画播放顺序类型。</p>
 * @override
 * @param {?=} start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
 * @param {boolean=} loop （可选）是否循环播放。
 * @param {string=} name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
 * @return {void}
 */
Laya.Animation.prototype.play = function(start, loop, name) {};

/**
 * @protected
 * @param {string} name
 * @param {boolean=} showWarn
 * @return {boolean}
 */
Laya.Animation.prototype._setFramesFromCache = function(name, showWarn) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.Animation.prototype._frameLoop = function() {};

/**
 * @override
 * @protected
 * @param {number} value
 * @return {void}
 */
Laya.Animation.prototype._displayToIndex = function(value) {};

/**
 * 停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
 * @override
 * @return {!Laya.AnimationBase}
 */
Laya.Animation.prototype.clear = function() {};

/**
 * <p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
 * <p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
 * <p>因为返回值为Animation对象本身，所以可以使用如下语法：loadImages(...).loadImages(...).play(...);。</p>
 * @param {!Array<?>} urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
 * @param {string=} cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
 * @return {!Laya.Animation} 返回Animation对象本身。
 */
Laya.Animation.prototype.loadImages = function(urls, cacheName) {};

/**
 * <p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
 * <p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
 * <p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
 * <p>因为返回值为Animation对象本身，所以可以使用如下语法：loadAtlas(...).loadAtlas(...).play(...);。</p>
 * @param {string} url 图集路径。需要创建动画模版时，会以此为数据源。
 * @param {!Handler=} loaded （可选）使用指定图集初始化动画完毕的回调。
 * @param {string=} cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
 * @return {!Laya.Animation} 返回动画本身。
 */
Laya.Animation.prototype.loadAtlas = function(url, loaded, cacheName) {};

/**
 * <p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
 * <p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
 * <p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
 * <p>因为返回值为Animation对象本身，所以可以使用如下语法：loadAnimation(...).loadAnimation(...).play(...);。</p>
 * @param {string} url 动画文件路径。可由LayaAir IDE创建并发布。
 * @param {!Handler=} loaded （可选）使用指定动画资源初始化动画完毕的回调。
 * @param {string=} atlas （可选）动画用到的图集地址（可选）。
 * @return {!Laya.Animation} 返回动画本身。
 */
Laya.Animation.prototype.loadAnimation = function(url, loaded, atlas) {};

/**
 * <p>创建动画模板，多个动画可共享同一份动画模板，而不必每次都创建一份新的，从而节省创建Graphics集合的开销。</p>
 * @param {(string|!Array<string>)} url 图集路径或者图片路径数组。如果是图集路径，需要相应图集已经被预加载，如果没有预加载，会导致创建失败。
 * @param {string} name 动画模板在动画模版缓存池中的key。如果不为空，则以此为key缓存动画模板，否则不缓存。
 * @return {!Array<?>} 动画模板。
 */
Laya.Animation.createFrames = function(url, name) {};

/**
 * <p>从动画模版缓存池中清除指定key值的动画数据。</p>
 * <p>开发者在调用创建动画模版函数时，可以手动指定此值。而如果是由LayaAir IDE创建的动画集，解析后的key格式为："url#"：表示动画集的默认动画模版，如果以此值为参数，会清除整个动画集数据；"url#aniName"：表示相应名称的动画模版。</p>
 * @param {string} key 动画模板在动画模版缓存池中的key。
 * @return {void}
 */
Laya.Animation.clearCache = function(key) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。
 */
Laya.AnimationBase = function() {};
/** @type {number} */
Laya.AnimationBase.WRAP_POSITIVE;
/** @type {number} */
Laya.AnimationBase.WRAP_REVERSE;
/** @type {number} */
Laya.AnimationBase.WRAP_PINGPONG;
/** @type {boolean} */
Laya.AnimationBase.prototype.loop;
/** @type {number} */
Laya.AnimationBase.prototype.wrapMode;
/** @type {number} */
Laya.AnimationBase.prototype._interval;
/** @type {number} */
Laya.AnimationBase.prototype._index;
/** @type {number} */
Laya.AnimationBase.prototype._count;
/** @type {boolean} */
Laya.AnimationBase.prototype._isPlaying;
/** @type {?} */
Laya.AnimationBase.prototype._labels;
/** @type {boolean} */
Laya.AnimationBase.prototype._isReverse;
/** @type {boolean} */
Laya.AnimationBase.prototype._frameRateChanged;
/** @type {string} */
Laya.AnimationBase.prototype._actionName;
/** @type {?} */
Laya.AnimationBase.prototype._controlNode;

/* TODO: GetAccessor: Laya.interval */

/* TODO: SetAccessor: Laya.interval */

/* TODO: GetAccessor: Laya.isPlaying */
/** @type {?} */
Laya.AnimationBase.prototype._removeLabelFromList;

/* TODO: GetAccessor: Laya.index */

/* TODO: SetAccessor: Laya.index */

/* TODO: GetAccessor: Laya.count */

/**
 * <p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
 * <p>配合wrapMode属性，可设置动画播放顺序类型。</p>
 * @param {?=} start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
 * @param {boolean=} loop （可选）是否循环播放。
 * @param {string=} name （可选）动画名称。
 * @return {void}
 */
Laya.AnimationBase.prototype.play = function(start, loop, name) {};

/**
 * @protected
 * @param {string} label
 * @return {number}
 */
Laya.AnimationBase.prototype._getFrameByLabel = function(label) {};

/**
 * @protected
 * @return {void}
 */
Laya.AnimationBase.prototype._frameLoop = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.AnimationBase.prototype._resumePlay = function() {};

/**
 * 停止动画播放。
 * @return {void}
 */
Laya.AnimationBase.prototype.stop = function() {};

/**
 * 增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
 * @param {string} label 帧标签名称
 * @param {number} index 帧索引
 * @return {void}
 */
Laya.AnimationBase.prototype.addLabel = function(label, index) {};

/**
 * 删除指定的帧标签。
 * @param {string} label 帧标签名称。注意：如果为空，则删除所有帧标签！
 * @return {void}
 */
Laya.AnimationBase.prototype.removeLabel = function(label) {};

/**
 * 将动画切换到指定帧并停在那里。
 * @param {?} position 帧索引或帧标签
 * @return {void}
 */
Laya.AnimationBase.prototype.gotoAndStop = function(position) {};

/**
 * @protected
 * @param {number} value 帧索引
 * @return {void}
 */
Laya.AnimationBase.prototype._displayToIndex = function(value) {};

/**
 * 停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
 * @return {!Laya.AnimationBase} 返回对象本身
 */
Laya.AnimationBase.prototype.clear = function() {};
/**
 * @constructor
 * @struct
 */
Laya.BitmapFont = function() {};
/** @type {?} */
Laya.BitmapFont.prototype._texture;
/** @type {?} */
Laya.BitmapFont.prototype._fontCharDic;
/** @type {?} */
Laya.BitmapFont.prototype._fontWidthMap;
/** @type {?} */
Laya.BitmapFont.prototype._complete;
/** @type {?} */
Laya.BitmapFont.prototype._path;
/** @type {?} */
Laya.BitmapFont.prototype._maxWidth;
/** @type {?} */
Laya.BitmapFont.prototype._spaceWidth;
/** @type {?} */
Laya.BitmapFont.prototype._padding;
/** @type {number} */
Laya.BitmapFont.prototype.fontSize;
/** @type {boolean} */
Laya.BitmapFont.prototype.autoScaleSize;
/** @type {number} */
Laya.BitmapFont.prototype.letterSpacing;
/** @type {?} */
Laya.BitmapFont.prototype._onLoaded;

/**
 * 通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
 * @param {string} path 位图字体文件的路径。
 * @param {!Handler} complete 加载并解析完成的回调。
 * @return {void}
 */
Laya.BitmapFont.prototype.loadFont = function(path, complete) {};

/**
 * 解析字体文件。
 * @param {!XMLDocument} xml 字体文件XML。
 * @param {!Laya.Texture} texture 字体的纹理。
 * @return {void}
 */
Laya.BitmapFont.prototype.parseFont = function(xml, texture) {};

/**
 * 解析字体文件。
 * @param {!XMLDocument} xml 字体文件XML。
 * @param {!Laya.Texture} texture 字体的纹理。
 * @return {void}
 */
Laya.BitmapFont.prototype.parseFont2 = function(xml, texture) {};

/**
 * 获取指定字符的字体纹理对象。
 * @param {string} char 字符。
 * @return {!Laya.Texture} 指定的字体纹理对象。
 */
Laya.BitmapFont.prototype.getCharTexture = function(char) {};

/**
 * 销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
 * @return {void}
 */
Laya.BitmapFont.prototype.destroy = function() {};

/**
 * 设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
 * @param {number} spaceWidth 宽度，单位为像素。
 * @return {void}
 */
Laya.BitmapFont.prototype.setSpaceWidth = function(spaceWidth) {};

/**
 * 获取指定字符的宽度。
 * @param {string} char 字符。
 * @return {number} 宽度。
 */
Laya.BitmapFont.prototype.getCharWidth = function(char) {};

/**
 * 获取指定文本内容的宽度。
 * @param {string} text 文本内容。
 * @return {number} 宽度。
 */
Laya.BitmapFont.prototype.getTextWidth = function(text) {};

/**
 * 获取最大字符宽度。
 * @return {number}
 */
Laya.BitmapFont.prototype.getMaxWidth = function() {};

/**
 * 获取最大字符高度。
 * @return {number}
 */
Laya.BitmapFont.prototype.getMaxHeight = function() {};
/**
 * @constructor
 * @struct
 */
Laya.AlphaCmd = function() {};
/** @type {string} */
Laya.AlphaCmd.ID;
/** @type {number} */
Laya.AlphaCmd.prototype.alpha;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} alpha
 * @return {!Laya.AlphaCmd}
 */
Laya.AlphaCmd.create = function(alpha) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.AlphaCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.AlphaCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.ClipRectCmd = function() {};
/** @type {string} */
Laya.ClipRectCmd.ID;
/** @type {number} */
Laya.ClipRectCmd.prototype.x;
/** @type {number} */
Laya.ClipRectCmd.prototype.y;
/** @type {number} */
Laya.ClipRectCmd.prototype.width;
/** @type {number} */
Laya.ClipRectCmd.prototype.height;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Laya.ClipRectCmd}
 */
Laya.ClipRectCmd.create = function(x, y, width, height) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.ClipRectCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.ClipRectCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawCircleCmd = function() {};
/** @type {string} */
Laya.DrawCircleCmd.ID;
/** @type {number} */
Laya.DrawCircleCmd.prototype.x;
/** @type {number} */
Laya.DrawCircleCmd.prototype.y;
/** @type {number} */
Laya.DrawCircleCmd.prototype.radius;
/** @type {?} */
Laya.DrawCircleCmd.prototype.fillColor;
/** @type {?} */
Laya.DrawCircleCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawCircleCmd.prototype.lineWidth;
/** @type {number} */
Laya.DrawCircleCmd.prototype.vid;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {?} fillColor
 * @param {?} lineColor
 * @param {number} lineWidth
 * @param {number} vid
 * @return {!Laya.DrawCircleCmd}
 */
Laya.DrawCircleCmd.create = function(x, y, radius, fillColor, lineColor, lineWidth, vid) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawCircleCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawCircleCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawCurvesCmd = function() {};
/** @type {string} */
Laya.DrawCurvesCmd.ID;
/** @type {number} */
Laya.DrawCurvesCmd.prototype.x;
/** @type {number} */
Laya.DrawCurvesCmd.prototype.y;
/** @type {!Array<number>} */
Laya.DrawCurvesCmd.prototype.points;
/** @type {?} */
Laya.DrawCurvesCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawCurvesCmd.prototype.lineWidth;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} points
 * @param {?} lineColor
 * @param {number} lineWidth
 * @return {!Laya.DrawCurvesCmd}
 */
Laya.DrawCurvesCmd.create = function(x, y, points, lineColor, lineWidth) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawCurvesCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawCurvesCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawImageCmd = function() {};
/** @type {string} */
Laya.DrawImageCmd.ID;
/** @type {!Laya.Texture} */
Laya.DrawImageCmd.prototype.texture;
/** @type {number} */
Laya.DrawImageCmd.prototype.x;
/** @type {number} */
Laya.DrawImageCmd.prototype.y;
/** @type {number} */
Laya.DrawImageCmd.prototype.width;
/** @type {number} */
Laya.DrawImageCmd.prototype.height;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Laya.DrawImageCmd}
 */
Laya.DrawImageCmd.create = function(texture, x, y, width, height) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawImageCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawImageCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawLineCmd = function() {};
/** @type {string} */
Laya.DrawLineCmd.ID;
/** @type {number} */
Laya.DrawLineCmd.prototype.fromX;
/** @type {number} */
Laya.DrawLineCmd.prototype.fromY;
/** @type {number} */
Laya.DrawLineCmd.prototype.toX;
/** @type {number} */
Laya.DrawLineCmd.prototype.toY;
/** @type {string} */
Laya.DrawLineCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawLineCmd.prototype.lineWidth;
/** @type {number} */
Laya.DrawLineCmd.prototype.vid;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} fromX
 * @param {number} fromY
 * @param {number} toX
 * @param {number} toY
 * @param {string} lineColor
 * @param {number} lineWidth
 * @param {number} vid
 * @return {!Laya.DrawLineCmd}
 */
Laya.DrawLineCmd.create = function(fromX, fromY, toX, toY, lineColor, lineWidth, vid) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawLineCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawLineCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawLinesCmd = function() {};
/** @type {string} */
Laya.DrawLinesCmd.ID;
/** @type {number} */
Laya.DrawLinesCmd.prototype.x;
/** @type {number} */
Laya.DrawLinesCmd.prototype.y;
/** @type {!Array<number>} */
Laya.DrawLinesCmd.prototype.points;
/** @type {?} */
Laya.DrawLinesCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawLinesCmd.prototype.lineWidth;
/** @type {number} */
Laya.DrawLinesCmd.prototype.vid;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} points
 * @param {?} lineColor
 * @param {number} lineWidth
 * @param {number} vid
 * @return {!Laya.DrawLinesCmd}
 */
Laya.DrawLinesCmd.create = function(x, y, points, lineColor, lineWidth, vid) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawLinesCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawLinesCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawParticleCmd = function() {};
/** @type {string} */
Laya.DrawParticleCmd.ID;
/** @type {?} */
Laya.DrawParticleCmd.prototype._templ;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {?} _temp
 * @return {!Laya.DrawParticleCmd}
 */
Laya.DrawParticleCmd.create = function(_temp) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawParticleCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawParticleCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawPathCmd = function() {};
/** @type {string} */
Laya.DrawPathCmd.ID;
/** @type {number} */
Laya.DrawPathCmd.prototype.x;
/** @type {number} */
Laya.DrawPathCmd.prototype.y;
/** @type {!Array<?>} */
Laya.DrawPathCmd.prototype.paths;
/** @type {?} */
Laya.DrawPathCmd.prototype.brush;
/** @type {?} */
Laya.DrawPathCmd.prototype.pen;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} paths
 * @param {?} brush
 * @param {?} pen
 * @return {!Laya.DrawPathCmd}
 */
Laya.DrawPathCmd.create = function(x, y, paths, brush, pen) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawPathCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawPathCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawPieCmd = function() {};
/** @type {string} */
Laya.DrawPieCmd.ID;
/** @type {number} */
Laya.DrawPieCmd.prototype.x;
/** @type {number} */
Laya.DrawPieCmd.prototype.y;
/** @type {number} */
Laya.DrawPieCmd.prototype.radius;
/** @type {?} */
Laya.DrawPieCmd.prototype._startAngle;
/** @type {?} */
Laya.DrawPieCmd.prototype._endAngle;
/** @type {?} */
Laya.DrawPieCmd.prototype.fillColor;
/** @type {?} */
Laya.DrawPieCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawPieCmd.prototype.lineWidth;
/** @type {number} */
Laya.DrawPieCmd.prototype.vid;

/* TODO: GetAccessor: Laya.cmdID */

/* TODO: GetAccessor: Laya.startAngle */

/* TODO: SetAccessor: Laya.startAngle */

/* TODO: GetAccessor: Laya.endAngle */

/* TODO: SetAccessor: Laya.endAngle */

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {?} fillColor
 * @param {?} lineColor
 * @param {number} lineWidth
 * @param {number} vid
 * @return {!Laya.DrawPieCmd}
 */
Laya.DrawPieCmd.create = function(x, y, radius, startAngle, endAngle, fillColor, lineColor, lineWidth, vid) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawPieCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawPieCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawPolyCmd = function() {};
/** @type {string} */
Laya.DrawPolyCmd.ID;
/** @type {number} */
Laya.DrawPolyCmd.prototype.x;
/** @type {number} */
Laya.DrawPolyCmd.prototype.y;
/** @type {!Array<number>} */
Laya.DrawPolyCmd.prototype.points;
/** @type {?} */
Laya.DrawPolyCmd.prototype.fillColor;
/** @type {?} */
Laya.DrawPolyCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawPolyCmd.prototype.lineWidth;
/** @type {boolean} */
Laya.DrawPolyCmd.prototype.isConvexPolygon;
/** @type {number} */
Laya.DrawPolyCmd.prototype.vid;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} points
 * @param {?} fillColor
 * @param {?} lineColor
 * @param {number} lineWidth
 * @param {boolean} isConvexPolygon
 * @param {number} vid
 * @return {!Laya.DrawPolyCmd}
 */
Laya.DrawPolyCmd.create = function(x, y, points, fillColor, lineColor, lineWidth, isConvexPolygon, vid) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawPolyCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawPolyCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawRectCmd = function() {};
/** @type {string} */
Laya.DrawRectCmd.ID;
/** @type {number} */
Laya.DrawRectCmd.prototype.x;
/** @type {number} */
Laya.DrawRectCmd.prototype.y;
/** @type {number} */
Laya.DrawRectCmd.prototype.width;
/** @type {number} */
Laya.DrawRectCmd.prototype.height;
/** @type {?} */
Laya.DrawRectCmd.prototype.fillColor;
/** @type {?} */
Laya.DrawRectCmd.prototype.lineColor;
/** @type {number} */
Laya.DrawRectCmd.prototype.lineWidth;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {?} fillColor
 * @param {?} lineColor
 * @param {number} lineWidth
 * @return {!Laya.DrawRectCmd}
 */
Laya.DrawRectCmd.create = function(x, y, width, height, fillColor, lineColor, lineWidth) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawRectCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawRectCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawTextureCmd = function() {};
/** @type {string} */
Laya.DrawTextureCmd.ID;
/** @type {!Laya.Texture} */
Laya.DrawTextureCmd.prototype.texture;
/** @type {number} */
Laya.DrawTextureCmd.prototype.x;
/** @type {number} */
Laya.DrawTextureCmd.prototype.y;
/** @type {number} */
Laya.DrawTextureCmd.prototype.width;
/** @type {number} */
Laya.DrawTextureCmd.prototype.height;
/** @type {!Laya.Matrix} */
Laya.DrawTextureCmd.prototype.matrix;
/** @type {number} */
Laya.DrawTextureCmd.prototype.alpha;
/** @type {string} */
Laya.DrawTextureCmd.prototype.color;
/** @type {!Laya.ColorFilter} */
Laya.DrawTextureCmd.prototype.colorFlt;
/** @type {string} */
Laya.DrawTextureCmd.prototype.blendMode;
/** @type {!Array<number>} */
Laya.DrawTextureCmd.prototype.uv;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!Laya.Matrix} matrix
 * @param {number} alpha
 * @param {string} color
 * @param {string} blendMode
 * @param {!Array<number>=} uv
 * @return {!Laya.DrawTextureCmd}
 */
Laya.DrawTextureCmd.create = function(texture, x, y, width, height, matrix, alpha, color, blendMode, uv) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawTextureCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawTextureCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawTexturesCmd = function() {};
/** @type {string} */
Laya.DrawTexturesCmd.ID;
/** @type {!Laya.Texture} */
Laya.DrawTexturesCmd.prototype.texture;
/** @type {!Array<?>} */
Laya.DrawTexturesCmd.prototype.pos;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Texture} texture
 * @param {!Array<?>} pos
 * @return {!Laya.DrawTexturesCmd}
 */
Laya.DrawTexturesCmd.create = function(texture, pos) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawTexturesCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawTexturesCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.DrawTrianglesCmd = function() {};
/** @type {string} */
Laya.DrawTrianglesCmd.ID;
/** @type {!Laya.Texture} */
Laya.DrawTrianglesCmd.prototype.texture;
/** @type {number} */
Laya.DrawTrianglesCmd.prototype.x;
/** @type {number} */
Laya.DrawTrianglesCmd.prototype.y;
/** @type {!Float32Array} */
Laya.DrawTrianglesCmd.prototype.vertices;
/** @type {!Float32Array} */
Laya.DrawTrianglesCmd.prototype.uvs;
/** @type {!Uint16Array} */
Laya.DrawTrianglesCmd.prototype.indices;
/** @type {!Laya.Matrix} */
Laya.DrawTrianglesCmd.prototype.matrix;
/** @type {number} */
Laya.DrawTrianglesCmd.prototype.alpha;
/** @type {string} */
Laya.DrawTrianglesCmd.prototype.blendMode;
/** @type {!Laya.ColorFilter} */
Laya.DrawTrianglesCmd.prototype.color;
/** @type {number} */
Laya.DrawTrianglesCmd.prototype.colorNum;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {!Float32Array} vertices
 * @param {!Float32Array} uvs
 * @param {!Uint16Array} indices
 * @param {!Laya.Matrix} matrix
 * @param {number} alpha
 * @param {string} color
 * @param {string} blendMode
 * @param {number} colorNum
 * @return {!Laya.DrawTrianglesCmd}
 */
Laya.DrawTrianglesCmd.create = function(texture, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode, colorNum) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.DrawTrianglesCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.DrawTrianglesCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.FillTextCmd = function() {};
/** @type {string} */
Laya.FillTextCmd.ID;
/** @type {?} */
Laya.FillTextCmd.prototype._text;
/** @type {!Array<!Laya.HTMLChar>} */
Laya.FillTextCmd.prototype._words;
/** @type {number} */
Laya.FillTextCmd.prototype.x;
/** @type {number} */
Laya.FillTextCmd.prototype.y;
/** @type {?} */
Laya.FillTextCmd.prototype._font;
/** @type {?} */
Laya.FillTextCmd.prototype._color;
/** @type {?} */
Laya.FillTextCmd.prototype._borderColor;
/** @type {?} */
Laya.FillTextCmd.prototype._lineWidth;
/** @type {?} */
Laya.FillTextCmd.prototype._textAlign;
/** @type {?} */
Laya.FillTextCmd.prototype._fontColor;
/** @type {?} */
Laya.FillTextCmd.prototype._strokeColor;
/** @type {?} */
Laya.FillTextCmd._defFontObj;
/** @type {?} */
Laya.FillTextCmd.prototype._fontObj;
/** @type {?} */
Laya.FillTextCmd.prototype._nTexAlign;

/* TODO: GetAccessor: Laya.cmdID */

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.font */

/* TODO: SetAccessor: Laya.font */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.textAlign */

/* TODO: SetAccessor: Laya.textAlign */

/**
 * @param {(string|!Laya.WordText)} text
 * @param {!Array<!Laya.HTMLChar>} words
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @param {string} textAlign
 * @param {number} lineWidth
 * @param {string} borderColor
 * @return {!Laya.FillTextCmd}
 */
Laya.FillTextCmd.create = function(text, words, x, y, font, color, textAlign, lineWidth, borderColor) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.FillTextCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.FillTextCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.FillTextureCmd = function() {};
/** @type {string} */
Laya.FillTextureCmd.ID;
/** @type {!Laya.Texture} */
Laya.FillTextureCmd.prototype.texture;
/** @type {number} */
Laya.FillTextureCmd.prototype.x;
/** @type {number} */
Laya.FillTextureCmd.prototype.y;
/** @type {number} */
Laya.FillTextureCmd.prototype.width;
/** @type {number} */
Laya.FillTextureCmd.prototype.height;
/** @type {string} */
Laya.FillTextureCmd.prototype.type;
/** @type {!Laya.Point} */
Laya.FillTextureCmd.prototype.offset;
/** @type {?} */
Laya.FillTextureCmd.prototype.other;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {string} type
 * @param {!Laya.Point} offset
 * @param {?} other
 * @return {!Laya.FillTextureCmd}
 */
Laya.FillTextureCmd.create = function(texture, x, y, width, height, type, offset, other) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.FillTextureCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.FillTextureCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.RestoreCmd = function() {};
/** @type {string} */
Laya.RestoreCmd.ID;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @return {!Laya.RestoreCmd}
 */
Laya.RestoreCmd.create = function() {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.RestoreCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.RestoreCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.RotateCmd = function() {};
/** @type {string} */
Laya.RotateCmd.ID;
/** @type {number} */
Laya.RotateCmd.prototype.angle;
/** @type {number} */
Laya.RotateCmd.prototype.pivotX;
/** @type {number} */
Laya.RotateCmd.prototype.pivotY;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} angle
 * @param {number} pivotX
 * @param {number} pivotY
 * @return {!Laya.RotateCmd}
 */
Laya.RotateCmd.create = function(angle, pivotX, pivotY) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.RotateCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.RotateCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.SaveCmd = function() {};
/** @type {string} */
Laya.SaveCmd.ID;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @return {!Laya.SaveCmd}
 */
Laya.SaveCmd.create = function() {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.SaveCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.SaveCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.ScaleCmd = function() {};
/** @type {string} */
Laya.ScaleCmd.ID;
/** @type {number} */
Laya.ScaleCmd.prototype.scaleX;
/** @type {number} */
Laya.ScaleCmd.prototype.scaleY;
/** @type {number} */
Laya.ScaleCmd.prototype.pivotX;
/** @type {number} */
Laya.ScaleCmd.prototype.pivotY;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number} pivotX
 * @param {number} pivotY
 * @return {!Laya.ScaleCmd}
 */
Laya.ScaleCmd.create = function(scaleX, scaleY, pivotX, pivotY) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.ScaleCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.ScaleCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.TransformCmd = function() {};
/** @type {string} */
Laya.TransformCmd.ID;
/** @type {!Laya.Matrix} */
Laya.TransformCmd.prototype.matrix;
/** @type {number} */
Laya.TransformCmd.prototype.pivotX;
/** @type {number} */
Laya.TransformCmd.prototype.pivotY;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {!Laya.Matrix} matrix
 * @param {number} pivotX
 * @param {number} pivotY
 * @return {!Laya.TransformCmd}
 */
Laya.TransformCmd.create = function(matrix, pivotX, pivotY) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.TransformCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.TransformCmd.prototype.run = function(context, gx, gy) {};
/**
 * @constructor
 * @struct
 */
Laya.TranslateCmd = function() {};
/** @type {string} */
Laya.TranslateCmd.ID;
/** @type {number} */
Laya.TranslateCmd.prototype.tx;
/** @type {number} */
Laya.TranslateCmd.prototype.ty;

/* TODO: GetAccessor: Laya.cmdID */

/**
 * @param {number} tx
 * @param {number} ty
 * @return {!Laya.TranslateCmd}
 */
Laya.TranslateCmd.create = function(tx, ty) {};

/**
 * 回收到对象池
 * @return {void}
 */
Laya.TranslateCmd.prototype.recover = function() {};

/**
 * @param {!Laya.Context} context
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.TranslateCmd.prototype.run = function(context, gx, gy) {};

/**
 * @constructor
 * @struct
 */
Laya.SpriteStyle = function() {};
/** @type {!Laya.SpriteStyle} */
Laya.SpriteStyle.EMPTY;
/** @type {number} */
Laya.SpriteStyle.prototype.scaleX;
/** @type {number} */
Laya.SpriteStyle.prototype.scaleY;
/** @type {number} */
Laya.SpriteStyle.prototype.skewX;
/** @type {number} */
Laya.SpriteStyle.prototype.skewY;
/** @type {number} */
Laya.SpriteStyle.prototype.pivotX;
/** @type {number} */
Laya.SpriteStyle.prototype.pivotY;
/** @type {number} */
Laya.SpriteStyle.prototype.rotation;
/** @type {number} */
Laya.SpriteStyle.prototype.alpha;
/** @type {!Laya.Rectangle} */
Laya.SpriteStyle.prototype.scrollRect;
/** @type {!Laya.Rectangle} */
Laya.SpriteStyle.prototype.viewport;
/** @type {?} */
Laya.SpriteStyle.prototype.hitArea;
/** @type {!Laya.Dragging} */
Laya.SpriteStyle.prototype.dragging;
/** @type {string} */
Laya.SpriteStyle.prototype.blendMode;

/**
 * 重置，方便下次复用
 * @return {!Laya.SpriteStyle}
 */
Laya.SpriteStyle.prototype.reset = function() {};

/**
 * 回收
 * @return {void}
 */
Laya.SpriteStyle.prototype.recover = function() {};

/**
 * 从对象池中创建
 * @return {!Laya.SpriteStyle}
 */
Laya.SpriteStyle.create = function() {};
/**
 * @extends {Laya.SpriteStyle}
 * @constructor
 * @struct
 */
Laya.TextStyle = function() {};
/** @type {!Laya.TextStyle} */
Laya.TextStyle.EMPTY;
/** @type {boolean} */
Laya.TextStyle.prototype.italic;
/** @type {string} */
Laya.TextStyle.prototype.align;
/** @type {boolean} */
Laya.TextStyle.prototype.wordWrap;
/** @type {number} */
Laya.TextStyle.prototype.leading;
/** @type {!Array<?>} */
Laya.TextStyle.prototype.padding;
/** @type {string} */
Laya.TextStyle.prototype.bgColor;
/** @type {string} */
Laya.TextStyle.prototype.borderColor;
/** @type {boolean} */
Laya.TextStyle.prototype.asPassword;
/** @type {number} */
Laya.TextStyle.prototype.stroke;
/** @type {string} */
Laya.TextStyle.prototype.strokeColor;
/** @type {boolean} */
Laya.TextStyle.prototype.bold;
/** @type {boolean} */
Laya.TextStyle.prototype.underline;
/** @type {string} */
Laya.TextStyle.prototype.underlineColor;
/** @type {!Laya.BitmapFont} */
Laya.TextStyle.prototype.currBitmapFont;

/**
 * @override
 * @return {!Laya.SpriteStyle}
 */
Laya.TextStyle.prototype.reset = function() {};

/**
 * @override
 * @return {void}
 */
Laya.TextStyle.prototype.recover = function() {};

/**
 * 从对象池中创建
 * @return {!Laya.TextStyle}
 */
Laya.TextStyle.create = function() {};

/**
 * @inheritDoc
 * @param {!Laya.Sprite} sprite
 * @param {!Laya.Context} context
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.TextStyle.prototype.render = function(sprite, context, x, y) {};
/**
 * @extends {Laya.FrameAnimation}
 * @constructor
 * @struct
 */
Laya.EffectAnimation = function() {};
/** @type {?} */
Laya.EffectAnimation.EFFECT_BEGIN;

/* TODO: SetAccessor: Laya.target */

/* TODO: GetAccessor: Laya.target */
/** @type {?} */
Laya.EffectAnimation.prototype._onOtherBegin;

/* TODO: SetAccessor: Laya.playEvent */
/** @type {?} */
Laya.EffectAnimation.prototype._recordInitData;

/* TODO: SetAccessor: Laya.effectClass */

/* TODO: SetAccessor: Laya.effectData */

/**
 * @override
 * @param {?=} start
 * @param {boolean=} loop
 * @param {string=} name
 * @return {void}
 */
Laya.EffectAnimation.prototype.play = function(start, loop, name) {};

/**
 * @override
 * @protected
 * @param {?} node
 * @param {number} frame
 * @param {?=} targetDic
 * @return {void}
 */
Laya.EffectAnimation.prototype._displayNodeToFrame = function(node, frame, targetDic) {};

/**
 * @extends {Laya.AnimationBase}
 * @constructor
 * @struct
 */
Laya.FrameAnimation = function() {};
/** @type {?} */
Laya.FrameAnimation._sortIndexFun;
/** @type {!Array<?>} */
Laya.FrameAnimation.prototype._usedFrames;
/** @type {?} */
Laya.FrameAnimation.prototype._calculateDatas;
/** @type {?} */
Laya.FrameAnimation.prototype._calculateNodePropFrames;
/** @type {?} */
Laya.FrameAnimation.prototype._dealKeyFrame;
/** @type {?} */
Laya.FrameAnimation.prototype._calculateFrameValues;

/**
 * @inheritDoc
 * @override
 * @return {!Laya.AnimationBase}
 */
Laya.FrameAnimation.prototype.clear = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @param {number} value
 * @return {void}
 */
Laya.FrameAnimation.prototype._displayToIndex = function(value) {};

/**
 * @protected
 * @param {?} node 节点ID
 * @param {number} frame
 * @param {?=} targetDic 节点表
 * @return {void}
 */
Laya.FrameAnimation.prototype._displayNodeToFrame = function(node, frame, targetDic) {};

/**
 * @protected
 * @param {?} node
 * @return {void}
 */
Laya.FrameAnimation.prototype._calculateKeyFrames = function(node) {};

/**
 * 重置节点，使节点恢复到动画之前的状态，方便其他动画控制
 * @return {void}
 */
Laya.FrameAnimation.prototype.resetNodes = function() {};

/**
 * @constructor
 * @struct
 */
Laya.Graphics = function() {};
/** @type {?} */
Laya.Graphics.prototype._cmds;
/** @type {!Array<?>} */
Laya.Graphics.prototype._vectorgraphArray;
/** @type {?} */
Laya.Graphics.prototype._graphicBounds;
/** @type {boolean} */
Laya.Graphics.prototype.autoDestroy;
/** @type {?} */
Laya.Graphics.prototype._clearBoundsCache;
/** @type {?} */
Laya.Graphics.prototype._initGraphicBounds;

/* TODO: GetAccessor: Laya.cmds */

/* TODO: SetAccessor: Laya.cmds */
/** @type {?} */
Laya.Graphics.prototype._isTextCmd;
/** @type {?} */
Laya.Graphics.prototype._setTextCmdColor;

/**
 * <p>销毁此对象。</p>
 * @return {void}
 */
Laya.Graphics.prototype.destroy = function() {};

/**
 * <p>清空绘制命令。</p>
 * @param {boolean=} recoverCmds 是否回收绘图指令数组，设置为true，则对指令数组进行回收以节省内存开销，建议设置为true进行回收，但如果手动引用了数组，不建议回收
 * @return {void}
 */
Laya.Graphics.prototype.clear = function(recoverCmds) {};

/**
 * 获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
 * @param {boolean=} realSize （可选）使用图片的真实大小，默认为false
 * @return {!Laya.Rectangle} 位置与宽高组成的 一个 Rectangle 对象。
 */
Laya.Graphics.prototype.getBounds = function(realSize) {};

/**
 * @param {boolean=} realSize （可选）使用图片的真实大小，默认为false
 * @return {!Array<?>}
 */
Laya.Graphics.prototype.getBoundPoints = function(realSize) {};

/**
 * 绘制单独图片
 * @param {!Laya.Texture} texture 纹理。
 * @param {number=} x （可选）X轴偏移量。
 * @param {number=} y （可选）Y轴偏移量。
 * @param {number=} width （可选）宽度。
 * @param {number=} height （可选）高度。
 * @return {!Laya.DrawImageCmd}
 */
Laya.Graphics.prototype.drawImage = function(texture, x, y, width, height) {};

/**
 * 绘制纹理，相比drawImage功能更强大，性能会差一些
 * @param {!Laya.Texture} texture 纹理。
 * @param {number=} x （可选）X轴偏移量。
 * @param {number=} y （可选）Y轴偏移量。
 * @param {number=} width （可选）宽度。
 * @param {number=} height （可选）高度。
 * @param {!Laya.Matrix=} matrix （可选）矩阵信息。
 * @param {number=} alpha （可选）透明度。
 * @param {string=} color （可选）颜色滤镜。
 * @param {string=} blendMode （可选）混合模式。
 * @param {!Array<number>=} uv
 * @return {!Laya.DrawTextureCmd}
 */
Laya.Graphics.prototype.drawTexture = function(texture, x, y, width, height, matrix, alpha, color, blendMode, uv) {};

/**
 * 批量绘制同样纹理。
 * @param {!Laya.Texture} texture 纹理。
 * @param {!Array<?>} pos 绘制次数和坐标。
 * @return {!Laya.DrawTexturesCmd}
 */
Laya.Graphics.prototype.drawTextures = function(texture, pos) {};

/**
 * 绘制一组三角形
 * @param {!Laya.Texture} texture 纹理。
 * @param {number} x X轴偏移量。
 * @param {number} y Y轴偏移量。
 * @param {!Float32Array} vertices 顶点数组。
 * @param {!Float32Array} uvs
 * @param {!Uint16Array} indices 顶点索引。
 * @param {!Laya.Matrix=} matrix 缩放矩阵。
 * @param {number=} alpha alpha
 * @param {string=} color 颜色变换
 * @param {string=} blendMode blend模式
 * @param {number=} colorNum
 * @return {!Laya.DrawTrianglesCmd}
 */
Laya.Graphics.prototype.drawTriangles = function(texture, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode, colorNum) {};

/**
 * 用texture填充。
 * @param {!Laya.Texture} texture 纹理。
 * @param {number} x X轴偏移量。
 * @param {number} y Y轴偏移量。
 * @param {number=} width （可选）宽度。
 * @param {number=} height （可选）高度。
 * @param {string=} type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
 * @param {!Laya.Point=} offset （可选）贴图纹理偏移
 * @return {!Laya.FillTextureCmd}
 */
Laya.Graphics.prototype.fillTexture = function(texture, x, y, width, height, type, offset) {};

/**
 * 设置剪裁区域，超出剪裁区域的坐标不显示。
 * @param {number} x X 轴偏移量。
 * @param {number} y Y 轴偏移量。
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @return {!Laya.ClipRectCmd}
 */
Laya.Graphics.prototype.clipRect = function(x, y, width, height) {};

/**
 * 在画布上绘制文本。
 * @param {string} text 在画布上输出的文本。
 * @param {number} x 开始绘制文本的 x 坐标位置（相对于画布）。
 * @param {number} y 开始绘制文本的 y 坐标位置（相对于画布）。
 * @param {string} font 定义字号和字体，比如"20px Arial"。
 * @param {string} color 定义文本颜色，比如"#ff0000"。
 * @param {string} textAlign 文本对齐方式，可选值："left"，"center"，"right"。
 * @return {!Laya.FillTextCmd}
 */
Laya.Graphics.prototype.fillText = function(text, x, y, font, color, textAlign) {};

/**
 * 在画布上绘制“被填充且镶边的”文本。
 * @param {string} text 在画布上输出的文本。
 * @param {number} x 开始绘制文本的 x 坐标位置（相对于画布）。
 * @param {number} y 开始绘制文本的 y 坐标位置（相对于画布）。
 * @param {string} font 定义字体和字号，比如"20px Arial"。
 * @param {string} fillColor 定义文本颜色，比如"#ff0000"。
 * @param {string} textAlign 文本对齐方式，可选值："left"，"center"，"right"。
 * @param {number} lineWidth 镶边线条宽度。
 * @param {string} borderColor 定义镶边文本颜色。
 * @return {!Laya.FillTextCmd}
 */
Laya.Graphics.prototype.fillBorderText = function(text, x, y, font, fillColor, textAlign, lineWidth, borderColor) {};

/**
 * * \@private
 * @param {!Array<?>} words
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @return {!Laya.FillTextCmd}
 */
Laya.Graphics.prototype.fillWords = function(words, x, y, font, color) {};

/**
 * * \@private
 * @param {!Array<?>} words
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} fillColor
 * @param {string} borderColor
 * @param {number} lineWidth
 * @return {!Laya.FillTextCmd}
 */
Laya.Graphics.prototype.fillBorderWords = function(words, x, y, font, fillColor, borderColor, lineWidth) {};

/**
 * 在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
 * @param {string} text 在画布上输出的文本。
 * @param {number} x 开始绘制文本的 x 坐标位置（相对于画布）。
 * @param {number} y 开始绘制文本的 y 坐标位置（相对于画布）。
 * @param {string} font 定义字体和字号，比如"20px Arial"。
 * @param {string} color 定义文本颜色，比如"#ff0000"。
 * @param {number} lineWidth 线条宽度。
 * @param {string} textAlign 文本对齐方式，可选值："left"，"center"，"right"。
 * @return {!Laya.FillTextCmd}
 */
Laya.Graphics.prototype.strokeText = function(text, x, y, font, color, lineWidth, textAlign) {};

/**
 * 设置透明度。
 * @param {number} alpha
 * @return {!Laya.AlphaCmd}
 */
Laya.Graphics.prototype.alpha = function(alpha) {};

/**
 * 替换绘图的当前转换矩阵。
 * @param {!Laya.Matrix} matrix
 * @param {number=} pivotX （可选）水平方向轴心点坐标。
 * @param {number=} pivotY （可选）垂直方向轴心点坐标。
 * @return {!Laya.TransformCmd}
 */
Laya.Graphics.prototype.transform = function(matrix, pivotX, pivotY) {};

/**
 * 旋转当前绘图。(推荐使用transform，性能更高)
 * @param {number} angle 旋转角度，以弧度计。
 * @param {number=} pivotX （可选）水平方向轴心点坐标。
 * @param {number=} pivotY （可选）垂直方向轴心点坐标。
 * @return {!Laya.RotateCmd}
 */
Laya.Graphics.prototype.rotate = function(angle, pivotX, pivotY) {};

/**
 * 缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
 * @param {number} scaleX 水平方向缩放值。
 * @param {number} scaleY 垂直方向缩放值。
 * @param {number=} pivotX （可选）水平方向轴心点坐标。
 * @param {number=} pivotY （可选）垂直方向轴心点坐标。
 * @return {!Laya.ScaleCmd}
 */
Laya.Graphics.prototype.scale = function(scaleX, scaleY, pivotX, pivotY) {};

/**
 * 重新映射画布上的 (0,0) 位置。
 * @param {number} tx
 * @param {number} ty
 * @return {!Laya.TranslateCmd}
 */
Laya.Graphics.prototype.translate = function(tx, ty) {};

/**
 * 保存当前环境的状态。
 * @return {!Laya.SaveCmd}
 */
Laya.Graphics.prototype.save = function() {};

/**
 * 返回之前保存过的路径状态和属性。
 * @return {!Laya.RestoreCmd}
 */
Laya.Graphics.prototype.restore = function() {};

/**
 * @param {string} text 文本内容。
 * @return {boolean} 替换成功则值为true，否则值为flase。
 */
Laya.Graphics.prototype.replaceText = function(text) {};

/**
 * @param {string} color 颜色。
 * @return {void}
 */
Laya.Graphics.prototype.replaceTextColor = function(color) {};

/**
 * 加载并显示一个图片。
 * @param {string} url 图片地址。
 * @param {number=} x （可选）显示图片的x位置。
 * @param {number=} y （可选）显示图片的y位置。
 * @param {number=} width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
 * @param {number=} height （可选）显示图片的高度，设置为0表示使用图片默认高度。
 * @param {!Function=} complete （可选）加载完成回调。
 * @return {void}
 */
Laya.Graphics.prototype.loadImage = function(url, x, y, width, height, complete) {};

/**
 * 绘制一条线。
 * @param {number} fromX X轴开始位置。
 * @param {number} fromY Y轴开始位置。
 * @param {number} toX X轴结束位置。
 * @param {number} toY Y轴结束位置。
 * @param {string} lineColor 颜色。
 * @param {number=} lineWidth （可选）线条宽度。
 * @return {!Laya.DrawLineCmd}
 */
Laya.Graphics.prototype.drawLine = function(fromX, fromY, toX, toY, lineColor, lineWidth) {};

/**
 * 绘制一系列线段。
 * @param {number} x 开始绘制的X轴位置。
 * @param {number} y 开始绘制的Y轴位置。
 * @param {!Array<?>} points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
 * @param {?} lineColor 线段颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）线段宽度。
 * @return {!Laya.DrawLinesCmd}
 */
Laya.Graphics.prototype.drawLines = function(x, y, points, lineColor, lineWidth) {};

/**
 * 绘制一系列曲线。
 * @param {number} x 开始绘制的 X 轴位置。
 * @param {number} y 开始绘制的 Y 轴位置。
 * @param {!Array<?>} points 线段的点集合，格式[controlX, controlY, anchorX, anchorY...]。
 * @param {?} lineColor 线段颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）线段宽度。
 * @return {!Laya.DrawCurvesCmd}
 */
Laya.Graphics.prototype.drawCurves = function(x, y, points, lineColor, lineWidth) {};

/**
 * 绘制矩形。
 * @param {number} x 开始绘制的 X 轴位置。
 * @param {number} y 开始绘制的 Y 轴位置。
 * @param {number} width 矩形宽度。
 * @param {number} height 矩形高度。
 * @param {?} fillColor 填充颜色，或者填充绘图的渐变对象。
 * @param {?=} lineColor （可选）边框颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）边框宽度。
 * @return {!Laya.DrawRectCmd}
 */
Laya.Graphics.prototype.drawRect = function(x, y, width, height, fillColor, lineColor, lineWidth) {};

/**
 * 绘制圆形。
 * @param {number} x 圆点X 轴位置。
 * @param {number} y 圆点Y 轴位置。
 * @param {number} radius 半径。
 * @param {?} fillColor 填充颜色，或者填充绘图的渐变对象。
 * @param {?=} lineColor （可选）边框颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）边框宽度。
 * @return {!Laya.DrawCircleCmd}
 */
Laya.Graphics.prototype.drawCircle = function(x, y, radius, fillColor, lineColor, lineWidth) {};

/**
 * 绘制扇形。
 * @param {number} x 开始绘制的 X 轴位置。
 * @param {number} y 开始绘制的 Y 轴位置。
 * @param {number} radius 扇形半径。
 * @param {number} startAngle 开始角度。
 * @param {number} endAngle 结束角度。
 * @param {?} fillColor 填充颜色，或者填充绘图的渐变对象。
 * @param {?=} lineColor （可选）边框颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）边框宽度。
 * @return {!Laya.DrawPieCmd}
 */
Laya.Graphics.prototype.drawPie = function(x, y, radius, startAngle, endAngle, fillColor, lineColor, lineWidth) {};

/**
 * 绘制多边形。
 * @param {number} x 开始绘制的 X 轴位置。
 * @param {number} y 开始绘制的 Y 轴位置。
 * @param {!Array<?>} points 多边形的点集合。
 * @param {?} fillColor 填充颜色，或者填充绘图的渐变对象。
 * @param {?=} lineColor （可选）边框颜色，或者填充绘图的渐变对象。
 * @param {number=} lineWidth （可选）边框宽度。
 * @return {!Laya.DrawPolyCmd}
 */
Laya.Graphics.prototype.drawPoly = function(x, y, points, fillColor, lineColor, lineWidth) {};

/**
 * 绘制路径。
 * @param {number} x 开始绘制的 X 轴位置。
 * @param {number} y 开始绘制的 Y 轴位置。
 * @param {!Array<?>} paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
 * @param {?=} brush （可选）刷子定义，支持以下设置{fillStyle:"#FF0000"}。
 * @param {?=} pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin:"bevel|round|miter",lineCap:"butt|round|square",miterLimit}。
 * @return {!Laya.DrawPathCmd}
 */
Laya.Graphics.prototype.drawPath = function(x, y, paths, brush, pen) {};

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!Array<?>} sizeGrid
 * @return {void}
 */
Laya.Graphics.prototype.draw9Grid = function(texture, x, y, width, height, sizeGrid) {};
/**
 * @constructor
 * @struct
 */
Laya.GraphicsBounds = function() {};
/** @type {?} */
Laya.GraphicsBounds._tempMatrix;
/** @type {?} */
Laya.GraphicsBounds._initMatrix;
/** @type {?} */
Laya.GraphicsBounds._tempPoints;
/** @type {?} */
Laya.GraphicsBounds._tempMatrixArrays;
/** @type {?} */
Laya.GraphicsBounds._tempCmds;
/** @type {?} */
Laya.GraphicsBounds.prototype._temp;
/** @type {?} */
Laya.GraphicsBounds.prototype._bounds;
/** @type {?} */
Laya.GraphicsBounds.prototype._rstBoundPoints;
/** @type {?} */
Laya.GraphicsBounds.prototype._cacheBoundsType;
/** @type {?} */
Laya.GraphicsBounds.prototype._getCmdPoints;
/** @type {?} */
Laya.GraphicsBounds.prototype._switchMatrix;
/** @type {?} */
Laya.GraphicsBounds._addPointArrToRst;
/** @type {?} */
Laya.GraphicsBounds._addPointToRst;
/** @type {?} */
Laya.GraphicsBounds.prototype._getPiePoints;
/** @type {?} */
Laya.GraphicsBounds.prototype._getTriAngBBXPoints;
/** @type {?} */
Laya.GraphicsBounds.prototype._getDraw9GridBBXPoints;
/** @type {?} */
Laya.GraphicsBounds.prototype._getPathPoints;

/**
 * 销毁
 * @return {void}
 */
Laya.GraphicsBounds.prototype.destroy = function() {};

/**
 * 创建
 * @return {!Laya.GraphicsBounds}
 */
Laya.GraphicsBounds.create = function() {};

/**
 * 重置数据
 * @return {void}
 */
Laya.GraphicsBounds.prototype.reset = function() {};

/**
 * 获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
 * @param {boolean=} realSize （可选）使用图片的真实大小，默认为false
 * @return {!Laya.Rectangle} 位置与宽高组成的 一个 Rectangle 对象。
 */
Laya.GraphicsBounds.prototype.getBounds = function(realSize) {};

/**
 * @param {boolean=} realSize （可选）使用图片的真实大小，默认为false
 * @return {!Array<?>}
 */
Laya.GraphicsBounds.prototype.getBoundPoints = function(realSize) {};

/**
 * @extends {Laya.Text}
 * @constructor
 * @struct
 * 创建一个新的 <code>Input</code> 类实例。
 */
Laya.Input = function() {};
/** @type {string} */
Laya.Input.TYPE_TEXT;
/** @type {string} */
Laya.Input.TYPE_PASSWORD;
/** @type {string} */
Laya.Input.TYPE_EMAIL;
/** @type {string} */
Laya.Input.TYPE_URL;
/** @type {string} */
Laya.Input.TYPE_NUMBER;
/** @type {string} */
Laya.Input.TYPE_RANGE;
/** @type {string} */
Laya.Input.TYPE_DATE;
/** @type {string} */
Laya.Input.TYPE_MONTH;
/** @type {string} */
Laya.Input.TYPE_WEEK;
/** @type {string} */
Laya.Input.TYPE_TIME;
/** @type {string} */
Laya.Input.TYPE_DATE_TIME;
/** @type {string} */
Laya.Input.TYPE_DATE_TIME_LOCAL;
/** @type {string} */
Laya.Input.TYPE_SEARCH;
/** @type {!HTMLInputElement} */
Laya.Input.input;
/** @type {!HTMLTextAreaElement} */
Laya.Input.area;
/** @type {(!HTMLInputElement|!HTMLTextAreaElement)} */
Laya.Input.inputElement;
/** @type {!Laya.HTMLDivElement} */
Laya.Input.inputContainer;
/** @type {?} */
Laya.Input.confirmButton;
/** @type {?} */
Laya.Input.promptStyleDOM;
/** @type {boolean} */
Laya.Input.prototype._focus;
/** @type {boolean} */
Laya.Input.prototype._multiline;
/** @type {boolean} */
Laya.Input.prototype._editable;
/** @type {?} */
Laya.Input.prototype._restrictPattern;
/** @type {number} */
Laya.Input.prototype._maxChars;
/** @type {?} */
Laya.Input.prototype._type;
/** @type {?} */
Laya.Input.prototype._prompt;
/** @type {?} */
Laya.Input.prototype._promptColor;
/** @type {?} */
Laya.Input.prototype._originColor;
/** @type {?} */
Laya.Input.prototype._content;
/** @type {boolean} */
Laya.Input.IOS_IFRAME;
/** @type {?} */
Laya.Input.inputHeight;
/** @type {boolean} */
Laya.Input.isInputting;
/** @type {?} */
Laya.Input._popupInputMethod;
/** @type {?} */
Laya.Input._createInputElement;
/** @type {?} */
Laya.Input._initInput;
/** @type {?} */
Laya.Input._processInputting;
/** @type {?} */
Laya.Input._stopEvent;

/* TODO: GetAccessor: Laya.multiline */

/* TODO: SetAccessor: Laya.multiline */

/* TODO: GetAccessor: Laya.nativeInput */
/** @type {?} */
Laya.Input.prototype._onUnDisplay;
/** @type {?} */
Laya.Input.prototype._onMouseDown;
/** @type {?} */
Laya.Input.stageMatrix;
/** @type {?} */
Laya.Input.prototype._syncInputTransform;

/* TODO: GetAccessor: Laya.focus */

/* TODO: SetAccessor: Laya.focus */
/** @type {?} */
Laya.Input.prototype._setInputMethod;
/** @type {?} */
Laya.Input.prototype._focusIn;
/** @type {?} */
Laya.Input.prototype._setPromptColor;
/** @type {?} */
Laya.Input.prototype._focusOut;
/** @type {?} */
Laya.Input.prototype._onKeyDown;

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.restrict */

/* TODO: SetAccessor: Laya.restrict */

/* TODO: SetAccessor: Laya.editable */

/* TODO: GetAccessor: Laya.editable */

/* TODO: GetAccessor: Laya.maxChars */

/* TODO: SetAccessor: Laya.maxChars */

/* TODO: GetAccessor: Laya.prompt */

/* TODO: SetAccessor: Laya.prompt */

/* TODO: GetAccessor: Laya.promptColor */

/* TODO: SetAccessor: Laya.promptColor */

/* TODO: GetAccessor: Laya.type */

/* TODO: SetAccessor: Laya.type */

/**
 * 设置光标位置和选取字符。
 * @param {number} startIndex 光标起始位置。
 * @param {number} endIndex 光标结束位置。
 * @return {void}
 */
Laya.Input.prototype.setSelection = function(startIndex, endIndex) {};

/**
 * 选中当前实例的所有文本。
 * @return {void}
 */
Laya.Input.prototype.select = function() {};

/**
 * 小游戏专用(解决键盘输入框内容和游戏输入框内容不同步的bug)
 * @param {string} value
 * @return {void}
 */
Laya.Input.prototype.miniGameTxt = function(value) {};

/**
 * @override
 * @param {string} text
 * @return {void}
 */
Laya.Input.prototype.changeText = function(text) {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.Node = function() {};
/** @type {!Array<?>} */
Laya.Node.ARRAY_EMPTY;
/** @type {?} */
Laya.Node.prototype._bits;
/** @type {string} */
Laya.Node.prototype.name;
/** @type {boolean} */
Laya.Node.prototype.destroyed;

/* TODO: GetAccessor: Laya.numChildren */

/* TODO: GetAccessor: Laya.parent */

/* TODO: GetAccessor: Laya.displayedInStage */
/** @type {?} */
Laya.Node.prototype._updateDisplayedInstage;
/** @type {?} */
Laya.Node.prototype._displayChild;
/** @type {?} */
Laya.Node.prototype._components;
/** @type {?} */
Laya.Node.prototype._activeChangeScripts;

/* TODO: GetAccessor: Laya.scene */

/* TODO: GetAccessor: Laya.active */

/* TODO: SetAccessor: Laya.active */

/* TODO: GetAccessor: Laya.activeInHierarchy */
/** @type {?} */
Laya.Node.prototype._activeScripts;
/** @type {?} */
Laya.Node.prototype._processInActive;
/** @type {?} */
Laya.Node.prototype._inActiveScripts;

/* TODO: GetAccessor: Laya.timer */

/**
 * @return {void}
 */
Laya.Node.prototype.createGLBuffer = function() {};

/**
 * <p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
 * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
 * @override
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.Node.prototype.on = function(type, caller, listener, args) {};

/**
 * <p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
 * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
 * @override
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.Node.prototype.once = function(type, caller, listener, args) {};

/**
 * <p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
 * <p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
 * @param {boolean=} destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
 * @return {void}
 */
Laya.Node.prototype.destroy = function(destroyChild) {};

/**
 * 销毁时执行
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Node.prototype.onDestroy = function() {};

/**
 * 销毁所有子对象，不销毁自己本身。
 * @return {void}
 */
Laya.Node.prototype.destroyChildren = function() {};

/**
 * 添加子节点。
 * @param {!Laya.Node} node 节点对象
 * @return {!Laya.Node} 返回添加的节点
 */
Laya.Node.prototype.addChild = function(node) {};

/**
 * @param {!Laya.Node} node
 * @return {!Laya.Node}
 */
Laya.Node.prototype.addInputChild = function(node) {};

/**
 * @param {!Laya.Node} node
 * @return {void}
 */
Laya.Node.prototype.removeInputChild = function(node) {};

/**
 * 批量增加子节点
 * @param {...?} args
 * @return {void}
 */
Laya.Node.prototype.addChildren = function(args) {};

/**
 * 添加子节点到指定的索引位置。
 * @param {!Laya.Node} node 节点对象。
 * @param {number} index 索引位置。
 * @return {!Laya.Node} 返回添加的节点。
 */
Laya.Node.prototype.addChildAt = function(node, index) {};

/**
 * 根据子节点对象，获取子节点的索引位置。
 * @param {!Laya.Node} node 子节点。
 * @return {number} 子节点所在的索引位置。
 */
Laya.Node.prototype.getChildIndex = function(node) {};

/**
 * 根据子节点的名字，获取子节点对象。
 * @param {string} name 子节点的名字。
 * @return {!Laya.Node} 节点对象。
 */
Laya.Node.prototype.getChildByName = function(name) {};

/**
 * 根据子节点的索引位置，获取子节点对象。
 * @param {number} index 索引位置
 * @return {!Laya.Node} 子节点
 */
Laya.Node.prototype.getChildAt = function(index) {};

/**
 * 设置子节点的索引位置。
 * @param {!Laya.Node} node 子节点。
 * @param {number} index 新的索引。
 * @return {!Laya.Node} 返回子节点本身。
 */
Laya.Node.prototype.setChildIndex = function(node, index) {};

/**
 * 子节点发生改变。
 * @protected
 * @param {!Laya.Node=} child 子节点。
 * @return {void}
 */
Laya.Node.prototype._childChanged = function(child) {};

/**
 * 删除子节点。
 * @param {!Laya.Node} node 子节点
 * @return {!Laya.Node} 被删除的节点
 */
Laya.Node.prototype.removeChild = function(node) {};

/**
 * 从父容器删除自己，如已经被删除不会抛出异常。
 * @return {!Laya.Node} 当前节点（ Node ）对象。
 */
Laya.Node.prototype.removeSelf = function() {};

/**
 * 根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
 * @param {string} name 对象名字。
 * @return {!Laya.Node} 查找到的节点（ Node ）对象。
 */
Laya.Node.prototype.removeChildByName = function(name) {};

/**
 * 根据子节点索引位置，删除对应的子节点对象。
 * @param {number} index 节点索引位置。
 * @return {!Laya.Node} 被删除的节点。
 */
Laya.Node.prototype.removeChildAt = function(index) {};

/**
 * 删除指定索引区间的所有子对象。
 * @param {number=} beginIndex 开始索引。
 * @param {number=} endIndex 结束索引。
 * @return {!Laya.Node} 当前节点对象。
 */
Laya.Node.prototype.removeChildren = function(beginIndex, endIndex) {};

/**
 * 替换子节点。
 * 将传入的新节点对象替换到已有子节点索引位置处。
 * @param {!Laya.Node} newNode 新节点。
 * @param {!Laya.Node} oldNode 老节点。
 * @return {!Laya.Node} 返回新节点。
 */
Laya.Node.prototype.replaceChild = function(newNode, oldNode) {};

/**
 * @protected
 * @param {!Laya.Node} value
 * @return {void}
 */
Laya.Node.prototype._setParent = function(value) {};

/**
 * 当前容器是否包含指定的 <code>Node</code> 节点对象 。
 * @param {!Laya.Node} node 指定的 <code>Node</code> 节点对象 。
 * @return {boolean} 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
 */
Laya.Node.prototype.contains = function(node) {};

/**
 * 定时重复执行某函数。功能同Laya.timer.timerLoop()。
 * @param {number} delay 间隔时间(单位毫秒)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 结束时的回调方法。
 * @param {!Array<?>=} args （可选）回调参数。
 * @param {boolean=} coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
 * @param {boolean=} jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
 * @return {void}
 */
Laya.Node.prototype.timerLoop = function(delay, caller, method, args, coverBefore, jumpFrame) {};

/**
 * 定时执行某函数一次。功能同Laya.timer.timerOnce()。
 * @param {number} delay 延迟时间(单位毫秒)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 结束时的回调方法。
 * @param {!Array<?>=} args （可选）回调参数。
 * @param {boolean=} coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
 * @return {void}
 */
Laya.Node.prototype.timerOnce = function(delay, caller, method, args, coverBefore) {};

/**
 * 定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
 * @param {number} delay 间隔几帧(单位为帧)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 结束时的回调方法。
 * @param {!Array<?>=} args （可选）回调参数。
 * @param {boolean=} coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
 * @return {void}
 */
Laya.Node.prototype.frameLoop = function(delay, caller, method, args, coverBefore) {};

/**
 * 定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
 * @param {number} delay 延迟几帧(单位为帧)。
 * @param {?} caller 执行域(this)
 * @param {!Function} method 结束时的回调方法
 * @param {!Array<?>=} args （可选）回调参数
 * @param {boolean=} coverBefore （可选）是否覆盖之前的延迟执行，默认为true
 * @return {void}
 */
Laya.Node.prototype.frameOnce = function(delay, caller, method, args, coverBefore) {};

/**
 * 清理定时器。功能同Laya.timer.clearTimer()。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 结束时的回调方法。
 * @return {void}
 */
Laya.Node.prototype.clearTimer = function(caller, method) {};

/**
 * <p>延迟运行指定的函数。</p>
 * <p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
 * @see #runCallLater()
 * @param {!Function} method 要执行的函数的名称。例如，functionName。
 * @param {!Array<?>=} args 传递给 <code>method</code> 函数的可选参数列表。
 * @return {void}
 */
Laya.Node.prototype.callLater = function(method, args) {};

/**
 * <p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
 * @see #callLater()
 * @param {!Function} method 要执行的函数名称。例如，functionName。
 * @return {void}
 */
Laya.Node.prototype.runCallLater = function(method) {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onActive = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onInActive = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onActiveInScene = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onInActiveInScene = function() {};

/**
 * 组件被激活后执行，此时所有节点和组件均已创建完毕，次方法只执行一次
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Node.prototype.onAwake = function() {};

/**
 * 组件被启用后执行，比如节点被添加到舞台后
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Node.prototype.onEnable = function() {};

/**
 * 组件被禁用时执行，比如从节点从舞台移除后
 * 此方法为虚方法，使用时重写覆盖即可
 * @return {void}
 */
Laya.Node.prototype.onDisable = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onAdded = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Node.prototype._onRemoved = function() {};

/**
 * 添加组件实例。
 * @param {!Laya.Component} component 组建实例。
 * @return {?} 组件。
 */
Laya.Node.prototype.addComponentIntance = function(component) {};

/**
 * 添加组件。
 * @param {function(new:Laya.Component)} componentType 组件类型。
 * @return {?} 组件。
 */
Laya.Node.prototype.addComponent = function(componentType) {};

/**
 * 获得组件实例，如果没有则返回为null
 * @param {function(new:Laya.Component)} componentType 组建类型
 * @return {?} 返回组件
 */
Laya.Node.prototype.getComponent = function(componentType) {};

/**
 * 获得组件实例，如果没有则返回为null
 * @param {function(new:Laya.Component)} componentType 组建类型
 * @return {!Array<?>} 返回组件数组
 */
Laya.Node.prototype.getComponents = function(componentType) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * @param {boolean=} createChildren
 */
Laya.Scene = function(createChildren) {};
/** @type {!Array<?>} */
Laya.Scene.unDestroyedScenes;
/** @type {?} */
Laya.Scene._root;
/** @type {?} */
Laya.Scene._loadPage;
/** @type {boolean} */
Laya.Scene.prototype.autoDestroyAtClosed;
/** @type {string} */
Laya.Scene.prototype.url;
/** @type {?} */
Laya.Scene.prototype._timer;
/** @type {?} */
Laya.Scene.prototype._viewCreated;
/** @type {?} */
Laya.Scene.prototype._onSceneLoaded;

/* TODO: SetAccessor: Laya.scaleX */

/* TODO: GetAccessor: Laya.scaleX */

/* TODO: SetAccessor: Laya.scaleY */

/* TODO: GetAccessor: Laya.scaleY */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.root */

/* TODO: GetAccessor: Laya.timer */

/* TODO: SetAccessor: Laya.timer */
/** @type {?} */
Laya.Scene._onSceneLoaded;
/** @type {?} */
Laya.Scene._showLoading;
/** @type {?} */
Laya.Scene._hideLoading;

/**
 * @protected
 * @return {void}
 */
Laya.Scene.prototype.createChildren = function() {};

/**
 * 兼容加载模式
 * 加载模式设置uimap
 * @param {string} url uimapJosn的url
 * @return {void}
 */
Laya.Scene.setUIMap = function(url) {};

/**
 * @param {string} path 场景地址。
 * @return {void}
 */
Laya.Scene.prototype.loadScene = function(path) {};

/**
 * @param {?} view
 * @return {void}
 */
Laya.Scene.prototype.createView = function(view) {};

/**
 * 根据IDE内的节点id，获得节点实例
 * @param {number} id
 * @return {?}
 */
Laya.Scene.prototype.getNodeByID = function(id) {};

/**
 * 打开场景。【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收
 * @param {boolean=} closeOther 是否关闭其他场景，默认为true（可选）
 * @param {?=} param 打开页面的参数，会传递给onOpened方法（可选）
 * @return {void}
 */
Laya.Scene.prototype.open = function(closeOther, param) {};

/**
 * 场景打开完成后，调用此方法（如果有弹出动画，则在动画完成后执行）
 * @param {?} param
 * @return {void}
 */
Laya.Scene.prototype.onOpened = function(param) {};

/**
 * 关闭场景
 * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收
 * @param {string=} type 关闭的原因，会传递给onClosed函数
 * @return {void}
 */
Laya.Scene.prototype.close = function(type) {};

/**
 * 关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）
 * @param {string=} type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
 * @return {void}
 */
Laya.Scene.prototype.onClosed = function(type) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Scene.prototype.destroy = function(destroyChild) {};

/**
 * @protected
 * @return {void}
 */
Laya.Scene.prototype._sizeChanged = function() {};

/**
 * 加载场景及场景使用到的资源
 * @param {string} url 场景地址
 * @param {!Handler=} complete 加载完成回调，返回场景实例（可选）
 * @param {!Handler=} progress 加载进度回调（可选）
 * @return {void}
 */
Laya.Scene.load = function(url, complete, progress) {};

/**
 * 加载并打开场景
 * @param {string} url 场景地址
 * @param {boolean=} closeOther 是否关闭其他场景，默认为true（可选），【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收
 * @param {?=} param 打开页面的参数，会传递给onOpened方法（可选）
 * @param {!Handler=} complete 打开完成回调，返回场景实例（可选）
 * @param {!Handler=} progress 加载进度回调（可选）
 * @return {void}
 */
Laya.Scene.open = function(url, closeOther, param, complete, progress) {};

/**
 * 根据地址，关闭场景（包括对话框）
 * @param {string} url 场景地址
 * @param {string=} name 如果name不为空，name必须相同才能关闭
 * @return {boolean} 返回是否关闭成功，如果url找不到，则不成功
 */
Laya.Scene.close = function(url, name) {};

/**
 * 关闭所有场景，不包括对话框，如果关闭对话框，请使用Dialog.closeAll()
 * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收
 * @return {void}
 */
Laya.Scene.closeAll = function() {};

/**
 * 根据地址，销毁场景（包括对话框）
 * @param {string} url 场景地址
 * @param {string=} name 如果name不为空，name必须相同才能关闭
 * @return {boolean} 返回是否销毁成功，如果url找不到，则不成功
 */
Laya.Scene.destroy = function(url, name) {};

/**
 * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。
 * @return {void}
 */
Laya.Scene.gc = function() {};

/**
 * 设置loading界面，引擎会在调用open方法后，延迟打开loading界面，在页面添加到舞台之后，关闭loading界面
 * @param {!Laya.Scene} loadPage load界面实例
 * @return {void}
 */
Laya.Scene.setLoadingPage = function(loadPage) {};

/**
 * 显示loading界面
 * @param {?=} param 打开参数，如果是scene，则会传递给onOpened方法
 * @param {number=} delay 延迟打开时间，默认500毫秒
 * @return {void}
 */
Laya.Scene.showLoadingPage = function(param, delay) {};

/**
 * 隐藏loading界面
 * @param {number=} delay 延迟关闭时间，默认500毫秒
 * @return {void}
 */
Laya.Scene.hideLoadingPage = function(delay) {};

/**
 * @extends {Laya.Node}
 * @constructor
 * @struct
 */
Laya.Sprite = function() {};
/** @type {boolean} */
Laya.Sprite.prototype.mouseThrough;
/** @type {boolean} */
Laya.Sprite.prototype.autoSize;
/** @type {boolean} */
Laya.Sprite.prototype.hitTestPrior;

/* TODO: SetAccessor: Laya.customRenderEnable */

/* TODO: GetAccessor: Laya.cacheAs */

/* TODO: SetAccessor: Laya.cacheAs */
/** @type {?} */
Laya.Sprite.prototype._checkCanvasEnable;

/* TODO: GetAccessor: Laya.staticCache */

/* TODO: SetAccessor: Laya.staticCache */

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.displayWidth */

/* TODO: GetAccessor: Laya.displayHeight */

/* TODO: GetAccessor: Laya.scaleX */

/* TODO: SetAccessor: Laya.scaleX */

/* TODO: GetAccessor: Laya.scaleY */

/* TODO: SetAccessor: Laya.scaleY */

/* TODO: GetAccessor: Laya.rotation */

/* TODO: SetAccessor: Laya.rotation */

/* TODO: GetAccessor: Laya.skewX */

/* TODO: SetAccessor: Laya.skewX */

/* TODO: GetAccessor: Laya.skewY */

/* TODO: SetAccessor: Laya.skewY */

/* TODO: GetAccessor: Laya.transform */

/* TODO: SetAccessor: Laya.transform */

/* TODO: GetAccessor: Laya.pivotX */

/* TODO: SetAccessor: Laya.pivotX */

/* TODO: GetAccessor: Laya.pivotY */

/* TODO: SetAccessor: Laya.pivotY */

/* TODO: GetAccessor: Laya.alpha */

/* TODO: SetAccessor: Laya.alpha */

/* TODO: GetAccessor: Laya.visible */

/* TODO: SetAccessor: Laya.visible */

/* TODO: GetAccessor: Laya.blendMode */

/* TODO: SetAccessor: Laya.blendMode */

/* TODO: GetAccessor: Laya.graphics */

/* TODO: SetAccessor: Laya.graphics */

/* TODO: GetAccessor: Laya.scrollRect */

/* TODO: SetAccessor: Laya.scrollRect */
/** @type {!Laya.Context} */
Laya.Sprite.drawtocanvCtx;

/* TODO: GetAccessor: Laya.filters */

/* TODO: SetAccessor: Laya.filters */

/* TODO: GetAccessor: Laya.stage */

/* TODO: GetAccessor: Laya.hitArea */

/* TODO: SetAccessor: Laya.hitArea */

/* TODO: GetAccessor: Laya.mask */

/* TODO: SetAccessor: Laya.mask */

/* TODO: GetAccessor: Laya.mouseEnabled */

/* TODO: SetAccessor: Laya.mouseEnabled */

/* TODO: GetAccessor: Laya.globalScaleX */

/* TODO: GetAccessor: Laya.globalRotation */

/* TODO: GetAccessor: Laya.globalScaleY */

/* TODO: GetAccessor: Laya.mouseX */

/* TODO: GetAccessor: Laya.mouseY */

/* TODO: GetAccessor: Laya.zOrder */

/* TODO: SetAccessor: Laya.zOrder */

/* TODO: GetAccessor: Laya.texture */

/* TODO: SetAccessor: Laya.texture */

/* TODO: GetAccessor: Laya.viewport */

/* TODO: SetAccessor: Laya.viewport */

/* TODO: SetAccessor: Laya.drawCallOptimize */

/* TODO: GetAccessor: Laya.drawCallOptimize */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Sprite.prototype.destroy = function(destroyChild) {};

/**
 * 根据zOrder进行重新排序。
 * @return {void}
 */
Laya.Sprite.prototype.updateZOrder = function() {};

/**
 * 在设置cacheAs的情况下，调用此方法会重新刷新缓存。
 * @return {void}
 */
Laya.Sprite.prototype.reCache = function() {};

/**
 * @return {number}
 */
Laya.Sprite.prototype.getRepaint = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Sprite.prototype.set_width = function(value) {};

/**
 * @return {number}
 */
Laya.Sprite.prototype.get_width = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Sprite.prototype.set_height = function(value) {};

/**
 * @return {number}
 */
Laya.Sprite.prototype.get_height = function() {};

/**
 * 设置对象bounds大小，如果有设置，则不再通过getBounds计算，合理使用能提高性能。
 * @param {!Laya.Rectangle} bound bounds矩形区域
 * @return {void}
 */
Laya.Sprite.prototype.setSelfBounds = function(bound) {};

/**
 * <p>获取本对象在父容器坐标系的矩形显示区域。</p>
 * <p><b>注意：</b>计算量较大，尽量少用。</p>
 * @return {!Laya.Rectangle} 矩形区域。
 */
Laya.Sprite.prototype.getBounds = function() {};

/**
 * 获取本对象在自己坐标系的矩形显示区域。
 * <p><b>注意：</b>计算量较大，尽量少用。</p>
 * @return {!Laya.Rectangle} 矩形区域。
 */
Laya.Sprite.prototype.getSelfBounds = function() {};

/**
 * 返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
 * @param {boolean=} realSize （可选）使用图片的真实大小，默认为false
 * @return {!Laya.Rectangle} 一个 Rectangle 对象，表示获取到的显示区域。
 */
Laya.Sprite.prototype.getGraphicBounds = function(realSize) {};

/**
 * @return {!Laya.SpriteStyle} 样式 Style 。
 */
Laya.Sprite.prototype.getStyle = function() {};

/**
 * @param {!Laya.SpriteStyle} value 样式。
 * @return {void}
 */
Laya.Sprite.prototype.setStyle = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Sprite.prototype.set_scaleX = function(value) {};

/**
 * @return {number}
 */
Laya.Sprite.prototype.get_scaleX = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Sprite.prototype.set_scaleY = function(value) {};

/**
 * @return {number}
 */
Laya.Sprite.prototype.get_scaleY = function() {};

/**
 * @protected
 * @return {!Laya.Matrix}
 */
Laya.Sprite.prototype._adjustTransform = function() {};

/**
 * @return {!Laya.Matrix}
 */
Laya.Sprite.prototype.get_transform = function() {};

/**
 * @param {!Laya.Matrix} value
 * @return {void}
 */
Laya.Sprite.prototype.set_transform = function(value) {};

/**
 * @return {boolean}
 */
Laya.Sprite.prototype.get_visible = function() {};

/**
 * @param {boolean} value
 * @return {void}
 */
Laya.Sprite.prototype.set_visible = function(value) {};

/**
 * <p>设置坐标位置。相当于分别设置x和y属性。</p>
 * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
 * @param {number} x X轴坐标。
 * @param {number} y Y轴坐标。
 * @param {boolean=} speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
 * @return {!Laya.Sprite} 返回对象本身。
 */
Laya.Sprite.prototype.pos = function(x, y, speedMode) {};

/**
 * <p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
 * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(50, 100);</p>
 * @param {number} x X轴心点。
 * @param {number} y Y轴心点。
 * @return {!Laya.Sprite} 返回对象本身。
 */
Laya.Sprite.prototype.pivot = function(x, y) {};

/**
 * <p>设置宽高。相当于分别设置width和height属性。</p>
 * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(50, 100);</p>
 * @param {number} width 宽度值。
 * @param {number} height
 * @return {!Laya.Sprite} 返回对象本身。
 */
Laya.Sprite.prototype.size = function(width, height) {};

/**
 * <p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
 * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(50, 100);</p>
 * @param {number} scaleX X轴缩放比例。
 * @param {number} scaleY Y轴缩放比例。
 * @param {boolean=} speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
 * @return {!Laya.Sprite} 返回对象本身。
 */
Laya.Sprite.prototype.scale = function(scaleX, scaleY, speedMode) {};

/**
 * <p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
 * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(50, 100);</p>
 * @param {number} skewX 水平倾斜角度。
 * @param {number} skewY 垂直倾斜角度。
 * @return {!Laya.Sprite} 返回对象本身
 */
Laya.Sprite.prototype.skew = function(skewX, skewY) {};

/**
 * 更新、呈现显示对象。由系统调用。
 * @param {!Laya.Context} ctx
 * @param {number} x X轴坐标。
 * @param {number} y Y轴坐标。
 * @return {void}
 */
Laya.Sprite.prototype.render = function(ctx, x, y) {};

/**
 * <p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
 * <p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
 * 
 * var htmlCanvas:HTMLCanvas = sprite.drawToCanvas(100, 100, 0, 0);//把精灵绘制到canvas上面
 * var sp:Sprite = new Sprite();//创建精灵
 * sp.graphics.drawTexture(htmlCanvas.getTexture());//把截图绘制到精灵上
 * Laya.stage.addChild(sp);//把精灵显示到舞台
 * 
 * <p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
 * 
 * var htmlCanvas:HTMLCanvas = sprite.drawToCanvas(100, 100, 0, 0);//把精灵绘制到canvas上面
 * htmlCanvas.toBase64("image/png",0.9);//打印图片base64信息，可以发给服务器或者保存为图片
 * @param {number} canvasWidth 画布宽度。
 * @param {number} canvasHeight 画布高度。
 * @param {number} offsetX
 * @param {number} offsetY
 * @return {!Laya.HTMLCanvas} HTMLCanvas 对象。
 */
Laya.Sprite.prototype.drawToCanvas = function(canvasWidth, canvasHeight, offsetX, offsetY) {};

/**
 * 绘制到一个Texture对象
 * @param {number} canvasWidth
 * @param {number} canvasHeight
 * @param {number} offsetX
 * @param {number} offsetY
 * @param {!Laya.RenderTexture2D=} rt
 * @return {(!Laya.Texture|!Laya.RenderTexture2D)}
 */
Laya.Sprite.prototype.drawToTexture = function(canvasWidth, canvasHeight, offsetX, offsetY, rt) {};

/**
 * 把当前对象渲染到指定的贴图上。贴图由外部指定，避免每次都创建。
 * @param {number} offx
 * @param {number} offy
 * @param {!Laya.Texture2D} tex 输出渲染结果
 * @return {void}
 */
Laya.Sprite.prototype.drawToTexture3D = function(offx, offy, tex) {};

/**
 * @param {!Laya.Sprite} sprite
 * @param {number} _renderType
 * @param {number} canvasWidth
 * @param {number} canvasHeight
 * @param {number} offsetX
 * @param {number} offsetY
 * @return {!Laya.HTMLCanvas}
 */
Laya.Sprite.drawToCanvas = function(sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY) {};

/**
 * @param {!Laya.Sprite} sprite
 * @param {number} _renderType
 * @param {number} canvasWidth
 * @param {number} canvasHeight
 * @param {number} offsetX
 * @param {number} offsetY
 * @param {!Laya.RenderTexture2D=} rt
 * @return {(!Laya.Texture|!Laya.RenderTexture2D)}
 */
Laya.Sprite.drawToTexture = function(sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY, rt) {};

/**
 * <p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
 * <p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
 * @param {!Laya.Context} context 渲染的上下文引用。
 * @param {number} x X轴坐标。
 * @param {number} y Y轴坐标。
 * @return {void}
 */
Laya.Sprite.prototype.customRender = function(context, x, y) {};

/**
 * 把本地坐标转换为相对stage的全局坐标。
 * @param {!Laya.Point} point 本地坐标点。
 * @param {boolean=} createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
 * @param {!Laya.Sprite=} globalNode global节点，默认为Laya.stage
 * @return {!Laya.Point} 转换后的坐标的点。
 */
Laya.Sprite.prototype.localToGlobal = function(point, createNewPoint, globalNode) {};

/**
 * 把stage的全局坐标转换为本地坐标。
 * @param {!Laya.Point} point 全局坐标点。
 * @param {boolean=} createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
 * @param {!Laya.Sprite=} globalNode global节点，默认为Laya.stage
 * @return {!Laya.Point} 转换后的坐标的点。
 */
Laya.Sprite.prototype.globalToLocal = function(point, createNewPoint, globalNode) {};

/**
 * 将本地坐标系坐标转转换到父容器坐标系。
 * @param {!Laya.Point} point 本地坐标点。
 * @return {!Laya.Point} 转换后的点。
 */
Laya.Sprite.prototype.toParentPoint = function(point) {};

/**
 * 将父容器坐标系坐标转换到本地坐标系。
 * @param {!Laya.Point} point 父容器坐标点。
 * @return {!Laya.Point} 转换后的点。
 */
Laya.Sprite.prototype.fromParentPoint = function(point) {};

/**
 * 将Stage坐标系坐标转换到本地坐标系。
 * @param {!Laya.Point} point 父容器坐标点。
 * @return {!Laya.Point} 转换后的点。
 */
Laya.Sprite.prototype.fromStagePoint = function(point) {};

/**
 * <p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
 * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
 * @override
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.Sprite.prototype.on = function(type, caller, listener, args) {};

/**
 * <p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
 * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
 * @override
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.Sprite.prototype.once = function(type, caller, listener, args) {};

/**
 * @protected
 * @param {boolean=} v
 * @return {void}
 */
Laya.Sprite.prototype._onDisplay = function(v) {};

/**
 * @override
 * @protected
 * @param {!Laya.Node} value
 * @return {void}
 */
Laya.Sprite.prototype._setParent = function(value) {};

/**
 * <p>加载并显示一个图片。相当于加载图片后，设置texture属性</p>
 * <p>注意：2.0改动：多次调用，只会显示一个图片（1.0会显示多个图片）,x,y,width,height参数取消。</p>
 * @param {string} url 图片地址。
 * @param {!Handler=} complete （可选）加载完成回调。
 * @return {!Laya.Sprite} 返回精灵对象本身。
 */
Laya.Sprite.prototype.loadImage = function(url, complete) {};

/**
 * 根据图片地址创建一个新的 <code>Sprite</code> 对象用于加载并显示此图片。
 * @param {string} url 图片地址。
 * @return {!Laya.Sprite} 返回新的 <code>Sprite</code> 对象。
 */
Laya.Sprite.fromImage = function(url) {};

/**
 * cacheAs后，设置自己和父对象缓存失效。
 * @param {number=} type
 * @return {void}
 */
Laya.Sprite.prototype.repaint = function(type) {};

/**
 * @override
 * @protected
 * @param {!Laya.Node=} child
 * @return {void}
 */
Laya.Sprite.prototype._childChanged = function(child) {};

/**
 * cacheAs时，设置所有父对象缓存失效。
 * @param {number=} type
 * @return {void}
 */
Laya.Sprite.prototype.parentRepaint = function(type) {};

/**
 * 开始拖动此对象。
 * @param {!Laya.Rectangle=} area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
 * @param {boolean=} hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
 * @param {number=} elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
 * @param {number=} elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
 * @param {?=} data （可选）拖动事件携带的数据，可选。
 * @param {boolean=} disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
 * @param {number=} ratio （可选）惯性阻尼系数，影响惯性力度和时长。
 * @return {void}
 */
Laya.Sprite.prototype.startDrag = function(area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio) {};

/**
 * 停止拖动此对象。
 * @return {void}
 */
Laya.Sprite.prototype.stopDrag = function() {};

/**
 * 检测某个点是否在此对象内。
 * @param {number} x 全局x坐标。
 * @param {number} y 全局y坐标。
 * @return {boolean} 表示是否在对象内。
 */
Laya.Sprite.prototype.hitTestPoint = function(x, y) {};

/**
 * 获得相对于本对象上的鼠标坐标信息。
 * @return {!Laya.Point}
 */
Laya.Sprite.prototype.getMousePoint = function() {};

/**
 * @param {boolean} exclusive
 * @return {void}
 */
Laya.Sprite.prototype.captureMouseEvent = function(exclusive) {};

/**
 * @return {void}
 */
Laya.Sprite.prototype.releaseMouseEvent = function() {};
/**
 * @constructor
 * @struct
 */
Laya.SpriteConst = function() {};
/** @type {number} */
Laya.SpriteConst.ALPHA;
/** @type {number} */
Laya.SpriteConst.TRANSFORM;
/** @type {number} */
Laya.SpriteConst.BLEND;
/** @type {number} */
Laya.SpriteConst.CANVAS;
/** @type {number} */
Laya.SpriteConst.FILTERS;
/** @type {number} */
Laya.SpriteConst.MASK;
/** @type {number} */
Laya.SpriteConst.CLIP;
/** @type {number} */
Laya.SpriteConst.STYLE;
/** @type {number} */
Laya.SpriteConst.TEXTURE;
/** @type {number} */
Laya.SpriteConst.GRAPHICS;
/** @type {number} */
Laya.SpriteConst.LAYAGL3D;
/** @type {number} */
Laya.SpriteConst.CUSTOM;
/** @type {number} */
Laya.SpriteConst.ONECHILD;
/** @type {number} */
Laya.SpriteConst.CHILDS;
/** @type {number} */
Laya.SpriteConst.REPAINT_NONE;
/** @type {number} */
Laya.SpriteConst.REPAINT_NODE;
/** @type {number} */
Laya.SpriteConst.REPAINT_CACHE;
/** @type {number} */
Laya.SpriteConst.REPAINT_ALL;

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 场景类，引擎中只有一个stage实例，此实例可以通过Laya.stage访问。
 */
Laya.Stage = function() {};
/** @type {string} */
Laya.Stage.SCALE_NOSCALE;
/** @type {string} */
Laya.Stage.SCALE_EXACTFIT;
/** @type {string} */
Laya.Stage.SCALE_SHOWALL;
/** @type {string} */
Laya.Stage.SCALE_NOBORDER;
/** @type {string} */
Laya.Stage.SCALE_FULL;
/** @type {string} */
Laya.Stage.SCALE_FIXED_WIDTH;
/** @type {string} */
Laya.Stage.SCALE_FIXED_HEIGHT;
/** @type {string} */
Laya.Stage.SCALE_FIXED_AUTO;
/** @type {string} */
Laya.Stage.ALIGN_LEFT;
/** @type {string} */
Laya.Stage.ALIGN_RIGHT;
/** @type {string} */
Laya.Stage.ALIGN_CENTER;
/** @type {string} */
Laya.Stage.ALIGN_TOP;
/** @type {string} */
Laya.Stage.ALIGN_MIDDLE;
/** @type {string} */
Laya.Stage.ALIGN_BOTTOM;
/** @type {string} */
Laya.Stage.SCREEN_NONE;
/** @type {string} */
Laya.Stage.SCREEN_HORIZONTAL;
/** @type {string} */
Laya.Stage.SCREEN_VERTICAL;
/** @type {string} */
Laya.Stage.FRAME_FAST;
/** @type {string} */
Laya.Stage.FRAME_SLOW;
/** @type {string} */
Laya.Stage.FRAME_MOUSE;
/** @type {string} */
Laya.Stage.FRAME_SLEEP;
/** @type {!Laya.Node} */
Laya.Stage.prototype.focus;
/** @type {!Laya.Point} */
Laya.Stage.prototype.offset;
/** @type {?} */
Laya.Stage.prototype._frameRate;
/** @type {number} */
Laya.Stage.prototype.designWidth;
/** @type {number} */
Laya.Stage.prototype.designHeight;
/** @type {boolean} */
Laya.Stage.prototype.canvasRotation;
/** @type {number} */
Laya.Stage.prototype.canvasDegree;
/** @type {boolean} */
Laya.Stage.prototype.renderingEnabled;
/** @type {boolean} */
Laya.Stage.prototype.screenAdaptationEnabled;
/** @type {?} */
Laya.Stage.prototype._screenMode;
/** @type {?} */
Laya.Stage.prototype._scaleMode;
/** @type {?} */
Laya.Stage.prototype._alignV;
/** @type {?} */
Laya.Stage.prototype._alignH;
/** @type {?} */
Laya.Stage.prototype._bgColor;
/** @type {?} */
Laya.Stage.prototype._mouseMoveTime;
/** @type {?} */
Laya.Stage.prototype._renderCount;
/** @type {?} */
Laya.Stage.prototype._safariOffsetY;
/** @type {?} */
Laya.Stage.prototype._frameStartTime;
/** @type {?} */
Laya.Stage.prototype._previousOrientation;
/** @type {?} */
Laya.Stage.prototype._isFocused;
/** @type {?} */
Laya.Stage.prototype._isVisibility;
/** @type {?} */
Laya.Stage.prototype._globalRepaintSet;
/** @type {?} */
Laya.Stage.prototype._globalRepaintGet;
/** @type {boolean} */
Laya.Stage.prototype.useRetinalCanvas;
/** @type {?} */
Laya.Stage.prototype._isInputting;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.transform */

/* TODO: GetAccessor: Laya.transform */

/* TODO: GetAccessor: Laya.isFocused */

/* TODO: GetAccessor: Laya.isVisibility */
/** @type {?} */
Laya.Stage.prototype._changeCanvasSize;
/** @type {?} */
Laya.Stage.prototype._formatData;

/* TODO: GetAccessor: Laya.scaleMode */

/* TODO: SetAccessor: Laya.scaleMode */

/* TODO: GetAccessor: Laya.alignH */

/* TODO: SetAccessor: Laya.alignH */

/* TODO: GetAccessor: Laya.alignV */

/* TODO: SetAccessor: Laya.alignV */

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: SetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.mouseX */

/* TODO: GetAccessor: Laya.mouseY */

/* TODO: GetAccessor: Laya.clientScaleX */

/* TODO: GetAccessor: Laya.clientScaleY */

/* TODO: GetAccessor: Laya.screenMode */

/* TODO: SetAccessor: Laya.screenMode */
/** @type {?} */
Laya.Stage.prototype._onmouseMove;

/* TODO: SetAccessor: Laya.visible */

/* TODO: GetAccessor: Laya.visible */
/** @type {!Function} */
Laya.Stage.clear;
/** @type {?} */
Laya.Stage.prototype._updateTimers;

/* TODO: SetAccessor: Laya.fullScreenEnabled */

/* TODO: GetAccessor: Laya.frameRate */

/* TODO: SetAccessor: Laya.frameRate */
/** @type {?} */
Laya.Stage.prototype._requestFullscreen;
/** @type {?} */
Laya.Stage.prototype._fullScreenChanged;

/**
 * @protected
 * @return {void}
 */
Laya.Stage.prototype._resetCanvas = function() {};

/**
 * 设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
 * @param {number} screenWidth 屏幕宽度。
 * @param {number} screenHeight 屏幕高度。
 * @return {void}
 */
Laya.Stage.prototype.setScreenSize = function(screenWidth, screenHeight) {};

/**
 * @inheritDoc
 * @override
 * @return {!Laya.Point}
 */
Laya.Stage.prototype.getMousePoint = function() {};

/**
 * @inheritDoc
 * @override
 * @param {number=} type
 * @return {void}
 */
Laya.Stage.prototype.repaint = function(type) {};

/**
 * @inheritDoc
 * @override
 * @param {number=} type
 * @return {void}
 */
Laya.Stage.prototype.parentRepaint = function(type) {};

/**
 * @return {number}
 */
Laya.Stage.prototype.getFrameTm = function() {};

/**
 * <p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
 * <p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
 * @return {number}
 */
Laya.Stage.prototype.getTimeFromFrameStart = function() {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Context} context
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Stage.prototype.render = function(context, x, y) {};

/**
 * @param {!Laya.Context} context
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Stage.prototype.renderToNative = function(context, x, y) {};

/**
 * 退出全屏模式
 * @return {void}
 */
Laya.Stage.prototype.exitFullscreen = function() {};

/**
 * @return {boolean}
 */
Laya.Stage.prototype.isGlobalRepaint = function() {};

/**
 * @return {void}
 */
Laya.Stage.prototype.setGlobalRepaint = function() {};

/**
 * @param {!Laya.Sprite} uibase
 * @return {void}
 */
Laya.Stage.prototype.add3DUI = function(uibase) {};

/**
 * @param {!Laya.Sprite} uibase
 * @return {boolean}
 */
Laya.Stage.prototype.remove3DUI = function(uibase) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个新的 <code>Text</code> 实例。
 */
Laya.Text = function() {};
/** @type {string} */
Laya.Text.VISIBLE;
/** @type {string} */
Laya.Text.SCROLL;
/** @type {string} */
Laya.Text.HIDDEN;
/** @type {number} */
Laya.Text.defaultFontSize;
/** @type {string} */
Laya.Text.defaultFont;
/** @type {?} */
Laya.Text.langPacks;
/** @type {boolean} */
Laya.Text.isComplexText;
/** @type {?} */
Laya.Text.fontFamilyMap;
/** @type {?} */
Laya.Text._bitmapFonts;
/** @type {boolean} */
Laya.Text.CharacterCache;
/** @type {boolean} */
Laya.Text.RightToLeft;
/** @type {?} */
Laya.Text.prototype._clipPoint;
/** @type {string} */
Laya.Text.prototype._text;
/** @type {boolean} */
Laya.Text.prototype._isChanged;
/** @type {number} */
Laya.Text.prototype._textWidth;
/** @type {number} */
Laya.Text.prototype._textHeight;
/** @type {!Array<string>} */
Laya.Text.prototype._lines;
/** @type {!Array<number>} */
Laya.Text.prototype._lineWidths;
/** @type {number} */
Laya.Text.prototype._startX;
/** @type {number} */
Laya.Text.prototype._startY;
/** @type {!Array<!Laya.WordText>} */
Laya.Text.prototype._words;
/** @type {?} */
Laya.Text.prototype._charSize;
/** @type {string} */
Laya.Text.prototype._valign;
/** @type {?} */
Laya.Text.prototype._singleCharRender;
/** @type {string} */
Laya.Text.prototype.overflow;

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.textWidth */

/* TODO: GetAccessor: Laya.textHeight */

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.font */

/* TODO: SetAccessor: Laya.font */

/* TODO: GetAccessor: Laya.fontSize */

/* TODO: SetAccessor: Laya.fontSize */

/* TODO: GetAccessor: Laya.bold */

/* TODO: SetAccessor: Laya.bold */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.italic */

/* TODO: SetAccessor: Laya.italic */

/* TODO: GetAccessor: Laya.align */

/* TODO: SetAccessor: Laya.align */

/* TODO: GetAccessor: Laya.valign */

/* TODO: SetAccessor: Laya.valign */

/* TODO: GetAccessor: Laya.wordWrap */

/* TODO: SetAccessor: Laya.wordWrap */

/* TODO: GetAccessor: Laya.leading */

/* TODO: SetAccessor: Laya.leading */

/* TODO: GetAccessor: Laya.padding */

/* TODO: SetAccessor: Laya.padding */

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: SetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.borderColor */

/* TODO: SetAccessor: Laya.borderColor */

/* TODO: GetAccessor: Laya.stroke */

/* TODO: SetAccessor: Laya.stroke */

/* TODO: GetAccessor: Laya.strokeColor */

/* TODO: SetAccessor: Laya.strokeColor */

/* TODO: SetAccessor: Laya.isChanged */
/** @type {?} */
Laya.Text.prototype._drawUnderline;
/** @type {?} */
Laya.Text.prototype._evalTextSize;
/** @type {?} */
Laya.Text.prototype._checkEnabledViewportOrNot;
/** @type {?} */
Laya.Text.prototype._getTextWidth;
/** @type {?} */
Laya.Text.prototype._getWordWrapWidth;

/* TODO: SetAccessor: Laya.scrollX */

/* TODO: GetAccessor: Laya.scrollX */

/* TODO: SetAccessor: Laya.scrollY */

/* TODO: GetAccessor: Laya.scrollY */

/* TODO: GetAccessor: Laya.maxScrollX */

/* TODO: GetAccessor: Laya.maxScrollY */

/* TODO: GetAccessor: Laya.lines */

/* TODO: GetAccessor: Laya.underlineColor */

/* TODO: SetAccessor: Laya.underlineColor */

/* TODO: GetAccessor: Laya.underline */

/* TODO: SetAccessor: Laya.underline */

/* TODO: SetAccessor: Laya.singleCharRender */

/* TODO: GetAccessor: Laya.singleCharRender */

/**
 * @return {string}
 */
Laya.Text.defaultFontStr = function() {};

/**
 * @override
 * @return {!Laya.SpriteStyle} 样式 Style 。
 */
Laya.Text.prototype.getStyle = function() {};

/**
 * @protected
 * @return {!Laya.TextStyle}
 */
Laya.Text.prototype._getTextStyle = function() {};

/**
 * 注册位图字体。
 * @param {string} name 位图字体的名称。
 * @param {!Laya.BitmapFont} bitmapFont 位图字体文件。
 * @return {void}
 */
Laya.Text.registerBitmapFont = function(name, bitmapFont) {};

/**
 * 移除注册的位图字体文件。
 * @param {string} name 位图字体的名称。
 * @param {boolean=} destroy 是否销毁指定的字体文件。
 * @return {void}
 */
Laya.Text.unregisterBitmapFont = function(name, destroy) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Text.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} realSize
 * @return {!Laya.Rectangle}
 */
Laya.Text.prototype.getGraphicBounds = function(realSize) {};

/**
 * @return {string}
 */
Laya.Text.prototype.get_text = function() {};

/**
 * @param {string} value
 * @return {void}
 */
Laya.Text.prototype.set_text = function(value) {};

/**
 * <p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
 * <p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>
 * <p>例如：
 * <li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
 * <li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
 *  			则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0} diamonds, {1} experience.”，
 *  			然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
 *  			将替换处理后的文本“Congratulations on your winning 100 diamonds, 200 experience.”设置为当前文本的内容。
 * </li>
 * </p>
 * @param {string} text 文本内容。
 * @param {?=} arg1
 * @param {?=} arg2
 * @param {?=} arg3
 * @param {?=} arg4
 * @param {?=} arg5
 * @param {?=} arg6
 * @param {?=} arg7
 * @param {?=} arg8
 * @param {?=} arg9
 * @param {?=} arg10
 * @return {void}
 */
Laya.Text.prototype.lang = function(text, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {};

/**
 * @return {string}
 */
Laya.Text.prototype.get_color = function() {};

/**
 * @param {string} value
 * @return {void}
 */
Laya.Text.prototype.set_color = function(value) {};

/**
 * @param {string} value
 * @return {void}
 */
Laya.Text.prototype.set_bgColor = function(value) {};

/**
 * @return {string}
 */
Laya.Text.prototype.get_bgColor = function() {};

/**
 * @protected
 * @return {string}
 */
Laya.Text.prototype._getContextFont = function() {};

/**
 * @protected
 * @return {boolean}
 */
Laya.Text.prototype._isPassWordMode = function() {};

/**
 * @protected
 * @param {string} txt
 * @return {string}
 */
Laya.Text.prototype._getPassWordTxt = function(txt) {};

/**
 * @protected
 * @return {void}
 */
Laya.Text.prototype._renderText = function() {};

/**
 * <p>排版文本。</p>
 * <p>进行宽高计算，渲染、重绘文本。</p>
 * @return {void}
 */
Laya.Text.prototype.typeset = function() {};

/**
 * <p>快速更改显示文本。不进行排版计算，效率较高。</p>
 * <p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
 * @param {string} text 文本内容。
 * @return {void}
 */
Laya.Text.prototype.changeText = function(text) {};

/**
 * @protected
 * @param {string} text
 * @return {void}
 */
Laya.Text.prototype._parseLines = function(text) {};

/**
 * @protected
 * @param {string} line 某行的文本。
 * @param {number} wordWrapWidth 文本的显示宽度。
 * @return {void}
 */
Laya.Text.prototype._parseLine = function(line, wordWrapWidth) {};

/**
 * 返回字符在本类实例的父坐标系下的坐标。
 * @param {number} charIndex 索引位置。
 * @param {!Laya.Point=} out （可选）输出的Point引用。
 * @return {!Laya.Point} Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
 */
Laya.Text.prototype.getCharPoint = function(charIndex, out) {};

/**
 * @extends {Laya.FilterSetterBase}
 * @constructor
 * @struct
 */
Laya.BlurFilterSetter = function() {};
/** @type {?} */
Laya.BlurFilterSetter.prototype._strength;

/* TODO: GetAccessor: Laya.strength */

/* TODO: SetAccessor: Laya.strength */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.BlurFilterSetter.prototype.buildFilter = function() {};
/**
 * @constructor
 * @struct
 */
Laya.ButtonEffect = function() {};
/** @type {?} */
Laya.ButtonEffect.prototype._tar;
/** @type {?} */
Laya.ButtonEffect.prototype._curState;
/** @type {?} */
Laya.ButtonEffect.prototype._curTween;
/** @type {number} */
Laya.ButtonEffect.prototype.effectScale;
/** @type {number} */
Laya.ButtonEffect.prototype.tweenTime;
/** @type {string} */
Laya.ButtonEffect.prototype.effectEase;
/** @type {string} */
Laya.ButtonEffect.prototype.backEase;

/* TODO: SetAccessor: Laya.target */
/** @type {?} */
Laya.ButtonEffect.prototype.toChangedState;
/** @type {?} */
Laya.ButtonEffect.prototype.toInitState;
/** @type {?} */
Laya.ButtonEffect.prototype.tweenComplete;

/**
 * @extends {Laya.FilterSetterBase}
 * @constructor
 * @struct
 */
Laya.ColorFilterSetter = function() {};
/** @type {?} */
Laya.ColorFilterSetter.prototype._brightness;
/** @type {?} */
Laya.ColorFilterSetter.prototype._contrast;
/** @type {?} */
Laya.ColorFilterSetter.prototype._saturation;
/** @type {?} */
Laya.ColorFilterSetter.prototype._hue;
/** @type {?} */
Laya.ColorFilterSetter.prototype._red;
/** @type {?} */
Laya.ColorFilterSetter.prototype._green;
/** @type {?} */
Laya.ColorFilterSetter.prototype._blue;
/** @type {?} */
Laya.ColorFilterSetter.prototype._alpha;

/* TODO: GetAccessor: Laya.brightness */

/* TODO: SetAccessor: Laya.brightness */

/* TODO: GetAccessor: Laya.contrast */

/* TODO: SetAccessor: Laya.contrast */

/* TODO: GetAccessor: Laya.saturation */

/* TODO: SetAccessor: Laya.saturation */

/* TODO: GetAccessor: Laya.hue */

/* TODO: SetAccessor: Laya.hue */

/* TODO: GetAccessor: Laya.red */

/* TODO: SetAccessor: Laya.red */

/* TODO: GetAccessor: Laya.green */

/* TODO: SetAccessor: Laya.green */

/* TODO: GetAccessor: Laya.blue */

/* TODO: SetAccessor: Laya.blue */
/** @type {?} */
Laya.ColorFilterSetter.prototype._color;

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.alpha */

/* TODO: SetAccessor: Laya.alpha */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.ColorFilterSetter.prototype.buildFilter = function() {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.EffectBase = function() {};
/** @type {number} */
Laya.EffectBase.prototype.duration;
/** @type {number} */
Laya.EffectBase.prototype.delay;
/** @type {number} */
Laya.EffectBase.prototype.repeat;
/** @type {string} */
Laya.EffectBase.prototype.ease;
/** @type {string} */
Laya.EffectBase.prototype.eventName;
/** @type {!Laya.Sprite} */
Laya.EffectBase.prototype.target;
/** @type {boolean} */
Laya.EffectBase.prototype.autoDestroyAtComplete;
/** @type {!Handler} */
Laya.EffectBase.prototype._comlete;
/** @type {!Laya.Tween} */
Laya.EffectBase.prototype._tween;

/**
 * @protected
 * @return {void}
 */
Laya.EffectBase.prototype._exeTween = function() {};

/**
 * @protected
 * @return {!Laya.Tween}
 */
Laya.EffectBase.prototype._doTween = function() {};

/**
 * @override
 * @return {void}
 */
Laya.EffectBase.prototype.onReset = function() {};
/**
 * @extends {Laya.EffectBase}
 * @constructor
 * @struct
 */
Laya.FadeIn = function() {};

/**
 * @override
 * @protected
 * @return {!Laya.Tween}
 */
Laya.FadeIn.prototype._doTween = function() {};
/**
 * @extends {Laya.EffectBase}
 * @constructor
 * @struct
 */
Laya.FadeOut = function() {};

/**
 * @override
 * @protected
 * @return {!Laya.Tween}
 */
Laya.FadeOut.prototype._doTween = function() {};

/**
 * @constructor
 * @struct
 */
Laya.FilterSetterBase = function() {};
/** @type {?} */
Laya.FilterSetterBase.prototype._filter;
/** @type {?} */
Laya.FilterSetterBase.prototype._target;

/* TODO: SetAccessor: Laya.target */

/**
 * @return {void}
 */
Laya.FilterSetterBase.prototype.paramChanged = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.FilterSetterBase.prototype.buildFilter = function() {};

/**
 * @protected
 * @param {!Laya.Sprite} sprite
 * @return {void}
 */
Laya.FilterSetterBase.prototype.addFilter = function(sprite) {};

/**
 * @protected
 * @param {!Laya.Sprite} sprite
 * @return {void}
 */
Laya.FilterSetterBase.prototype.removeFilter = function(sprite) {};

/**
 * @extends {Laya.FilterSetterBase}
 * @constructor
 * @struct
 */
Laya.GlowFilterSetter = function() {};
/** @type {?} */
Laya.GlowFilterSetter.prototype._color;
/** @type {?} */
Laya.GlowFilterSetter.prototype._blur;
/** @type {?} */
Laya.GlowFilterSetter.prototype._offX;
/** @type {?} */
Laya.GlowFilterSetter.prototype._offY;

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.blur */

/* TODO: SetAccessor: Laya.blur */

/* TODO: GetAccessor: Laya.offX */

/* TODO: SetAccessor: Laya.offX */

/* TODO: GetAccessor: Laya.offY */

/* TODO: SetAccessor: Laya.offY */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.GlowFilterSetter.prototype.buildFilter = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Event = function() {};
/** @type {!Laya.Event} */
Laya.Event.EMPTY;
/** @type {string} */
Laya.Event.MOUSE_DOWN;
/** @type {string} */
Laya.Event.MOUSE_UP;
/** @type {string} */
Laya.Event.CLICK;
/** @type {string} */
Laya.Event.RIGHT_MOUSE_DOWN;
/** @type {string} */
Laya.Event.RIGHT_MOUSE_UP;
/** @type {string} */
Laya.Event.RIGHT_CLICK;
/** @type {string} */
Laya.Event.MOUSE_MOVE;
/** @type {string} */
Laya.Event.MOUSE_OVER;
/** @type {string} */
Laya.Event.MOUSE_OUT;
/** @type {string} */
Laya.Event.MOUSE_WHEEL;
/** @type {string} */
Laya.Event.ROLL_OVER;
/** @type {string} */
Laya.Event.ROLL_OUT;
/** @type {string} */
Laya.Event.DOUBLE_CLICK;
/** @type {string} */
Laya.Event.CHANGE;
/** @type {string} */
Laya.Event.CHANGED;
/** @type {string} */
Laya.Event.RESIZE;
/** @type {string} */
Laya.Event.ADDED;
/** @type {string} */
Laya.Event.REMOVED;
/** @type {string} */
Laya.Event.DISPLAY;
/** @type {string} */
Laya.Event.UNDISPLAY;
/** @type {string} */
Laya.Event.ERROR;
/** @type {string} */
Laya.Event.COMPLETE;
/** @type {string} */
Laya.Event.LOADED;
/** @type {string} */
Laya.Event.READY;
/** @type {string} */
Laya.Event.PROGRESS;
/** @type {string} */
Laya.Event.INPUT;
/** @type {string} */
Laya.Event.RENDER;
/** @type {string} */
Laya.Event.OPEN;
/** @type {string} */
Laya.Event.MESSAGE;
/** @type {string} */
Laya.Event.CLOSE;
/** @type {string} */
Laya.Event.KEY_DOWN;
/** @type {string} */
Laya.Event.KEY_PRESS;
/** @type {string} */
Laya.Event.KEY_UP;
/** @type {string} */
Laya.Event.FRAME;
/** @type {string} */
Laya.Event.DRAG_START;
/** @type {string} */
Laya.Event.DRAG_MOVE;
/** @type {string} */
Laya.Event.DRAG_END;
/** @type {string} */
Laya.Event.ENTER;
/** @type {string} */
Laya.Event.SELECT;
/** @type {string} */
Laya.Event.BLUR;
/** @type {string} */
Laya.Event.FOCUS;
/** @type {string} */
Laya.Event.VISIBILITY_CHANGE;
/** @type {string} */
Laya.Event.FOCUS_CHANGE;
/** @type {string} */
Laya.Event.PLAYED;
/** @type {string} */
Laya.Event.PAUSED;
/** @type {string} */
Laya.Event.STOPPED;
/** @type {string} */
Laya.Event.START;
/** @type {string} */
Laya.Event.END;
/** @type {string} */
Laya.Event.COMPONENT_ADDED;
/** @type {string} */
Laya.Event.COMPONENT_REMOVED;
/** @type {string} */
Laya.Event.RELEASED;
/** @type {string} */
Laya.Event.LINK;
/** @type {string} */
Laya.Event.LABEL;
/** @type {string} */
Laya.Event.FULL_SCREEN_CHANGE;
/** @type {string} */
Laya.Event.DEVICE_LOST;
/** @type {string} */
Laya.Event.TRANSFORM_CHANGED;
/** @type {string} */
Laya.Event.ANIMATION_CHANGED;
/** @type {string} */
Laya.Event.TRAIL_FILTER_CHANGE;
/** @type {string} */
Laya.Event.TRIGGER_ENTER;
/** @type {string} */
Laya.Event.TRIGGER_STAY;
/** @type {string} */
Laya.Event.TRIGGER_EXIT;
/** @type {string} */
Laya.Event.prototype.type;
/** @type {?} */
Laya.Event.prototype.nativeEvent;
/** @type {!Laya.Sprite} */
Laya.Event.prototype.target;
/** @type {!Laya.Sprite} */
Laya.Event.prototype.currentTarget;
/** @type {number} */
Laya.Event.prototype.touchId;
/** @type {number} */
Laya.Event.prototype.keyCode;
/** @type {number} */
Laya.Event.prototype.delta;

/* TODO: GetAccessor: Laya.touches */

/* TODO: GetAccessor: Laya.altKey */

/* TODO: GetAccessor: Laya.ctrlKey */

/* TODO: GetAccessor: Laya.shiftKey */

/* TODO: GetAccessor: Laya.charCode */

/* TODO: GetAccessor: Laya.keyLocation */

/* TODO: GetAccessor: Laya.stageX */

/* TODO: GetAccessor: Laya.stageY */

/**
 * 设置事件数据。
 * @param {string} type 事件类型。
 * @param {!Laya.Sprite} currentTarget 事件目标触发对象。
 * @param {!Laya.Sprite} target 事件当前冒泡对象。
 * @return {!Laya.Event} 返回当前 Event 对象。
 */
Laya.Event.prototype.setTo = function(type, currentTarget, target) {};

/**
 * 阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget) 中的任何事件侦听器。
 * @return {void}
 */
Laya.Event.prototype.stopPropagation = function() {};
/**
 * @constructor
 * @struct
 */
Laya.EventDispatcher = function() {};
/** @type {?} */
Laya.EventDispatcher.MOUSE_EVENTS;
/** @type {?} */
Laya.EventDispatcher.prototype._events;
/** @type {?} */
Laya.EventDispatcher.prototype._recoverHandlers;

/**
 * 检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
 * @param {string} type 事件的类型。
 * @return {boolean} 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
 */
Laya.EventDispatcher.prototype.hasListener = function(type) {};

/**
 * 派发事件。
 * @param {string} type 事件类型。
 * @param {?=} data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
 * @return {boolean} 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
 */
Laya.EventDispatcher.prototype.event = function(type, data) {};

/**
 * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.EventDispatcher.prototype.on = function(type, caller, listener, args) {};

/**
 * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {!Array<?>=} args （可选）事件侦听函数的回调参数。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.EventDispatcher.prototype.once = function(type, caller, listener, args) {};

/**
 * 从 EventDispatcher 对象中删除侦听器。
 * @param {string} type 事件的类型。
 * @param {?} caller 事件侦听函数的执行域。
 * @param {!Function} listener 事件侦听函数。
 * @param {boolean=} onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.EventDispatcher.prototype.off = function(type, caller, listener, onceOnly) {};

/**
 * 从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
 * @param {string=} type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
 * @return {!Laya.EventDispatcher} 此 EventDispatcher 对象。
 */
Laya.EventDispatcher.prototype.offAll = function(type) {};

/**
 * 移除caller为target的所有事件监听
 * @param {?} caller caller对象
 * @return {!Laya.EventDispatcher}
 */
Laya.EventDispatcher.prototype.offAllCaller = function(caller) {};

/**
 * 检测指定事件类型是否是鼠标事件。
 * @param {string} type 事件的类型。
 * @return {boolean} 如果是鼠标事件，则值为 true;否则，值为 false。
 */
Laya.EventDispatcher.prototype.isMouseEvent = function(type) {};
/**
 * @constructor
 * @struct
 */
Laya.Keyboard = function() {};
/** @type {number} */
Laya.Keyboard.NUMBER_0;
/** @type {number} */
Laya.Keyboard.NUMBER_1;
/** @type {number} */
Laya.Keyboard.NUMBER_2;
/** @type {number} */
Laya.Keyboard.NUMBER_3;
/** @type {number} */
Laya.Keyboard.NUMBER_4;
/** @type {number} */
Laya.Keyboard.NUMBER_5;
/** @type {number} */
Laya.Keyboard.NUMBER_6;
/** @type {number} */
Laya.Keyboard.NUMBER_7;
/** @type {number} */
Laya.Keyboard.NUMBER_8;
/** @type {number} */
Laya.Keyboard.NUMBER_9;
/** @type {number} */
Laya.Keyboard.A;
/** @type {number} */
Laya.Keyboard.B;
/** @type {number} */
Laya.Keyboard.C;
/** @type {number} */
Laya.Keyboard.D;
/** @type {number} */
Laya.Keyboard.E;
/** @type {number} */
Laya.Keyboard.F;
/** @type {number} */
Laya.Keyboard.G;
/** @type {number} */
Laya.Keyboard.H;
/** @type {number} */
Laya.Keyboard.I;
/** @type {number} */
Laya.Keyboard.J;
/** @type {number} */
Laya.Keyboard.K;
/** @type {number} */
Laya.Keyboard.L;
/** @type {number} */
Laya.Keyboard.M;
/** @type {number} */
Laya.Keyboard.N;
/** @type {number} */
Laya.Keyboard.O;
/** @type {number} */
Laya.Keyboard.P;
/** @type {number} */
Laya.Keyboard.Q;
/** @type {number} */
Laya.Keyboard.R;
/** @type {number} */
Laya.Keyboard.S;
/** @type {number} */
Laya.Keyboard.T;
/** @type {number} */
Laya.Keyboard.U;
/** @type {number} */
Laya.Keyboard.V;
/** @type {number} */
Laya.Keyboard.W;
/** @type {number} */
Laya.Keyboard.X;
/** @type {number} */
Laya.Keyboard.Y;
/** @type {number} */
Laya.Keyboard.Z;
/** @type {number} */
Laya.Keyboard.F1;
/** @type {number} */
Laya.Keyboard.F2;
/** @type {number} */
Laya.Keyboard.F3;
/** @type {number} */
Laya.Keyboard.F4;
/** @type {number} */
Laya.Keyboard.F5;
/** @type {number} */
Laya.Keyboard.F6;
/** @type {number} */
Laya.Keyboard.F7;
/** @type {number} */
Laya.Keyboard.F8;
/** @type {number} */
Laya.Keyboard.F9;
/** @type {number} */
Laya.Keyboard.F10;
/** @type {number} */
Laya.Keyboard.F11;
/** @type {number} */
Laya.Keyboard.F12;
/** @type {number} */
Laya.Keyboard.F13;
/** @type {number} */
Laya.Keyboard.F14;
/** @type {number} */
Laya.Keyboard.F15;
/** @type {number} */
Laya.Keyboard.NUMPAD;
/** @type {number} */
Laya.Keyboard.NUMPAD_0;
/** @type {number} */
Laya.Keyboard.NUMPAD_1;
/** @type {number} */
Laya.Keyboard.NUMPAD_2;
/** @type {number} */
Laya.Keyboard.NUMPAD_3;
/** @type {number} */
Laya.Keyboard.NUMPAD_4;
/** @type {number} */
Laya.Keyboard.NUMPAD_5;
/** @type {number} */
Laya.Keyboard.NUMPAD_6;
/** @type {number} */
Laya.Keyboard.NUMPAD_7;
/** @type {number} */
Laya.Keyboard.NUMPAD_8;
/** @type {number} */
Laya.Keyboard.NUMPAD_9;
/** @type {number} */
Laya.Keyboard.NUMPAD_ADD;
/** @type {number} */
Laya.Keyboard.NUMPAD_DECIMAL;
/** @type {number} */
Laya.Keyboard.NUMPAD_DIVIDE;
/** @type {number} */
Laya.Keyboard.NUMPAD_ENTER;
/** @type {number} */
Laya.Keyboard.NUMPAD_MULTIPLY;
/** @type {number} */
Laya.Keyboard.NUMPAD_SUBTRACT;
/** @type {number} */
Laya.Keyboard.SEMICOLON;
/** @type {number} */
Laya.Keyboard.EQUAL;
/** @type {number} */
Laya.Keyboard.COMMA;
/** @type {number} */
Laya.Keyboard.MINUS;
/** @type {number} */
Laya.Keyboard.PERIOD;
/** @type {number} */
Laya.Keyboard.SLASH;
/** @type {number} */
Laya.Keyboard.BACKQUOTE;
/** @type {number} */
Laya.Keyboard.LEFTBRACKET;
/** @type {number} */
Laya.Keyboard.BACKSLASH;
/** @type {number} */
Laya.Keyboard.RIGHTBRACKET;
/** @type {number} */
Laya.Keyboard.QUOTE;
/** @type {number} */
Laya.Keyboard.ALTERNATE;
/** @type {number} */
Laya.Keyboard.BACKSPACE;
/** @type {number} */
Laya.Keyboard.CAPS_LOCK;
/** @type {number} */
Laya.Keyboard.COMMAND;
/** @type {number} */
Laya.Keyboard.CONTROL;
/** @type {number} */
Laya.Keyboard.DELETE;
/** @type {number} */
Laya.Keyboard.ENTER;
/** @type {number} */
Laya.Keyboard.ESCAPE;
/** @type {number} */
Laya.Keyboard.PAGE_UP;
/** @type {number} */
Laya.Keyboard.PAGE_DOWN;
/** @type {number} */
Laya.Keyboard.END;
/** @type {number} */
Laya.Keyboard.HOME;
/** @type {number} */
Laya.Keyboard.LEFT;
/** @type {number} */
Laya.Keyboard.UP;
/** @type {number} */
Laya.Keyboard.RIGHT;
/** @type {number} */
Laya.Keyboard.DOWN;
/** @type {number} */
Laya.Keyboard.SHIFT;
/** @type {number} */
Laya.Keyboard.SPACE;
/** @type {number} */
Laya.Keyboard.TAB;
/** @type {number} */
Laya.Keyboard.INSERT;
/**
 * @constructor
 * @struct
 */
Laya.KeyBoardManager = function() {};
/** @type {?} */
Laya.KeyBoardManager._pressKeys;
/** @type {boolean} */
Laya.KeyBoardManager.enabled;
/** @type {?} */
Laya.KeyBoardManager._addEvent;
/** @type {?} */
Laya.KeyBoardManager._dispatch;

/**
 * 返回指定键是否被按下。
 * @param {number} key 键值。
 * @return {boolean} 是否被按下。
 */
Laya.KeyBoardManager.hasKeyDown = function(key) {};
/**
 * @constructor
 * @struct
 */
Laya.KeyLocation = function() {};
/** @type {number} */
Laya.KeyLocation.STANDARD;
/** @type {number} */
Laya.KeyLocation.LEFT;
/** @type {number} */
Laya.KeyLocation.RIGHT;
/** @type {number} */
Laya.KeyLocation.NUM_PAD;
/**
 * @constructor
 * @struct
 */
Laya.MouseManager = function() {};
/** @type {!Laya.MouseManager} */
Laya.MouseManager.instance;
/** @type {boolean} */
Laya.MouseManager.enabled;
/** @type {boolean} */
Laya.MouseManager.multiTouchEnabled;
/** @type {number} */
Laya.MouseManager.prototype.mouseX;
/** @type {number} */
Laya.MouseManager.prototype.mouseY;
/** @type {boolean} */
Laya.MouseManager.prototype.disableMouseEvent;
/** @type {number} */
Laya.MouseManager.prototype.mouseDownTime;
/** @type {number} */
Laya.MouseManager.prototype.mouseMoveAccuracy;
/** @type {?} */
Laya.MouseManager._isTouchRespond;
/** @type {?} */
Laya.MouseManager.prototype._stage;
/** @type {?} */
Laya.MouseManager.prototype._captureSp;
/** @type {?} */
Laya.MouseManager.prototype._captureChain;
/** @type {?} */
Laya.MouseManager.prototype._captureExlusiveMode;
/** @type {?} */
Laya.MouseManager.prototype._hitCaputreSp;
/** @type {?} */
Laya.MouseManager.prototype._point;
/** @type {?} */
Laya.MouseManager.prototype._rect;
/** @type {?} */
Laya.MouseManager.prototype._target;
/** @type {?} */
Laya.MouseManager.prototype._lastMoveTimer;
/** @type {?} */
Laya.MouseManager.prototype._isLeftMouse;
/** @type {?} */
Laya.MouseManager.prototype._prePoint;
/** @type {?} */
Laya.MouseManager.prototype._touchIDs;
/** @type {?} */
Laya.MouseManager.prototype._curTouchID;
/** @type {?} */
Laya.MouseManager.prototype._id;
/** @type {?} */
Laya.MouseManager._isFirstTouch;
/** @type {?} */
Laya.MouseManager.prototype._tTouchID;
/** @type {?} */
Laya.MouseManager.prototype.initEvent;
/** @type {?} */
Laya.MouseManager.prototype.checkMouseWheel;
/** @type {?} */
Laya.MouseManager.prototype.onMouseMove;
/** @type {?} */
Laya.MouseManager.prototype.onMouseDown;
/** @type {?} */
Laya.MouseManager.prototype.onMouseUp;
/** @type {?} */
Laya.MouseManager.prototype.check;
/** @type {?} */
Laya.MouseManager.prototype.hitTest;
/** @type {?} */
Laya.MouseManager.prototype._checkAllBaseUI;

/**
 * @param {!Laya.Stage} stage
 * @param {?} canvas
 * @return {void}
 */
Laya.MouseManager.prototype.__init__ = function(stage, canvas) {};

/**
 * 处理3d界面。
 * @param {number} mousex
 * @param {number} mousey
 * @param {!Function} callback
 * @return {boolean}
 */
Laya.MouseManager.prototype.check3DUI = function(mousex, mousey, callback) {};

/**
 * @param {number} mousex
 * @param {number} mousey
 * @param {!Function} callback
 * @return {boolean}
 */
Laya.MouseManager.prototype.handleExclusiveCapture = function(mousex, mousey, callback) {};

/**
 * @param {number} mousex
 * @param {number} mousey
 * @param {!Function} callback
 * @return {boolean}
 */
Laya.MouseManager.prototype.handleCapture = function(mousex, mousey, callback) {};

/**
 * 执行事件处理。
 * @param {?} evt
 * @return {void}
 */
Laya.MouseManager.prototype.runEvent = function(evt) {};

/**
 * @param {!Laya.Sprite} sp
 * @param {boolean=} exclusive
 * @return {void}
 */
Laya.MouseManager.prototype.setCapture = function(sp, exclusive) {};

/**
 * @return {void}
 */
Laya.MouseManager.prototype.releaseCapture = function() {};
/**
 * @constructor
 * @struct
 */
Laya.TouchManager = function() {};
/** @type {!Laya.TouchManager} */
Laya.TouchManager.I;
/** @type {?} */
Laya.TouchManager._oldArr;
/** @type {?} */
Laya.TouchManager._newArr;
/** @type {?} */
Laya.TouchManager._tEleArr;
/** @type {?} */
Laya.TouchManager.prototype.preOvers;
/** @type {?} */
Laya.TouchManager.prototype.preDowns;
/** @type {?} */
Laya.TouchManager.prototype.preRightDowns;
/** @type {boolean} */
Laya.TouchManager.prototype.enable;
/** @type {?} */
Laya.TouchManager.prototype._lastClickTime;
/** @type {?} */
Laya.TouchManager.prototype._clearTempArrs;
/** @type {?} */
Laya.TouchManager.prototype.getTouchFromArr;
/** @type {?} */
Laya.TouchManager.prototype.removeTouchFromArr;
/** @type {?} */
Laya.TouchManager.prototype.createTouchO;
/** @type {?} */
Laya.TouchManager.prototype.sendEvents;
/** @type {?} */
Laya.TouchManager.prototype.getEles;
/** @type {?} */
Laya.TouchManager.prototype.checkMouseOutAndOverOfMove;

/**
 * 处理touchStart
 * @param {?} ele 根节点
 * @param {number} touchID touchID
 * @param {boolean=} isLeft （可选）是否为左键
 * @return {void}
 */
Laya.TouchManager.prototype.onMouseDown = function(ele, touchID, isLeft) {};

/**
 * 处理TouchMove事件
 * @param {?} ele 根节点
 * @param {number} touchID touchID
 * @return {void}
 */
Laya.TouchManager.prototype.onMouseMove = function(ele, touchID) {};

/**
 * @return {!Array<?>}
 */
Laya.TouchManager.prototype.getLastOvers = function() {};

/**
 * @return {void}
 */
Laya.TouchManager.prototype.stageMouseOut = function() {};

/**
 * 处理TouchEnd事件
 * @param {?} ele 根节点
 * @param {number} touchID touchID
 * @param {boolean=} isLeft 是否为左键
 * @return {void}
 */
Laya.TouchManager.prototype.onMouseUp = function(ele, touchID, isLeft) {};

/**
 * @extends {Laya.Filter}
 * @constructor
 * @struct
 * 模糊滤镜
 * @param {number=} strength 模糊滤镜的强度值
 */
Laya.BlurFilter = function(strength) {};
/** @type {number} */
Laya.BlurFilter.prototype.strength;
/** @type {!Array<?>} */
Laya.BlurFilter.prototype.strength_sig2_2sig2_gauss1;
/** @type {!Float32Array} */
Laya.BlurFilter.prototype.strength_sig2_native;
/** @type {?} */
Laya.BlurFilter.prototype.renderFunc;

/* TODO: GetAccessor: Laya.type */

/**
 * @return {!Float32Array}
 */
Laya.BlurFilter.prototype.getStrenth_sig2_2sig2_native = function() {};
/**
 * @constructor
 * @struct
 */
Laya.BlurFilterGLRender = function() {};
/** @type {?} */
Laya.BlurFilterGLRender.blurinfo;

/**
 * @param {!Laya.RenderTexture2D} rt
 * @param {!Laya.Context} ctx
 * @param {number} width
 * @param {number} height
 * @param {!Laya.BlurFilter} filter
 * @return {void}
 */
Laya.BlurFilterGLRender.prototype.render = function(rt, ctx, width, height, filter) {};

/**
 * @param {!Laya.Value2D} shader
 * @param {!Laya.BlurFilter} filter
 * @param {number} w
 * @param {number} h
 * @return {void}
 */
Laya.BlurFilterGLRender.prototype.setShaderInfo = function(shader, filter, w, h) {};

/**
 * @extends {Laya.Filter}
 * @implements {Laya.IFilter}
 * @constructor
 * @struct
 * 创建一个 <code>ColorFilter</code> 实例。
 * @param {!Array<?>=} mat （可选）由 20 个项目（排列成 4 x 5 矩阵）组成的数组，用于颜色转换。
 */
Laya.ColorFilter = function(mat) {};
/** @type {?} */
Laya.ColorFilter.DELTA_INDEX;
/** @type {?} */
Laya.ColorFilter.GRAY_MATRIX;
/** @type {?} */
Laya.ColorFilter.IDENTITY_MATRIX;
/** @type {?} */
Laya.ColorFilter.LENGTH;
/** @type {?} */
Laya.ColorFilter.prototype._matrix;

/* TODO: GetAccessor: Laya.type */
/** @type {?} */
Laya.ColorFilter.prototype._multiplyMatrix;
/** @type {?} */
Laya.ColorFilter.prototype._clampValue;
/** @type {?} */
Laya.ColorFilter.prototype._fixMatrix;
/** @type {?} */
Laya.ColorFilter.prototype._copyMatrix;

/**
 * 设置为灰色滤镜
 * @return {!Laya.ColorFilter}
 */
Laya.ColorFilter.prototype.gray = function() {};

/**
 * 设置为变色滤镜
 * @param {number=} red 红色增量,范围:0~255
 * @param {number=} green 绿色增量,范围:0~255
 * @param {number=} blue 蓝色增量,范围:0~255
 * @param {number=} alpha alpha,范围:0~1
 * @return {!Laya.ColorFilter}
 */
Laya.ColorFilter.prototype.color = function(red, green, blue, alpha) {};

/**
 * 设置滤镜色
 * @param {string} color 颜色值
 * @return {!Laya.ColorFilter}
 */
Laya.ColorFilter.prototype.setColor = function(color) {};

/**
 * 设置矩阵数据
 * @param {!Array<?>} matrix 由 20 个项目（排列成 4 x 5 矩阵）组成的数组
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.setByMatrix = function(matrix) {};

/**
 * 调整颜色，包括亮度，对比度，饱和度和色调
 * @param {number} brightness 亮度,范围:-100~100
 * @param {number} contrast 对比度,范围:-100~100
 * @param {number} saturation 饱和度,范围:-100~100
 * @param {number} hue 色调,范围:-180~180
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.adjustColor = function(brightness, contrast, saturation, hue) {};

/**
 * 调整亮度
 * @param {number} brightness 亮度,范围:-100~100
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.adjustBrightness = function(brightness) {};

/**
 * 调整对比度
 * @param {number} contrast 对比度,范围:-100~100
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.adjustContrast = function(contrast) {};

/**
 * 调整饱和度
 * @param {number} saturation 饱和度,范围:-100~100
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.adjustSaturation = function(saturation) {};

/**
 * 调整色调
 * @param {number} hue 色调,范围:-180~180
 * @return {!Laya.ColorFilter} this
 */
Laya.ColorFilter.prototype.adjustHue = function(hue) {};

/**
 * 重置成单位矩阵，去除滤镜效果
 * @return {!Laya.ColorFilter}
 */
Laya.ColorFilter.prototype.reset = function() {};

/**
 * @implements {Laya.IFilter}
 * @constructor
 * @struct
 * 创建一个 <code>Filter</code> 实例。
 */
Laya.Filter = function() {};
/** @type {number} */
Laya.Filter.BLUR;
/** @type {number} */
Laya.Filter.COLOR;
/** @type {number} */
Laya.Filter.GLOW;

/* TODO: GetAccessor: Laya.type */
/** @type {function(this: (!Laya.RenderSprite), !Laya.Sprite, !Laya.Context, number, number): void} */
Laya.Filter._filter;

/**
 * @extends {Laya.Filter}
 * @constructor
 * @struct
 * 创建发光滤镜
 * @param {string} color 滤镜的颜色
 * @param {number=} blur 边缘模糊的大小
 * @param {number=} offX X轴方向的偏移
 * @param {number=} offY Y轴方向的偏移
 */
Laya.GlowFilter = function(color, blur, offX, offY) {};
/** @type {?} */
Laya.GlowFilter.prototype._elements;
/** @type {?} */
Laya.GlowFilter.prototype._color;

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.offY */

/* TODO: SetAccessor: Laya.offY */

/* TODO: GetAccessor: Laya.offX */

/* TODO: SetAccessor: Laya.offX */

/* TODO: GetAccessor: Laya.blur */

/* TODO: SetAccessor: Laya.blur */

/**
 * @return {!Array<?>}
 */
Laya.GlowFilter.prototype.getColor = function() {};

/**
 * @return {!Float32Array}
 */
Laya.GlowFilter.prototype.getColorNative = function() {};

/**
 * @return {!Float32Array}
 */
Laya.GlowFilter.prototype.getBlurInfo1Native = function() {};

/**
 * @return {!Float32Array}
 */
Laya.GlowFilter.prototype.getBlurInfo2Native = function() {};
/**
 * @constructor
 * @struct
 */
Laya.GlowFilterGLRender = function() {};
/** @type {?} */
Laya.GlowFilterGLRender.prototype.setShaderInfo;

/**
 * @param {!Laya.RenderTexture2D} rt
 * @param {!Laya.Context} ctx
 * @param {number} width
 * @param {number} height
 * @param {!Laya.GlowFilter} filter
 * @return {void}
 */
Laya.GlowFilterGLRender.prototype.render = function(rt, ctx, width, height, filter) {};
/**
 * @record
 * @struct
 */
Laya.IFilter = function() {};
/** @type {number} */
Laya.IFilter.prototype.type;

/** @enum {number} */
Laya.glTFAccessorComponentType = {
  BYTE: 1,
  UNSIGNED_BYTE: 1,
  SHORT: 1,
  UNSIGNED_SHORT: 1,
  UNSIGNED_INT: 1,
  FLOAT: 1,
};

/** @enum {string} */
Laya.glTFAccessorType = {
  SCALAR: '',
  VEC2: '',
  VEC3: '',
  VEC4: '',
  MAT2: '',
  MAT3: '',
  MAT4: '',
};

/** @enum {string} */
Laya.glTFAnimationChannelTargetPath = {
  TRANSLATION: '',
  ROTATION: '',
  SCALE: '',
  WEIGHTS: '',
};

/** @enum {string} */
Laya.glTFAnimationSamplerInterpolation = {
  LINEAR: '',
  STEP: '',
  CUBICSPLINE: '',
};

/** @enum {string} */
Laya.glTFCameraType = {
  PERSPECTIVE: '',
  ORTHOGRAPHIC: '',
};

/** @enum {string} */
Laya.glTFImageMimeType = {
  JPEG: '',
  PNG: '',
};

/** @enum {string} */
Laya.glTFMaterialAlphaMode = {
  OPAQUE: '',
  MASK: '',
  BLEND: '',
};

/** @enum {number} */
Laya.glTFMeshPrimitiveMode = {
  POINTS: 1,
  LINES: 1,
  LINE_LOOP: 1,
  LINE_STRIP: 1,
  TRIANGLES: 1,
  TRIANGLE_STRIP: 1,
  TRIANGLE_FAN: 1,
};

/** @enum {number} */
Laya.glTFTextureMagFilter = {
  NEAREST: 1,
  LINEAR: 1,
};

/** @enum {number} */
Laya.glTFTextureMinFilter = {
  NEAREST: 1,
  LINEAR: 1,
  NEAREST_MIPMAP_NEAREST: 1,
  LINEAR_MIPMAP_NEAREST: 1,
  NEAREST_MIPMAP_LINEAR: 1,
  LINEAR_MIPMAP_LINEAR: 1,
};

/** @enum {number} */
Laya.glTFTextureWrapMode = {
  CLAMP_TO_EDGE: 1,
  MIRRORED_REPEAT: 1,
  REPEAT: 1,
};
/**
 * @record
 * @struct
 */
Laya.glTFNodeProperty = function() {};
/** @type {!Object<string,?>} */
Laya.glTFNodeProperty.prototype.extensions;
/** @type {?|undefined} */
Laya.glTFNodeProperty.prototype.extras;
/**
 * @record
 * @struct
 */
Laya.glTFChildNodeProperty = function() {};
/** @type {string} */
Laya.glTFChildNodeProperty.prototype.name;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAccessorSparseIndeces = function() {};
/** @type {number} */
Laya.glTFAccessorSparseIndeces.prototype.bufferView;
/** @type {number} */
Laya.glTFAccessorSparseIndeces.prototype.byteOffset;
/** @type {!Laya.glTFAccessorComponentType} */
Laya.glTFAccessorSparseIndeces.prototype.componentType;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAccessorSparseValues = function() {};
/** @type {number} */
Laya.glTFAccessorSparseValues.prototype.bufferView;
/** @type {number} */
Laya.glTFAccessorSparseValues.prototype.byteOffset;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAccessorSparse = function() {};
/** @type {number} */
Laya.glTFAccessorSparse.prototype.count;
/** @type {!Laya.glTFAccessorSparseIndeces} */
Laya.glTFAccessorSparse.prototype.indices;
/** @type {!Laya.glTFAccessorSparseValues} */
Laya.glTFAccessorSparse.prototype.values;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAccessor = function() {};
/** @type {number} */
Laya.glTFAccessor.prototype.bufferView;
/** @type {number} */
Laya.glTFAccessor.prototype.byteOffset;
/** @type {!Laya.glTFAccessorComponentType} */
Laya.glTFAccessor.prototype.componentType;
/** @type {boolean} */
Laya.glTFAccessor.prototype.normalized;
/** @type {number} */
Laya.glTFAccessor.prototype.count;
/** @type {!Laya.glTFAccessorType} */
Laya.glTFAccessor.prototype.type;
/** @type {!Array<number>} */
Laya.glTFAccessor.prototype.max;
/** @type {!Array<number>} */
Laya.glTFAccessor.prototype.min;
/** @type {!Laya.glTFAccessorSparse} */
Laya.glTFAccessor.prototype.sparse;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAnimationChannelTarget = function() {};
/** @type {number} */
Laya.glTFAnimationChannelTarget.prototype.node;
/** @type {!Laya.glTFAnimationChannelTargetPath} */
Laya.glTFAnimationChannelTarget.prototype.path;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAnimationChannel = function() {};
/** @type {number} */
Laya.glTFAnimationChannel.prototype.sampler;
/** @type {!Laya.glTFAnimationChannelTarget} */
Laya.glTFAnimationChannel.prototype.target;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAnimationSampler = function() {};
/** @type {number} */
Laya.glTFAnimationSampler.prototype.input;
/** @type {!Laya.glTFAnimationSamplerInterpolation} */
Laya.glTFAnimationSampler.prototype.interpolation;
/** @type {number} */
Laya.glTFAnimationSampler.prototype.output;
/**
 * @extends {Laya.glTFNodeProperty}
 * @extends {Laya.glTFChildNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAnimation = function() {};
/** @type {!Array<!Laya.glTFAnimationChannel>} */
Laya.glTFAnimation.prototype.channels;
/** @type {!Array<!Laya.glTFAnimationSampler>} */
Laya.glTFAnimation.prototype.samplers;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @record
 * @struct
 */
Laya.glTFAsset = function() {};
/** @type {string} */
Laya.glTFAsset.prototype.copyright;
/** @type {string} */
Laya.glTFAsset.prototype.generator;
/** @type {string} */
Laya.glTFAsset.prototype.version;
/** @type {string} */
Laya.glTFAsset.prototype.minVersion;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFBuffer = function() {};
/** @type {string} */
Laya.glTFBuffer.prototype.uri;
/** @type {number} */
Laya.glTFBuffer.prototype.byteLength;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFBufferView = function() {};
/** @type {number} */
Laya.glTFBufferView.prototype.buffer;
/** @type {number} */
Laya.glTFBufferView.prototype.byteOffset;
/** @type {number} */
Laya.glTFBufferView.prototype.byteLength;
/** @type {number} */
Laya.glTFBufferView.prototype.byteStride;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFCameraOrthographic = function() {};
/** @type {number} */
Laya.glTFCameraOrthographic.prototype.xmag;
/** @type {number} */
Laya.glTFCameraOrthographic.prototype.ymag;
/** @type {number} */
Laya.glTFCameraOrthographic.prototype.zfar;
/** @type {number} */
Laya.glTFCameraOrthographic.prototype.znear;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFCameraPerspective = function() {};
/** @type {number} */
Laya.glTFCameraPerspective.prototype.aspectRatio;
/** @type {number} */
Laya.glTFCameraPerspective.prototype.yfov;
/** @type {number} */
Laya.glTFCameraPerspective.prototype.zfar;
/** @type {number} */
Laya.glTFCameraPerspective.prototype.znear;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFCamera = function() {};
/** @type {!Laya.glTFCameraOrthographic} */
Laya.glTFCamera.prototype.orthographic;
/** @type {!Laya.glTFCameraPerspective} */
Laya.glTFCamera.prototype.perspective;
/** @type {!Laya.glTFCameraType} */
Laya.glTFCamera.prototype.type;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFImage = function() {};
/** @type {string} */
Laya.glTFImage.prototype.uri;
/** @type {!Laya.glTFImageMimeType} */
Laya.glTFImage.prototype.mimeType;
/** @type {number} */
Laya.glTFImage.prototype.bufferView;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFTextureInfo = function() {};
/** @type {number} */
Laya.glTFTextureInfo.prototype.index;
/** @type {number} */
Laya.glTFTextureInfo.prototype.texCoord;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFMaterialPbrMetallicRoughness = function() {};
/** @type {!Array<number>} */
Laya.glTFMaterialPbrMetallicRoughness.prototype.baseColorFactor;
/** @type {!Laya.glTFTextureInfo} */
Laya.glTFMaterialPbrMetallicRoughness.prototype.baseColorTexture;
/** @type {number} */
Laya.glTFMaterialPbrMetallicRoughness.prototype.metallicFactor;
/** @type {number} */
Laya.glTFMaterialPbrMetallicRoughness.prototype.roughnessFactor;
/** @type {!Laya.glTFTextureInfo} */
Laya.glTFMaterialPbrMetallicRoughness.prototype.metallicRoughnessTexture;
/**
 * @extends {Laya.glTFTextureInfo}
 * @record
 * @struct
 */
Laya.glTFMaterialNormalTextureInfo = function() {};
/** @type {number} */
Laya.glTFMaterialNormalTextureInfo.prototype.scale;
/**
 * @extends {Laya.glTFTextureInfo}
 * @record
 * @struct
 */
Laya.glTFMaterialOcclusionTextureInfo = function() {};
/** @type {number} */
Laya.glTFMaterialOcclusionTextureInfo.prototype.strength;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFMaterial = function() {};
/** @type {!Laya.glTFMaterialPbrMetallicRoughness} */
Laya.glTFMaterial.prototype.pbrMetallicRoughness;
/** @type {!Laya.glTFMaterialNormalTextureInfo} */
Laya.glTFMaterial.prototype.normalTexture;
/** @type {!Laya.glTFMaterialOcclusionTextureInfo} */
Laya.glTFMaterial.prototype.occlusionTexture;
/** @type {!Laya.glTFTextureInfo} */
Laya.glTFMaterial.prototype.emissiveTexture;
/** @type {!Array<number>} */
Laya.glTFMaterial.prototype.emissiveFactor;
/** @type {!Laya.glTFMaterialAlphaMode} */
Laya.glTFMaterial.prototype.alphaMode;
/** @type {number} */
Laya.glTFMaterial.prototype.alphaCutoff;
/** @type {boolean} */
Laya.glTFMaterial.prototype.doubleSided;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFMeshPrimitive = function() {};
/** @type {!Object<string,number>} */
Laya.glTFMeshPrimitive.prototype.attributes;
/** @type {number} */
Laya.glTFMeshPrimitive.prototype.indices;
/** @type {number} */
Laya.glTFMeshPrimitive.prototype.material;
/** @type {!Laya.glTFMeshPrimitiveMode} */
Laya.glTFMeshPrimitive.prototype.mode;
/** @type {!Array<!Object<string,number>>} */
Laya.glTFMeshPrimitive.prototype.targets;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFMesh = function() {};
/** @type {!Array<!Laya.glTFMeshPrimitive>} */
Laya.glTFMesh.prototype.primitives;
/** @type {!Array<number>} */
Laya.glTFMesh.prototype.weights;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFNode = function() {};
/** @type {number} */
Laya.glTFNode.prototype.camera;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.children;
/** @type {number} */
Laya.glTFNode.prototype.skin;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.matrix;
/** @type {number} */
Laya.glTFNode.prototype.mesh;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.rotation;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.scale;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.translation;
/** @type {!Array<number>} */
Laya.glTFNode.prototype.weights;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFSampler = function() {};
/** @type {!Laya.glTFTextureMagFilter} */
Laya.glTFSampler.prototype.magFilter;
/** @type {!Laya.glTFTextureMinFilter} */
Laya.glTFSampler.prototype.minFilter;
/** @type {!Laya.glTFTextureWrapMode} */
Laya.glTFSampler.prototype.wrapS;
/** @type {!Laya.glTFTextureWrapMode} */
Laya.glTFSampler.prototype.wrapT;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFScene = function() {};
/** @type {!Array<number>} */
Laya.glTFScene.prototype.nodes;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFSkin = function() {};
/** @type {number} */
Laya.glTFSkin.prototype.inverseBindMatrices;
/** @type {number} */
Laya.glTFSkin.prototype.skeleton;
/** @type {!Array<number>} */
Laya.glTFSkin.prototype.joints;
/**
 * @extends {Laya.glTFChildNodeProperty}
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTFTexture = function() {};
/** @type {number} */
Laya.glTFTexture.prototype.sampler;
/** @type {number} */
Laya.glTFTexture.prototype.source;
/**
 * @extends {Laya.glTFNodeProperty}
 * @record
 * @struct
 */
Laya.glTF = function() {};
/** @type {!Array<!Laya.glTFAccessor>} */
Laya.glTF.prototype.accessors;
/** @type {!Array<!Laya.glTFAnimation>} */
Laya.glTF.prototype.animations;
/** @type {!Laya.glTFAsset} */
Laya.glTF.prototype.asset;
/** @type {!Array<!Laya.glTFBuffer>} */
Laya.glTF.prototype.buffers;
/** @type {!Array<!Laya.glTFBufferView>} */
Laya.glTF.prototype.bufferViews;
/** @type {!Array<!Laya.glTFCamera>} */
Laya.glTF.prototype.cameras;
/** @type {!Array<string>} */
Laya.glTF.prototype.extensionsUsed;
/** @type {!Array<string>} */
Laya.glTF.prototype.extensionsRequired;
/** @type {!Array<!Laya.glTFImage>} */
Laya.glTF.prototype.images;
/** @type {!Array<!Laya.glTFMaterial>} */
Laya.glTF.prototype.materials;
/** @type {!Array<!Laya.glTFMesh>} */
Laya.glTF.prototype.meshes;
/** @type {!Array<!Laya.glTFNode>} */
Laya.glTF.prototype.nodes;
/** @type {!Array<!Laya.glTFSampler>} */
Laya.glTF.prototype.samplers;
/** @type {number} */
Laya.glTF.prototype.scene;
/** @type {!Array<!Laya.glTFScene>} */
Laya.glTF.prototype.scenes;
/** @type {!Array<!Laya.glTFSkin>} */
Laya.glTF.prototype.skins;
/** @type {!Array<!Laya.glTFTexture>} */
Laya.glTF.prototype.textures;
/**
 * @constructor
 * @struct
 */
Laya.glTFLoader = function() {};
/** @type {string} */
Laya.glTFLoader.GLTF;
/** @type {string} */
Laya.glTFLoader.GLTFBASE64TEX;

/**
 * 初始化 glTF Loader
 * @return {void}
 */
Laya.glTFLoader.init = function() {};
/**
 * @constructor
 * @struct
 */
Laya.glTFUtils = function() {};
/** @type {!Object<string,!Handler>} */
Laya.glTFUtils.Extensions;
/** @type {!Object<string,!Object<string,!Handler>>} */
Laya.glTFUtils.Extras;

/**
 * 注册 extra 处理函数
 * @param {string} context
 * @param {string} extraName
 * @param {!Handler} handler
 * @return {void}
 */
Laya.glTFUtils.RegisterExtra = function(context, extraName, handler) {};

/**
 * 取消注册 extra 处理函数
 * @param {string} context
 * @param {string} extraName
 * @param {boolean=} recoverHandler
 * @return {void}
 */
Laya.glTFUtils.UnRegisterExtra = function(context, extraName, recoverHandler) {};

/**
 * 根据数据类型获取分量
 * @param {!Laya.glTFAccessorType} type
 * @return {number}
 */
Laya.glTFUtils.getAccessorComponentsNum = function(type) {};

/**
 * 获取 attribute 分量
 * @param {string} attriStr
 * @return {number}
 */
Laya.glTFUtils.getAttributeNum = function(attriStr) {};

/**
 * 获取 accessor buffer 数据
 * @param {number} accessorIndex
 * @return {(!Uint32Array|!Float32Array|!Uint16Array|!Uint8Array|!Int16Array|!Int8Array)}
 */
Laya.glTFUtils.getBufferwithAccessorIndex = function(accessorIndex) {};

/**
 * 判断 Texture 是否需要 mipmap
 * @param {!Laya.glTFSampler} glTFSampler
 * @return {boolean}
 */
Laya.glTFUtils.getTextureMipmap = function(glTFSampler) {};

/**
 * 获取 Texture format
 * @param {!Laya.glTFImage} glTFImage
 * @return {number}
 */
Laya.glTFUtils.getTextureFormat = function(glTFImage) {};

/**
 * 获取 Texture filter mode
 * @param {!Laya.glTFSampler} glTFSampler
 * @return {number}
 */
Laya.glTFUtils.getTextureFilterMode = function(glTFSampler) {};

/**
 * 获取 Texture warp mode
 * @param {!Laya.glTFTextureWrapMode} mode
 * @return {number}
 */
Laya.glTFUtils.getTextureWrapMode = function(mode) {};

/**
 * 获取 Texture 初始化参数
 * @param {!Laya.glTFImage} glTFImage
 * @param {!Laya.glTFSampler} glTFSampler
 * @return {!Array<?>}
 */
Laya.glTFUtils.getTextureConstructParams = function(glTFImage, glTFSampler) {};

/**
 * 获取 Texture 属性参数
 * @param {!Laya.glTFSampler} glTFSampler
 * @return {?}
 */
Laya.glTFUtils.getTexturePropertyParams = function(glTFSampler) {};

/**
 * 根据 glTFTextureInfo 获取 Texture2D
 * @param {!Laya.glTFTextureInfo} glTFTextureInfo
 * @return {!Laya.Texture2D}
 */
Laya.glTFUtils.getTexturewithInfo = function(glTFTextureInfo) {};

/**
 * 根据 glTFMaterial 节点数据创建 default Material
 * @param {!Laya.glTFMaterial} glTFMaterial
 * @return {!Laya.PBRStandardMaterial}
 */
Laya.glTFUtils._createdefaultMaterial = function(glTFMaterial) {};

/**
 * 应用 pbrMetallicRoughness 数据
 * @param {!Laya.glTFMaterialPbrMetallicRoughness} pbrMetallicRoughness
 * @param {!Laya.PBRStandardMaterial} layaPBRMaterial
 * @return {void}
 */
Laya.glTFUtils.applyPBRMetallicRoughness = function(pbrMetallicRoughness, layaPBRMaterial) {};

/**
 * 获取 gltf mesh 中 material
 * @param {!Laya.glTFMesh} glTFMesh
 * @return {!Array<!Laya.Material>}
 */
Laya.glTFUtils.pickMeshMaterials = function(glTFMesh) {};

/**
 * 创建 glTFScene 节点
 * @param {!Laya.glTFScene} glTFScene
 * @return {!Laya.Sprite3D}
 */
Laya.glTFUtils._createSceneNode = function(glTFScene) {};

/**
 * 应用 Transform 信息
 * @param {!Laya.glTFNode} glTFNode
 * @param {!Laya.Sprite3D} sprite
 * @return {void}
 */
Laya.glTFUtils.applyTransform = function(glTFNode, sprite) {};

/**
 * 创建 节点对象
 * @param {!Laya.glTFNode} glTFNode
 * @return {!Laya.Sprite3D}
 */
Laya.glTFUtils._createSprite3D = function(glTFNode) {};

/**
 * 创建 MeshSprite3D 对象
 * @param {!Laya.glTFNode} glTFNode
 * @return {!Laya.MeshSprite3D}
 */
Laya.glTFUtils._createMeshSprite3D = function(glTFNode) {};

/**
 * 创建 MeshSprite3D 对象
 * @param {!Laya.glTFNode} glTFNode
 * @return {!Laya.SkinnedMeshSprite3D}
 */
Laya.glTFUtils._createSkinnedMeshSprite3D = function(glTFNode) {};

/**
 * 创建 Mesh
 * @param {!Laya.glTFMesh} glTFMesh
 * @param {!Laya.glTFSkin=} glTFSkin
 * @return {!Laya.Mesh}
 */
Laya.glTFUtils._createMesh = function(glTFMesh, glTFSkin) {};

/**
 * 计算 SkinnedMeshSprite3D local bounds
 * @param {!Laya.SkinnedMeshSprite3D} skinned
 * @return {void}
 */
Laya.glTFUtils.calSkinnedSpriteLocalBounds = function(skinned) {};

/**
 * \@interna 获取 Animator 根节点
 * @param {!Array<!Laya.glTFAnimationChannel>} channels
 * @return {!Laya.Sprite3D}
 */
Laya.glTFUtils.getAnimationRoot = function(channels) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.HTMLDivElement = function() {};
/** @type {?} */
Laya.HTMLDivElement.prototype._recList;
/** @type {?} */
Laya.HTMLDivElement.prototype._innerHTML;
/** @type {?} */
Laya.HTMLDivElement.prototype._repaintState;
/** @type {?} */
Laya.HTMLDivElement.prototype._htmlDivRepaint;
/** @type {?} */
Laya.HTMLDivElement.prototype._updateGraphicWork;
/** @type {?} */
Laya.HTMLDivElement.prototype._setGraphicDirty;
/** @type {?} */
Laya.HTMLDivElement.prototype._doClears;
/** @type {?} */
Laya.HTMLDivElement.prototype._updateGraphic;

/* TODO: GetAccessor: Laya.style */

/* TODO: SetAccessor: Laya.innerHTML */
/** @type {?} */
Laya.HTMLDivElement.prototype._refresh;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.contextWidth */

/* TODO: GetAccessor: Laya.contextHeight */
/** @type {?} */
Laya.HTMLDivElement.prototype._onMouseClick;
/** @type {?} */
Laya.HTMLDivElement.prototype._eventLink;

/**
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.HTMLDivElement.prototype.destroy = function(destroyChild) {};
/**
 * @extends {Laya.HTMLElement}
 * @constructor
 * @struct
 */
Laya.HTMLDivParser = function() {};
/** @type {number} */
Laya.HTMLDivParser.prototype.contextHeight;
/** @type {number} */
Laya.HTMLDivParser.prototype.contextWidth;
/** @type {?} */
Laya.HTMLDivParser.prototype._htmlBounds;
/** @type {?} */
Laya.HTMLDivParser.prototype._boundsRec;
/** @type {!Handler} */
Laya.HTMLDivParser.prototype.repaintHandler;

/* TODO: SetAccessor: Laya.innerHTML */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.width */

/**
 * @override
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLDivParser.prototype.reset = function() {};

/**
 * 追加内容，解析并对显示对象排版
 * @param {string} text
 * @return {void}
 */
Laya.HTMLDivParser.prototype.appendHTML = function(text) {};

/**
 * 获取bounds
 * @return {!Laya.Rectangle}
 */
Laya.HTMLDivParser.prototype.getBounds = function() {};

/**
 * @override
 * @param {boolean=} recreate
 * @return {void}
 */
Laya.HTMLDivParser.prototype.parentRepaint = function(recreate) {};

/**
 * @return {void}
 */
Laya.HTMLDivParser.prototype.layout = function() {};
/**
 * @constructor
 * @struct
 */
Laya.HTMLDocument = function() {};
/** @type {!Laya.HTMLDocument} */
Laya.HTMLDocument.document;
/** @type {!Object<string,!Laya.HTMLElement>} */
Laya.HTMLDocument.prototype.all;
/** @type {?} */
Laya.HTMLDocument.prototype.styleSheets;

/**
 * @param {string} id
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLDocument.prototype.getElementById = function(id) {};

/**
 * @param {string} id
 * @param {!Laya.HTMLElement} e
 * @return {void}
 */
Laya.HTMLDocument.prototype.setElementById = function(id, e) {};

/** @enum {number} */
Laya.HTMLElementType = {
  BASE: 1,
  IMAGE: 1,
};

/**
 * @constructor
 * @struct
 */
Laya.HTMLElement = function() {};
/** @type {?} */
Laya.HTMLElement._EMPTYTEXT;
/** @type {!Laya.HTMLElementType} */
Laya.HTMLElement.prototype.eletype;
/** @type {!Laya.URL} */
Laya.HTMLElement.prototype.URI;
/** @type {!Laya.HTMLElement} */
Laya.HTMLElement.prototype.parent;
/** @type {!Laya.HTMLStyle} */
Laya.HTMLElement.prototype._style;
/** @type {?} */
Laya.HTMLElement.prototype._text;
/** @type {!Array<?>} */
Laya.HTMLElement.prototype._children;
/** @type {number} */
Laya.HTMLElement.prototype._x;
/** @type {number} */
Laya.HTMLElement.prototype._y;
/** @type {number} */
Laya.HTMLElement.prototype._width;
/** @type {number} */
Laya.HTMLElement.prototype._height;

/* TODO: SetAccessor: Laya.id */

/* TODO: SetAccessor: Laya.innerTEXT */

/* TODO: GetAccessor: Laya.innerTEXT */

/* TODO: GetAccessor: Laya.style */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.href */

/* TODO: GetAccessor: Laya.href */

/* TODO: SetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.className */
/** @type {?} */
Laya.HTMLElement.prototype.workLines;
/** @type {?} */
Laya.HTMLElement.prototype.createOneLine;

/**
 * 格式化指定的地址并返回。
 * @param {string} url 地址。
 * @param {string=} basePath
 * @return {string} 格式化处理后的地址。
 */
Laya.HTMLElement.formatURL1 = function(url, basePath) {};

/**
 * @protected
 * @return {void}
 */
Laya.HTMLElement.prototype._creates = function() {};

/**
 * 重置
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLElement.prototype.reset = function() {};

/**
 * @param {boolean=} recreate
 * @return {void}
 */
Laya.HTMLElement.prototype.repaint = function(recreate) {};

/**
 * @param {boolean=} recreate
 * @return {void}
 */
Laya.HTMLElement.prototype.parentRepaint = function(recreate) {};

/**
 * @protected
 * @param {!Laya.HTMLElement} value
 * @return {void}
 */
Laya.HTMLElement.prototype._setParent = function(value) {};

/**
 * @param {!Laya.HTMLElement} c
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLElement.prototype.appendChild = function(c) {};

/**
 * @param {!Laya.HTMLElement} c
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLElement.prototype.addChild = function(c) {};

/**
 * @param {!Laya.HTMLElement} c
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLElement.prototype.removeChild = function(c) {};

/**
 * @param {?} tar
 * @return {string}
 */
Laya.HTMLElement.getClassName = function(tar) {};

/**
 * <p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
 * <p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
 * @return {void}
 */
Laya.HTMLElement.prototype.destroy = function() {};

/**
 * 销毁所有子对象，不销毁自己本身。
 * @return {void}
 */
Laya.HTMLElement.prototype.destroyChildren = function() {};

/**
 * @param {string} url
 * @return {string}
 */
Laya.HTMLElement.prototype.formatURL = function(url) {};

/**
 * @param {!Laya.Graphics} graphic
 * @param {number} gX
 * @param {number} gY
 * @param {!Array<?>} recList
 * @return {void}
 */
Laya.HTMLElement.prototype.drawToGraphic = function(graphic, gX, gY, recList) {};

/**
 * @param {!Laya.Graphics} graphic
 * @param {number} gX
 * @param {number} gY
 * @param {!Array<?>} recList
 * @return {void}
 */
Laya.HTMLElement.prototype.renderSelfToGraphic = function(graphic, gX, gY, recList) {};

/**
 * @constructor
 * @struct
 */
Laya.HTMLHitRect = function() {};
/** @type {!Laya.Rectangle} */
Laya.HTMLHitRect.prototype.rec;
/** @type {string} */
Laya.HTMLHitRect.prototype.href;

/**
 * @return {!Laya.HTMLHitRect}
 */
Laya.HTMLHitRect.prototype.reset = function() {};

/**
 * @return {void}
 */
Laya.HTMLHitRect.prototype.recover = function() {};

/**
 * @return {!Laya.HTMLHitRect}
 */
Laya.HTMLHitRect.create = function() {};

/**
 * @extends {Laya.HTMLDivElement}
 * @constructor
 * @struct
 */
Laya.HTMLIframeElement = function() {};

/* TODO: SetAccessor: Laya.href */

/**
 * @extends {Laya.HTMLElement}
 * @constructor
 * @struct
 */
Laya.HTMLImageElement = function() {};
/** @type {?} */
Laya.HTMLImageElement.prototype._tex;
/** @type {?} */
Laya.HTMLImageElement.prototype._url;

/* TODO: SetAccessor: Laya.src */
/** @type {?} */
Laya.HTMLImageElement.prototype.onloaded;

/**
 * @override
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLImageElement.prototype.reset = function() {};

/**
 * @override
 * @param {!Laya.Graphics} graphic
 * @param {number} gX
 * @param {number} gY
 * @param {!Array<?>} recList
 * @return {void}
 */
Laya.HTMLImageElement.prototype.renderSelfToGraphic = function(graphic, gX, gY, recList) {};
/**
 * @extends {Laya.HTMLElement}
 * @constructor
 * @struct
 */
Laya.HTMLLinkElement = function() {};
/** @type {!RegExp} */
Laya.HTMLLinkElement._cuttingStyle;
/** @type {string} */
Laya.HTMLLinkElement.prototype.type;
/** @type {?} */
Laya.HTMLLinkElement.prototype._loader;

/* TODO: SetAccessor: Laya.href */

/* TODO: GetAccessor: Laya.href */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.HTMLLinkElement.prototype._creates = function() {};

/**
 * @override
 * @param {!Laya.Graphics} graphic
 * @param {number} gX
 * @param {number} gY
 * @param {!Array<?>} recList
 * @return {void}
 */
Laya.HTMLLinkElement.prototype.drawToGraphic = function(graphic, gX, gY, recList) {};

/**
 * @override
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLLinkElement.prototype.reset = function() {};
/**
 * @extends {Laya.HTMLElement}
 * @constructor
 * @struct
 */
Laya.HTMLStyleElement = function() {};

/* TODO: SetAccessor: Laya.innerTEXT */

/* TODO: GetAccessor: Laya.innerTEXT */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.HTMLStyleElement.prototype._creates = function() {};

/**
 * @override
 * @param {!Laya.Graphics} graphic
 * @param {number} gX
 * @param {number} gY
 * @param {!Array<?>} recList
 * @return {void}
 */
Laya.HTMLStyleElement.prototype.drawToGraphic = function(graphic, gX, gY, recList) {};

/**
 * @override
 * @return {!Laya.HTMLElement}
 */
Laya.HTMLStyleElement.prototype.reset = function() {};

/**
 * @constructor
 * @struct
 */
Laya.HTMLExtendStyle = function() {};
/** @type {!Laya.HTMLExtendStyle} */
Laya.HTMLExtendStyle.EMPTY;
/** @type {number} */
Laya.HTMLExtendStyle.prototype.stroke;
/** @type {string} */
Laya.HTMLExtendStyle.prototype.strokeColor;
/** @type {number} */
Laya.HTMLExtendStyle.prototype.leading;
/** @type {number} */
Laya.HTMLExtendStyle.prototype.lineHeight;
/** @type {number} */
Laya.HTMLExtendStyle.prototype.letterSpacing;
/** @type {string} */
Laya.HTMLExtendStyle.prototype.href;

/**
 * @return {!Laya.HTMLExtendStyle}
 */
Laya.HTMLExtendStyle.prototype.reset = function() {};

/**
 * @return {void}
 */
Laya.HTMLExtendStyle.prototype.recover = function() {};

/**
 * 从对象池中创建
 * @return {!Laya.HTMLExtendStyle}
 */
Laya.HTMLExtendStyle.create = function() {};
/**
 * @constructor
 * @struct
 */
Laya.HTMLParse = function() {};
/** @type {?} */
Laya.HTMLParse.char255;
/** @type {?} */
Laya.HTMLParse.spacePattern;
/** @type {?} */
Laya.HTMLParse.char255AndOneSpacePattern;
/** @type {?} */
Laya.HTMLParse._htmlClassMapShort;
/** @type {?} */
Laya.HTMLParse._parseXML;

/**
 * 根据类型获取对应的节点
 * @param {string} type
 * @return {?}
 */
Laya.HTMLParse.getInstance = function(type) {};

/**
 * 解析HTML
 * @param {!Laya.HTMLDivParser} ower
 * @param {string} xmlString
 * @param {!Laya.URL} url
 * @return {void}
 */
Laya.HTMLParse.parse = function(ower, xmlString, url) {};

/**
 * @constructor
 * @struct
 */
Laya.HTMLStyle = function() {};
/** @type {?} */
Laya.HTMLStyle._CSSTOVALUE;
/** @type {?} */
Laya.HTMLStyle._parseCSSRegExp;
/** @type {?} */
Laya.HTMLStyle._inheritProps;
/** @type {string} */
Laya.HTMLStyle.ALIGN_LEFT;
/** @type {string} */
Laya.HTMLStyle.ALIGN_CENTER;
/** @type {string} */
Laya.HTMLStyle.ALIGN_RIGHT;
/** @type {string} */
Laya.HTMLStyle.VALIGN_TOP;
/** @type {string} */
Laya.HTMLStyle.VALIGN_MIDDLE;
/** @type {string} */
Laya.HTMLStyle.VALIGN_BOTTOM;
/** @type {?} */
Laya.HTMLStyle.styleSheets;
/** @type {number} */
Laya.HTMLStyle.ADDLAYOUTED;
/** @type {?} */
Laya.HTMLStyle._PADDING;
/** @type {number} */
Laya.HTMLStyle._HEIGHT_SET;
/** @type {number} */
Laya.HTMLStyle._LINE_ELEMENT;
/** @type {number} */
Laya.HTMLStyle._NOWARP;
/** @type {number} */
Laya.HTMLStyle._WIDTHAUTO;
/** @type {number} */
Laya.HTMLStyle._BOLD;
/** @type {number} */
Laya.HTMLStyle._ITALIC;
/** @type {number} */
Laya.HTMLStyle._CSS_BLOCK;
/** @type {number} */
Laya.HTMLStyle._DISPLAY_NONE;
/** @type {number} */
Laya.HTMLStyle._ABSOLUTE;
/** @type {number} */
Laya.HTMLStyle._WIDTH_SET;
/** @type {?} */
Laya.HTMLStyle.alignVDic;
/** @type {?} */
Laya.HTMLStyle.align_Value;
/** @type {?} */
Laya.HTMLStyle.vAlign_Value;
/** @type {number} */
Laya.HTMLStyle._ALIGN;
/** @type {number} */
Laya.HTMLStyle._VALIGN;
/** @type {number} */
Laya.HTMLStyle.prototype.fontSize;
/** @type {string} */
Laya.HTMLStyle.prototype.family;
/** @type {string} */
Laya.HTMLStyle.prototype.color;
/** @type {!Laya.HTMLElement} */
Laya.HTMLStyle.prototype.ower;
/** @type {?} */
Laya.HTMLStyle.prototype._extendStyle;
/** @type {string} */
Laya.HTMLStyle.prototype.textDecoration;
/** @type {string} */
Laya.HTMLStyle.prototype.bgColor;
/** @type {string} */
Laya.HTMLStyle.prototype.borderColor;
/** @type {!Array<?>} */
Laya.HTMLStyle.prototype.padding;
/** @type {?} */
Laya.HTMLStyle.prototype._getExtendStyle;

/* TODO: GetAccessor: Laya.href */

/* TODO: SetAccessor: Laya.href */

/* TODO: GetAccessor: Laya.stroke */

/* TODO: SetAccessor: Laya.stroke */

/* TODO: GetAccessor: Laya.strokeColor */

/* TODO: SetAccessor: Laya.strokeColor */

/* TODO: GetAccessor: Laya.leading */

/* TODO: SetAccessor: Laya.leading */

/* TODO: GetAccessor: Laya.lineHeight */

/* TODO: SetAccessor: Laya.lineHeight */

/* TODO: SetAccessor: Laya.align */

/* TODO: GetAccessor: Laya.align */

/* TODO: SetAccessor: Laya.valign */

/* TODO: GetAccessor: Laya.valign */

/* TODO: SetAccessor: Laya.font */

/* TODO: GetAccessor: Laya.font */

/* TODO: SetAccessor: Laya.block */

/* TODO: GetAccessor: Laya.block */

/* TODO: GetAccessor: Laya.wordWrap */

/* TODO: SetAccessor: Laya.wordWrap */

/* TODO: GetAccessor: Laya.bold */

/* TODO: SetAccessor: Laya.bold */

/* TODO: GetAccessor: Laya.fontWeight */

/* TODO: SetAccessor: Laya.fontWeight */

/* TODO: GetAccessor: Laya.italic */

/* TODO: SetAccessor: Laya.italic */

/* TODO: SetAccessor: Laya.whiteSpace */

/* TODO: GetAccessor: Laya.whiteSpace */

/* TODO: SetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.letterSpacing */

/* TODO: SetAccessor: Laya.letterSpacing */

/* TODO: SetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.absolute */

/* TODO: GetAccessor: Laya.paddingLeft */

/* TODO: GetAccessor: Laya.paddingTop */

/**
 * 重置，方便下次复用
 * @return {!Laya.HTMLStyle}
 */
Laya.HTMLStyle.prototype.reset = function() {};

/**
 * 回收
 * @return {void}
 */
Laya.HTMLStyle.prototype.recover = function() {};

/**
 * 从对象池中创建
 * @return {!Laya.HTMLStyle}
 */
Laya.HTMLStyle.create = function() {};

/**
 * 复制传入的 CSSStyle 属性值。
 * @param {!Laya.HTMLStyle} src 待复制的 CSSStyle 对象。
 * @return {void}
 */
Laya.HTMLStyle.prototype.inherit = function(src) {};

/**
 * @inheritDoc
 * @param {?} sprite
 * @return {boolean}
 */
Laya.HTMLStyle.prototype.widthed = function(sprite) {};

/**
 * 是否已设置高度。
 * @param {?} sprite 显示对象 Sprite。
 * @return {boolean} 一个Boolean 表示是否已设置高度。
 */
Laya.HTMLStyle.prototype.heighted = function(sprite) {};

/**
 * 设置宽高。
 * @param {number} w 宽度。
 * @param {number} h 高度。
 * @return {void}
 */
Laya.HTMLStyle.prototype.size = function(w, h) {};

/**
 * 是否是行元素。
 * @return {boolean}
 */
Laya.HTMLStyle.prototype.getLineElement = function() {};

/**
 * @param {boolean} value
 * @return {void}
 */
Laya.HTMLStyle.prototype.setLineElement = function(value) {};

/**
 * 设置 CSS 样式字符串。
 * @param {string} text CSS样式字符串。
 * @return {void}
 */
Laya.HTMLStyle.prototype.cssText = function(text) {};

/**
 * 根据传入的属性名、属性值列表，设置此对象的属性值。
 * @param {!Array<?>} attrs 属性名与属性值列表。
 * @return {void}
 */
Laya.HTMLStyle.prototype.attrs = function(attrs) {};

/**
 * 通过传入的分割符，分割解析CSS样式字符串，返回样式列表。
 * @param {string} text CSS样式字符串。
 * @param {string} clipWord 分割符；
 * @return {!Array<?>} 样式列表。
 */
Laya.HTMLStyle.parseOneCSS = function(text, clipWord) {};

/**
 * 解析 CSS 样式文本。
 * @param {string} text CSS 样式文本。
 * @param {!Laya.URL} uri URL对象。
 * @return {void}
 */
Laya.HTMLStyle.parseCSS = function(text, uri) {};
/**
 * @record
 * @struct
 */
Laya.ILayout = function() {};
/** @type {number} */
Laya.ILayout.prototype.x;
/** @type {number} */
Laya.ILayout.prototype.y;
/** @type {number} */
Laya.ILayout.prototype.width;
/** @type {number} */
Laya.ILayout.prototype.height;
/**
 * @constructor
 * @struct
 */
Laya.Layout = function() {};
/** @type {?} */
Laya.Layout.DIV_ELEMENT_PADDING;
/** @type {?} */
Laya.Layout._will;

/**
 * @param {!Laya.HTMLElement} element
 * @return {void}
 */
Laya.Layout.later = function(element) {};

/**
 * @param {!Laya.HTMLElement} element
 * @return {!Array<?>}
 */
Laya.Layout.layout = function(element) {};

/**
 * @param {!Laya.HTMLElement} element
 * @return {!Array<?>}
 */
Laya.Layout._multiLineLayout = function(element) {};
/**
 * @constructor
 * @struct
 */
Laya.LayoutLine = function() {};
/** @type {!Array<!Laya.ILayout>} */
Laya.LayoutLine.prototype.elements;
/** @type {number} */
Laya.LayoutLine.prototype.x;
/** @type {number} */
Laya.LayoutLine.prototype.y;
/** @type {number} */
Laya.LayoutLine.prototype.w;
/** @type {number} */
Laya.LayoutLine.prototype.h;
/** @type {number} */
Laya.LayoutLine.prototype.wordStartIndex;
/** @type {number} */
Laya.LayoutLine.prototype.minTextHeight;
/** @type {number} */
Laya.LayoutLine.prototype.mWidth;

/**
 * 底对齐（默认）
 * @param {number} left
 * @param {number} width
 * @param {number} lineNum
 * @param {number} dy
 * @param {string} align 水平
 * @param {string} valign 垂直
 * @param {number} lineHeight 行高
 * @return {void}
 */
Laya.LayoutLine.prototype.updatePos = function(left, width, lineNum, dy, align, valign, lineHeight) {};

/**
 * @constructor
 * @struct
 * @param {?} layagl
 * @param {number} reserveSize
 * @param {number} adjustSize
 * @param {boolean} isSyncToRenderThread
 */
Laya.CommandEncoder = function(layagl, reserveSize, adjustSize, isSyncToRenderThread) {};

/**
 * @return {!Array<?>}
 */
Laya.CommandEncoder.prototype.getArrayData = function() {};

/**
 * @return {number}
 */
Laya.CommandEncoder.prototype.getPtrID = function() {};

/**
 * @return {void}
 */
Laya.CommandEncoder.prototype.beginEncoding = function() {};

/**
 * @return {void}
 */
Laya.CommandEncoder.prototype.endEncoding = function() {};

/**
 * @return {void}
 */
Laya.CommandEncoder.prototype.clearEncoding = function() {};

/**
 * @return {number}
 */
Laya.CommandEncoder.prototype.getCount = function() {};

/**
 * @param {?} o
 * @return {void}
 */
Laya.CommandEncoder.prototype.add_ShaderValue = function(o) {};

/**
 * @param {?} one
 * @return {void}
 */
Laya.CommandEncoder.prototype.addShaderUniform = function(one) {};

/**
 * @constructor
 * @struct
 */
Laya.QuickTestTool = function() {};
/** @type {?} */
Laya.QuickTestTool.showedDic;
/** @type {?} */
Laya.QuickTestTool._rendertypeToStrDic;
/** @type {?} */
Laya.QuickTestTool._typeToNameDic;
/** @type {number} */
Laya.QuickTestTool.prototype._renderType;
/** @type {number} */
Laya.QuickTestTool.prototype._repaint;
/** @type {number} */
Laya.QuickTestTool.prototype._x;
/** @type {number} */
Laya.QuickTestTool.prototype._y;
/** @type {?} */
Laya.QuickTestTool._PreStageRender;
/** @type {?} */
Laya.QuickTestTool._countDic;
/** @type {?} */
Laya.QuickTestTool._countStart;
/** @type {?} */
Laya.QuickTestTool._i;
/** @type {?} */
Laya.QuickTestTool._countEnd;

/**
 * @param {number} type
 * @return {string}
 */
Laya.QuickTestTool.getMCDName = function(type) {};

/**
 * @param {?} type
 * @param {boolean=} force
 * @return {void}
 */
Laya.QuickTestTool.showRenderTypeInfo = function(type, force) {};

/**
 * @return {void}
 */
Laya.QuickTestTool.__init__ = function() {};

/**
 * 更新、呈现显示对象。由系统调用。
 * @param {!Laya.Context} context 渲染的上下文引用。
 * @param {number} x X轴坐标。
 * @param {number} y Y轴坐标。
 * @return {void}
 */
Laya.QuickTestTool.prototype.render = function(context, x, y) {};

/**
 * @return {void}
 */
Laya.QuickTestTool.showCountInfo = function() {};

/**
 * @return {void}
 */
Laya.QuickTestTool.enableQuickTest = function() {};
/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.GridSprite = function() {};
/** @type {number} */
Laya.GridSprite.prototype.relativeX;
/** @type {number} */
Laya.GridSprite.prototype.relativeY;
/** @type {boolean} */
Laya.GridSprite.prototype.isAloneObject;
/** @type {boolean} */
Laya.GridSprite.prototype.isHaveAnimation;
/** @type {!Array<?>} */
Laya.GridSprite.prototype.aniSpriteArray;
/** @type {number} */
Laya.GridSprite.prototype.drawImageNum;
/** @type {?} */
Laya.GridSprite.prototype._map;

/**
 * 传入必要的参数，用于裁剪，跟确认此对象类型
 * @param {!Laya.TiledMap} map 把地图的引用传进来，参与一些裁剪计算
 * @param {boolean=} objectKey true:表示当前GridSprite是个活动对象，可以控制，false:地图层的组成块
 * @return {void}
 */
Laya.GridSprite.prototype.initData = function(map, objectKey) {};

/**
 * 把一个动画对象绑定到当前GridSprite
 * @param {!Laya.TileAniSprite} sprite 动画的显示对象
 * @return {void}
 */
Laya.GridSprite.prototype.addAniSprite = function(sprite) {};

/**
 * 显示当前GridSprite，并把上面的动画全部显示
 * @return {void}
 */
Laya.GridSprite.prototype.show = function() {};

/**
 * 隐藏当前GridSprite，并把上面绑定的动画全部移除
 * @return {void}
 */
Laya.GridSprite.prototype.hide = function() {};

/**
 * 刷新坐标，当我们自己控制一个GridSprite移动时，需要调用此函数，手动刷新
 * @return {void}
 */
Laya.GridSprite.prototype.updatePos = function() {};

/**
 * 重置当前对象的所有属性
 * @return {void}
 */
Laya.GridSprite.prototype.clearAll = function() {};
/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.MapLayer = function() {};
/** @type {?} */
Laya.MapLayer.prototype._map;
/** @type {?} */
Laya.MapLayer.prototype._tileWidthHalf;
/** @type {?} */
Laya.MapLayer.prototype._tileHeightHalf;
/** @type {?} */
Laya.MapLayer.prototype._mapWidthHalf;
/** @type {?} */
Laya.MapLayer.prototype._mapHeightHalf;
/** @type {?} */
Laya.MapLayer.prototype._objDic;
/** @type {?} */
Laya.MapLayer.prototype._dataDic;
/** @type {?} */
Laya.MapLayer.prototype._tempMapPos;
/** @type {?} */
Laya.MapLayer.prototype._properties;
/** @type {!Laya.MapLayer} */
Laya.MapLayer.prototype.tarLayer;
/** @type {string} */
Laya.MapLayer.prototype.layerName;

/**
 * 解析LAYER数据，以及初始化一些数据
 * @param {?} layerData 地图数据中，layer数据的引用
 * @param {!Laya.TiledMap} map 地图的引用
 * @return {void}
 */
Laya.MapLayer.prototype.init = function(layerData, map) {};

/**
 * 通过名字获取控制对象，如果找不到返回为null
 * @param {string} objName 所要获取对象的名字
 * @return {!Laya.GridSprite}
 */
Laya.MapLayer.prototype.getObjectByName = function(objName) {};

/**
 * 通过名字获取数据，如果找不到返回为null
 * @param {string} objName 所要获取对象的名字
 * @return {?}
 */
Laya.MapLayer.prototype.getObjectDataByName = function(objName) {};

/**
 * 得到地图层的自定义属性
 * @param {string} name
 * @return {?}
 */
Laya.MapLayer.prototype.getLayerProperties = function(name) {};

/**
 * 得到指定格子的数据
 * @param {number} tileX 格子坐标X
 * @param {number} tileY 格子坐标Y
 * @return {number}
 */
Laya.MapLayer.prototype.getTileData = function(tileX, tileY) {};

/**
 * 通过地图坐标得到屏幕坐标
 * @param {number} tileX 格子坐标X
 * @param {number} tileY 格子坐标Y
 * @param {!Laya.Point=} screenPos 把计算好的屏幕坐标数据，放到此对象中
 * @return {void}
 */
Laya.MapLayer.prototype.getScreenPositionByTilePos = function(tileX, tileY, screenPos) {};

/**
 * 通过屏幕坐标来获取选中格子的数据
 * @param {number} screenX 屏幕坐标x
 * @param {number} screenY 屏幕坐标y
 * @return {number}
 */
Laya.MapLayer.prototype.getTileDataByScreenPos = function(screenX, screenY) {};

/**
 * 通过屏幕坐标来获取选中格子的索引
 * @param {number} screenX 屏幕坐标x
 * @param {number} screenY 屏幕坐标y
 * @param {!Laya.Point=} result 把计算好的格子坐标，放到此对象中
 * @return {boolean}
 */
Laya.MapLayer.prototype.getTilePositionByScreenPos = function(screenX, screenY, result) {};

/**
 * 得到一个GridSprite
 * @param {number} gridX 当前Grid的X轴索引
 * @param {number} gridY 当前Grid的Y轴索引
 * @return {!Laya.GridSprite} 一个GridSprite对象
 */
Laya.MapLayer.prototype.getDrawSprite = function(gridX, gridY) {};

/**
 * 更新此层中块的坐标
 * 手动刷新的目的是，保持层级的宽和高保持最小，加快渲染
 * @return {void}
 */
Laya.MapLayer.prototype.updateGridPos = function() {};

/**
 * @param {!Laya.GridSprite} gridSprite 被指定显示的目标
 * @param {number} tileX 格子的X轴坐标
 * @param {number} tileY 格子的Y轴坐标
 * @return {boolean}
 */
Laya.MapLayer.prototype.drawTileTexture = function(gridSprite, tileX, tileY) {};

/**
 * @return {void}
 */
Laya.MapLayer.prototype.clearAll = function() {};
/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.TileAniSprite = function() {};
/** @type {?} */
Laya.TileAniSprite.prototype._tileTextureSet;
/** @type {?} */
Laya.TileAniSprite.prototype._aniName;

/**
 * 确定当前显示对象的名称以及属于哪个动画
 * @param {string} aniName 当前动画显示对象的名字，名字唯一
 * @param {!Laya.TileTexSet} tileTextureSet 当前显示对象属于哪个动画（一个动画，可以绑定多个同类显示对象）
 * @return {void}
 */
Laya.TileAniSprite.prototype.setTileTextureSet = function(aniName, tileTextureSet) {};

/**
 * 把当前动画加入到对应的动画刷新列表中
 * @return {void}
 */
Laya.TileAniSprite.prototype.show = function() {};

/**
 * 把当前动画从对应的动画刷新列表中移除
 * @return {void}
 */
Laya.TileAniSprite.prototype.hide = function() {};

/**
 * 清理
 * @return {void}
 */
Laya.TileAniSprite.prototype.clearAll = function() {};

/**
 * @constructor
 * @struct
 */
Laya.TiledMap = function() {};
/** @type {string} */
Laya.TiledMap.ORIENTATION_ORTHOGONAL;
/** @type {string} */
Laya.TiledMap.ORIENTATION_ISOMETRIC;
/** @type {string} */
Laya.TiledMap.ORIENTATION_STAGGERED;
/** @type {string} */
Laya.TiledMap.ORIENTATION_HEXAGONAL;
/** @type {string} */
Laya.TiledMap.RENDERORDER_RIGHTDOWN;
/** @type {string} */
Laya.TiledMap.RENDERORDER_RIGHTUP;
/** @type {string} */
Laya.TiledMap.RENDERORDER_LEFTDOWN;
/** @type {string} */
Laya.TiledMap.RENDERORDER_LEFTUP;
/** @type {?} */
Laya.TiledMap.prototype._jsonData;
/** @type {?} */
Laya.TiledMap.prototype._tileTexSetArr;
/** @type {?} */
Laya.TiledMap.prototype._texArray;
/** @type {?} */
Laya.TiledMap.prototype._x;
/** @type {?} */
Laya.TiledMap.prototype._y;
/** @type {?} */
Laya.TiledMap.prototype._width;
/** @type {?} */
Laya.TiledMap.prototype._height;
/** @type {?} */
Laya.TiledMap.prototype._mapW;
/** @type {?} */
Laya.TiledMap.prototype._mapH;
/** @type {?} */
Laya.TiledMap.prototype._mapTileW;
/** @type {?} */
Laya.TiledMap.prototype._mapTileH;
/** @type {?} */
Laya.TiledMap.prototype._rect;
/** @type {?} */
Laya.TiledMap.prototype._paddingRect;
/** @type {?} */
Laya.TiledMap.prototype._mapSprite;
/** @type {?} */
Laya.TiledMap.prototype._layerArray;
/** @type {?} */
Laya.TiledMap.prototype._renderLayerArray;
/** @type {?} */
Laya.TiledMap.prototype._gridArray;
/** @type {?} */
Laya.TiledMap.prototype._showGridKey;
/** @type {?} */
Laya.TiledMap.prototype._totalGridNum;
/** @type {?} */
Laya.TiledMap.prototype._gridW;
/** @type {?} */
Laya.TiledMap.prototype._gridH;
/** @type {?} */
Laya.TiledMap.prototype._gridWidth;
/** @type {?} */
Laya.TiledMap.prototype._gridHeight;
/** @type {?} */
Laya.TiledMap.prototype._jsonLoader;
/** @type {?} */
Laya.TiledMap.prototype._loader;
/** @type {?} */
Laya.TiledMap.prototype._tileSetArray;
/** @type {?} */
Laya.TiledMap.prototype._currTileSet;
/** @type {?} */
Laya.TiledMap.prototype._completeHandler;
/** @type {?} */
Laya.TiledMap.prototype._mapRect;
/** @type {?} */
Laya.TiledMap.prototype._mapLastRect;
/** @type {?} */
Laya.TiledMap.prototype._index;
/** @type {?} */
Laya.TiledMap.prototype._animationDic;
/** @type {?} */
Laya.TiledMap.prototype._properties;
/** @type {?} */
Laya.TiledMap.prototype._tileProperties;
/** @type {?} */
Laya.TiledMap.prototype._tileProperties2;
/** @type {?} */
Laya.TiledMap.prototype._orientation;
/** @type {?} */
Laya.TiledMap.prototype._renderOrder;
/** @type {?} */
Laya.TiledMap.prototype._colorArray;
/** @type {?} */
Laya.TiledMap.prototype._scale;
/** @type {?} */
Laya.TiledMap.prototype._pivotScaleX;
/** @type {?} */
Laya.TiledMap.prototype._pivotScaleY;
/** @type {?} */
Laya.TiledMap.prototype._centerX;
/** @type {?} */
Laya.TiledMap.prototype._centerY;
/** @type {?} */
Laya.TiledMap.prototype._viewPortWidth;
/** @type {?} */
Laya.TiledMap.prototype._viewPortHeight;
/** @type {?} */
Laya.TiledMap.prototype._enableLinear;
/** @type {?} */
Laya.TiledMap.prototype._resPath;
/** @type {?} */
Laya.TiledMap.prototype._pathArray;
/** @type {?} */
Laya.TiledMap.prototype._limitRange;
/** @type {boolean} */
Laya.TiledMap.prototype.autoCache;
/** @type {string} */
Laya.TiledMap.prototype.autoCacheType;
/** @type {boolean} */
Laya.TiledMap.prototype.enableMergeLayer;
/** @type {boolean} */
Laya.TiledMap.prototype.removeCoveredTile;
/** @type {boolean} */
Laya.TiledMap.prototype.showGridTextureCount;
/** @type {boolean} */
Laya.TiledMap.prototype.antiCrack;
/** @type {boolean} */
Laya.TiledMap.prototype.cacheAllAfterInit;
/** @type {?} */
Laya.TiledMap.prototype.onJsonComplete;
/** @type {?} */
Laya.TiledMap.prototype.mergePath;
/** @type {?} */
Laya.TiledMap.prototype._texutreStartDic;
/** @type {?} */
Laya.TiledMap.prototype.onTextureComplete;
/** @type {?} */
Laya.TiledMap.prototype.adptTexture;
/** @type {?} */
Laya.TiledMap.prototype.initMap;
/** @type {?} */
Laya.TiledMap.prototype.addTileProperties;
/** @type {?} */
Laya.TiledMap.prototype.adptTiledMapData;
/** @type {?} */
Laya.TiledMap.prototype.removeCoverd;
/** @type {?} */
Laya.TiledMap.prototype.collectCovers;

/* TODO: SetAccessor: Laya.scale */

/* TODO: GetAccessor: Laya.scale */
/** @type {?} */
Laya.TiledMap.prototype.updateViewPort;
/** @type {?} */
Laya.TiledMap.prototype.clipViewPort;
/** @type {?} */
Laya.TiledMap.prototype.showGrid;
/** @type {?} */
Laya.TiledMap.prototype.cacheAllGrid;
/** @type {?} */
Laya.TiledMap._tempCanvas;
/** @type {?} */
Laya.TiledMap.prototype.cacheGridsArray;
/** @type {?} */
Laya.TiledMap.prototype.getGridArray;
/** @type {?} */
Laya.TiledMap.prototype.hideGrid;

/* TODO: GetAccessor: Laya.tileWidth */

/* TODO: GetAccessor: Laya.tileHeight */

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.numColumnsTile */

/* TODO: GetAccessor: Laya.numRowsTile */

/* TODO: GetAccessor: Laya.viewPortX */

/* TODO: GetAccessor: Laya.viewPortY */

/* TODO: GetAccessor: Laya.viewPortWidth */

/* TODO: GetAccessor: Laya.viewPortHeight */

/* TODO: GetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.gridWidth */

/* TODO: GetAccessor: Laya.gridHeight */

/* TODO: GetAccessor: Laya.numColumnsGrid */

/* TODO: GetAccessor: Laya.numRowsGrid */

/* TODO: GetAccessor: Laya.orientation */

/* TODO: GetAccessor: Laya.renderOrder */

/**
 * 创建地图
 * @param {string} mapName JSON文件名字
 * @param {!Laya.Rectangle} viewRect 视口区域
 * @param {!Handler} completeHandler 地图创建完成的回调函数
 * @param {!Laya.Rectangle=} viewRectPadding 视口扩充区域，把视口区域上、下、左、右扩充一下，防止视口移动时的穿帮
 * @param {!Laya.Point=} gridSize grid大小
 * @param {boolean=} enableLinear 是否开启线性取样（为false时，可以解决地图黑线的问题，但画质会锐化）
 * @param {boolean=} limitRange 把地图限制在显示区域
 * @return {void}
 */
Laya.TiledMap.prototype.createMap = function(mapName, viewRect, completeHandler, viewRectPadding, gridSize, enableLinear, limitRange) {};

/**
 * @param {number} id
 * @param {string} sign
 * @param {?=} defaultV
 * @return {?}
 */
Laya.TiledMap.prototype.getTileUserData = function(id, sign, defaultV) {};

/**
 * 得到一块指定的地图纹理
 * @param {number} index 纹理的索引值，默认从1开始
 * @return {!Laya.TileTexSet}
 */
Laya.TiledMap.prototype.getTexture = function(index) {};

/**
 * 得到地图的自定义属性
 * @param {string} name 属性名称
 * @return {?}
 */
Laya.TiledMap.prototype.getMapProperties = function(name) {};

/**
 * 得到tile自定义属性
 * @param {number} index 地图块索引
 * @param {number} id 具体的TileSetID
 * @param {string} name 属性名称
 * @return {?}
 */
Laya.TiledMap.prototype.getTileProperties = function(index, id, name) {};

/**
 * 通过纹理索引，生成一个可控制物件
 * @param {number} index 纹理的索引值，默认从1开始
 * @param {number} width
 * @param {number} height
 * @return {!Laya.GridSprite}
 */
Laya.TiledMap.prototype.getSprite = function(index, width, height) {};

/**
 * 设置视口的缩放中心点（例如：scaleX= scaleY= 0.5,就是以视口中心缩放）
 * @param {number} scaleX
 * @param {number} scaleY
 * @return {void}
 */
Laya.TiledMap.prototype.setViewPortPivotByScale = function(scaleX, scaleY) {};

/**
 * 移动视口
 * @param {number} moveX 视口的坐标x
 * @param {number} moveY 视口的坐标y
 * @return {void}
 */
Laya.TiledMap.prototype.moveViewPort = function(moveX, moveY) {};

/**
 * 改变视口大小
 * @param {number} moveX 视口的坐标x
 * @param {number} moveY 视口的坐标y
 * @param {number} width 视口的宽
 * @param {number} height 视口的高
 * @return {void}
 */
Laya.TiledMap.prototype.changeViewPort = function(moveX, moveY, width, height) {};

/**
 * 在锚点的基础上计算，通过宽和高，重新计算视口
 * @param {number} width 新视口宽
 * @param {number} height 新视口高
 * @param {!Laya.Rectangle=} rect 返回的结果
 * @return {!Laya.Rectangle}
 */
Laya.TiledMap.prototype.changeViewPortBySize = function(width, height, rect) {};

/**
 * 得到对象层上的某一个物品
 * @param {string} layerName 层的名称
 * @param {string} objectName 所找物品的名称
 * @return {!Laya.GridSprite}
 */
Laya.TiledMap.prototype.getLayerObject = function(layerName, objectName) {};

/**
 * 销毁地图
 * @return {void}
 */
Laya.TiledMap.prototype.destroy = function() {};

/**
 * 整个地图的显示容器
 * @return {!Laya.Sprite} 地图的显示容器
 */
Laya.TiledMap.prototype.mapSprite = function() {};

/**
 * 得到指定的MapLayer
 * @param {string} layerName 要找的层名称
 * @return {!Laya.MapLayer}
 */
Laya.TiledMap.prototype.getLayerByName = function(layerName) {};

/**
 * 通过索引得MapLayer
 * @param {number} index 要找的层索引
 * @return {!Laya.MapLayer}
 */
Laya.TiledMap.prototype.getLayerByIndex = function(index) {};
/**
 * @constructor
 * @struct
 */
Laya.TileTexSet = function() {};
/** @type {number} */
Laya.TileTexSet.prototype.gid;
/** @type {!Laya.Texture} */
Laya.TileTexSet.prototype.texture;
/** @type {number} */
Laya.TileTexSet.prototype.offX;
/** @type {number} */
Laya.TileTexSet.prototype.offY;
/** @type {!Array<?>} */
Laya.TileTexSet.prototype.textureArray;
/** @type {!Array<?>} */
Laya.TileTexSet.prototype.durationTimeArray;
/** @type {number} */
Laya.TileTexSet.prototype.animationTotalTime;
/** @type {boolean} */
Laya.TileTexSet.prototype.isAnimation;
/** @type {?} */
Laya.TileTexSet.prototype._spriteNum;
/** @type {?} */
Laya.TileTexSet.prototype._aniDic;
/** @type {?} */
Laya.TileTexSet.prototype._frameIndex;
/** @type {?} */
Laya.TileTexSet.prototype._time;
/** @type {?} */
Laya.TileTexSet.prototype._interval;
/** @type {?} */
Laya.TileTexSet.prototype._preFrameTime;
/** @type {?} */
Laya.TileTexSet.prototype.animate;
/** @type {?} */
Laya.TileTexSet.prototype.drawTexture;

/**
 * 加入一个动画显示对象到此动画中
 * @param {string} aniName //显示对象的名字
 * @param {!Laya.TileAniSprite} sprite //显示对象
 * @return {void}
 */
Laya.TileTexSet.prototype.addAniSprite = function(aniName, sprite) {};

/**
 * 移除不需要更新的SPRITE
 * @param {string} _name
 * @return {void}
 */
Laya.TileTexSet.prototype.removeAniSprite = function(_name) {};

/**
 * 显示当前动画的使用情况
 * @return {string}
 */
Laya.TileTexSet.prototype.showDebugInfo = function() {};

/**
 * 清理
 * @return {void}
 */
Laya.TileTexSet.prototype.clearAll = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Bezier = function() {};
/** @type {!Laya.Bezier} */
Laya.Bezier.I;
/** @type {?} */
Laya.Bezier.prototype._controlPoints;
/** @type {?} */
Laya.Bezier.prototype._calFun;
/** @type {?} */
Laya.Bezier.prototype._switchPoint;

/**
 * 计算二次贝塞尔点。
 * @param {number} t
 * @param {!Array<?>} rst
 * @return {void}
 */
Laya.Bezier.prototype.getPoint2 = function(t, rst) {};

/**
 * 计算三次贝塞尔点
 * @param {number} t
 * @param {!Array<?>} rst
 * @return {void}
 */
Laya.Bezier.prototype.getPoint3 = function(t, rst) {};

/**
 * 计算贝塞尔点序列
 * @param {number} count
 * @param {!Array<?>} rst
 * @return {void}
 */
Laya.Bezier.prototype.insertPoints = function(count, rst) {};

/**
 * 获取贝塞尔曲线上的点。
 * @param {!Array<?>} pList 控制点[x0,y0,x1,y1...]
 * @param {number=} inSertCount 每次曲线的插值数量
 * @param {number=} count
 * @return {!Array<?>}
 */
Laya.Bezier.prototype.getBezierPoints = function(pList, inSertCount, count) {};
/**
 * @constructor
 * @struct
 */
Laya.GrahamScan = function() {};
/** @type {?} */
Laya.GrahamScan._mPointList;
/** @type {?} */
Laya.GrahamScan._tempPointList;
/** @type {?} */
Laya.GrahamScan._temPList;
/** @type {?} */
Laya.GrahamScan._temArr;
/** @type {?} */
Laya.GrahamScan._getPoints;

/**
 * @param {!Laya.Point} p1
 * @param {!Laya.Point} p2
 * @param {!Laya.Point} p0
 * @return {number}
 */
Laya.GrahamScan.multiply = function(p1, p2, p0) {};

/**
 * 计算两个点的距离。
 * @param {!Laya.Point} p1
 * @param {!Laya.Point} p2
 * @return {number}
 */
Laya.GrahamScan.dis = function(p1, p2) {};

/**
 * 将数组 src 从索引0位置 依次取 cout 个项添加至 tst 数组的尾部。
 * @param {!Array<?>} rst 原始数组，用于添加新的子元素。
 * @param {!Array<?>} src 用于取子元素的数组。
 * @param {number} count 需要取得子元素个数。
 * @return {!Array<?>} 添加完子元素的 rst 对象。
 */
Laya.GrahamScan.getFrom = function(rst, src, count) {};

/**
 * 将数组 src 从末尾索引位置往头部索引位置方向 依次取 cout 个项添加至 tst 数组的尾部。
 * @param {!Array<?>} rst 原始数组，用于添加新的子元素。
 * @param {!Array<?>} src 用于取子元素的数组。
 * @param {number} count 需要取得子元素个数。
 * @return {!Array<?>} 添加完子元素的 rst 对象。
 */
Laya.GrahamScan.getFromR = function(rst, src, count) {};

/**
 * [x,y...]列表 转 Point列表
 * @param {!Array<?>} pList Point列表
 * @param {boolean=} tempUse
 * @return {!Array<?>} [x,y...]列表
 */
Laya.GrahamScan.pListToPointList = function(pList, tempUse) {};

/**
 * Point列表转[x,y...]列表
 * @param {!Array<?>} pointList Point列表
 * @return {!Array<?>} [x,y...]列表
 */
Laya.GrahamScan.pointListToPlist = function(pointList) {};

/**
 * 寻找包括所有点的最小多边形顶点集合
 * @param {!Array<?>} pList 形如[x0,y0,x1,y1...]的点列表
 * @return {!Array<?>} 最小多边形顶点集合
 */
Laya.GrahamScan.scanPList = function(pList) {};

/**
 * 寻找包括所有点的最小多边形顶点集合
 * @param {!Array<?>} PointSet Point列表
 * @return {!Array<?>} 最小多边形顶点集合
 */
Laya.GrahamScan.scan = function(PointSet) {};
/**
 * @constructor
 * @struct
 */
Laya.MathUtil = function() {};

/**
 * @param {!Float32Array} l
 * @param {!Float32Array} r
 * @param {!Float32Array} o
 * @return {void}
 */
Laya.MathUtil.subtractVector3 = function(l, r, o) {};

/**
 * @param {number} left
 * @param {number} right
 * @param {number} amount
 * @return {number}
 */
Laya.MathUtil.lerp = function(left, right, amount) {};

/**
 * @param {!Float32Array} f
 * @param {number} b
 * @param {!Float32Array} e
 * @return {void}
 */
Laya.MathUtil.scaleVector3 = function(f, b, e) {};

/**
 * @param {!Float32Array} l
 * @param {!Float32Array} r
 * @param {number} t
 * @param {!Float32Array} o
 * @return {void}
 */
Laya.MathUtil.lerpVector3 = function(l, r, t, o) {};

/**
 * @param {!Float32Array} l
 * @param {!Float32Array} r
 * @param {number} t
 * @param {!Float32Array} o
 * @return {void}
 */
Laya.MathUtil.lerpVector4 = function(l, r, t, o) {};

/**
 * @param {!Float32Array} a
 * @param {number} Offset1
 * @param {!Float32Array} b
 * @param {number} Offset2
 * @param {number} t
 * @param {!Float32Array} out
 * @param {number} Offset3
 * @return {!Float32Array}
 */
Laya.MathUtil.slerpQuaternionArray = function(a, Offset1, b, Offset2, t, out, Offset3) {};

/**
 * 获取指定的两个点组成的线段的角度值。
 * @param {number} x0 点一的 X 轴坐标值。
 * @param {number} y0 点一的 Y 轴坐标值。
 * @param {number} x1 点二的 X 轴坐标值。
 * @param {number} y1 点二的 Y 轴坐标值。
 * @return {number} 角度值。
 */
Laya.MathUtil.getRotation = function(x0, y0, x1, y1) {};

/**
 * 一个用来确定数组元素排序顺序的比较函数。
 * @param {number} a 待比较数字。
 * @param {number} b 待比较数字。
 * @return {number} 如果a等于b 则值为0；如果b>a则值为1；如果b<则值为-1。
 */
Laya.MathUtil.sortBigFirst = function(a, b) {};

/**
 * 一个用来确定数组元素排序顺序的比较函数。
 * @param {number} a 待比较数字。
 * @param {number} b 待比较数字。
 * @return {number} 如果a等于b 则值为0；如果b>a则值为-1；如果b<则值为1。
 */
Laya.MathUtil.sortSmallFirst = function(a, b) {};

/**
 * 将指定的元素转为数字进行比较。
 * @param {?} a 待比较元素。
 * @param {?} b 待比较元素。
 * @return {number} b、a转化成数字的差值 (b-a)。
 */
Laya.MathUtil.sortNumBigFirst = function(a, b) {};

/**
 * 将指定的元素转为数字进行比较。
 * @param {?} a 待比较元素。
 * @param {?} b 待比较元素。
 * @return {number} a、b转化成数字的差值 (a-b)。
 */
Laya.MathUtil.sortNumSmallFirst = function(a, b) {};

/**
 * 返回根据对象指定的属性进行排序的比较函数。
 * @param {string} key 排序要依据的元素属性名。
 * @param {boolean=} bigFirst 如果值为true，则按照由大到小的顺序进行排序，否则按照由小到大的顺序进行排序。
 * @param {boolean=} forceNum 如果值为true，则将排序的元素转为数字进行比较。
 * @return {function(?, ?): number} 排序函数。
 */
Laya.MathUtil.sortByKey = function(key, bigFirst, forceNum) {};

/**
 * @constructor
 * @struct
 * 使用指定参数创建新的 <code>Matrix</code> 对象。
 * @param {number=} a （可选）缩放或旋转图像时影响像素沿 x 轴定位的值。
 * @param {number=} b （可选）旋转或倾斜图像时影响像素沿 y 轴定位的值。
 * @param {number=} c （可选）旋转或倾斜图像时影响像素沿 x 轴定位的值。
 * @param {number=} d （可选）缩放或旋转图像时影响像素沿 y 轴定位的值。
 * @param {number=} tx （可选）沿 x 轴平移每个点的距离。
 * @param {number=} ty （可选）沿 y 轴平移每个点的距离。
 * @param {number=} nums
 */
Laya.Matrix = function(a, b, c, d, tx, ty, nums) {};
/** @type {!Laya.Matrix} */
Laya.Matrix.EMPTY;
/** @type {!Laya.Matrix} */
Laya.Matrix.TEMP;
/** @type {number} */
Laya.Matrix.prototype.a;
/** @type {number} */
Laya.Matrix.prototype.b;
/** @type {number} */
Laya.Matrix.prototype.c;
/** @type {number} */
Laya.Matrix.prototype.d;
/** @type {number} */
Laya.Matrix.prototype.tx;
/** @type {number} */
Laya.Matrix.prototype.ty;

/**
 * 将本矩阵设置为单位矩阵。
 * @return {!Laya.Matrix} 返回当前矩形。
 */
Laya.Matrix.prototype.identity = function() {};

/**
 * 设置沿 x 、y 轴平移每个点的距离。
 * @param {number} x 沿 x 轴平移每个点的距离。
 * @param {number} y 沿 y 轴平移每个点的距离。
 * @return {!Laya.Matrix} 返回对象本身
 */
Laya.Matrix.prototype.setTranslate = function(x, y) {};

/**
 * 沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
 * @param {number} x 沿 x 轴向右移动的量（以像素为单位）。
 * @param {number} y 沿 y 轴向下移动的量（以像素为单位）。
 * @return {!Laya.Matrix} 返回此矩形对象。
 */
Laya.Matrix.prototype.translate = function(x, y) {};

/**
 * 对矩阵应用缩放转换。
 * @param {number} x 用于沿 x 轴缩放对象的乘数。
 * @param {number} y 用于沿 y 轴缩放对象的乘数。
 * @return {!Laya.Matrix} 返回矩阵对象本身
 */
Laya.Matrix.prototype.scale = function(x, y) {};

/**
 * 对 Matrix 对象应用旋转转换。
 * @param {number} angle 以弧度为单位的旋转角度。
 * @return {!Laya.Matrix} 返回矩阵对象本身
 */
Laya.Matrix.prototype.rotate = function(angle) {};

/**
 * 对 Matrix 对象应用倾斜转换。
 * @param {number} x 沿着 X 轴的 2D 倾斜弧度。
 * @param {number} y 沿着 Y 轴的 2D 倾斜弧度。
 * @return {!Laya.Matrix} 当前 Matrix 对象。
 */
Laya.Matrix.prototype.skew = function(x, y) {};

/**
 * 对指定的点应用当前矩阵的逆转化并返回此点。
 * @param {!Laya.Point} out 待转化的点 Point 对象。
 * @return {!Laya.Point} 返回out
 */
Laya.Matrix.prototype.invertTransformPoint = function(out) {};

/**
 * 将 Matrix 对象表示的几何转换应用于指定点。
 * @param {!Laya.Point} out 用来设定输出结果的点。
 * @return {!Laya.Point} 返回out
 */
Laya.Matrix.prototype.transformPoint = function(out) {};

/**
 * 将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
 * @param {!Laya.Point} out 用来设定输出结果的点。
 * @return {!Laya.Point} 返回out
 */
Laya.Matrix.prototype.transformPointN = function(out) {};

/**
 * 获取 X 轴缩放值。
 * @return {number} X 轴缩放值。
 */
Laya.Matrix.prototype.getScaleX = function() {};

/**
 * 获取 Y 轴缩放值。
 * @return {number} Y 轴缩放值。
 */
Laya.Matrix.prototype.getScaleY = function() {};

/**
 * 执行原始矩阵的逆转换。
 * @return {!Laya.Matrix} 当前矩阵对象。
 */
Laya.Matrix.prototype.invert = function() {};

/**
 * 将 Matrix 的成员设置为指定值。
 * @param {number} a 缩放或旋转图像时影响像素沿 x 轴定位的值。
 * @param {number} b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
 * @param {number} c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
 * @param {number} d 缩放或旋转图像时影响像素沿 y 轴定位的值。
 * @param {number} tx 沿 x 轴平移每个点的距离。
 * @param {number} ty 沿 y 轴平移每个点的距离。
 * @return {!Laya.Matrix} 当前矩阵对象。
 */
Laya.Matrix.prototype.setTo = function(a, b, c, d, tx, ty) {};

/**
 * 将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
 * @param {!Laya.Matrix} matrix 要连接到源矩阵的矩阵。
 * @return {!Laya.Matrix} 当前矩阵。
 */
Laya.Matrix.prototype.concat = function(matrix) {};

/**
 * 将指定的两个矩阵相乘后的结果赋值给指定的输出对象。
 * @param {!Laya.Matrix} m1 矩阵一。
 * @param {!Laya.Matrix} m2 矩阵二。
 * @param {!Laya.Matrix} out 输出对象。
 * @return {!Laya.Matrix} 结果输出对象 out。
 */
Laya.Matrix.mul = function(m1, m2, out) {};

/**
 * 将指定的两个矩阵相乘，结果赋值给指定的输出数组，长度为16。
 * @param {!Laya.Matrix} m1 矩阵一。
 * @param {!Laya.Matrix} m2 矩阵二。
 * @param {!Array<?>} out 输出对象Array。
 * @return {!Array<?>} 结果输出对象 out。
 */
Laya.Matrix.mul16 = function(m1, m2, out) {};

/**
 * @param {number} x 用于沿 x 轴缩放对象的乘数。
 * @param {number} y 用于沿 y 轴缩放对象的乘数。
 * @return {void}
 */
Laya.Matrix.prototype.scaleEx = function(x, y) {};

/**
 * @param {number} angle 以弧度为单位的旋转角度。
 * @return {void}
 */
Laya.Matrix.prototype.rotateEx = function(angle) {};

/**
 * 返回此 Matrix 对象的副本。
 * @return {!Laya.Matrix} 与原始实例具有完全相同的属性的新 Matrix 实例。
 */
Laya.Matrix.prototype.clone = function() {};

/**
 * 将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
 * @param {!Laya.Matrix} dec 要复制当前矩阵数据的 Matrix 对象。
 * @return {!Laya.Matrix} 已复制当前矩阵数据的 Matrix 对象。
 */
Laya.Matrix.prototype.copyTo = function(dec) {};

/**
 * 返回列出该 Matrix 对象属性的文本值。
 * @return {string} 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
 */
Laya.Matrix.prototype.toString = function() {};

/**
 * 销毁此对象。
 * @return {void}
 */
Laya.Matrix.prototype.destroy = function() {};

/**
 * 回收到对象池，方便复用
 * @return {void}
 */
Laya.Matrix.prototype.recover = function() {};

/**
 * 从对象池中创建一个 <code>Matrix</code> 对象。
 * @return {!Laya.Matrix} <code>Matrix</code> 对象。
 */
Laya.Matrix.create = function() {};

/**
 * @constructor
 * @struct
 * 根据指定坐标，创建一个新的 <code>Point</code> 对象。
 * @param {number=} x （可选）水平坐标。
 * @param {number=} y （可选）垂直坐标。
 */
Laya.Point = function(x, y) {};
/** @type {!Laya.Point} */
Laya.Point.TEMP;
/** @type {!Laya.Point} */
Laya.Point.EMPTY;
/** @type {number} */
Laya.Point.prototype.x;
/** @type {number} */
Laya.Point.prototype.y;

/**
 * 从对象池创建
 * @return {!Laya.Point}
 */
Laya.Point.create = function() {};

/**
 * 将 <code>Point</code> 的成员设置为指定值。
 * @param {number} x 水平坐标。
 * @param {number} y 垂直坐标。
 * @return {!Laya.Point} 当前 Point 对象。
 */
Laya.Point.prototype.setTo = function(x, y) {};

/**
 * 重置
 * @return {!Laya.Point}
 */
Laya.Point.prototype.reset = function() {};

/**
 * 回收到对象池，方便复用
 * @return {void}
 */
Laya.Point.prototype.recover = function() {};

/**
 * 计算当前点和目标点(x，y)的距离。
 * @param {number} x 水平坐标。
 * @param {number} y 垂直坐标。
 * @return {number} 返回当前点和目标点之间的距离。
 */
Laya.Point.prototype.distance = function(x, y) {};

/**
 * 返回包含 x 和 y 坐标的值的字符串。
 * @return {string}
 */
Laya.Point.prototype.toString = function() {};

/**
 * 标准化向量。
 * @return {void}
 */
Laya.Point.prototype.normalize = function() {};

/**
 * copy point坐标
 * @param {!Laya.Point} point 需要被copy的point
 * @return {!Laya.Point}
 */
Laya.Point.prototype.copy = function(point) {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Rectangle</code> 对象。
 * @param {number=} x 矩形左上角的 X 轴坐标。
 * @param {number=} y 矩形左上角的 Y 轴坐标。
 * @param {number=} width 矩形的宽度。
 * @param {number=} height 矩形的高度。
 */
Laya.Rectangle = function(x, y, width, height) {};
/** @type {!Laya.Rectangle} */
Laya.Rectangle.EMPTY;
/** @type {!Laya.Rectangle} */
Laya.Rectangle.TEMP;
/** @type {?} */
Laya.Rectangle._temB;
/** @type {?} */
Laya.Rectangle._temA;
/** @type {number} */
Laya.Rectangle.prototype.x;
/** @type {number} */
Laya.Rectangle.prototype.y;
/** @type {number} */
Laya.Rectangle.prototype.width;
/** @type {number} */
Laya.Rectangle.prototype.height;

/* TODO: GetAccessor: Laya.right */

/* TODO: GetAccessor: Laya.bottom */

/**
 * 将 Rectangle 的属性设置为指定值。
 * @param {number} x x 矩形左上角的 X 轴坐标。
 * @param {number} y x 矩形左上角的 Y 轴坐标。
 * @param {number} width 矩形的宽度。
 * @param {number} height 矩形的高。
 * @return {!Laya.Rectangle} 返回属性值修改后的矩形对象本身。
 */
Laya.Rectangle.prototype.setTo = function(x, y, width, height) {};

/**
 * 重置
 * @return {!Laya.Rectangle}
 */
Laya.Rectangle.prototype.reset = function() {};

/**
 * 回收
 * @return {void}
 */
Laya.Rectangle.prototype.recover = function() {};

/**
 * 创建
 * @return {!Laya.Rectangle}
 */
Laya.Rectangle.create = function() {};

/**
 * 复制 source 对象的属性值到此矩形对象中。
 * @param {!Laya.Rectangle} source
 * @return {!Laya.Rectangle} 返回属性值修改后的矩形对象本身。
 */
Laya.Rectangle.prototype.copyFrom = function(source) {};

/**
 * 确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
 * @param {number} x 点的 X 轴坐标值（水平位置）。
 * @param {number} y 点的 Y 轴坐标值（垂直位置）。
 * @return {boolean} 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
 */
Laya.Rectangle.prototype.contains = function(x, y) {};

/**
 * 确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
 * @param {!Laya.Rectangle} rect Rectangle 对象。
 * @return {boolean} 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
 */
Laya.Rectangle.prototype.intersects = function(rect) {};

/**
 * 如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
 * @param {!Laya.Rectangle} rect 待比较的矩形区域。
 * @param {!Laya.Rectangle=} out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
 * @return {!Laya.Rectangle} 返回相交的矩形区域对象。
 */
Laya.Rectangle.prototype.intersection = function(rect, out) {};

/**
 * <p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
 * <p>注意：union() 方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle = new Rectangle(300,300,50,0);</p>
 * @param {!Laya.Rectangle} source
 * @param {!Laya.Rectangle=} out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
 * @return {!Laya.Rectangle} 充当两个矩形的联合的新 Rectangle 对象。
 */
Laya.Rectangle.prototype.union = function(source, out) {};

/**
 * 返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
 * @param {!Laya.Rectangle=} out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
 * @return {!Laya.Rectangle} Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
 */
Laya.Rectangle.prototype.clone = function(out) {};

/**
 * 当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
 * @return {string}
 */
Laya.Rectangle.prototype.toString = function() {};

/**
 * 检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
 * @param {!Laya.Rectangle} rect 待比较的 Rectangle 对象。
 * @return {boolean} 如果判断的属性都相等，则返回 true ,否则返回 false。
 */
Laya.Rectangle.prototype.equals = function(rect) {};

/**
 * <p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
 * <p>此方法会修改本对象。</p>
 * @param {number} x 点的 X 坐标。
 * @param {number} y 点的 Y 坐标。
 * @return {!Laya.Rectangle} 返回此 Rectangle 对象。
 */
Laya.Rectangle.prototype.addPoint = function(x, y) {};

/**
 * 确定此 Rectangle 对象是否为空。
 * @return {boolean} 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
 */
Laya.Rectangle.prototype.isEmpty = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.AudioSound = function() {};
/** @type {?} */
Laya.AudioSound._audioCache;
/** @type {string} */
Laya.AudioSound.prototype.url;
/** @type {!HTMLAudioElement} */
Laya.AudioSound.prototype.audio;
/** @type {boolean} */
Laya.AudioSound.prototype.loaded;
/** @type {?} */
Laya.AudioSound._makeMusicOK;

/* TODO: GetAccessor: Laya.duration */

/**
 * 释放声音
 * @return {void}
 */
Laya.AudioSound.prototype.dispose = function() {};

/**
 * 加载声音
 * @param {string} url
 * @return {void}
 */
Laya.AudioSound.prototype.load = function(url) {};

/**
 * 播放声音
 * @param {number=} startTime 起始时间
 * @param {number=} loops 循环次数
 * @return {!Laya.SoundChannel}
 */
Laya.AudioSound.prototype.play = function(startTime, loops) {};

/**
 * @extends {Laya.SoundChannel}
 * @constructor
 * @struct
 * @param {!HTMLAudioElement} audio
 */
Laya.AudioSoundChannel = function(audio) {};
/** @type {?} */
Laya.AudioSoundChannel.prototype._audio;
/** @type {?} */
Laya.AudioSoundChannel.prototype._onEnd;
/** @type {?} */
Laya.AudioSoundChannel.prototype._resumePlay;
/** @type {?} */
Laya.AudioSoundChannel.prototype.__onEnd;
/** @type {?} */
Laya.AudioSoundChannel.prototype.__resumePlay;

/* TODO: GetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.duration */

/* TODO: SetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.volume */

/**
 * 播放
 * @override
 * @return {void}
 */
Laya.AudioSoundChannel.prototype.play = function() {};

/**
 * 停止播放
 * @override
 * @return {void}
 */
Laya.AudioSoundChannel.prototype.stop = function() {};

/**
 * @override
 * @return {void}
 */
Laya.AudioSoundChannel.prototype.pause = function() {};

/**
 * @override
 * @return {void}
 */
Laya.AudioSoundChannel.prototype.resume = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.Sound = function() {};

/* TODO: GetAccessor: Laya.duration */

/**
 * 加载声音。
 * @param {string} url 地址。
 * @return {void}
 */
Laya.Sound.prototype.load = function(url) {};

/**
 * 播放声音。
 * @param {number=} startTime 开始时间,单位秒
 * @param {number=} loops 循环次数,0表示一直循环
 * @return {!Laya.SoundChannel} 声道 SoundChannel 对象。
 */
Laya.Sound.prototype.play = function(startTime, loops) {};

/**
 * 释放声音资源。
 * @return {void}
 */
Laya.Sound.prototype.dispose = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.SoundChannel = function() {};
/** @type {string} */
Laya.SoundChannel.prototype.url;
/** @type {number} */
Laya.SoundChannel.prototype.loops;
/** @type {number} */
Laya.SoundChannel.prototype.startTime;
/** @type {boolean} */
Laya.SoundChannel.prototype.isStopped;
/** @type {!Handler} */
Laya.SoundChannel.prototype.completeHandler;

/* TODO: SetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.duration */

/**
 * 播放声音。
 * @return {void}
 */
Laya.SoundChannel.prototype.play = function() {};

/**
 * 停止播放。
 * @return {void}
 */
Laya.SoundChannel.prototype.stop = function() {};

/**
 * 暂停播放。
 * @return {void}
 */
Laya.SoundChannel.prototype.pause = function() {};

/**
 * 继续播放。
 * @return {void}
 */
Laya.SoundChannel.prototype.resume = function() {};

/**
 * private
 * @protected
 * @param {!Handler} handler
 * @return {void}
 */
Laya.SoundChannel.prototype.__runComplete = function(handler) {};
/**
 * @constructor
 * @struct
 */
Laya.SoundManager = function() {};
/** @type {number} */
Laya.SoundManager.musicVolume;
/** @type {number} */
Laya.SoundManager.soundVolume;
/** @type {number} */
Laya.SoundManager.playbackRate;
/** @type {?} */
Laya.SoundManager._useAudioMusic;
/** @type {?} */
Laya.SoundManager._muted;
/** @type {?} */
Laya.SoundManager._soundMuted;
/** @type {?} */
Laya.SoundManager._musicMuted;
/** @type {?} */
Laya.SoundManager._musicChannel;
/** @type {?} */
Laya.SoundManager._channels;
/** @type {?} */
Laya.SoundManager._autoStopMusic;
/** @type {?} */
Laya.SoundManager._blurPaused;
/** @type {?} */
Laya.SoundManager._isActive;
/** @type {?} */
Laya.SoundManager._lastSoundUsedTimeDic;
/** @type {?} */
Laya.SoundManager._isCheckingDispose;
/** @type {boolean} */
Laya.SoundManager.autoReleaseSound;
/** @type {?} */
Laya.SoundManager._checkDisposeSound;

/* TODO: SetAccessor: Laya.autoStopMusic */

/* TODO: GetAccessor: Laya.autoStopMusic */
/** @type {?} */
Laya.SoundManager._visibilityChange;
/** @type {?} */
Laya.SoundManager._stageOnBlur;
/** @type {?} */
Laya.SoundManager._recoverWebAudio;
/** @type {?} */
Laya.SoundManager._stageOnFocus;

/* TODO: SetAccessor: Laya.muted */

/* TODO: GetAccessor: Laya.muted */

/* TODO: SetAccessor: Laya.soundMuted */

/* TODO: GetAccessor: Laya.soundMuted */

/* TODO: SetAccessor: Laya.musicMuted */

/* TODO: GetAccessor: Laya.musicMuted */

/* TODO: GetAccessor: Laya.useAudioMusic */

/* TODO: SetAccessor: Laya.useAudioMusic */
/** @type {?} */
Laya.SoundManager._setVolume;

/**
 * 添加播放的声音实例。
 * @param {!Laya.SoundChannel} channel <code>SoundChannel</code> 对象。
 * @return {void}
 */
Laya.SoundManager.addChannel = function(channel) {};

/**
 * 移除播放的声音实例。
 * @param {!Laya.SoundChannel} channel <code>SoundChannel</code> 对象。
 * @return {void}
 */
Laya.SoundManager.removeChannel = function(channel) {};

/**
 * @param {string} url
 * @return {void}
 */
Laya.SoundManager.disposeSoundLater = function(url) {};

/**
 * @param {string} url
 * @return {void}
 */
Laya.SoundManager.disposeSoundIfNotUsed = function(url) {};

/**
 * 播放音效。音效可以同时播放多个。
 * @param {string} url 声音文件地址。
 * @param {number=} loops 循环次数,0表示无限循环。
 * @param {!Handler=} complete 声音播放完成回调  Handler对象。
 * @param {function(new:?)=} soundClass 使用哪个声音类进行播放，null表示自动选择。
 * @param {number=} startTime 声音播放起始时间。
 * @return {!Laya.SoundChannel} SoundChannel对象，通过此对象可以对声音进行控制，以及获取声音信息。
 */
Laya.SoundManager.playSound = function(url, loops, complete, soundClass, startTime) {};

/**
 * 释放声音资源。
 * @param {string} url 声音播放地址。
 * @return {void}
 */
Laya.SoundManager.destroySound = function(url) {};

/**
 * 播放背景音乐。背景音乐同时只能播放一个，如果在播放背景音乐时再次调用本方法，会先停止之前的背景音乐，再播放当前的背景音乐。
 * @param {string} url 声音文件地址。
 * @param {number=} loops 循环次数,0表示无限循环。
 * @param {!Handler=} complete 声音播放完成回调,complete 结果参数 true: 播放完成, false/undefined ：stop触发的complete。
 * @param {number=} startTime 声音播放起始时间。
 * @return {!Laya.SoundChannel} SoundChannel对象，通过此对象可以对声音进行控制，以及获取声音信息。
 */
Laya.SoundManager.playMusic = function(url, loops, complete, startTime) {};

/**
 * 停止声音播放。此方法能够停止任意声音的播放（包括背景音乐和音效），只需传入对应的声音播放地址。
 * @param {string} url 声音文件地址。
 * @return {void}
 */
Laya.SoundManager.stopSound = function(url) {};

/**
 * 停止播放所有声音（包括背景音乐和音效）。
 * @return {void}
 */
Laya.SoundManager.stopAll = function() {};

/**
 * 停止播放所有音效（不包括背景音乐）。
 * @return {void}
 */
Laya.SoundManager.stopAllSound = function() {};

/**
 * 停止播放背景音乐（不包括音效）。
 * @return {void}
 */
Laya.SoundManager.stopMusic = function() {};

/**
 * 设置声音音量。根据参数不同，可以分别设置指定声音（背景音乐或音效）音量或者所有音效（不包括背景音乐）音量。
 * @param {number} volume 音量。初始值为1。音量范围从 0（静音）至 1（最大音量）。
 * @param {string=} url (default = null)声音播放地址。默认为null。为空表示设置所有音效（不包括背景音乐）的音量，不为空表示设置指定声音（背景音乐或音效）的音量。
 * @return {void}
 */
Laya.SoundManager.setSoundVolume = function(volume, url) {};

/**
 * 设置背景音乐音量。音量范围从 0（静音）至 1（最大音量）。
 * @param {number} volume 音量。初始值为1。音量范围从 0（静音）至 1（最大音量）。
 * @return {void}
 */
Laya.SoundManager.setMusicVolume = function(volume) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.SoundNode = function() {};
/** @type {string} */
Laya.SoundNode.prototype.url;
/** @type {?} */
Laya.SoundNode.prototype._channel;
/** @type {?} */
Laya.SoundNode.prototype._tar;
/** @type {?} */
Laya.SoundNode.prototype._playEvents;
/** @type {?} */
Laya.SoundNode.prototype._stopEvents;
/** @type {?} */
Laya.SoundNode.prototype._onParentChange;
/** @type {?} */
Laya.SoundNode.prototype._setPlayAction;
/** @type {?} */
Laya.SoundNode.prototype._setPlayActions;

/* TODO: SetAccessor: Laya.playEvent */

/* TODO: SetAccessor: Laya.target */

/* TODO: SetAccessor: Laya.stopEvent */

/**
 * 播放
 * @param {number=} loops 循环次数
 * @param {!Handler=} complete 完成回调
 * @return {void}
 */
Laya.SoundNode.prototype.play = function(loops, complete) {};

/**
 * 停止播放
 * @return {void}
 */
Laya.SoundNode.prototype.stop = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.WebAudioSound = function() {};
/** @type {?} */
Laya.WebAudioSound._dataCache;
/** @type {boolean} */
Laya.WebAudioSound.webAudioEnabled;
/** @type {?} */
Laya.WebAudioSound.ctx;
/** @type {!Array<?>} */
Laya.WebAudioSound.buffs;
/** @type {boolean} */
Laya.WebAudioSound.isDecoding;
/** @type {?} */
Laya.WebAudioSound._miniBuffer;
/** @type {!Laya.EventDispatcher} */
Laya.WebAudioSound.e;
/** @type {?} */
Laya.WebAudioSound._unlocked;
/** @type {?} */
Laya.WebAudioSound.tInfo;
/** @type {?} */
Laya.WebAudioSound.__loadingSound;
/** @type {string} */
Laya.WebAudioSound.prototype.url;
/** @type {boolean} */
Laya.WebAudioSound.prototype.loaded;
/** @type {!ArrayBuffer} */
Laya.WebAudioSound.prototype.data;
/** @type {?} */
Laya.WebAudioSound.prototype.audioBuffer;
/** @type {?} */
Laya.WebAudioSound.prototype.__toPlays;
/** @type {?} */
Laya.WebAudioSound.prototype._disposed;
/** @type {?} */
Laya.WebAudioSound._done;
/** @type {?} */
Laya.WebAudioSound._fail;
/** @type {?} */
Laya.WebAudioSound._playEmptySound;
/** @type {?} */
Laya.WebAudioSound._unlock;
/** @type {?} */
Laya.WebAudioSound.prototype._err;
/** @type {?} */
Laya.WebAudioSound.prototype._loaded;
/** @type {?} */
Laya.WebAudioSound.prototype._removeLoadEvents;
/** @type {?} */
Laya.WebAudioSound.prototype.__playAfterLoaded;

/* TODO: GetAccessor: Laya.duration */

/**
 * 解码声音文件
 * @return {void}
 */
Laya.WebAudioSound.decode = function() {};

/**
 * @return {void}
 */
Laya.WebAudioSound.initWebAudio = function() {};

/**
 * 加载声音
 * @param {string} url
 * @return {void}
 */
Laya.WebAudioSound.prototype.load = function(url) {};

/**
 * 播放声音
 * @param {number=} startTime 起始时间
 * @param {number=} loops 循环次数
 * @param {!Laya.WebAudioSoundChannel=} channel
 * @return {!Laya.SoundChannel}
 */
Laya.WebAudioSound.prototype.play = function(startTime, loops, channel) {};

/**
 * @return {void}
 */
Laya.WebAudioSound.prototype.dispose = function() {};

/**
 * @extends {Laya.SoundChannel}
 * @constructor
 * @struct
 */
Laya.WebAudioSoundChannel = function() {};
/** @type {?} */
Laya.WebAudioSoundChannel.prototype.audioBuffer;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype.gain;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype.bufferSource;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._currentTime;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._volume;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._startTime;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._pauseTime;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype.context;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._onPlayEnd;
/** @type {?} */
Laya.WebAudioSoundChannel._tryCleanFailed;
/** @type {number} */
Laya.WebAudioSoundChannel.SetTargetDelay;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype.__onPlayEnd;

/* TODO: GetAccessor: Laya.position */

/* TODO: GetAccessor: Laya.duration */
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._clearBufferSource;
/** @type {?} */
Laya.WebAudioSoundChannel.prototype._tryClearBuffer;

/* TODO: SetAccessor: Laya.volume */

/* TODO: GetAccessor: Laya.volume */

/**
 * 播放声音
 * @override
 * @return {void}
 */
Laya.WebAudioSoundChannel.prototype.play = function() {};

/**
 * 停止播放
 * @override
 * @return {void}
 */
Laya.WebAudioSoundChannel.prototype.stop = function() {};

/**
 * @override
 * @return {void}
 */
Laya.WebAudioSoundChannel.prototype.pause = function() {};

/**
 * @override
 * @return {void}
 */
Laya.WebAudioSoundChannel.prototype.resume = function() {};
/**
 * @constructor
 * @struct
 */
Laya.AtlasInfoManager = function() {};
/** @type {?} */
Laya.AtlasInfoManager._fileLoadDic;
/** @type {?} */
Laya.AtlasInfoManager._onInfoLoaded;

/**
 * @param {string} infoFile
 * @param {!Handler=} callback
 * @return {void}
 */
Laya.AtlasInfoManager.enable = function(infoFile, callback) {};

/**
 * @param {string} file
 * @return {string}
 */
Laya.AtlasInfoManager.getFileLoadPath = function(file) {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.HttpRequest = function() {};
/** @type {!XMLHttpRequest} */
Laya.HttpRequest.prototype._http;
/** @type {?} */
Laya.HttpRequest._urlEncode;
/** @type {string} */
Laya.HttpRequest.prototype._responseType;
/** @type {?} */
Laya.HttpRequest.prototype._data;
/** @type {string} */
Laya.HttpRequest.prototype._url;

/* TODO: GetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.data */

/* TODO: GetAccessor: Laya.http */

/**
 * 发送 HTTP 请求。
 * @param {string} url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
 * @param {?=} data (default = null)发送的数据。
 * @param {string=} method (default = "get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
 * @param {string=} responseType (default = "text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
 * @param {!Array<?>=} headers (default = null) HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type", "application/json"]。
 * @return {void}
 */
Laya.HttpRequest.prototype.send = function(url, data, method, responseType, headers) {};

/**
 * @protected
 * @param {?} e 事件对象。
 * @return {void}
 */
Laya.HttpRequest.prototype._onProgress = function(e) {};

/**
 * @protected
 * @param {?} e 事件对象。
 * @return {void}
 */
Laya.HttpRequest.prototype._onAbort = function(e) {};

/**
 * @protected
 * @param {?} e 事件对象。
 * @return {void}
 */
Laya.HttpRequest.prototype._onError = function(e) {};

/**
 * @protected
 * @param {?} e 事件对象。
 * @return {void}
 */
Laya.HttpRequest.prototype._onLoad = function(e) {};

/**
 * @protected
 * @param {string} message 错误信息。
 * @return {void}
 */
Laya.HttpRequest.prototype.error = function(message) {};

/**
 * @protected
 * @return {void}
 */
Laya.HttpRequest.prototype.complete = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.HttpRequest.prototype.clear = function() {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.Loader = function() {};
/** @type {string} */
Laya.Loader.TEXT;
/** @type {string} */
Laya.Loader.JSON;
/** @type {string} */
Laya.Loader.PREFAB;
/** @type {string} */
Laya.Loader.XML;
/** @type {string} */
Laya.Loader.BUFFER;
/** @type {string} */
Laya.Loader.IMAGE;
/** @type {string} */
Laya.Loader.SOUND;
/** @type {string} */
Laya.Loader.ATLAS;
/** @type {string} */
Laya.Loader.FONT;
/** @type {string} */
Laya.Loader.TTF;
/** @type {string} */
Laya.Loader.PLF;
/** @type {string} */
Laya.Loader.PLFB;
/** @type {string} */
Laya.Loader.HIERARCHY;
/** @type {string} */
Laya.Loader.MESH;
/** @type {string} */
Laya.Loader.MATERIAL;
/** @type {string} */
Laya.Loader.TEXTURE2D;
/** @type {string} */
Laya.Loader.TEXTURECUBE;
/** @type {string} */
Laya.Loader.ANIMATIONCLIP;
/** @type {string} */
Laya.Loader.AVATAR;
/** @type {string} */
Laya.Loader.TERRAINHEIGHTDATA;
/** @type {string} */
Laya.Loader.TERRAINRES;
/** @type {!Object<string,string>} */
Laya.Loader.typeMap;
/** @type {?} */
Laya.Loader.parserMap;
/** @type {number} */
Laya.Loader.maxTimeOut;
/** @type {!Object<string,!Array<string>>} */
Laya.Loader.groupMap;
/** @type {!Object<string,?>} */
Laya.Loader.loadedMap;
/** @type {!Object<string,!Array<?>>} */
Laya.Loader.atlasMap;
/** @type {!Object<string,!Laya.Texture>} */
Laya.Loader.textureMap;
/** @type {!Object<string,!ArrayBuffer>} */
Laya.Loader.preLoadedMap;
/** @type {!Object<string,!Laya.HTMLImageElement>} */
Laya.Loader._imgCache;
/** @type {!Array<!Laya.Loader>} */
Laya.Loader._loaders;
/** @type {boolean} */
Laya.Loader._isWorking;
/** @type {number} */
Laya.Loader._startIndex;
/** @type {string} */
Laya.Loader.prototype._url;
/** @type {string} */
Laya.Loader.prototype._type;
/** @type {!Laya.HttpRequest} */
Laya.Loader.prototype._http;
/** @type {boolean} */
Laya.Loader.prototype._useWorkerLoader;
/** @type {?} */
Laya.Loader.prototype._loadHttpRequest;
/** @type {?} */
Laya.Loader.prototype._loadHtmlImage;
/** @type {?} */
Laya.Loader.prototype.parsePLFData;
/** @type {?} */
Laya.Loader.prototype.parsePLFBData;
/** @type {?} */
Laya.Loader.prototype.parseOnePLFBFile;
/** @type {?} */
Laya.Loader.checkNext;

/* TODO: GetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.cache */

/* TODO: GetAccessor: Laya.data */

/**
 * 获取指定资源地址的数据类型。
 * @param {string} url 资源地址。
 * @return {string} 数据类型。
 */
Laya.Loader.getTypeFromUrl = function(url) {};

/**
 * 加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
 * @param {string} url 资源地址。
 * @param {string=} type (default = null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
 * @param {boolean=} cache (default = true)是否缓存数据。
 * @param {string=} group (default = null)分组名称。
 * @param {boolean=} ignoreCache (default = false)是否忽略缓存，强制重新加载。
 * @param {boolean=} useWorkerLoader (default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）
 * @return {void}
 */
Laya.Loader.prototype.load = function(url, type, cache, group, ignoreCache, useWorkerLoader) {};

/**
 * @protected
 * @param {string} url 资源地址。
 * @return {void}
 */
Laya.Loader.prototype._loadTTF = function(url) {};

/**
 * @protected
 * @param {string} url
 * @param {boolean=} isformatURL
 * @return {void}
 */
Laya.Loader.prototype._loadImage = function(url, isformatURL) {};

/**
 * @protected
 * @param {number} value
 * @return {void}
 */
Laya.Loader.prototype.onProgress = function(value) {};

/**
 * @protected
 * @param {string} message
 * @return {void}
 */
Laya.Loader.prototype.onError = function(message) {};

/**
 * 资源加载完成的处理函数。
 * @protected
 * @param {?=} data 数据。
 * @return {void}
 */
Laya.Loader.prototype.onLoaded = function(data) {};

/**
 * 加载完成。
 * @protected
 * @param {?} data 加载的数据。
 * @return {void}
 */
Laya.Loader.prototype.complete = function(data) {};

/**
 * 结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
 * @param {?=} content 加载后的数据
 * @return {void}
 */
Laya.Loader.prototype.endLoad = function(content) {};

/**
 * 清理指定资源地址的缓存。
 * @param {string} url 资源地址。
 * @return {void}
 */
Laya.Loader.clearRes = function(url) {};

/**
 * 销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复
 * 相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源
 * 而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁
 * 【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理
 * @param {string} url 图集地址或者texture地址，比如 Loader.clearTextureRes("res/atlas/comp.atlas"); Loader.clearTextureRes("hall/bg.jpg");
 * @return {void}
 */
Laya.Loader.clearTextureRes = function(url) {};

/**
 * 获取指定资源地址的资源或纹理。
 * @param {string} url 资源地址。
 * @return {?} 返回资源。
 */
Laya.Loader.getRes = function(url) {};

/**
 * 获取指定资源地址的图集地址列表。
 * @param {string} url 图集地址。
 * @return {!Array<?>} 返回地址集合。
 */
Laya.Loader.getAtlas = function(url) {};

/**
 * 缓存资源。
 * 如果资源已经存在则缓存失败。
 * @param {string} url 资源地址。
 * @param {?} data 要缓存的内容。
 * @return {void}
 */
Laya.Loader.cacheRes = function(url, data) {};

/**
 * 强制缓存资源。不做任何检查。
 * @param {string} url 资源地址。
 * @param {?} data 要缓存的内容。
 * @return {void}
 */
Laya.Loader.cacheResForce = function(url, data) {};

/**
 * 缓存Teture。
 * @param {string} url 资源地址。
 * @param {!Laya.Texture} data 要缓存的Texture。
 * @return {void}
 */
Laya.Loader.cacheTexture = function(url, data) {};

/**
 * 设置资源分组。
 * @param {string} url 资源地址。
 * @param {string} group 分组名。
 * @return {void}
 */
Laya.Loader.setGroup = function(url, group) {};

/**
 * 根据分组清理资源。
 * @param {string} group 分组名。
 * @return {void}
 */
Laya.Loader.clearResByGroup = function(group) {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * <p>创建一个新的 <code>LoaderManager</code> 实例。</p>
 * <p><b>注意：</b>请使用Laya.loader加载资源，这是一个单例，不要手动实例化此类，否则会导致不可预料的问题。</p>
 */
Laya.LoaderManager = function() {};
/** @type {?} */
Laya.LoaderManager._resMap;
/** @type {?} */
Laya.LoaderManager.createMap;
/** @type {number} */
Laya.LoaderManager.prototype.retryNum;
/** @type {number} */
Laya.LoaderManager.prototype.retryDelay;
/** @type {number} */
Laya.LoaderManager.prototype.maxLoader;
/** @type {?} */
Laya.LoaderManager.prototype._loaders;
/** @type {?} */
Laya.LoaderManager.prototype._loaderCount;
/** @type {?} */
Laya.LoaderManager.prototype._resInfos;
/** @type {?} */
Laya.LoaderManager.prototype._infoPool;
/** @type {?} */
Laya.LoaderManager.prototype._maxPriority;
/** @type {?} */
Laya.LoaderManager.prototype._failRes;
/** @type {?} */
Laya.LoaderManager.prototype._statInfo;
/** @type {?} */
Laya.LoaderManager.prototype._createOne;
/** @type {?} */
Laya.LoaderManager.prototype._resInfoLoaded;
/** @type {?} */
Laya.LoaderManager.prototype._next;
/** @type {?} */
Laya.LoaderManager.prototype._doLoad;
/** @type {?} */
Laya.LoaderManager.prototype._endLoad;
/** @type {?} */
Laya.LoaderManager.prototype._addReTry;
/** @type {?} */
Laya.LoaderManager.prototype._loadAssets;
/** @type {?} */
Laya.LoaderManager.prototype._decodeTexture;

/**
 * @return {number}
 */
Laya.LoaderManager.prototype.getProgress = function() {};

/**
 * @return {void}
 */
Laya.LoaderManager.prototype.resetProgress = function() {};

/**
 * <p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
 * <p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
 * <p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
 * @param {(string|!Array<(string|!Laya.createItem)>)} url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
 * @param {!Handler=} complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
 * @param {!Handler=} progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
 * @param {string=} type 资源类型。
 * @param {!Array<?>=} constructParams 资源构造函数参数。
 * @param {?=} propertyParams 资源属性参数。
 * @param {number=} priority (default = 1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
 * @param {boolean=} cache 是否缓存加载的资源。
 * @return {void} 如果url为数组，返回true；否则返回指定的资源类对象。
 */
Laya.LoaderManager.prototype.create = function(url, complete, progress, type, constructParams, propertyParams, priority, cache) {};

/**
 * <p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
 * <p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：loaderManager.load(...).load(...);</p>
 * @param {(string|!Array<(string|!Laya.loadItem)>)} url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
 * @param {!Handler=} complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
 * @param {!Handler=} progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
 * @param {string=} type 资源类型。比如：Loader.IMAGE。
 * @param {number=} priority (default = 1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
 * @param {boolean=} cache 是否缓存加载结果。
 * @param {string=} group 分组，方便对资源进行管理。
 * @param {boolean=} ignoreCache 是否忽略缓存，强制重新加载。
 * @param {boolean=} useWorkerLoader (default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）
 * @return {!Laya.LoaderManager} 此 LoaderManager 对象本身。
 */
Laya.LoaderManager.prototype.load = function(url, complete, progress, type, priority, cache, group, ignoreCache, useWorkerLoader) {};

/**
 * 清理指定资源地址缓存。
 * @param {string} url 资源地址。
 * @return {void}
 */
Laya.LoaderManager.prototype.clearRes = function(url) {};

/**
 * 销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复
 * 相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源
 * 而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁
 * 【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理
 * @param {string} url 图集地址或者texture地址，比如 Loader.clearTextureRes("res/atlas/comp.atlas"); Loader.clearTextureRes("hall/bg.jpg");
 * @return {void}
 */
Laya.LoaderManager.prototype.clearTextureRes = function(url) {};

/**
 * 获取指定资源地址的资源。
 * @param {string} url 资源地址。
 * @return {?} 返回资源。
 */
Laya.LoaderManager.prototype.getRes = function(url) {};

/**
 * 缓存资源。
 * @param {string} url 资源地址。
 * @param {?} data 要缓存的内容。
 * @return {void}
 */
Laya.LoaderManager.prototype.cacheRes = function(url, data) {};

/**
 * 设置资源分组。
 * @param {string} url 资源地址。
 * @param {string} group 分组名
 * @return {void}
 */
Laya.LoaderManager.prototype.setGroup = function(url, group) {};

/**
 * 根据分组清理资源。
 * @param {string} group 分组名
 * @return {void}
 */
Laya.LoaderManager.prototype.clearResByGroup = function(group) {};

/**
 * @param {string} url 资源地址。
 * @param {?} data 要缓存的内容。
 * @return {void}
 */
Laya.LoaderManager.cacheRes = function(url, data) {};

/**
 * 清理当前未完成的加载，所有未加载的内容全部停止加载。
 * @return {void}
 */
Laya.LoaderManager.prototype.clearUnLoaded = function() {};

/**
 * 根据地址集合清理掉未加载的内容
 * @param {!Array<?>} urls 资源地址集合
 * @return {void}
 */
Laya.LoaderManager.prototype.cancelLoadByUrls = function(urls) {};

/**
 * 根据地址清理掉未加载的内容
 * @param {string} url 资源地址
 * @return {void}
 */
Laya.LoaderManager.prototype.cancelLoadByUrl = function(url) {};

/**
 * 解码Texture或者图集
 * @param {!Array<?>} urls texture地址或者图集地址集合
 * @return {void}
 */
Laya.LoaderManager.prototype.decodeBitmaps = function(urls) {};
/**
 * @record
 * @struct
 */
Laya.loadItem = function() {};
/**
 * @record
 * @struct
 */
Laya.createItem = function() {};
/** @type {string} */
Laya.createItem.prototype.url;
/** @type {string} */
Laya.createItem.prototype.type;
/** @type {number} */
Laya.createItem.prototype.priority;
/** @type {string} */
Laya.createItem.prototype.group;
/** @type {!Array<?>} */
Laya.createItem.prototype.propertyParams;
/** @type {!Array<?>} */
Laya.createItem.prototype.constructParams;
/** @type {number} */
Laya.createItem.prototype.progress;
/**
 * @constructor
 * @struct
 */
Laya.LocalStorage = function() {};
/** @type {?} */
Laya.LocalStorage._baseClass;
/** @type {?} */
Laya.LocalStorage.items;
/** @type {boolean} */
Laya.LocalStorage.support;

/**
 * 存储指定键名和键值，字符串类型。
 * @param {string} key 键名。
 * @param {string} value 键值。
 * @return {void}
 */
Laya.LocalStorage.setItem = function(key, value) {};

/**
 * 获取指定键名的值。
 * @param {string} key 键名。
 * @return {string} 字符串型值。
 */
Laya.LocalStorage.getItem = function(key) {};

/**
 * 存储指定键名及其对应的 <code>Object</code> 类型值。
 * @param {string} key 键名。
 * @param {?} value 键值。是 <code>Object</code> 类型，此致会被转化为 JSON 字符串存储。
 * @return {void}
 */
Laya.LocalStorage.setJSON = function(key, value) {};

/**
 * 获取指定键名对应的 <code>Object</code> 类型值。
 * @param {string} key 键名。
 * @return {?} <code>Object</code> 类型值
 */
Laya.LocalStorage.getJSON = function(key) {};

/**
 * 删除指定键名的信息。
 * @param {string} key 键名。
 * @return {void}
 */
Laya.LocalStorage.removeItem = function(key) {};

/**
 * 清除本地存储信息。
 * @return {void}
 */
Laya.LocalStorage.clear = function() {};
/**
 * @constructor
 * @struct
 */
Laya.ResourceVersion = function() {};
/** @type {number} */
Laya.ResourceVersion.FOLDER_VERSION;
/** @type {number} */
Laya.ResourceVersion.FILENAME_VERSION;
/** @type {?} */
Laya.ResourceVersion.manifest;
/** @type {number} */
Laya.ResourceVersion.type;
/** @type {?} */
Laya.ResourceVersion.onManifestLoaded;

/**
 * <p>启用资源版本管理。</p>
 * <p>由于只有发布版本需要资源管理。因此没有资源管理文件时，可以设置manifestFile为null或者不存在的路径。</p>
 * @param {string} manifestFile 清单（json）文件的路径。
 * @param {!Handler} callback 清单（json）文件加载完成后执行。
 * @param {number=} type FOLDER_VERSION为基于文件夹管理方式（老版本IDE默认类型），FILENAME_VERSION为基于文件名映射管理（新版本IDE默认类型
 * @return {void}
 */
Laya.ResourceVersion.enable = function(manifestFile, callback, type) {};

/**
 * 为加载路径添加版本前缀。
 * @param {string} originURL 源路径。
 * @return {string} 格式化后的新路径。
 */
Laya.ResourceVersion.addVersionPrefix = function(originURL) {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.SceneLoader = function() {};
/** @type {?} */
Laya.SceneLoader.LoadableExtensions;
/** @type {?} */
Laya.SceneLoader.No3dLoadTypes;
/** @type {number} */
Laya.SceneLoader.prototype.totalCount;
/** @type {?} */
Laya.SceneLoader.prototype._completeHandler;
/** @type {?} */
Laya.SceneLoader.prototype._toLoadList;
/** @type {?} */
Laya.SceneLoader.prototype._isLoading;
/** @type {?} */
Laya.SceneLoader.prototype._curUrl;

/* TODO: GetAccessor: Laya.leftCount */

/* TODO: GetAccessor: Laya.loadedCount */
/** @type {?} */
Laya.SceneLoader.prototype._addToLoadList;
/** @type {?} */
Laya.SceneLoader.prototype._checkNext;
/** @type {?} */
Laya.SceneLoader.prototype.loadOne;
/** @type {?} */
Laya.SceneLoader.prototype.onOneLoadComplete;

/**
 * @return {void}
 */
Laya.SceneLoader.prototype.reset = function() {};

/**
 * @param {?} url
 * @param {boolean=} is3D
 * @param {boolean=} ifCheck
 * @return {void}
 */
Laya.SceneLoader.prototype.load = function(url, is3D, ifCheck) {};

/**
 * @return {number}
 */
Laya.SceneLoader.prototype.getProgress = function() {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * <p>创建新的 Socket 对象。默认字节序为 Socket.BIG_ENDIAN 。若未指定参数，将创建一个最初处于断开状态的套接字。若指定了有效参数，则尝试连接到指定的主机和端口。</p>
 * @see laya.utils.Byte
 * @param {string=} host 服务器地址。
 * @param {number=} port 服务器端口。
 * @param {function(new:?)=} byteClass 用于接收和发送数据的 Byte 类。如果为 null ，则使用 Byte 类，也可传入 Byte 类的子类。
 * @param {!Array<?>=} protocols 子协议名称。子协议名称字符串，或由多个子协议名称字符串构成的数组
 */
Laya.Socket = function(host, port, byteClass, protocols) {};
/** @type {string} */
Laya.Socket.LITTLE_ENDIAN;
/** @type {string} */
Laya.Socket.BIG_ENDIAN;
/** @type {?} */
Laya.Socket.prototype._socket;
/** @type {?} */
Laya.Socket.prototype._connected;
/** @type {?} */
Laya.Socket.prototype._addInputPosition;
/** @type {?} */
Laya.Socket.prototype._input;
/** @type {?} */
Laya.Socket.prototype._output;
/** @type {boolean} */
Laya.Socket.prototype.disableInput;
/** @type {?} */
Laya.Socket.prototype._byteClass;
/** @type {?} */
Laya.Socket.prototype.protocols;

/* TODO: GetAccessor: Laya.input */

/* TODO: GetAccessor: Laya.output */

/* TODO: GetAccessor: Laya.connected */

/* TODO: GetAccessor: Laya.endian */

/* TODO: SetAccessor: Laya.endian */

/**
 * <p>连接到指定的主机和端口。</p>
 * <p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
 * @param {string} host 服务器地址。
 * @param {number} port 服务器端口。
 * @return {void}
 */
Laya.Socket.prototype.connect = function(host, port) {};

/**
 * <p>连接到指定的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。</p>
 * <p>连接成功派发 Event.OPEN 事件；连接失败派发 Event.ERROR 事件；连接被关闭派发 Event.CLOSE 事件；接收到数据派发 Event.MESSAGE 事件； 除了 Event.MESSAGE 事件参数为数据内容，其他事件参数都是原生的 HTML DOM Event 对象。</p>
 * @param {string} url 要连接的服务端 WebSocket URL。 URL 类似 ws://yourdomain:port。
 * @return {void}
 */
Laya.Socket.prototype.connectByUrl = function(url) {};

/**
 * 清理Socket：关闭Socket链接，关闭事件监听，重置Socket
 * @return {void}
 */
Laya.Socket.prototype.cleanSocket = function() {};

/**
 * 关闭连接。
 * @return {void}
 */
Laya.Socket.prototype.close = function() {};

/**
 * @protected
 * @param {?} e
 * @return {void}
 */
Laya.Socket.prototype._onOpen = function(e) {};

/**
 * @protected
 * @param {?} msg 数据。
 * @return {void}
 */
Laya.Socket.prototype._onMessage = function(msg) {};

/**
 * @protected
 * @param {?} e
 * @return {void}
 */
Laya.Socket.prototype._onClose = function(e) {};

/**
 * @protected
 * @param {?} e
 * @return {void}
 */
Laya.Socket.prototype._onError = function(e) {};

/**
 * 发送数据到服务器。
 * @param {?} data 需要发送的数据，可以是String或者ArrayBuffer。
 * @return {void}
 */
Laya.Socket.prototype.send = function(data) {};

/**
 * 发送缓冲区中的数据到服务器。
 * @return {void}
 */
Laya.Socket.prototype.flush = function() {};
/**
 * @constructor
 * @struct
 */
Laya.TTFLoader = function() {};
/** @type {?} */
Laya.TTFLoader._testString;
/** @type {string} */
Laya.TTFLoader.prototype.fontName;
/** @type {!Handler} */
Laya.TTFLoader.prototype.complete;
/** @type {!Handler} */
Laya.TTFLoader.prototype.err;
/** @type {?} */
Laya.TTFLoader.prototype._fontTxt;
/** @type {?} */
Laya.TTFLoader.prototype._url;
/** @type {?} */
Laya.TTFLoader.prototype._div;
/** @type {?} */
Laya.TTFLoader.prototype._txtWidth;
/** @type {?} */
Laya.TTFLoader.prototype._http;
/** @type {?} */
Laya.TTFLoader.prototype._loadConch;
/** @type {?} */
Laya.TTFLoader.prototype._onHttpLoaded;
/** @type {?} */
Laya.TTFLoader.prototype._clearHttp;
/** @type {?} */
Laya.TTFLoader.prototype._onErr;
/** @type {?} */
Laya.TTFLoader.prototype._complete;
/** @type {?} */
Laya.TTFLoader.prototype._checkComplete;
/** @type {?} */
Laya.TTFLoader.prototype._loadWithFontFace;
/** @type {?} */
Laya.TTFLoader.prototype._createDiv;
/** @type {?} */
Laya.TTFLoader.prototype._loadWithCSS;

/**
 * @param {string} fontPath
 * @return {void}
 */
Laya.TTFLoader.prototype.load = function(fontPath) {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>URL</code> 实例。
 * @param {string} url
 */
Laya.URL = function(url) {};
/** @type {?} */
Laya.URL.version;
/** @type {?} */
Laya.URL.prototype._url;
/** @type {?} */
Laya.URL.prototype._path;
/** @type {boolean} */
Laya.URL.exportSceneToJson;

/* TODO: GetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.path */
/** @type {string} */
Laya.URL.rootPath;

/* TODO: SetAccessor: Laya.basePath */

/* TODO: GetAccessor: Laya.basePath */
/** @type {!Function} */
Laya.URL.customFormat;
/** @type {?} */
Laya.URL._adpteTypeList;

/**
 * 格式化指定的地址并返回。
 * @param {string} url 地址。
 * @return {string} 格式化处理后的地址。
 */
Laya.URL.formatURL = function(url) {};

/**
 * 获取指定 URL 的文件夹路径（不包括文件名）。
 * <p><b>注意：</b>末尾有斜杠（/）。</p>
 * @param {string} url url地址。
 * @return {string} 返回文件夹路径。
 */
Laya.URL.getPath = function(url) {};

/**
 * 获取指定 URL 的文件名。
 * @param {string} url 地址。
 * @return {string} 返回文件名。
 */
Laya.URL.getFileName = function(url) {};

/**
 * @param {string} url
 * @return {string}
 */
Laya.URL.getAdptedFilePath = function(url) {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.WorkerLoader = function() {};
/** @type {!Laya.WorkerLoader} */
Laya.WorkerLoader.I;
/** @type {string} */
Laya.WorkerLoader.workerPath;
/** @type {?} */
Laya.WorkerLoader._preLoadFun;
/** @type {?} */
Laya.WorkerLoader._enable;
/** @type {?} */
Laya.WorkerLoader._tryEnabled;
/** @type {!Worker} */
Laya.WorkerLoader.prototype.worker;
/** @type {boolean} */
Laya.WorkerLoader.prototype._useWorkerLoader;

/* TODO: SetAccessor: Laya.enable */

/* TODO: GetAccessor: Laya.enable */
/** @type {?} */
Laya.WorkerLoader.prototype.workerMessage;
/** @type {?} */
Laya.WorkerLoader.prototype.imageLoaded;

/**
 * 是否支持worker
 * @return {boolean} 是否支持worker
 */
Laya.WorkerLoader.workerSupported = function() {};

/**
 * 尝试启用WorkerLoader,只有第一次调用有效
 * @return {void}
 */
Laya.WorkerLoader.enableWorkerLoader = function() {};

/**
 * 加载图片
 * @param {string} url 图片地址
 * @return {void}
 */
Laya.WorkerLoader.prototype.loadImage = function(url) {};

/**
 * @protected
 * @param {string} url 资源地址。
 * @return {void}
 */
Laya.WorkerLoader.prototype._loadImage = function(url) {};

/**
 * @extends {Laya.EmitterBase}
 * @constructor
 * @struct
 * @param {!Laya.ParticleTemplateBase} _template
 */
Laya.Emitter2D = function(_template) {};
/** @type {!Laya.ParticleSetting} */
Laya.Emitter2D.prototype.setting;
/** @type {?} */
Laya.Emitter2D.prototype._posRange;
/** @type {?} */
Laya.Emitter2D.prototype._canvasTemplate;
/** @type {?} */
Laya.Emitter2D.prototype._emitFun;

/* TODO: SetAccessor: Laya.template */

/* TODO: GetAccessor: Laya.template */

/**
 * @override
 * @return {void}
 */
Laya.Emitter2D.prototype.emit = function() {};

/**
 * @param {number} value
 * @return {number}
 */
Laya.Emitter2D.prototype.getRandom = function(value) {};

/**
 * @return {void}
 */
Laya.Emitter2D.prototype.webGLEmit = function() {};

/**
 * @return {void}
 */
Laya.Emitter2D.prototype.canvasEmit = function() {};
/**
 * @constructor
 * @struct
 */
Laya.EmitterBase = function() {};
/** @type {number} */
Laya.EmitterBase.prototype._frameTime;
/** @type {number} */
Laya.EmitterBase.prototype._emissionRate;
/** @type {number} */
Laya.EmitterBase.prototype._emissionTime;
/** @type {number} */
Laya.EmitterBase.prototype.minEmissionTime;

/* TODO: SetAccessor: Laya.particleTemplate */

/* TODO: SetAccessor: Laya.emissionRate */

/* TODO: GetAccessor: Laya.emissionRate */

/**
 * 开始发射粒子
 * @param {number=} duration 发射持续的时间(秒)
 * @return {void}
 */
Laya.EmitterBase.prototype.start = function(duration) {};

/**
 * 停止发射粒子
 * @return {void}
 */
Laya.EmitterBase.prototype.stop = function() {};

/**
 * 清理当前的活跃粒子
 * @return {void}
 */
Laya.EmitterBase.prototype.clear = function() {};

/**
 * 发射一个粒子
 * @return {void}
 */
Laya.EmitterBase.prototype.emit = function() {};

/**
 * 时钟前进
 * @param {number=} passedTime 前进时间
 * @return {void}
 */
Laya.EmitterBase.prototype.advanceTime = function(passedTime) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个新的 <code>Particle2D</code> 类实例。
 * @param {!Laya.ParticleSetting} setting 粒子配置数据
 */
Laya.Particle2D = function(setting) {};
/** @type {?} */
Laya.Particle2D.prototype._matrix4;
/** @type {?} */
Laya.Particle2D.prototype._particleTemplate;
/** @type {?} */
Laya.Particle2D.prototype._canvasTemplate;
/** @type {?} */
Laya.Particle2D.prototype._emitter;
/** @type {boolean} */
Laya.Particle2D.prototype.autoPlay;
/** @type {?} */
Laya.Particle2D.prototype.tempCmd;

/* TODO: SetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.emitter */
/** @type {?} */
Laya.Particle2D.prototype._loop;

/**
 * 加载粒子文件
 * @param {string} url 粒子文件地址
 * @return {void}
 */
Laya.Particle2D.prototype.load = function(url) {};

/**
 * 设置粒子配置数据
 * @param {!Laya.ParticleSetting} setting
 * @return {void}
 */
Laya.Particle2D.prototype.setParticleSetting = function(setting) {};

/**
 * 播放
 * @return {void}
 */
Laya.Particle2D.prototype.play = function() {};

/**
 * 停止
 * @return {void}
 */
Laya.Particle2D.prototype.stop = function() {};

/**
 * 时钟前进
 * @param {number=} passedTime 时钟前进时间
 * @return {void}
 */
Laya.Particle2D.prototype.advanceTime = function(passedTime) {};

/**
 * @override
 * @param {!Laya.Context} context
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Particle2D.prototype.customRender = function(context, x, y) {};

/**
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Particle2D.prototype.destroy = function(destroyChild) {};

/**
 * @constructor
 * @struct
 */
Laya.ParticleData = function() {};
/** @type {?} */
Laya.ParticleData._tempVelocity;
/** @type {?} */
Laya.ParticleData._tempStartColor;
/** @type {?} */
Laya.ParticleData._tempEndColor;
/** @type {?} */
Laya.ParticleData._tempSizeRotation;
/** @type {?} */
Laya.ParticleData._tempRadius;
/** @type {?} */
Laya.ParticleData._tempRadian;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.position;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.velocity;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.startColor;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.endColor;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.sizeRotation;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.radius;
/** @type {!Float32Array} */
Laya.ParticleData.prototype.radian;
/** @type {number} */
Laya.ParticleData.prototype.durationAddScale;
/** @type {number} */
Laya.ParticleData.prototype.time;

/**
 * @param {!Laya.ParticleSetting} settings
 * @param {!Float32Array} position
 * @param {!Float32Array} velocity
 * @param {number} time
 * @return {!Laya.ParticleData}
 */
Laya.ParticleData.Create = function(settings, position, velocity, time) {};

/**
 * @constructor
 * @struct
 * @param {!Laya.ParticleTemplateBase} templet
 * @param {number} particlesPerSecond
 * @param {!Float32Array} initialPosition
 */
Laya.ParticleEmitter = function(templet, particlesPerSecond, initialPosition) {};
/** @type {?} */
Laya.ParticleEmitter.prototype._templet;
/** @type {?} */
Laya.ParticleEmitter.prototype._timeBetweenParticles;
/** @type {?} */
Laya.ParticleEmitter.prototype._previousPosition;
/** @type {?} */
Laya.ParticleEmitter.prototype._timeLeftOver;
/** @type {?} */
Laya.ParticleEmitter.prototype._tempVelocity;
/** @type {?} */
Laya.ParticleEmitter.prototype._tempPosition;

/**
 * @param {number} elapsedTime
 * @param {!Float32Array} newPosition
 * @return {void}
 */
Laya.ParticleEmitter.prototype.update = function(elapsedTime, newPosition) {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>ParticleSettings</code> 类实例。
 */
Laya.ParticleSetting = function() {};
/** @type {string} */
Laya.ParticleSetting.prototype.textureName;
/** @type {number} */
Laya.ParticleSetting.prototype.textureCount;
/** @type {number} */
Laya.ParticleSetting.prototype.maxPartices;
/** @type {number} */
Laya.ParticleSetting.prototype.duration;
/** @type {number} */
Laya.ParticleSetting.prototype.ageAddScale;
/** @type {number} */
Laya.ParticleSetting.prototype.emitterVelocitySensitivity;
/** @type {number} */
Laya.ParticleSetting.prototype.minStartSize;
/** @type {number} */
Laya.ParticleSetting.prototype.maxStartSize;
/** @type {number} */
Laya.ParticleSetting.prototype.minEndSize;
/** @type {number} */
Laya.ParticleSetting.prototype.maxEndSize;
/** @type {number} */
Laya.ParticleSetting.prototype.minHorizontalVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.maxHorizontalVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.minVerticalVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.maxVerticalVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.endVelocity;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.gravity;
/** @type {number} */
Laya.ParticleSetting.prototype.minRotateSpeed;
/** @type {number} */
Laya.ParticleSetting.prototype.maxRotateSpeed;
/** @type {number} */
Laya.ParticleSetting.prototype.minStartRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.maxStartRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.minEndRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.maxEndRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.minHorizontalStartRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.maxHorizontalStartRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.minVerticalStartRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.maxVerticalStartRadian;
/** @type {boolean} */
Laya.ParticleSetting.prototype.useEndRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.minHorizontalEndRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.maxHorizontalEndRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.minVerticalEndRadian;
/** @type {number} */
Laya.ParticleSetting.prototype.maxVerticalEndRadian;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.minStartColor;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.maxStartColor;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.minEndColor;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.maxEndColor;
/** @type {boolean} */
Laya.ParticleSetting.prototype.colorComponentInter;
/** @type {boolean} */
Laya.ParticleSetting.prototype.disableColor;
/** @type {number} */
Laya.ParticleSetting.prototype.blendState;
/** @type {string} */
Laya.ParticleSetting.prototype.emitterType;
/** @type {number} */
Laya.ParticleSetting.prototype.emissionRate;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.pointEmitterPosition;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.pointEmitterPositionVariance;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.pointEmitterVelocity;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.pointEmitterVelocityAddVariance;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.boxEmitterCenterPosition;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.boxEmitterSize;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.boxEmitterVelocity;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.boxEmitterVelocityAddVariance;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.sphereEmitterCenterPosition;
/** @type {number} */
Laya.ParticleSetting.prototype.sphereEmitterRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.sphereEmitterVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.sphereEmitterVelocityAddVariance;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.ringEmitterCenterPosition;
/** @type {number} */
Laya.ParticleSetting.prototype.ringEmitterRadius;
/** @type {number} */
Laya.ParticleSetting.prototype.ringEmitterVelocity;
/** @type {number} */
Laya.ParticleSetting.prototype.ringEmitterVelocityAddVariance;
/** @type {number} */
Laya.ParticleSetting.prototype.ringEmitterUp;
/** @type {!Float32Array} */
Laya.ParticleSetting.prototype.positionVariance;
/** @type {?} */
Laya.ParticleSetting._defaultSetting;

/**
 * @param {?} setting
 * @return {void}
 */
Laya.ParticleSetting.checkSetting = function(setting) {};

/**
 * @constructor
 * @struct
 * 创建一个新的 <code>ParticleTemplateBase</code> 类实例。
 */
Laya.ParticleTemplateBase = function() {};
/** @type {!Laya.ParticleSetting} */
Laya.ParticleTemplateBase.prototype.settings;
/** @type {!Laya.Texture} */
Laya.ParticleTemplateBase.prototype.texture;

/**
 * 添加一个粒子
 * @param {!Float32Array} position 粒子位置
 * @param {!Float32Array} velocity 粒子速度
 * @return {void}
 */
Laya.ParticleTemplateBase.prototype.addParticleArray = function(position, velocity) {};

/**
 * @extends {Laya.ParticleTemplateBase}
 * @constructor
 * @struct
 * @param {!Laya.ParticleSetting} parSetting
 */
Laya.ParticleTemplateWebGL = function(parSetting) {};
/** @type {!Float32Array} */
Laya.ParticleTemplateWebGL.prototype._vertices;
/** @type {!Laya.MeshParticle2D} */
Laya.ParticleTemplateWebGL.prototype._mesh;
/** @type {?} */
Laya.ParticleTemplateWebGL.prototype._conchMesh;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._floatCountPerVertex;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._firstActiveElement;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._firstNewElement;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._firstFreeElement;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._firstRetiredElement;
/** @type {number} */
Laya.ParticleTemplateWebGL.prototype._drawCounter;
/** @type {?} */
Laya.ParticleTemplateWebGL.prototype.retireActiveParticles;
/** @type {?} */
Laya.ParticleTemplateWebGL.prototype.freeRetiredParticles;

/**
 * @param {!Laya.Context} context
 * @param {number} pos
 * @return {number}
 */
Laya.ParticleTemplateWebGL.prototype.reUse = function(context, pos) {};

/**
 * @protected
 * @return {void}
 */
Laya.ParticleTemplateWebGL.prototype.initialize = function() {};

/**
 * @param {number} elapsedTime
 * @return {void}
 */
Laya.ParticleTemplateWebGL.prototype.update = function(elapsedTime) {};

/**
 * @return {void}
 */
Laya.ParticleTemplateWebGL.prototype.addNewParticlesToVertexBuffer = function() {};

/**
 * @override
 * @param {!Float32Array} position
 * @param {!Float32Array} velocity
 * @return {void}
 */
Laya.ParticleTemplateWebGL.prototype.addParticleArray = function(position, velocity) {};

/**
 * @extends {Laya.Shader}
 * @constructor
 * @struct
 */
Laya.ParticleShader = function() {};
/** @type {string} */
Laya.ParticleShader.vs;
/** @type {string} */
Laya.ParticleShader.ps;
/**
 * @extends {Laya.ColliderBase}
 * @constructor
 * @struct
 */
Laya.BoxCollider = function() {};
/** @type {?} */
Laya.BoxCollider.prototype._x;
/** @type {?} */
Laya.BoxCollider.prototype._y;
/** @type {?} */
Laya.BoxCollider.prototype._width;
/** @type {?} */
Laya.BoxCollider.prototype._height;
/** @type {?} */
Laya.BoxCollider.prototype._setShape;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/**
 * @override
 * @protected
 * @return {?}
 */
Laya.BoxCollider.prototype.getDef = function() {};

/**
 * @override
 * @param {boolean=} re
 * @return {void}
 */
Laya.BoxCollider.prototype.resetShape = function(re) {};
/**
 * @extends {Laya.ColliderBase}
 * @constructor
 * @struct
 */
Laya.ChainCollider = function() {};
/** @type {?} */
Laya.ChainCollider.prototype._x;
/** @type {?} */
Laya.ChainCollider.prototype._y;
/** @type {?} */
Laya.ChainCollider.prototype._points;
/** @type {?} */
Laya.ChainCollider.prototype._loop;
/** @type {?} */
Laya.ChainCollider.prototype._setShape;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.points */

/* TODO: SetAccessor: Laya.points */

/* TODO: GetAccessor: Laya.loop */

/* TODO: SetAccessor: Laya.loop */

/**
 * @override
 * @protected
 * @return {?}
 */
Laya.ChainCollider.prototype.getDef = function() {};
/**
 * @extends {Laya.ColliderBase}
 * @constructor
 * @struct
 */
Laya.CircleCollider = function() {};
/** @type {?} */
Laya.CircleCollider._temp;
/** @type {?} */
Laya.CircleCollider.prototype._x;
/** @type {?} */
Laya.CircleCollider.prototype._y;
/** @type {?} */
Laya.CircleCollider.prototype._radius;
/** @type {?} */
Laya.CircleCollider.prototype._setShape;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.radius */

/* TODO: SetAccessor: Laya.radius */

/**
 * @override
 * @protected
 * @return {?}
 */
Laya.CircleCollider.prototype.getDef = function() {};

/**
 * @override
 * @param {boolean=} re
 * @return {void}
 */
Laya.CircleCollider.prototype.resetShape = function(re) {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.ColliderBase = function() {};
/** @type {?} */
Laya.ColliderBase.prototype._isSensor;
/** @type {?} */
Laya.ColliderBase.prototype._density;
/** @type {?} */
Laya.ColliderBase.prototype._friction;
/** @type {?} */
Laya.ColliderBase.prototype._restitution;
/** @type {string} */
Laya.ColliderBase.prototype.label;
/** @type {?} */
Laya.ColliderBase.prototype._shape;
/** @type {?} */
Laya.ColliderBase.prototype._def;
/** @type {?} */
Laya.ColliderBase.prototype.fixture;
/** @type {!Laya.RigidBody} */
Laya.ColliderBase.prototype.rigidBody;
/** @type {?} */
Laya.ColliderBase.prototype._checkRigidBody;

/* TODO: GetAccessor: Laya.isSensor */

/* TODO: SetAccessor: Laya.isSensor */

/* TODO: GetAccessor: Laya.density */

/* TODO: SetAccessor: Laya.density */

/* TODO: GetAccessor: Laya.friction */

/* TODO: SetAccessor: Laya.friction */

/* TODO: GetAccessor: Laya.restitution */

/* TODO: SetAccessor: Laya.restitution */

/* TODO: GetAccessor: Laya.isSingleton */

/**
 * @protected
 * @return {?}
 */
Laya.ColliderBase.prototype.getDef = function() {};

/**
 * @return {void}
 */
Laya.ColliderBase.prototype.refresh = function() {};

/**
 * @param {boolean=} re
 * @return {void}
 */
Laya.ColliderBase.prototype.resetShape = function(re) {};
/**
 * @constructor
 * @struct
 */
Laya.DestructionListener = function() {};

/**
 * Joint被隐性移除时触发
 * @param {?} params box2d的Joint相关对象
 * @return {void}
 */
Laya.DestructionListener.prototype.SayGoodbyeJoint = function(params) {};

/**
 * Fixtures被隐性移除时触发
 * @param {?} params box2d的Fixtures相关对象
 * @return {void}
 */
Laya.DestructionListener.prototype.SayGoodbyeFixture = function(params) {};

/**
 * ParticleGroup被隐性移除时触发
 * @param {?} params box2d的ParticleGroup相关对象
 * @return {void}
 */
Laya.DestructionListener.prototype.SayGoodbyeParticleGroup = function(params) {};

/**
 * Particle被隐性移除时触发
 * @param {?} params box2d的Particle相关对象
 * @return {void}
 */
Laya.DestructionListener.prototype.SayGoodbyeParticle = function(params) {};
/**
 * @extends {Laya.ColliderBase}
 * @constructor
 * @struct
 */
Laya.EdgeCollider = function() {};
/** @type {?} */
Laya.EdgeCollider.prototype._x;
/** @type {?} */
Laya.EdgeCollider.prototype._y;
/** @type {?} */
Laya.EdgeCollider.prototype._points;
/** @type {?} */
Laya.EdgeCollider.prototype._setShape;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.points */

/* TODO: SetAccessor: Laya.points */

/**
 * @override
 * @protected
 * @return {?}
 */
Laya.EdgeCollider.prototype.getDef = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.DistanceJoint = function() {};
/** @type {?} */
Laya.DistanceJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.DistanceJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.DistanceJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.DistanceJoint.prototype.selfAnchor;
/** @type {!Array<?>} */
Laya.DistanceJoint.prototype.otherAnchor;
/** @type {boolean} */
Laya.DistanceJoint.prototype.collideConnected;
/** @type {?} */
Laya.DistanceJoint.prototype._length;
/** @type {?} */
Laya.DistanceJoint.prototype._maxLength;
/** @type {?} */
Laya.DistanceJoint.prototype._minLength;
/** @type {?} */
Laya.DistanceJoint.prototype._frequency;
/** @type {?} */
Laya.DistanceJoint.prototype._dampingRatio;

/* TODO: GetAccessor: Laya.length */

/* TODO: SetAccessor: Laya.length */

/* TODO: GetAccessor: Laya.minLength */

/* TODO: SetAccessor: Laya.minLength */

/* TODO: GetAccessor: Laya.maxLength */

/* TODO: SetAccessor: Laya.maxLength */

/* TODO: GetAccessor: Laya.frequency */

/* TODO: SetAccessor: Laya.frequency */

/* TODO: GetAccessor: Laya.damping */

/* TODO: SetAccessor: Laya.damping */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.DistanceJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.GearJoint = function() {};
/** @type {?} */
Laya.GearJoint._temp;
/** @type {?} */
Laya.GearJoint.prototype.joint1;
/** @type {?} */
Laya.GearJoint.prototype.joint2;
/** @type {boolean} */
Laya.GearJoint.prototype.collideConnected;
/** @type {?} */
Laya.GearJoint.prototype._ratio;

/* TODO: GetAccessor: Laya.ratio */

/* TODO: SetAccessor: Laya.ratio */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.GearJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.JointBase = function() {};
/** @type {?} */
Laya.JointBase.prototype._joint;

/* TODO: GetAccessor: Laya.joint */

/* TODO: GetAccessor: Laya.isSingleton */

/**
 * @protected
 * @return {void}
 */
Laya.JointBase.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.MotorJoint = function() {};
/** @type {?} */
Laya.MotorJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.MotorJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.MotorJoint.prototype.otherBody;
/** @type {boolean} */
Laya.MotorJoint.prototype.collideConnected;
/** @type {?} */
Laya.MotorJoint.prototype._linearOffset;
/** @type {?} */
Laya.MotorJoint.prototype._angularOffset;
/** @type {?} */
Laya.MotorJoint.prototype._maxForce;
/** @type {?} */
Laya.MotorJoint.prototype._maxTorque;
/** @type {?} */
Laya.MotorJoint.prototype._correctionFactor;

/* TODO: GetAccessor: Laya.linearOffset */

/* TODO: SetAccessor: Laya.linearOffset */

/* TODO: GetAccessor: Laya.angularOffset */

/* TODO: SetAccessor: Laya.angularOffset */

/* TODO: GetAccessor: Laya.maxForce */

/* TODO: SetAccessor: Laya.maxForce */

/* TODO: GetAccessor: Laya.maxTorque */

/* TODO: SetAccessor: Laya.maxTorque */

/* TODO: GetAccessor: Laya.correctionFactor */

/* TODO: SetAccessor: Laya.correctionFactor */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.MotorJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.MouseJoint = function() {};
/** @type {?} */
Laya.MouseJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.MouseJoint.prototype.selfBody;
/** @type {!Array<?>} */
Laya.MouseJoint.prototype.anchor;
/** @type {?} */
Laya.MouseJoint.prototype._maxForce;
/** @type {?} */
Laya.MouseJoint.prototype._frequency;
/** @type {?} */
Laya.MouseJoint.prototype._dampingRatio;
/** @type {?} */
Laya.MouseJoint.prototype.onMouseDown;
/** @type {?} */
Laya.MouseJoint.prototype.onStageMouseUp;
/** @type {?} */
Laya.MouseJoint.prototype.onMouseMove;

/* TODO: GetAccessor: Laya.maxForce */

/* TODO: SetAccessor: Laya.maxForce */

/* TODO: GetAccessor: Laya.frequency */

/* TODO: SetAccessor: Laya.frequency */

/* TODO: GetAccessor: Laya.damping */

/* TODO: SetAccessor: Laya.damping */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.MouseJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.PrismaticJoint = function() {};
/** @type {?} */
Laya.PrismaticJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.PrismaticJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.PrismaticJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.PrismaticJoint.prototype.anchor;
/** @type {!Array<?>} */
Laya.PrismaticJoint.prototype.axis;
/** @type {boolean} */
Laya.PrismaticJoint.prototype.collideConnected;
/** @type {?} */
Laya.PrismaticJoint.prototype._enableMotor;
/** @type {?} */
Laya.PrismaticJoint.prototype._motorSpeed;
/** @type {?} */
Laya.PrismaticJoint.prototype._maxMotorForce;
/** @type {?} */
Laya.PrismaticJoint.prototype._enableLimit;
/** @type {?} */
Laya.PrismaticJoint.prototype._lowerTranslation;
/** @type {?} */
Laya.PrismaticJoint.prototype._upperTranslation;

/* TODO: GetAccessor: Laya.enableMotor */

/* TODO: SetAccessor: Laya.enableMotor */

/* TODO: GetAccessor: Laya.motorSpeed */

/* TODO: SetAccessor: Laya.motorSpeed */

/* TODO: GetAccessor: Laya.maxMotorForce */

/* TODO: SetAccessor: Laya.maxMotorForce */

/* TODO: GetAccessor: Laya.enableLimit */

/* TODO: SetAccessor: Laya.enableLimit */

/* TODO: GetAccessor: Laya.lowerTranslation */

/* TODO: SetAccessor: Laya.lowerTranslation */

/* TODO: GetAccessor: Laya.upperTranslation */

/* TODO: SetAccessor: Laya.upperTranslation */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.PrismaticJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.PulleyJoint = function() {};
/** @type {?} */
Laya.PulleyJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.PulleyJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.PulleyJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.PulleyJoint.prototype.selfAnchor;
/** @type {!Array<?>} */
Laya.PulleyJoint.prototype.otherAnchor;
/** @type {!Array<?>} */
Laya.PulleyJoint.prototype.selfGroundPoint;
/** @type {!Array<?>} */
Laya.PulleyJoint.prototype.otherGroundPoint;
/** @type {number} */
Laya.PulleyJoint.prototype.ratio;
/** @type {boolean} */
Laya.PulleyJoint.prototype.collideConnected;

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.PulleyJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.RevoluteJoint = function() {};
/** @type {?} */
Laya.RevoluteJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.RevoluteJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.RevoluteJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.RevoluteJoint.prototype.anchor;
/** @type {boolean} */
Laya.RevoluteJoint.prototype.collideConnected;
/** @type {?} */
Laya.RevoluteJoint.prototype._enableMotor;
/** @type {?} */
Laya.RevoluteJoint.prototype._motorSpeed;
/** @type {?} */
Laya.RevoluteJoint.prototype._maxMotorTorque;
/** @type {?} */
Laya.RevoluteJoint.prototype._enableLimit;
/** @type {?} */
Laya.RevoluteJoint.prototype._lowerAngle;
/** @type {?} */
Laya.RevoluteJoint.prototype._upperAngle;

/* TODO: GetAccessor: Laya.enableMotor */

/* TODO: SetAccessor: Laya.enableMotor */

/* TODO: GetAccessor: Laya.motorSpeed */

/* TODO: SetAccessor: Laya.motorSpeed */

/* TODO: GetAccessor: Laya.maxMotorTorque */

/* TODO: SetAccessor: Laya.maxMotorTorque */

/* TODO: GetAccessor: Laya.enableLimit */

/* TODO: SetAccessor: Laya.enableLimit */

/* TODO: GetAccessor: Laya.lowerAngle */

/* TODO: SetAccessor: Laya.lowerAngle */

/* TODO: GetAccessor: Laya.upperAngle */

/* TODO: SetAccessor: Laya.upperAngle */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.RevoluteJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.WeldJoint = function() {};
/** @type {?} */
Laya.WeldJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.WeldJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.WeldJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.WeldJoint.prototype.anchor;
/** @type {boolean} */
Laya.WeldJoint.prototype.collideConnected;
/** @type {?} */
Laya.WeldJoint.prototype._frequency;
/** @type {?} */
Laya.WeldJoint.prototype._dampingRatio;

/* TODO: GetAccessor: Laya.frequency */

/* TODO: SetAccessor: Laya.frequency */

/* TODO: GetAccessor: Laya.damping */

/* TODO: SetAccessor: Laya.damping */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.WeldJoint.prototype._createJoint = function() {};
/**
 * @extends {Laya.JointBase}
 * @constructor
 * @struct
 */
Laya.WheelJoint = function() {};
/** @type {?} */
Laya.WheelJoint._temp;
/** @type {!Laya.RigidBody} */
Laya.WheelJoint.prototype.selfBody;
/** @type {!Laya.RigidBody} */
Laya.WheelJoint.prototype.otherBody;
/** @type {!Array<?>} */
Laya.WheelJoint.prototype.anchor;
/** @type {boolean} */
Laya.WheelJoint.prototype.collideConnected;
/** @type {!Array<?>} */
Laya.WheelJoint.prototype.axis;
/** @type {?} */
Laya.WheelJoint.prototype._frequency;
/** @type {?} */
Laya.WheelJoint.prototype._dampingRatio;
/** @type {?} */
Laya.WheelJoint.prototype._enableMotor;
/** @type {?} */
Laya.WheelJoint.prototype._motorSpeed;
/** @type {?} */
Laya.WheelJoint.prototype._maxMotorTorque;
/** @type {?} */
Laya.WheelJoint.prototype._enableLimit;
/** @type {?} */
Laya.WheelJoint.prototype._lowerTranslation;
/** @type {?} */
Laya.WheelJoint.prototype._upperTranslation;

/* TODO: GetAccessor: Laya.frequency */

/* TODO: SetAccessor: Laya.frequency */

/* TODO: GetAccessor: Laya.damping */

/* TODO: SetAccessor: Laya.damping */

/* TODO: GetAccessor: Laya.enableMotor */

/* TODO: SetAccessor: Laya.enableMotor */

/* TODO: GetAccessor: Laya.motorSpeed */

/* TODO: SetAccessor: Laya.motorSpeed */

/* TODO: GetAccessor: Laya.maxMotorTorque */

/* TODO: SetAccessor: Laya.maxMotorTorque */

/* TODO: GetAccessor: Laya.enableLimit */

/* TODO: SetAccessor: Laya.enableLimit */

/* TODO: GetAccessor: Laya.lowerTranslation */

/* TODO: SetAccessor: Laya.lowerTranslation */

/* TODO: GetAccessor: Laya.upperTranslation */

/* TODO: SetAccessor: Laya.upperTranslation */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.WheelJoint.prototype._createJoint = function() {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.Physics = function() {};
/** @type {number} */
Laya.Physics.PIXEL_RATIO;
/** @type {?} */
Laya.Physics._I;
/** @type {?} */
Laya.Physics.prototype.box2d;
/** @type {?} */
Laya.Physics.prototype.world;
/** @type {number} */
Laya.Physics.prototype.velocityIterations;
/** @type {number} */
Laya.Physics.prototype.positionIterations;
/** @type {?} */
Laya.Physics.prototype._enabled;
/** @type {?} */
Laya.Physics.prototype._worldRoot;
/** @type {?} */
Laya.Physics.prototype._emptyBody;
/** @type {!Array<?>} */
Laya.Physics.prototype._eventList;

/* TODO: GetAccessor: Laya.I */
/** @type {?} */
Laya.Physics.prototype._update;
/** @type {?} */
Laya.Physics.prototype._sendEvent;

/* TODO: GetAccessor: Laya.allowSleeping */

/* TODO: SetAccessor: Laya.allowSleeping */

/* TODO: GetAccessor: Laya.gravity */

/* TODO: SetAccessor: Laya.gravity */

/* TODO: GetAccessor: Laya.worldRoot */

/* TODO: SetAccessor: Laya.worldRoot */

/**
 * 开启物理世界
 * options值参考如下：
 * allowSleeping:true,
 * gravity:10,
 * customUpdate:false 自己控制物理更新时机，自己调用Physics.update
 * @param {?=} options
 * @return {void}
 */
Laya.Physics.enable = function(options) {};

/**
 * 开启物理世界
 * options值参考如下：
 * allowSleeping:true,
 * gravity:10,
 * customUpdate:false 自己控制物理更新时机，自己调用Physics.update
 * @param {?=} options
 * @return {void}
 */
Laya.Physics.prototype.start = function(options) {};

/**
 * @param {?} def
 * @return {?}
 */
Laya.Physics.prototype._createBody = function(def) {};

/**
 * @param {?} body
 * @return {void}
 */
Laya.Physics.prototype._removeBody = function(body) {};

/**
 * @param {?} def
 * @return {?}
 */
Laya.Physics.prototype._createJoint = function(def) {};

/**
 * @param {?} joint
 * @return {void}
 */
Laya.Physics.prototype._removeJoint = function(joint) {};

/**
 * 停止物理世界
 * @return {void}
 */
Laya.Physics.prototype.stop = function() {};

/**
 * 获得刚体总数量
 * @return {number}
 */
Laya.Physics.prototype.getBodyCount = function() {};

/**
 * 获得碰撞总数量
 * @return {number}
 */
Laya.Physics.prototype.getContactCount = function() {};

/**
 * 获得关节总数量
 * @return {number}
 */
Laya.Physics.prototype.getJointCount = function() {};

/**
 * 设定 worldRoot 后，手动触发物理世界更新
 * @return {void}
 */
Laya.Physics.prototype.updatePhysicsByWorldRoot = function() {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
Laya.PhysicsDebugDraw = function() {};
/** @type {number} */
Laya.PhysicsDebugDraw.prototype.m_drawFlags;
/** @type {?} */
Laya.PhysicsDebugDraw.box2d;
/** @type {?} */
Laya.PhysicsDebugDraw.DrawString_s_color;
/** @type {?} */
Laya.PhysicsDebugDraw.DrawStringWorld_s_p;
/** @type {?} */
Laya.PhysicsDebugDraw.DrawStringWorld_s_cc;
/** @type {?} */
Laya.PhysicsDebugDraw.DrawStringWorld_s_color;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype.world;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype._camera;
/** @type {?} */
Laya.PhysicsDebugDraw._canvas;
/** @type {?} */
Laya.PhysicsDebugDraw._inited;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype._mG;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype._textSp;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype._textG;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype.lineWidth;
/** @type {?} */
Laya.PhysicsDebugDraw.prototype._renderToGraphic;
/** @type {!Laya.PhysicsDebugDraw} */
Laya.PhysicsDebugDraw.I;

/**
 * @return {void}
 */
Laya.PhysicsDebugDraw.init = function() {};

/**
 * @override
 * @param {!Laya.Context} ctx
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.render = function(ctx, x, y) {};

/**
 * @param {number} flags
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.SetFlags = function(flags) {};

/**
 * @return {number}
 */
Laya.PhysicsDebugDraw.prototype.GetFlags = function() {};

/**
 * @param {number} flags
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.AppendFlags = function(flags) {};

/**
 * @param {?} flags
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.ClearFlags = function(flags) {};

/**
 * @param {?} xf
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.PushTransform = function(xf) {};

/**
 * @param {?} xf
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.PopTransform = function(xf) {};

/**
 * @param {?} vertices
 * @param {?} vertexCount
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawPolygon = function(vertices, vertexCount, color) {};

/**
 * @param {?} vertices
 * @param {?} vertexCount
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {};

/**
 * @param {?} center
 * @param {?} radius
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawCircle = function(center, radius, color) {};

/**
 * @param {?} center
 * @param {?} radius
 * @param {?} axis
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawSolidCircle = function(center, radius, axis, color) {};

/**
 * @param {?} centers
 * @param {?} radius
 * @param {?} colors
 * @param {?} count
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawParticles = function(centers, radius, colors, count) {};

/**
 * @param {?} p1
 * @param {?} p2
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawSegment = function(p1, p2, color) {};

/**
 * @param {?} xf
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawTransform = function(xf) {};

/**
 * @param {?} p
 * @param {?} size
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawPoint = function(p, size, color) {};

/**
 * @param {?} x
 * @param {?} y
 * @param {?} message
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawString = function(x, y, message) {};

/**
 * @param {?} x
 * @param {?} y
 * @param {?} message
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawStringWorld = function(x, y, message) {};

/**
 * @param {?} aabb
 * @param {?} color
 * @return {void}
 */
Laya.PhysicsDebugDraw.prototype.DrawAABB = function(aabb, color) {};

/**
 * 激活物理辅助线
 * @param {number=} flags 位标记值，其值是AND的结果，其值有-1:显示形状，2:显示关节，4:显示AABB包围盒,8:显示broad-phase pairs,16:显示质心
 * @return {!Laya.PhysicsDebugDraw} 返回一个Sprite对象，本对象用来显示物理辅助线
 */
Laya.PhysicsDebugDraw.enable = function(flags) {};
/**
 * @extends {Laya.ColliderBase}
 * @constructor
 * @struct
 */
Laya.PolygonCollider = function() {};
/** @type {?} */
Laya.PolygonCollider.prototype._x;
/** @type {?} */
Laya.PolygonCollider.prototype._y;
/** @type {?} */
Laya.PolygonCollider.prototype._points;
/** @type {?} */
Laya.PolygonCollider.prototype._setShape;

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.y */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.points */

/* TODO: SetAccessor: Laya.points */

/**
 * @override
 * @protected
 * @return {?}
 */
Laya.PolygonCollider.prototype.getDef = function() {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.RigidBody = function() {};
/** @type {string} */
Laya.RigidBody.prototype._type;
/** @type {boolean} */
Laya.RigidBody.prototype._allowSleep;
/** @type {number} */
Laya.RigidBody.prototype._angularVelocity;
/** @type {number} */
Laya.RigidBody.prototype._angularDamping;
/** @type {?} */
Laya.RigidBody.prototype._linearVelocity;
/** @type {number} */
Laya.RigidBody.prototype._linearDamping;
/** @type {boolean} */
Laya.RigidBody.prototype._bullet;
/** @type {boolean} */
Laya.RigidBody.prototype._allowRotation;
/** @type {number} */
Laya.RigidBody.prototype._gravityScale;
/** @type {number} */
Laya.RigidBody.prototype.group;
/** @type {number} */
Laya.RigidBody.prototype.category;
/** @type {number} */
Laya.RigidBody.prototype.mask;
/** @type {string} */
Laya.RigidBody.prototype.label;
/** @type {?} */
Laya.RigidBody.prototype._body;
/** @type {?} */
Laya.RigidBody.prototype._createBody;
/** @type {?} */
Laya.RigidBody.prototype.accessGetSetFunc;
/** @type {?} */
Laya.RigidBody.prototype.resetCollider;
/** @type {?} */
Laya.RigidBody.prototype._sysPhysicToNode;
/** @type {?} */
Laya.RigidBody.prototype._sysNodeToPhysic;
/** @type {?} */
Laya.RigidBody.prototype._sysPosToPhysic;
/** @type {?} */
Laya.RigidBody.prototype._overSet;

/* TODO: GetAccessor: Laya.body */

/* TODO: GetAccessor: Laya.type */

/* TODO: SetAccessor: Laya.type */

/* TODO: GetAccessor: Laya.gravityScale */

/* TODO: SetAccessor: Laya.gravityScale */

/* TODO: GetAccessor: Laya.allowRotation */

/* TODO: SetAccessor: Laya.allowRotation */

/* TODO: GetAccessor: Laya.allowSleep */

/* TODO: SetAccessor: Laya.allowSleep */

/* TODO: GetAccessor: Laya.angularDamping */

/* TODO: SetAccessor: Laya.angularDamping */

/* TODO: GetAccessor: Laya.angularVelocity */

/* TODO: SetAccessor: Laya.angularVelocity */

/* TODO: GetAccessor: Laya.linearDamping */

/* TODO: SetAccessor: Laya.linearDamping */

/* TODO: GetAccessor: Laya.linearVelocity */

/* TODO: SetAccessor: Laya.linearVelocity */

/* TODO: GetAccessor: Laya.bullet */

/* TODO: SetAccessor: Laya.bullet */

/**
 * 获得原始body对象
 * @return {?}
 */
Laya.RigidBody.prototype.getBody = function() {};

/**
 * @return {?}
 */
Laya.RigidBody.prototype._getOriBody = function() {};

/**
 * 对刚体施加力
 * @param {?} position 施加力的点，如{x:100,y:100}，全局坐标
 * @param {?} force 施加的力，如{x:0.1,y:0.1}
 * @return {void}
 */
Laya.RigidBody.prototype.applyForce = function(position, force) {};

/**
 * 从中心点对刚体施加力，防止对象旋转
 * @param {?} force 施加的力，如{x:0.1,y:0.1}
 * @return {void}
 */
Laya.RigidBody.prototype.applyForceToCenter = function(force) {};

/**
 * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度
 * @param {?} position 施加力的点，如{x:100,y:100}，全局坐标
 * @param {?} impulse 施加的速度冲量，如{x:0.1,y:0.1}
 * @return {void}
 */
Laya.RigidBody.prototype.applyLinearImpulse = function(position, impulse) {};

/**
 * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度
 * @param {?} impulse 施加的速度冲量，如{x:0.1,y:0.1}
 * @return {void}
 */
Laya.RigidBody.prototype.applyLinearImpulseToCenter = function(impulse) {};

/**
 * 对刚体施加扭矩，使其旋转
 * @param {number} torque 施加的扭矩
 * @return {void}
 */
Laya.RigidBody.prototype.applyTorque = function(torque) {};

/**
 * 设置速度，比如{x:10,y:10}
 * @param {?} velocity
 * @return {void}
 */
Laya.RigidBody.prototype.setVelocity = function(velocity) {};

/**
 * 设置角度
 * @param {?} value 单位为弧度
 * @return {void}
 */
Laya.RigidBody.prototype.setAngle = function(value) {};

/**
 * 获得刚体质量
 * @return {number}
 */
Laya.RigidBody.prototype.getMass = function() {};

/**
 * 获得质心的相对节点0,0点的位置偏移
 * @return {?}
 */
Laya.RigidBody.prototype.getCenter = function() {};

/**
 * 获得质心的世界坐标，相对于Physics.I.worldRoot节点
 * @return {?}
 */
Laya.RigidBody.prototype.getWorldCenter = function() {};

/**
 * @constructor
 * @struct
 * 初始化引擎。
 * @param {number} width 游戏窗口宽度。
 * @param {number} height 游戏窗口高度。
 * @param {!Laya.HTMLCanvas} mainCanv
 */
Laya.Render = function(width, height, mainCanv) {};
/** @type {boolean} */
Laya.Render.supportWebGLPlusAnimation;
/** @type {boolean} */
Laya.Render.supportWebGLPlusRendering;
/** @type {boolean} */
Laya.Render.isConchApp;
/** @type {boolean} */
Laya.Render.is3DMode;
/** @type {?} */
Laya.Render.prototype._timeId;
/** @type {?} */
Laya.Render.prototype._onVisibilitychange;
/** @type {?} */
Laya.Render.prototype._replaceWebglcall;
/** @type {?} */
Laya.Render.prototype._enterFrame;

/* TODO: GetAccessor: Laya.context */

/* TODO: GetAccessor: Laya.canvas */

/**
 * @param {!Laya.HTMLCanvas} canvas
 * @param {number} w
 * @param {number} h
 * @return {boolean}
 */
Laya.Render.prototype.initRender = function(canvas, w, h) {};
/**
 * @constructor
 * @struct
 */
Laya.RenderInfo = function() {};
/** @type {number} */
Laya.RenderInfo.loopStTm;
/** @type {number} */
Laya.RenderInfo.loopCount;
/**
 * @record
 * @struct
 */
Laya._RenderFunction = function() {};

/* TODO: CallSignature: Laya */

/**
 * @constructor
 * @struct
 * @param {number} type
 * @param {!Laya.RenderSprite} next
 */
Laya.RenderSprite = function(type, next) {};
/** @type {number} */
Laya.RenderSprite.INIT;
/** @type {!Array<!Laya.RenderSprite>} */
Laya.RenderSprite.renders;
/** @type {!Laya.RenderSprite} */
Laya.RenderSprite.NORENDER;
/** @type {?} */
Laya.RenderSprite._initRenderFun;
/** @type {?} */
Laya.RenderSprite._getTypeRender;
/** @type {!Array<?>} */
Laya.RenderSprite.tempUV;

/**
 * @protected
 * @param {number} type
 * @return {void}
 */
Laya.RenderSprite.prototype.onCreate = function(type) {};

/**
 * @param {!Laya.Context} ctx
 * @param {!Laya.RenderTexture2D} rt
 * @param {number} w
 * @param {number} h
 * @return {void}
 */
Laya.RenderSprite.tmpTarget = function(ctx, rt, w, h) {};

/**
 * @param {!Laya.RenderTexture2D} rt
 * @return {void}
 */
Laya.RenderSprite.recycleTarget = function(rt) {};

/**
 * @param {string} blendMode
 * @return {void}
 */
Laya.RenderSprite.setBlendMode = function(blendMode) {};

/**
 * @extends {Laya.Bitmap}
 * @constructor
 * @struct
 * 创建一个 <code>BaseTexture</code> 实例。
 * @param {number} format
 * @param {boolean} mipMap
 */
Laya.BaseTexture = function(format, mipMap) {};

/* TODO: GetAccessor: Laya.mipmap */

/* TODO: GetAccessor: Laya.format */

/* TODO: GetAccessor: Laya.wrapModeU */

/* TODO: SetAccessor: Laya.wrapModeU */

/* TODO: GetAccessor: Laya.wrapModeV */

/* TODO: SetAccessor: Laya.wrapModeV */

/* TODO: GetAccessor: Laya.filterMode */

/* TODO: SetAccessor: Laya.filterMode */

/* TODO: GetAccessor: Laya.anisoLevel */

/* TODO: SetAccessor: Laya.anisoLevel */

/* TODO: GetAccessor: Laya.mipmapCount */

/* TODO: SetAccessor: Laya.mipmapCount */

/* TODO: GetAccessor: Laya.defaulteTexture */
/** @type {number} */
Laya.BaseTexture.FORMAT_R8G8B8;
/** @type {number} */
Laya.BaseTexture.FORMAT_R8G8B8A8;
/** @type {number} */
Laya.BaseTexture.FORMAT_ALPHA8;
/** @type {number} */
Laya.BaseTexture.FORMAT_DXT1;
/** @type {number} */
Laya.BaseTexture.FORMAT_DXT5;
/** @type {number} */
Laya.BaseTexture.FORMAT_ETC1RGB;
/** @type {number} */
Laya.BaseTexture.FORMAT_PVRTCRGB_2BPPV;
/** @type {number} */
Laya.BaseTexture.FORMAT_PVRTCRGBA_2BPPV;
/** @type {number} */
Laya.BaseTexture.FORMAT_PVRTCRGB_4BPPV;
/** @type {number} */
Laya.BaseTexture.FORMAT_PVRTCRGBA_4BPPV;
/** @type {number} */
Laya.BaseTexture.RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT;
/** @type {number} */
Laya.BaseTexture.FORMAT_R32G32B32A32;
/** @type {number} */
Laya.BaseTexture.FORMAT_DEPTH_16;
/** @type {number} */
Laya.BaseTexture.FORMAT_STENCIL_8;
/** @type {number} */
Laya.BaseTexture.FORMAT_DEPTHSTENCIL_16_8;
/** @type {number} */
Laya.BaseTexture.FORMAT_DEPTHSTENCIL_NONE;
/** @type {number} */
Laya.BaseTexture.FILTERMODE_POINT;
/** @type {number} */
Laya.BaseTexture.FILTERMODE_BILINEAR;
/** @type {number} */
Laya.BaseTexture.FILTERMODE_TRILINEAR;
/** @type {number} */
Laya.BaseTexture.WARPMODE_REPEAT;
/** @type {number} */
Laya.BaseTexture.WARPMODE_CLAMP;

/**
 * 处理资源
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.BaseTexture.prototype._disposeResource = function() {};

/**
 * 通过基础数据生成mipMap。
 * @return {void}
 */
Laya.BaseTexture.prototype.generateMipmap = function() {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 * 创建一个 <code>Bitmap</code> 实例。
 */
Laya.Bitmap = function() {};
/** @type {number} */
Laya.Bitmap.prototype._width;
/** @type {number} */
Laya.Bitmap.prototype._height;

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/**
 * @constructor
 * @struct
 */
Laya.Context = function() {};
/** @type {number} */
Laya.Context.ENUM_TEXTALIGN_DEFAULT;
/** @type {number} */
Laya.Context.ENUM_TEXTALIGN_CENTER;
/** @type {number} */
Laya.Context.ENUM_TEXTALIGN_RIGHT;
/** @type {number} */
Laya.Context._SUBMITVBSIZE;
/** @type {number} */
Laya.Context._MAXSIZE;
/** @type {?} */
Laya.Context._MAXVERTNUM;
/** @type {!Laya.Rectangle} */
Laya.Context.MAXCLIPRECT;
/** @type {number} */
Laya.Context._COUNT;
/** @type {?} */
Laya.Context.SEGNUM;
/** @type {?} */
Laya.Context._contextcount;
/** @type {?} */
Laya.Context.prototype._drawTexToDrawTri_Vert;
/** @type {?} */
Laya.Context.prototype._drawTexToDrawTri_Index;
/** @type {?} */
Laya.Context.prototype._tempUV;
/** @type {?} */
Laya.Context.prototype._drawTriUseAbsMatrix;

/* TODO: GetAccessor: Laya.lineJoin */

/* TODO: SetAccessor: Laya.lineJoin */

/* TODO: GetAccessor: Laya.lineCap */

/* TODO: SetAccessor: Laya.lineCap */

/* TODO: GetAccessor: Laya.miterLimit */

/* TODO: SetAccessor: Laya.miterLimit */
/** @type {?} */
Laya.Context.prototype._fillAndStroke;
/** @type {number} */
Laya.Context.PI2;
/** @type {?} */
Laya.Context.prototype._other;
/** @type {?} */
Laya.Context.prototype._renderNextSubmitIndex;
/** @type {?} */
Laya.Context.prototype._path;
/** @type {?} */
Laya.Context.prototype._width;
/** @type {?} */
Laya.Context.prototype._height;
/** @type {?} */
Laya.Context.prototype._renderCount;
/** @type {!Array<?>} */
Laya.Context.prototype.meshlist;
/** @type {?} */
Laya.Context.prototype._transedPoints;
/** @type {?} */
Laya.Context.prototype._temp4Points;
/** @type {?} */
Laya.Context.prototype._clipID_Gen;
/** @type {?} */
Laya.Context.prototype._lastMat_a;
/** @type {?} */
Laya.Context.prototype._lastMat_b;
/** @type {?} */
Laya.Context.prototype._lastMat_c;
/** @type {?} */
Laya.Context.prototype._lastMat_d;
/** @type {!Laya.Sprite} */
Laya.Context.prototype.sprite;
/** @type {?} */
Laya.Context.prototype._fillColor;
/** @type {?} */
Laya.Context.prototype._flushCnt;
/** @type {?} */
Laya.Context.prototype.defTexture;
/** @type {boolean} */
Laya.Context.prototype.drawTexAlign;
/** @type {boolean} */
Laya.Context.prototype.isMain;
/** @type {?} */
Laya.Context.prototype._releaseMem;

/* TODO: SetAccessor: Laya.asBitmap */

/* TODO: SetAccessor: Laya.fillStyle */

/* TODO: GetAccessor: Laya.fillStyle */

/* TODO: SetAccessor: Laya.globalAlpha */

/* TODO: GetAccessor: Laya.globalAlpha */

/* TODO: SetAccessor: Laya.textAlign */

/* TODO: GetAccessor: Laya.textAlign */

/* TODO: SetAccessor: Laya.textBaseline */

/* TODO: GetAccessor: Laya.textBaseline */

/* TODO: SetAccessor: Laya.globalCompositeOperation */

/* TODO: GetAccessor: Laya.globalCompositeOperation */

/* TODO: SetAccessor: Laya.strokeStyle */

/* TODO: GetAccessor: Laya.strokeStyle */

/* TODO: SetAccessor: Laya.lineWidth */

/* TODO: GetAccessor: Laya.lineWidth */

/* TODO: SetAccessor: Laya.font */
/** @type {?} */
Laya.Context.prototype._fillRect;
/** @type {?} */
Laya.Context.prototype._drawTextureAddSubmit;
/** @type {?} */
Laya.Context.prototype.isSameClipInfo;
/** @type {?} */
Laya.Context.prototype._repaintSprite;
/** @type {?} */
Laya.Context.prototype._flushToTarget;
/** @type {?} */
Laya.Context.prototype.addVGSubmit;
/** @type {?} */
Laya.Context.prototype._getPath;

/* TODO: GetAccessor: Laya.canvas */
/** @type {?} */
Laya.Context.tmpuv1;
/** @type {?} */
Laya.Context.prototype._fillTexture_h;
/** @type {?} */
Laya.Context.prototype._fillTexture_v;
/** @type {?} */
Laya.Context.tmpUV;
/** @type {?} */
Laya.Context.tmpUVRect;

/**
 * @return {void}
 */
Laya.Context.__init__ = function() {};

/**
 * @param {...?} args
 * @return {void}
 */
Laya.Context.prototype.drawImage = function(args) {};

/**
 * @param {...?} args
 * @return {?}
 */
Laya.Context.prototype.getImageData = function(args) {};

/**
 * @param {string} text
 * @return {?}
 */
Laya.Context.prototype.measureText = function(text) {};

/**
 * @param {...?} args
 * @return {void}
 */
Laya.Context.prototype.setTransform = function(args) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {void}
 */
Laya.Context.prototype.$transform = function(a, b, c, d, tx, ty) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.Context.prototype.clearRect = function(x, y, width, height) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} pivotX
 * @param {number} pivotY
 * @param {!Laya.Matrix} m
 * @param {!Array<?>} args2
 * @return {void}
 */
Laya.Context.prototype.drawTexture2 = function(x, y, pivotX, pivotY, m, args2) {};

/**
 * @param {!Laya.Matrix} matrix
 * @param {number} tx
 * @param {number} ty
 * @return {void}
 */
Laya.Context.prototype.transformByMatrix = function(matrix, tx, ty) {};

/**
 * @param {!Laya.Matrix} matrix
 * @return {void}
 */
Laya.Context.prototype.saveTransform = function(matrix) {};

/**
 * @param {!Laya.Matrix} matrix
 * @return {void}
 */
Laya.Context.prototype.restoreTransform = function(matrix) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {?} fillColor
 * @param {?} lineColor
 * @param {number} lineWidth
 * @return {void}
 */
Laya.Context.prototype.drawRect = function(x, y, width, height, fillColor, lineColor, lineWidth) {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Context.prototype.alpha = function(value) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} points
 * @param {?} lineColor
 * @param {number} lineWidth
 * @return {void}
 */
Laya.Context.prototype.drawCurves = function(x, y, points, lineColor, lineWidth) {};

/**
 * @return {void}
 */
Laya.Context.set2DRenderConfig = function() {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {void}
 */
Laya.Context.prototype.clearBG = function(r, g, b, a) {};

/**
 * 释放所有资源
 * @param {boolean=} keepRT 是否保留rendertarget
 * @return {void}
 */
Laya.Context.prototype.destroy = function(keepRT) {};

/**
 * @return {void}
 */
Laya.Context.prototype.clear = function() {};

/**
 * 设置ctx的size，这个不允许直接设置，必须是canvas调过来的。所以这个函数里也不用考虑canvas相关的东西
 * @param {number} w
 * @param {number} h
 * @return {void}
 */
Laya.Context.prototype.size = function(w, h) {};

/**
 * 获得当前矩阵的缩放值
 * 避免每次都计算getScaleX
 * @return {number}
 */
Laya.Context.prototype.getMatScaleX = function() {};

/**
 * @return {number}
 */
Laya.Context.prototype.getMatScaleY = function() {};

/**
 * @param {number} color
 * @return {void}
 */
Laya.Context.prototype.setFillColor = function(color) {};

/**
 * @return {number}
 */
Laya.Context.prototype.getFillColor = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Context.prototype.translate = function(x, y) {};

/**
 * @return {void}
 */
Laya.Context.prototype.save = function() {};

/**
 * @return {void}
 */
Laya.Context.prototype.restore = function() {};

/**
 * @param {(string|!Laya.WordText)} txt
 * @param {number} x
 * @param {number} y
 * @param {string} fontStr
 * @param {string} color
 * @param {string} align
 * @param {number=} lineWidth
 * @param {string=} borderColor
 * @return {void}
 */
Laya.Context.prototype.fillText = function(txt, x, y, fontStr, color, align, lineWidth, borderColor) {};

/**
 * @param {(string|!Laya.WordText)} text
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @param {string} textAlign
 * @return {void}
 */
Laya.Context.prototype.drawText = function(text, x, y, font, color, textAlign) {};

/**
 * @param {!Array<!Laya.HTMLChar>} words
 * @param {number} x
 * @param {number} y
 * @param {string} fontStr
 * @param {string} color
 * @return {void}
 */
Laya.Context.prototype.fillWords = function(words, x, y, fontStr, color) {};

/**
 * @param {(string|!Laya.WordText)} text
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @param {number} lineWidth
 * @param {string} textAlign
 * @return {void}
 */
Laya.Context.prototype.strokeWord = function(text, x, y, font, color, lineWidth, textAlign) {};

/**
 * @param {(string|!Laya.WordText)} txt
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @param {string} borderColor
 * @param {number} lineWidth
 * @param {string} textAlign
 * @return {void}
 */
Laya.Context.prototype.fillBorderText = function(txt, x, y, font, color, borderColor, lineWidth, textAlign) {};

/**
 * @param {!Array<!Laya.HTMLChar>} words
 * @param {number} x
 * @param {number} y
 * @param {string} font
 * @param {string} color
 * @param {string} borderColor
 * @param {number} lineWidth
 * @return {void}
 */
Laya.Context.prototype.fillBorderWords = function(words, x, y, font, color, borderColor, lineWidth) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {?} fillStyle
 * @return {void}
 */
Laya.Context.prototype.fillRect = function(x, y, width, height, fillStyle) {};

/**
 * @param {!Laya.Texture} texture
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {string} type
 * @param {!Laya.Point} offset
 * @param {?} other
 * @return {void}
 */
Laya.Context.prototype.fillTexture = function(texture, x, y, width, height, type, offset, other) {};

/**
 * 反正只支持一种filter，就不要叫setFilter了，直接叫setColorFilter
 * @param {!Laya.ColorFilter} filter
 * @return {void}
 */
Laya.Context.prototype.setColorFilter = function(filter) {};

/**
 * @param {!Laya.Texture} tex
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.Context.prototype.drawTexture = function(tex, x, y, width, height) {};

/**
 * @param {!Laya.Texture} tex
 * @param {!Array<?>} pos
 * @param {number} tx
 * @param {number} ty
 * @return {void}
 */
Laya.Context.prototype.drawTextures = function(tex, pos, tx, ty) {};

/**
 * @return {void}
 */
Laya.Context.prototype.submitDebugger = function() {};

/**
 * @param {boolean} enable
 * @return {boolean}
 */
Laya.Context.prototype.drawCallOptimize = function(enable) {};

/**
 * 转换4个顶点。为了效率这个不做任何检查。需要调用者的配合。
 * @param {!Array<?>} a 输入。8个元素表示4个点
 * @param {!Laya.Matrix} m
 * @param {!Array<?>} out 输出
 * @return {void}
 */
Laya.Context.prototype.transform4Points = function(a, m, out) {};

/**
 * pt所描述的多边形完全在clip外边，整个被裁掉了
 * @param {!Array<?>} pt
 * @return {boolean}
 */
Laya.Context.prototype.clipedOff = function(pt) {};

/**
 * 应用当前矩阵。把转换后的位置放到输出数组中。
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} italicDeg 倾斜角度，单位是度。0度无，目前是下面不动。以后要做成可调的
 * @param {!Laya.Matrix} m
 * @param {!Array<?>} out
 * @return {void}
 */
Laya.Context.prototype.transformQuad = function(x, y, w, h, italicDeg, m, out) {};

/**
 * @return {void}
 */
Laya.Context.prototype.pushRT = function() {};

/**
 * @return {void}
 */
Laya.Context.prototype.popRT = function() {};

/**
 * @param {!Laya.RenderTexture2D} rt
 * @return {void}
 */
Laya.Context.prototype.useRT = function(rt) {};

/**
 * 异步执行rt的restore函数
 * @param {!Laya.RenderTexture2D} rt
 * @return {void}
 */
Laya.Context.prototype.RTRestore = function(rt) {};

/**
 * 强制拒绝submit合并
 * 例如切换rt的时候
 * @return {void}
 */
Laya.Context.prototype.breakNextMerge = function() {};

/**
 * @param {!Laya.Texture} tex
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!Laya.Matrix} transform 图片本身希望的矩阵
 * @param {number} tx 节点的位置
 * @param {number} ty
 * @param {number} alpha
 * @param {string} blendMode
 * @param {!Laya.ColorFilter=} colorfilter
 * @param {!Array<number>=} uv
 * @return {void}
 */
Laya.Context.prototype.drawTextureWithTransform = function(tex, x, y, width, height, transform, tx, ty, alpha, blendMode, colorfilter, uv) {};

/**
 * @param {!Laya.HTMLCanvas} canvas
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.Context.prototype.drawCanvas = function(canvas, x, y, width, height) {};

/**
 * @param {!Laya.RenderTexture2D} rt
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!Laya.Matrix} m
 * @param {!Laya.Value2D} shaderValue
 * @param {!ArrayLike<number>=} uv
 * @param {number=} blend
 * @return {boolean}
 */
Laya.Context.prototype.drawTarget = function(rt, x, y, width, height, m, shaderValue, uv, blend) {};

/**
 * @param {!Laya.Texture} tex
 * @param {number} x
 * @param {number} y
 * @param {!Float32Array} vertices
 * @param {!Float32Array} uvs
 * @param {!Uint16Array} indices
 * @param {!Laya.Matrix} matrix
 * @param {number} alpha
 * @param {!Laya.ColorFilter} color
 * @param {string} blendMode
 * @param {number=} colorNum
 * @return {void}
 */
Laya.Context.prototype.drawTriangles = function(tex, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode, colorNum) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {void}
 */
Laya.Context.prototype.transform = function(a, b, c, d, tx, ty) {};

/**
 * @param {!Laya.Matrix} value
 * @return {void}
 */
Laya.Context.prototype.setTransformByMatrix = function(value) {};

/**
 * @param {number} angle
 * @return {void}
 */
Laya.Context.prototype.rotate = function(angle) {};

/**
 * @param {number} scaleX
 * @param {number} scaleY
 * @return {void}
 */
Laya.Context.prototype.scale = function(scaleX, scaleY) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.Context.prototype.clipRect = function(x, y, width, height) {};

/**
 * 从setIBVB改为drawMesh
 * type 参数不知道是干什么的，先删掉。offset好像跟attribute有关，删掉
 * @param {number} x
 * @param {number} y
 * @param {!Laya.IndexBuffer2D} ib
 * @param {!Laya.VertexBuffer2D} vb
 * @param {number} numElement
 * @param {!Laya.Matrix} mat
 * @param {!Laya.Shader} shader
 * @param {!Laya.Value2D} shaderValues
 * @param {number=} startIndex
 * @return {void}
 */
Laya.Context.prototype.drawMesh = function(x, y, ib, vb, numElement, mat, shader, shaderValues, startIndex) {};

/**
 * @param {!Laya.ISubmit} o
 * @return {void}
 */
Laya.Context.prototype.addRenderObject = function(o) {};

/**
 * @param {number} start
 * @param {number} end
 * @return {number}
 */
Laya.Context.prototype.submitElement = function(start, end) {};

/**
 * @return {number}
 */
Laya.Context.prototype.flush = function() {};

/**
 * *****************************************start矢量绘制**************************************************
 * @param {boolean=} convex
 * @return {void}
 */
Laya.Context.prototype.beginPath = function(convex) {};

/**
 * @return {void}
 */
Laya.Context.prototype.closePath = function() {};

/**
 * 添加一个path。
 * @param {!Array<?>} points [x,y,x,y....]	这个会被保存下来，所以调用者需要注意复制。
 * @param {boolean} close 是否闭合
 * @param {boolean} convex 是否是凸多边形。convex的优先级是这个最大。fill的时候的次之。其实fill的时候不应该指定convex，因为可以多个path
 * @param {number} dx 需要添加的平移。这个需要在应用矩阵之前应用。
 * @param {number} dy
 * @return {void}
 */
Laya.Context.prototype.addPath = function(points, close, convex, dx, dy) {};

/**
 * @return {void}
 */
Laya.Context.prototype.fill = function() {};

/**
 * @return {void}
 */
Laya.Context.prototype.stroke = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Context.prototype.moveTo = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Context.prototype.lineTo = function(x, y) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} r
 * @return {void}
 */
Laya.Context.prototype.arcTo = function(x1, y1, x2, y2, r) {};

/**
 * @param {number} cx
 * @param {number} cy
 * @param {number} r
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {boolean=} counterclockwise
 * @param {boolean=} b
 * @return {void}
 */
Laya.Context.prototype.arc = function(cx, cy, r, startAngle, endAngle, counterclockwise, b) {};

/**
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.Context.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {};

/**
 * 把颜色跟当前设置的alpha混合
 * @param {number} color
 * @return {number}
 */
Laya.Context.prototype.mixRGBandAlpha = function(color) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} parameterLineWidth
 * @return {void}
 */
Laya.Context.prototype.strokeRect = function(x, y, width, height, parameterLineWidth) {};

/**
 * @return {void}
 */
Laya.Context.prototype.clip = function() {};

/**
 * *****************************************end矢量绘制**************************************************
 * @param {number} x
 * @param {number} y
 * @param {?} pt
 * @return {void}
 */
Laya.Context.prototype.drawParticle = function(x, y, pt) {};

/**
 * @param {!Laya.Texture} tex
 * @param {number} tx
 * @param {number} ty
 * @param {number} width
 * @param {number} height
 * @param {!Array<?>} sizeGrid
 * @param {number} gx
 * @param {number} gy
 * @return {void}
 */
Laya.Context.prototype.drawTextureWithSizeGrid = function(tex, tx, ty, width, height, sizeGrid, gx, gy) {};

/** @enum {number} */
Laya.FilterMode = {
  Point: 1,
  Bilinear: 1,
  Trilinear: 1,
};

/**
 * @extends {Laya.Bitmap}
 * @constructor
 * @struct
 * 根据指定的类型，创建一个 <code>HTMLCanvas</code> 实例。
 * @param {boolean=} createCanvas
 */
Laya.HTMLCanvas = function(createCanvas) {};
/** @type {?} */
Laya.HTMLCanvas.prototype._ctx;

/* TODO: GetAccessor: Laya.source */

/* TODO: GetAccessor: Laya.context */

/**
 * 清空画布内容。
 * @return {void}
 */
Laya.HTMLCanvas.prototype.clear = function() {};

/**
 * 销毁。
 * @override
 * @return {void}
 */
Laya.HTMLCanvas.prototype.destroy = function() {};

/**
 * 释放。
 * @return {void}
 */
Laya.HTMLCanvas.prototype.release = function() {};

/**
 * 获取 Canvas 渲染上下文。
 * @param {string} contextID 上下文ID.
 * @param {?=} other
 * @return {!Laya.Context} Canvas 渲染上下文 Context 对象。
 */
Laya.HTMLCanvas.prototype.getContext = function(contextID, other) {};

/**
 * 获取内存大小。
 * @return {number} 内存大小。
 */
Laya.HTMLCanvas.prototype.getMemSize = function() {};

/**
 * 设置宽高。
 * @param {number} w 宽度。
 * @param {number} h 高度。
 * @return {void}
 */
Laya.HTMLCanvas.prototype.size = function(w, h) {};

/**
 * 获取texture实例
 * @return {(!Laya.Texture|!Laya.RenderTexture2D)}
 */
Laya.HTMLCanvas.prototype.getTexture = function() {};

/**
 * 把图片转换为base64信息
 * @param {string} type "image/png"
 * @param {number} encoderOptions 质量参数，取值范围为0-1
 * @return {string}
 */
Laya.HTMLCanvas.prototype.toBase64 = function(type, encoderOptions) {};

/**
 * @param {string} type
 * @param {number} encoderOptions
 * @param {!Function} callBack
 * @return {void}
 */
Laya.HTMLCanvas.prototype.toBase64Async = function(type, encoderOptions, callBack) {};
/**
 * @extends {Laya.Bitmap}
 * @constructor
 * @struct
 */
Laya.HTMLImage = function() {};
/** @type {!Function} */
Laya.HTMLImage.create;
/**
 * @record
 * @struct
 */
Laya.ICreateResource = function() {};

/**
 * @param {string} url
 * @return {void}
 */
Laya.ICreateResource.prototype._setCreateURL = function(url) {};
/**
 * @record
 * @struct
 */
Laya.IDestroy = function() {};
/** @type {boolean} */
Laya.IDestroy.prototype.destroyed;

/**
 * @return {void}
 */
Laya.IDestroy.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
Laya.ISingletonElement = function() {};

/**
 * @return {number}
 */
Laya.ISingletonElement.prototype._getIndexInList = function() {};

/**
 * @param {number} index
 * @return {void}
 */
Laya.ISingletonElement.prototype._setIndexInList = function(index) {};

/**
 * @extends {Laya.BaseTexture}
 * @constructor
 * @struct
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @param {number=} format 纹理格式。
 * @param {number=} depthStencilFormat 深度格式。
 */
Laya.RenderTexture2D = function(width, height, format, depthStencilFormat) {};
/** @type {?} */
Laya.RenderTexture2D._currentActive;
/** @type {?} */
Laya.RenderTexture2D.prototype._lastRT;
/** @type {?} */
Laya.RenderTexture2D.prototype._lastWidth;
/** @type {?} */
Laya.RenderTexture2D.prototype._lastHeight;
/** @type {?} */
Laya.RenderTexture2D.rtStack;
/** @type {!Array<?>} */
Laya.RenderTexture2D.defuv;
/** @type {!Array<?>} */
Laya.RenderTexture2D.flipyuv;

/* TODO: GetAccessor: Laya.currentActive */
/** @type {?} */
Laya.RenderTexture2D.prototype._frameBuffer;
/** @type {?} */
Laya.RenderTexture2D.prototype._depthStencilBuffer;
/** @type {?} */
Laya.RenderTexture2D.prototype._depthStencilFormat;

/* TODO: GetAccessor: Laya.depthStencilFormat */

/* TODO: GetAccessor: Laya.defaulteTexture */

/* TODO: GetAccessor: Laya.sourceWidth */

/* TODO: GetAccessor: Laya.sourceHeight */

/* TODO: GetAccessor: Laya.offsetX */

/* TODO: GetAccessor: Laya.offsetY */
/** @type {?} */
Laya.RenderTexture2D.prototype._create;

/**
 * @return {boolean}
 */
Laya.RenderTexture2D.prototype.getIsReady = function() {};

/**
 * 生成mipMap。
 * @override
 * @return {void}
 */
Laya.RenderTexture2D.prototype.generateMipmap = function() {};

/**
 * 保存当前的RT信息。
 * @return {void}
 */
Laya.RenderTexture2D.pushRT = function() {};

/**
 * 恢复上次保存的RT信息
 * @return {void}
 */
Laya.RenderTexture2D.popRT = function() {};

/**
 * 开始绑定。
 * @return {void}
 */
Laya.RenderTexture2D.prototype.start = function() {};

/**
 * 结束绑定。
 * @return {void}
 */
Laya.RenderTexture2D.prototype.end = function() {};

/**
 * 恢复上一次的RenderTarge.由于使用自己保存的，所以如果被外面打断了的话，会出错。
 * @return {void}
 */
Laya.RenderTexture2D.prototype.restore = function() {};

/**
 * @param {number=} r
 * @param {number=} g
 * @param {number=} b
 * @param {number=} a
 * @return {void}
 */
Laya.RenderTexture2D.prototype.clear = function(r, g, b, a) {};

/**
 * 获得像素数据。
 * @param {number} x X像素坐标。
 * @param {number} y Y像素坐标。
 * @param {number} width 宽度。
 * @param {number} height 高度。
 * @return {!Uint8Array} 像素数据。
 */
Laya.RenderTexture2D.prototype.getData = function(x, y, width, height) {};

/**
 * native多线程
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!Function} callBack
 * @return {void}
 */
Laya.RenderTexture2D.prototype.getDataAsync = function(x, y, width, height, callBack) {};

/**
 * @return {void}
 */
Laya.RenderTexture2D.prototype.recycle = function() {};

/** @enum {number} */
Laya.RenderTextureFormat = {
  R8G8B8: 1,
  R8G8B8A8: 1,
  Alpha8: 1,
  R16G16B16A16: 1,
  Depth: 1,
  ShadowMap: 1,
};

/** @enum {number} */
Laya.RenderTextureDepthFormat = {
  DEPTH_16: 1,
  STENCIL_8: 1,
  DEPTHSTENCIL_24_8: 1,
  DEPTHSTENCIL_NONE: 1,
  DEPTH_32: 1,
  DEPTHSTENCIL_16_8: 1,
};

/** @enum {number} */
Laya.RTDEPTHATTACHMODE = {
  RENDERBUFFER: 1,
  TEXTURE: 1,
};

/**
 * @extends {Laya.EventDispatcher}
 * @implements {Laya.ICreateResource|Laya.IDestroy}
 * @constructor
 * @struct
 * 创建一个 <code>Resource</code> 实例。
 */
Laya.Resource = function() {};
/** @type {?} */
Laya.Resource._uniqueIDCounter;
/** @type {?} */
Laya.Resource._idResourcesMap;
/** @type {?} */
Laya.Resource._urlResourcesMap;
/** @type {?} */
Laya.Resource._cpuMemory;
/** @type {?} */
Laya.Resource._gpuMemory;

/* TODO: GetAccessor: Laya.cpuMemory */

/* TODO: GetAccessor: Laya.gpuMemory */
/** @type {number} */
Laya.Resource.prototype._id;
/** @type {?} */
Laya.Resource.prototype._url;
/** @type {?} */
Laya.Resource.prototype._cpuMemory;
/** @type {?} */
Laya.Resource.prototype._gpuMemory;
/** @type {?} */
Laya.Resource.prototype._destroyed;
/** @type {number} */
Laya.Resource.prototype._referenceCount;
/** @type {boolean} */
Laya.Resource.prototype.lock;
/** @type {string} */
Laya.Resource.prototype.name;

/* TODO: GetAccessor: Laya.id */

/* TODO: GetAccessor: Laya.url */

/* TODO: GetAccessor: Laya.cpuMemory */

/* TODO: GetAccessor: Laya.gpuMemory */

/* TODO: GetAccessor: Laya.destroyed */

/* TODO: GetAccessor: Laya.referenceCount */

/**
 * 通过资源ID返回已载入资源。
 * @param {number} id 资源ID
 * @return {!Laya.Resource} 资源 <code>Resource</code> 对象。
 */
Laya.Resource.getResourceByID = function(id) {};

/**
 * 通过url返回已载入资源。
 * @param {string} url 资源URL
 * @param {number=} index 索引
 * @return {!Laya.Resource} 资源 <code>Resource</code> 对象。
 */
Laya.Resource.getResourceByURL = function(url, index) {};

/**
 * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。
 * @return {void}
 */
Laya.Resource.destroyUnusedResources = function() {};

/**
 * @param {string} url
 * @return {void}
 */
Laya.Resource.prototype._setCreateURL = function(url) {};

/**
 * @protected
 * @return {void}
 */
Laya.Resource.prototype._recoverResource = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Resource.prototype._disposeResource = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Resource.prototype._activeResource = function() {};

/**
 * 销毁资源,销毁后资源不能恢复。
 * @return {void}
 */
Laya.Resource.prototype.destroy = function() {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 * 创建一个 <code>Texture</code> 实例。
 * @param {(!Laya.Texture|!Laya.RenderTexture|!Laya.Texture2D)=} bitmap 位图资源。
 * @param {!ArrayLike<number>=} uv UV 数据信息。
 * @param {number=} sourceWidth
 * @param {number=} sourceHeight
 */
Laya.Texture = function(bitmap, uv, sourceWidth, sourceHeight) {};
/** @type {!Float32Array} */
Laya.Texture.DEF_UV;
/** @type {!Float32Array} */
Laya.Texture.NO_UV;
/** @type {!Float32Array} */
Laya.Texture.INV_UV;
/** @type {?} */
Laya.Texture._rect1;
/** @type {?} */
Laya.Texture._rect2;
/** @type {!Array<?>} */
Laya.Texture.prototype.uvrect;
/** @type {?} */
Laya.Texture.prototype._destroyed;
/** @type {?} */
Laya.Texture.prototype._bitmap;
/** @type {?} */
Laya.Texture.prototype._referenceCount;
/** @type {number} */
Laya.Texture.prototype.offsetX;
/** @type {number} */
Laya.Texture.prototype.offsetY;
/** @type {?} */
Laya.Texture.prototype._w;
/** @type {?} */
Laya.Texture.prototype._h;
/** @type {number} */
Laya.Texture.prototype.sourceWidth;
/** @type {number} */
Laya.Texture.prototype.sourceHeight;
/** @type {string} */
Laya.Texture.prototype.url;
/** @type {number} */
Laya.Texture.prototype.scaleRate;

/* TODO: GetAccessor: Laya.uv */

/* TODO: SetAccessor: Laya.uv */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.bitmap */

/* TODO: SetAccessor: Laya.bitmap */

/* TODO: GetAccessor: Laya.destroyed */
/** @type {?} */
Laya.Texture.prototype._onLoaded;

/**
 * 平移 UV。
 * @param {number} offsetX 沿 X 轴偏移量。
 * @param {number} offsetY 沿 Y 轴偏移量。
 * @param {!Array<?>} uv 需要平移操作的的 UV。
 * @return {!Array<?>} 平移后的UV。
 */
Laya.Texture.moveUV = function(offsetX, offsetY, uv) {};

/**
 * 根据指定资源和坐标、宽高、偏移量等创建 <code>Texture</code> 对象。
 * @param {(!Laya.Texture|!Laya.Texture2D)} source 绘图资源 Texture2D 或者 Texture对象。
 * @param {number} x 起始绝对坐标 x 。
 * @param {number} y 起始绝对坐标 y 。
 * @param {number} width 宽绝对值。
 * @param {number} height 高绝对值。
 * @param {number=} offsetX X 轴偏移量（可选）。	就是[x,y]相对于原始小图片的位置。一般都是正的，表示裁掉了空白边的大小，如果是负的一般表示加了保护边
 * @param {number=} offsetY Y 轴偏移量（可选）。
 * @param {number=} sourceWidth 原始宽度，包括被裁剪的透明区域（可选）。
 * @param {number=} sourceHeight 原始高度，包括被裁剪的透明区域（可选）。
 * @return {!Laya.Texture} <code>Texture</code> 对象。
 */
Laya.Texture.create = function(source, x, y, width, height, offsetX, offsetY, sourceWidth, sourceHeight) {};

/**
 * 截取Texture的一部分区域，生成新的Texture，如果两个区域没有相交，则返回null。
 * @param {!Laya.Texture} texture 目标Texture。
 * @param {number} x 相对于目标Texture的x位置。
 * @param {number} y 相对于目标Texture的y位置。
 * @param {number} width 截取的宽度。
 * @param {number} height 截取的高度。
 * @return {!Laya.Texture} 返回一个新的Texture。
 */
Laya.Texture.createFromTexture = function(texture, x, y, width, height) {};

/**
 * 获取是否可以使用。
 * @return {boolean}
 */
Laya.Texture.prototype.getIsReady = function() {};

/**
 * 设置此对象的位图资源、UV数据信息。
 * @param {(!Laya.Texture|!Laya.RenderTexture|!Laya.Texture2D)=} bitmap 位图资源
 * @param {!ArrayLike<number>=} uv UV数据信息
 * @param {number=} sourceWidth
 * @param {number=} sourceHeight
 * @return {void}
 */
Laya.Texture.prototype.setTo = function(bitmap, uv, sourceWidth, sourceHeight) {};

/**
 * 加载指定地址的图片。
 * @param {string} url 图片地址。
 * @param {!Handler=} complete 加载完成回调
 * @return {void}
 */
Laya.Texture.prototype.load = function(url, complete) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Uint8Array}
 */
Laya.Texture.prototype.getTexturePixels = function(x, y, width, height) {};

/**
 * 获取Texture上的某个区域的像素点
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Uint8Array} 返回像素点集合
 */
Laya.Texture.prototype.getPixels = function(x, y, width, height) {};

/**
 * 通过url强制恢复bitmap。
 * @param {function(): void=} onok
 * @return {void}
 */
Laya.Texture.prototype.recoverBitmap = function(onok) {};

/**
 * 强制释放Bitmap,无论是否被引用。
 * @return {void}
 */
Laya.Texture.prototype.disposeBitmap = function() {};

/**
 * 销毁纹理。
 * @param {boolean=} force
 * @return {void}
 */
Laya.Texture.prototype.destroy = function(force) {};

/**
 * @extends {Laya.BaseTexture}
 * @constructor
 * @struct
 * 创建一个 <code>Texture2D</code> 实例。
 * @param {number=} width 宽。
 * @param {number=} height 高。
 * @param {!Laya.TextureFormat=} format 贴图格式。
 * @param {boolean=} mipmap 是否生成mipmap。
 * @param {boolean=} canRead 是否可读像素,如果为true,会在内存保留像素数据。
 */
Laya.Texture2D = function(width, height, format, mipmap, canRead) {};
/** @type {string} */
Laya.Texture2D.TEXTURE2D;
/** @type {!Laya.Texture2D} */
Laya.Texture2D.grayTexture;
/** @type {!Laya.Texture2D} */
Laya.Texture2D.whiteTexture;
/** @type {!Laya.Texture2D} */
Laya.Texture2D.blackTexture;
/** @type {!Laya.Texture2D} */
Laya.Texture2D.erroTextur;

/* TODO: GetAccessor: Laya.defaulteTexture */

/**
 * 加载Texture2D。
 * @param {string} url Texture2D地址。
 * @param {!Handler} complete 完成回掉。
 * @return {void}
 */
Laya.Texture2D.load = function(url, complete) {};

/**
 * 通过图片源填充纹理,可为HTMLImageElement、HTMLCanvasElement、HTMLVideoElement、ImageBitmap、ImageData,
 * 设置之后纹理宽高可能会发生变化。
 * @param {?} source
 * @param {boolean=} premultiplyAlpha
 * @return {void}
 */
Laya.Texture2D.prototype.loadImageSource = function(source, premultiplyAlpha) {};

/**
 * 通过像素填充纹理。
 * @param {(!Float32Array|!Uint16Array|!Uint8Array)} pixels 像素。
 * @param {number=} miplevel 层级。
 * @return {void}
 */
Laya.Texture2D.prototype.setPixels = function(pixels, miplevel) {};

/**
 * 通过像素填充部分纹理。
 * @param {number} x X轴像素起点。
 * @param {number} y Y轴像素起点。
 * @param {number} width 像素宽度。
 * @param {number} height 像素高度。
 * @param {(!Float32Array|!Uint16Array|!Uint8Array)} pixels 像素数组。
 * @param {number=} miplevel 层级。
 * @return {void}
 */
Laya.Texture2D.prototype.setSubPixels = function(x, y, width, height, pixels, miplevel) {};

/**
 * 通过压缩数据填充纹理。
 * @param {!ArrayBuffer} data 压缩数据。
 * @return {void}
 */
Laya.Texture2D.prototype.setCompressData = function(data) {};

/**
 * 返回图片像素。
 * @return {(!Float32Array|!Uint16Array|!Uint8Array)} 图片像素。
 */
Laya.Texture2D.prototype.getPixels = function() {};

/** @enum {number} */
Laya.TextureDecodeFormat = {
  Normal: 1,
  RGBM: 1,
};

/** @enum {number} */
Laya.TextureFormat = {
  R8G8B8: 1,
  R8G8B8A8: 1,
  R5G6B5: 1,
  Alpha8: 1,
  DXT1: 1,
  DXT5: 1,
  ETC1RGB: 1,
  ETC2RGB: 1,
  ETC2RGBA: 1,
  ETC2RGB_Alpha8: 1,
  ETC2SRGB: 1,
  PVRTCRGB_2BPPV: 1,
  PVRTCRGBA_2BPPV: 1,
  PVRTCRGB_4BPPV: 1,
  PVRTCRGBA_4BPPV: 1,
  R32G32B32A32: 1,
  R16G16B16A16: 1,
  ASTC4x4: 1,
  ASTC4x4SRGB: 1,
  ASTC6x6: 1,
  ASTC6x6SRGB: 1,
  ASTC8x8: 1,
  ASTC8x8SRGB: 1,
  ASTC10x10: 1,
  ASTC10x10SRGB: 1,
  ASTC12x12: 1,
  ASTC12x12SRGB: 1,
  KTXTEXTURE: 1,
  PVRTEXTURE: 1,
};

/**
 * @extends {Laya.BaseTexture}
 * @constructor
 * @struct
 * 创建VideoTexture对象，
 */
Laya.VideoTexture = function() {};
/** @type {!Array<!Laya.VideoTexture>} */
Laya.VideoTexture._videoTexturePool;
/** @type {?} */
Laya.VideoTexture.prototype._video;
/** @type {?} */
Laya.VideoTexture.prototype._needUpdate;

/* TODO: GetAccessor: Laya.video */

/* TODO: SetAccessor: Laya.video */

/**
 * 开始播放视频
 * @return {void}
 */
Laya.VideoTexture.prototype.videoPlay = function() {};

/**
 * 暂停播放视频
 * @return {void}
 */
Laya.VideoTexture.prototype.videoPause = function() {};

/**
 * @return {void}
 */
Laya.VideoTexture.prototype.destroy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.WebGLRTMgr = function() {};
/** @type {?} */
Laya.WebGLRTMgr.dict;

/**
 * 获得一个renderTarget
 * 暂时先按照严格大小判断。
 * @param {number} w
 * @param {number} h
 * @return {!Laya.RenderTexture2D}
 */
Laya.WebGLRTMgr.getRT = function(w, h) {};

/**
 * 回收一个renderTarget
 * @param {!Laya.RenderTexture2D} rt
 * @return {void}
 */
Laya.WebGLRTMgr.releaseRT = function(rt) {};

/** @enum {number} */
Laya.WarpMode = {
  Repeat: 1,
  Clamp: 1,
  Mirrored: 1,
};

/**
 * @extends {spine.AssetManager}
 * @constructor
 * @struct
 * @param {string} pathPrefix
 * @param {?} downloader
 * @param {?} textureDic
 */
Laya.SpineAssetManager = function(pathPrefix, downloader, textureDic) {};

/**
 * @extends {Laya.Texture}
 * @constructor
 * @struct
 * @param {(!Laya.Texture|!Laya.Texture2D)} tex
 */
Laya.SpineGLTexture = function(tex) {};

/**
 * @return {!Object}
 */
Laya.SpineGLTexture.prototype.getImage = function() {};

/**
 * @param {!spine.TextureFilter} minFilter
 * @param {!spine.TextureFilter} magFilter
 * @return {void}
 */
Laya.SpineGLTexture.prototype.setFilters = function(minFilter, magFilter) {};

/**
 * @param {!spine.TextureWrap} uWrap
 * @param {!spine.TextureWrap} vWrap
 * @return {void}
 */
Laya.SpineGLTexture.prototype.setWraps = function(uWrap, vWrap) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个Skeleton对象
 * @param {!Laya.SpineTempletBase=} templet 骨骼动画模板
 */
Laya.SpineSkeleton = function(templet) {};
/** @type {number} */
Laya.SpineSkeleton.stopped;
/** @type {number} */
Laya.SpineSkeleton.paused;
/** @type {number} */
Laya.SpineSkeleton.playing;
/** @type {?} */
Laya.SpineSkeleton.prototype._templet;
/** @type {?} */
Laya.SpineSkeleton.prototype.timeKeeper;
/** @type {?} */
Laya.SpineSkeleton.prototype.skeleton;
/** @type {?} */
Laya.SpineSkeleton.prototype.state;
/** @type {?} */
Laya.SpineSkeleton.prototype.stateData;
/** @type {?} */
Laya.SpineSkeleton.prototype.currentPlayTime;
/** @type {?} */
Laya.SpineSkeleton.prototype.skeletonRenderer;
/** @type {!Laya.SpineSkeleton} */
Laya.SpineSkeleton.prototype._ins;
/** @type {?} */
Laya.SpineSkeleton.prototype._playbackRate;
/** @type {?} */
Laya.SpineSkeleton.prototype.trackIndex;
/** @type {?} */
Laya.SpineSkeleton.prototype._update;

/* TODO: GetAccessor: Laya.templet */

/* TODO: SetAccessor: Laya.currentTime */

/* TODO: GetAccessor: Laya.playState */

/**
 * @param {!Laya.SpineTempletBase} templet
 * @return {void}
 */
Laya.SpineSkeleton.prototype.init = function(templet) {};

/**
 * 播放动画
 * @param {?} nameOrIndex 动画名字或者索引
 * @param {boolean} loop 是否循环播放
 * @param {boolean=} force false,如果要播的动画跟上一个相同就不生效,true,强制生效
 * @param {number=} start 起始时间
 * @param {number=} end 结束时间
 * @param {boolean=} freshSkin 是否刷新皮肤数据
 * @param {boolean=} playAudio 是否播放音频
 * @return {void}
 */
Laya.SpineSkeleton.prototype.play = function(nameOrIndex, loop, force, start, end, freshSkin, playAudio) {};

/**
 * 得到当前动画的数量
 * @return {number} 当前动画的数量
 */
Laya.SpineSkeleton.prototype.getAnimNum = function() {};

/**
 * 得到指定动画的名字
 * @param {number} index 动画的索引
 * @return {string}
 */
Laya.SpineSkeleton.prototype.getAniNameByIndex = function(index) {};

/**
 * 通过名字得到插槽的引用
 * @param {string} slotName
 * @return {!spine.Slot}
 */
Laya.SpineSkeleton.prototype.getSlotByName = function(slotName) {};

/**
 * 设置动画播放速率
 * @param {number} value 1为标准速率
 * @return {void}
 */
Laya.SpineSkeleton.prototype.playbackRate = function(value) {};

/**
 * 通过名字显示一套皮肤
 * @param {string} name 皮肤的名字
 * @return {void}
 */
Laya.SpineSkeleton.prototype.showSkinByName = function(name) {};

/**
 * 通过索引显示一套皮肤
 * @param {number} skinIndex 皮肤索引
 * @return {void}
 */
Laya.SpineSkeleton.prototype.showSkinByIndex = function(skinIndex) {};

/**
 * 停止动画
 * @return {void}
 */
Laya.SpineSkeleton.prototype.stop = function() {};

/**
 * 暂停动画的播放
 * @return {void}
 */
Laya.SpineSkeleton.prototype.paused = function() {};

/**
 * 恢复动画的播放
 * @return {void}
 */
Laya.SpineSkeleton.prototype.resume = function() {};

/**
 * 销毁当前动画
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.SpineSkeleton.prototype.destroy = function(destroyChild) {};

/**
 * 添加一个动画
 * @param {?} nameOrIndex 动画名字或者索引
 * @param {boolean=} loop 是否循环播放
 * @param {number=} delay 延迟调用，可以为负数
 * @return {void}
 */
Laya.SpineSkeleton.prototype.addAnimation = function(nameOrIndex, loop, delay) {};

/**
 * 设置当动画被改变时，存储混合(交叉淡出)的持续时间
 * @param {?} fromNameOrIndex
 * @param {?} toNameOrIndex
 * @param {number} duration
 * @return {void}
 */
Laya.SpineSkeleton.prototype.setMix = function(fromNameOrIndex, toNameOrIndex, duration) {};

/**
 * 获取骨骼信息(spine.Bone)
 * 注意: 获取到的是spine运行时的骨骼信息(spine.Bone)，不适用引擎的方法
 * @param {string} boneName
 * @return {!spine.Bone}
 */
Laya.SpineSkeleton.prototype.getBoneByName = function(boneName) {};

/**
 * 获取Skeleton(spine.Skeleton)
 * @return {!Laya.Skeleton}
 */
Laya.SpineSkeleton.prototype.getSkeleton = function() {};

/**
 * 替换插槽皮肤
 * @param {string} slotName
 * @param {string} attachmentName
 * @return {void}
 */
Laya.SpineSkeleton.prototype.setSlotAttachment = function(slotName, attachmentName) {};

/**
 * @constructor
 * @struct
 * @param {boolean=} twoColorTint
 */
Laya.SpineSkeletonRenderer = function(twoColorTint) {};
/** @type {!Array<number>} */
Laya.SpineSkeletonRenderer.QUAD_TRIANGLES;
/** @type {boolean} */
Laya.SpineSkeletonRenderer.prototype.premultipliedAlpha;
/** @type {!spine.VertexEffect} */
Laya.SpineSkeletonRenderer.prototype.vertexEffect;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.tempColor;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.tempColor2;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.vertices;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.vertexSize;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.twoColorTint;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.renderable;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.clipper;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.temp;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.temp2;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.temp3;
/** @type {?} */
Laya.SpineSkeletonRenderer.prototype.temp4;

/**
 * @param {!Laya.Skeleton} skeleton
 * @param {number} slotRangeStart
 * @param {number} slotRangeEnd
 * @param {!Laya.SpineSkeleton} spineSkeletonIns
 * @param {?} textureList
 * @return {void}
 */
Laya.SpineSkeletonRenderer.prototype.draw = function(skeleton, slotRangeStart, slotRangeEnd, spineSkeletonIns, textureList) {};

/**
 * @extends {Laya.SpineTempletBase}
 * @constructor
 * @struct
 * Spine动画模板类
 * @param {!Laya.SpineVersion} ver spine资源版本号
 */
Laya.SpineTemplet = function(ver) {};

/**
 * @param {string} jsonOrSkelUrl
 * @return {void}
 */
Laya.SpineTemplet.prototype.loadAni = function(jsonOrSkelUrl) {};

/**
 * 创建动画
 * @return {!Laya.SpineSkeleton}
 */
Laya.SpineTemplet.prototype.buildArmature = function() {};

/**
 * 通过索引得动画名称
 * @param {number} index
 * @return {string}
 */
Laya.SpineTemplet.prototype.getAniNameByIndex = function(index) {};

/**
 * 通过皮肤名字得到皮肤索引
 * @param {string} skinName 皮肤名称
 * @return {number}
 */
Laya.SpineTemplet.prototype.getSkinIndexByName = function(skinName) {};

/**
 * 释放纹理
 * @override
 * @return {void}
 */
Laya.SpineTemplet.prototype.destroy = function() {};

/** @enum {string} */
Laya.SpineVersion = {
  v3_7: '',
  v3_8: '',
  v4_0: '',
};

/** @enum {string} */
Laya.SpineFormat = {
  json: '',
  binary: '',
};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 */
Laya.SpineTempletBase = function() {};
/** @type {?} */
Laya.SpineTempletBase.prototype._templet;
/** @type {?} */
Laya.SpineTempletBase.prototype._isDestroyed;
/** @type {!spine.SkeletonData} */
Laya.SpineTempletBase.prototype.skeletonData;
/** @type {?} */
Laya.SpineTempletBase.prototype._layaPremultipliedAlpha;
/** @type {?} */
Laya.SpineTempletBase.prototype._spinePremultipliedAlpha;

/* TODO: GetAccessor: Laya.templet */

/* TODO: SetAccessor: Laya.templet */

/* TODO: GetAccessor: Laya.isDestroyed */

/* TODO: SetAccessor: Laya.isDestroyed */

/* TODO: GetAccessor: Laya.spinePremultipliedAlpha */

/* TODO: SetAccessor: Laya.spinePremultipliedAlpha */

/**
 * 创建动画
 * @return {!Laya.SpineSkeleton}
 */
Laya.SpineTempletBase.prototype.buildArmature = function() {};

/**
 * 通过索引得动画名称
 * @param {number} index
 * @return {string}
 */
Laya.SpineTempletBase.prototype.getAniNameByIndex = function(index) {};

/**
 * 通过皮肤名字得到皮肤索引
 * @param {string} skinName 皮肤名称
 * @return {number}
 */
Laya.SpineTempletBase.prototype.getSkinIndexByName = function(skinName) {};

/**
 * 释放纹理
 * @override
 * @return {void}
 */
Laya.SpineTempletBase.prototype.destroy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.System = function() {};

/**
 * 替换指定名称的定义。用来动态更改类的定义。
 * @param {string} name 属性名。
 * @param {?} classObj 属性值。
 * @return {void}
 */
Laya.System.changeDefinition = function(name, classObj) {};

/**
 * @extends {Laya.Image}
 * @constructor
 * @struct
 * @param {string=} skin
 */
Laya.AdvImage = function(skin) {};
/** @type {?} */
Laya.AdvImage.prototype.advsListArr;
/** @type {?} */
Laya.AdvImage.prototype.resUrl;
/** @type {?} */
Laya.AdvImage.prototype._http;
/** @type {?} */
Laya.AdvImage.prototype._data;
/** @type {?} */
Laya.AdvImage.prototype._resquestTime;
/** @type {?} */
Laya.AdvImage.prototype._appid;
/** @type {?} */
Laya.AdvImage.prototype._playIndex;
/** @type {?} */
Laya.AdvImage.prototype._lunboTime;
/** @type {?} */
Laya.AdvImage.prototype.setLoadUrl;
/** @type {?} */
Laya.AdvImage.prototype.init;
/** @type {?} */
Laya.AdvImage.prototype.initEvent;
/** @type {?} */
Laya.AdvImage.prototype.onAdvsImgClick;
/** @type {?} */
Laya.AdvImage.prototype.revertAdvsData;
/** @type {?} */
Laya.AdvImage.prototype.jumptoGame;
/** @type {?} */
Laya.AdvImage.prototype.updateAdvsInfo;
/** @type {?} */
Laya.AdvImage.prototype.onLunbo;
/** @type {?} */
Laya.AdvImage.prototype.getCurrentAppidObj;
/** @type {?} */
Laya.AdvImage.prototype.onGetAdvsListData;
/** @type {?} */
Laya.AdvImage.prototype._onError;
/** @type {?} */
Laya.AdvImage.prototype._onLoad;
/** @type {?} */
Laya.AdvImage.prototype.error;
/** @type {?} */
Laya.AdvImage.prototype.complete;
/** @type {?} */
Laya.AdvImage.prototype.getAdvsQArr;
/** @type {?} */
Laya.AdvImage.prototype.clear;

/**
 * 当前小游戏环境是否支持游戏跳转功能*
 * @return {boolean}
 */
Laya.AdvImage.prototype.isSupportJump = function() {};

/**
 * 生成指定范围的随机数
 * @param {number} minNum 最小值
 * @param {number} maxNum 最大值
 * @return {number}
 */
Laya.AdvImage.randRange = function(minNum, maxNum) {};

/**
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.AdvImage.prototype.destroy = function(destroyChild) {};
/**
 * @extends {Laya.Graphics}
 * @constructor
 * @struct
 */
Laya.AutoBitmap = function() {};
/** @type {boolean} */
Laya.AutoBitmap.prototype.autoCacheCmd;
/** @type {?} */
Laya.AutoBitmap.prototype._width;
/** @type {?} */
Laya.AutoBitmap.prototype._height;
/** @type {?} */
Laya.AutoBitmap.prototype._source;
/** @type {?} */
Laya.AutoBitmap.prototype._sizeGrid;
/** @type {boolean} */
Laya.AutoBitmap.prototype._isChanged;
/** @type {!Array<number>} */
Laya.AutoBitmap.prototype.uv;
/** @type {?} */
Laya.AutoBitmap.prototype._drawGridCmd;

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.source */

/* TODO: SetAccessor: Laya.source */
/** @type {?} */
Laya.AutoBitmap.prototype._createDrawTexture;
/** @type {?} */
Laya.AutoBitmap.prototype.drawBitmap;
/** @type {?} */
Laya.AutoBitmap.getTexture;
/** @type {?} */
Laya.AutoBitmap.prototype._setDrawGridCmd;

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.AutoBitmap.prototype.destroy = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.AutoBitmap.prototype._setChanged = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.AutoBitmap.prototype.changeSource = function() {};
/**
 * @extends {Laya.UIComponent}
 * @implements {Laya.IBox}
 * @constructor
 * @struct
 */
Laya.Box = function() {};
/** @type {?} */
Laya.Box.prototype._bgColor;

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: SetAccessor: Laya.bgColor */
/** @type {?} */
Laya.Box.prototype._onResize;

/**
 * @extends {Laya.UIComponent}
 * @implements {Laya.ISelect}
 * @constructor
 * @struct
 * 创建一个新的 <code>Button</code> 类实例。
 * @param {string=} skin 皮肤资源地址。
 * @param {string=} label 按钮的文本内容。
 */
Laya.Button = function(skin, label) {};
/** @type {?} */
Laya.Button.stateMap;
/** @type {boolean} */
Laya.Button.prototype.toggle;
/** @type {!Laya.AutoBitmap} */
Laya.Button.prototype._bitmap;
/** @type {!Laya.Text} */
Laya.Button.prototype._text;
/** @type {!Array<?>} */
Laya.Button.prototype._labelColors;
/** @type {!Array<?>} */
Laya.Button.prototype._strokeColors;
/** @type {number} */
Laya.Button.prototype._state;
/** @type {boolean} */
Laya.Button.prototype._selected;
/** @type {string} */
Laya.Button.prototype._skin;
/** @type {boolean} */
Laya.Button.prototype._autoSize;
/** @type {number} */
Laya.Button.prototype._stateNum;
/** @type {!Array<?>} */
Laya.Button.prototype._sources;
/** @type {!Handler} */
Laya.Button.prototype._clickHandler;
/** @type {boolean} */
Laya.Button.prototype._stateChanged;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.stateNum */

/* TODO: SetAccessor: Laya.stateNum */

/* TODO: GetAccessor: Laya.label */

/* TODO: SetAccessor: Laya.label */

/* TODO: GetAccessor: Laya.selected */

/* TODO: SetAccessor: Laya.selected */

/* TODO: GetAccessor: Laya.state */

/* TODO: SetAccessor: Laya.state */

/* TODO: GetAccessor: Laya.labelColors */

/* TODO: SetAccessor: Laya.labelColors */

/* TODO: GetAccessor: Laya.strokeColors */

/* TODO: SetAccessor: Laya.strokeColors */

/* TODO: GetAccessor: Laya.labelPadding */

/* TODO: SetAccessor: Laya.labelPadding */

/* TODO: GetAccessor: Laya.labelSize */

/* TODO: SetAccessor: Laya.labelSize */

/* TODO: GetAccessor: Laya.labelStroke */

/* TODO: SetAccessor: Laya.labelStroke */

/* TODO: GetAccessor: Laya.labelStrokeColor */

/* TODO: SetAccessor: Laya.labelStrokeColor */

/* TODO: GetAccessor: Laya.labelBold */

/* TODO: SetAccessor: Laya.labelBold */

/* TODO: GetAccessor: Laya.labelFont */

/* TODO: SetAccessor: Laya.labelFont */

/* TODO: GetAccessor: Laya.labelAlign */

/* TODO: SetAccessor: Laya.labelAlign */

/* TODO: GetAccessor: Laya.clickHandler */

/* TODO: SetAccessor: Laya.clickHandler */

/* TODO: GetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.iconOffset */

/* TODO: SetAccessor: Laya.iconOffset */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Button.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Button.prototype.createChildren = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Button.prototype.createText = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Button.prototype.initialize = function() {};

/**
 * 对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
 * @protected
 * @param {!Laya.Event} e Event 对象。
 * @return {void}
 */
Laya.Button.prototype.onMouse = function(e) {};

/**
 * @protected
 * @return {void}
 */
Laya.Button.prototype._skinLoaded = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Button.prototype.changeClips = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Button.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Button.prototype.measureHeight = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Button.prototype.changeState = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Button.prototype._setStateChanged = function() {};

/**
 * @extends {Laya.Button}
 * @constructor
 * @struct
 * 创建一个新的 <code>CheckBox</code> 组件实例。
 * @param {string=} skin 皮肤资源地址。
 * @param {string=} label 文本标签的内容。
 */
Laya.CheckBox = function(skin, label) {};

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.CheckBox.prototype.preinitialize = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.CheckBox.prototype.initialize = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>Clip</code> 示例。
 * @param {string=} url 资源类库名或者地址
 * @param {number=} clipX x方向分割个数
 * @param {number=} clipY y方向分割个数
 */
Laya.Clip = function(url, clipX, clipY) {};
/** @type {!Array<?>} */
Laya.Clip.prototype._sources;
/** @type {!Laya.AutoBitmap} */
Laya.Clip.prototype._bitmap;
/** @type {string} */
Laya.Clip.prototype._skin;
/** @type {number} */
Laya.Clip.prototype._clipX;
/** @type {number} */
Laya.Clip.prototype._clipY;
/** @type {number} */
Laya.Clip.prototype._clipWidth;
/** @type {number} */
Laya.Clip.prototype._clipHeight;
/** @type {boolean} */
Laya.Clip.prototype._autoPlay;
/** @type {number} */
Laya.Clip.prototype._interval;
/** @type {!Handler} */
Laya.Clip.prototype._complete;
/** @type {boolean} */
Laya.Clip.prototype._isPlaying;
/** @type {number} */
Laya.Clip.prototype._index;
/** @type {boolean} */
Laya.Clip.prototype._clipChanged;
/** @type {string} */
Laya.Clip.prototype._group;
/** @type {number} */
Laya.Clip.prototype._toIndex;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.clipX */

/* TODO: SetAccessor: Laya.clipX */

/* TODO: GetAccessor: Laya.clipY */

/* TODO: SetAccessor: Laya.clipY */

/* TODO: GetAccessor: Laya.clipWidth */

/* TODO: SetAccessor: Laya.clipWidth */

/* TODO: GetAccessor: Laya.clipHeight */

/* TODO: SetAccessor: Laya.clipHeight */

/* TODO: GetAccessor: Laya.sources */

/* TODO: SetAccessor: Laya.sources */

/* TODO: GetAccessor: Laya.group */

/* TODO: SetAccessor: Laya.group */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: GetAccessor: Laya.index */

/* TODO: SetAccessor: Laya.index */

/* TODO: GetAccessor: Laya.total */

/* TODO: GetAccessor: Laya.autoPlay */

/* TODO: SetAccessor: Laya.autoPlay */

/* TODO: GetAccessor: Laya.interval */

/* TODO: SetAccessor: Laya.interval */

/* TODO: GetAccessor: Laya.isPlaying */

/* TODO: SetAccessor: Laya.isPlaying */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.bitmap */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Clip.prototype.destroy = function(destroyChild) {};

/**
 * 销毁对象并释放加载的皮肤资源。
 * @return {void}
 */
Laya.Clip.prototype.dispose = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Clip.prototype.createChildren = function() {};

/**
 * @override
 * @protected
 * @param {boolean=} e
 * @return {void}
 */
Laya.Clip.prototype._onDisplay = function(e) {};

/**
 * @protected
 * @return {void}
 */
Laya.Clip.prototype._skinLoaded = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Clip.prototype.changeClip = function() {};

/**
 * @protected
 * @param {string} url 资源地址。
 * @param {!Laya.Texture} img 纹理。
 * @return {void}
 */
Laya.Clip.prototype.loadComplete = function(url, img) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Clip.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Clip.prototype.measureHeight = function() {};

/**
 * 播放动画。
 * @param {number=} from 开始索引
 * @param {number=} to 结束索引，-1为不限制
 * @return {void}
 */
Laya.Clip.prototype.play = function(from, to) {};

/**
 * @protected
 * @return {void}
 */
Laya.Clip.prototype._loop = function() {};

/**
 * 停止动画。
 * @return {void}
 */
Laya.Clip.prototype.stop = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Clip.prototype._setClipChanged = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * @param {boolean=} createChildren
 */
Laya.ColorPicker = function(createChildren) {};
/** @type {!Handler} */
Laya.ColorPicker.prototype.changeHandler;
/** @type {number} */
Laya.ColorPicker.prototype._gridSize;
/** @type {string} */
Laya.ColorPicker.prototype._bgColor;
/** @type {string} */
Laya.ColorPicker.prototype._borderColor;
/** @type {string} */
Laya.ColorPicker.prototype._inputColor;
/** @type {string} */
Laya.ColorPicker.prototype._inputBgColor;
/** @type {!Laya.Box} */
Laya.ColorPicker.prototype._colorPanel;
/** @type {!Laya.Sprite} */
Laya.ColorPicker.prototype._colorTiles;
/** @type {!Laya.Sprite} */
Laya.ColorPicker.prototype._colorBlock;
/** @type {!Laya.Input} */
Laya.ColorPicker.prototype._colorInput;
/** @type {!Laya.Button} */
Laya.ColorPicker.prototype._colorButton;
/** @type {!Array<?>} */
Laya.ColorPicker.prototype._colors;
/** @type {string} */
Laya.ColorPicker.prototype._selectedColor;
/** @type {boolean} */
Laya.ColorPicker.prototype._panelChanged;
/** @type {?} */
Laya.ColorPicker.prototype.onPanelMouseDown;
/** @type {?} */
Laya.ColorPicker.prototype.onColorButtonClick;
/** @type {?} */
Laya.ColorPicker.prototype.removeColorBox;
/** @type {?} */
Laya.ColorPicker.prototype.onColorFieldKeyDown;
/** @type {?} */
Laya.ColorPicker.prototype.onColorInputChange;
/** @type {?} */
Laya.ColorPicker.prototype.onColorTilesClick;
/** @type {?} */
Laya.ColorPicker.prototype.onColorTilesMouseMove;
/** @type {?} */
Laya.ColorPicker.prototype.drawBlock;

/* TODO: GetAccessor: Laya.selectedColor */

/* TODO: SetAccessor: Laya.selectedColor */

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */
/** @type {?} */
Laya.ColorPicker.prototype.changeColor;

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: SetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.borderColor */

/* TODO: SetAccessor: Laya.borderColor */

/* TODO: GetAccessor: Laya.inputColor */

/* TODO: SetAccessor: Laya.inputColor */

/* TODO: GetAccessor: Laya.inputBgColor */

/* TODO: SetAccessor: Laya.inputBgColor */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.ColorPicker.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ColorPicker.prototype.createChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ColorPicker.prototype.initialize = function() {};

/**
 * 改变颜色样本列表面板。
 * @protected
 * @return {void}
 */
Laya.ColorPicker.prototype.changePanel = function() {};

/**
 * 打开颜色样本列表面板。
 * @return {void}
 */
Laya.ColorPicker.prototype.open = function() {};

/**
 * 关闭颜色样本列表面板。
 * @return {void}
 */
Laya.ColorPicker.prototype.close = function() {};

/**
 * 通过鼠标位置取对应的颜色块的颜色值。
 * @protected
 * @return {string}
 */
Laya.ColorPicker.prototype.getColorByMouse = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ColorPicker.prototype._setPanelChanged = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>ComboBox</code> 组件实例。
 * @param {string=} skin 皮肤资源地址。
 * @param {string=} labels 下拉列表的标签集字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
 */
Laya.ComboBox = function(skin, labels) {};
/** @type {number} */
Laya.ComboBox.prototype._visibleNum;
/** @type {!Laya.Button} */
Laya.ComboBox.prototype._button;
/** @type {!Laya.List} */
Laya.ComboBox.prototype._list;
/** @type {boolean} */
Laya.ComboBox.prototype._isOpen;
/** @type {!Array<?>} */
Laya.ComboBox.prototype._itemColors;
/** @type {number} */
Laya.ComboBox.prototype._itemSize;
/** @type {!Array<?>} */
Laya.ComboBox.prototype._labels;
/** @type {number} */
Laya.ComboBox.prototype._selectedIndex;
/** @type {!Handler} */
Laya.ComboBox.prototype._selectHandler;
/** @type {number} */
Laya.ComboBox.prototype._itemHeight;
/** @type {number} */
Laya.ComboBox.prototype._listHeight;
/** @type {boolean} */
Laya.ComboBox.prototype._listChanged;
/** @type {boolean} */
Laya.ComboBox.prototype._itemChanged;
/** @type {string} */
Laya.ComboBox.prototype._scrollBarSkin;
/** @type {boolean} */
Laya.ComboBox.prototype._isCustomList;
/** @type {?} */
Laya.ComboBox.prototype.itemRender;
/** @type {?} */
Laya.ComboBox.prototype._createList;
/** @type {?} */
Laya.ComboBox.prototype._setListEvent;
/** @type {?} */
Laya.ComboBox.prototype.onListDown;
/** @type {?} */
Laya.ComboBox.prototype.onScrollBarDown;
/** @type {?} */
Laya.ComboBox.prototype.onButtonMouseDown;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */
/** @type {?} */
Laya.ComboBox.prototype.switchTo;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.labels */

/* TODO: SetAccessor: Laya.labels */

/* TODO: GetAccessor: Laya.selectedIndex */

/* TODO: SetAccessor: Laya.selectedIndex */
/** @type {?} */
Laya.ComboBox.prototype.changeSelected;

/* TODO: GetAccessor: Laya.selectHandler */

/* TODO: SetAccessor: Laya.selectHandler */

/* TODO: GetAccessor: Laya.selectedLabel */

/* TODO: SetAccessor: Laya.selectedLabel */

/* TODO: GetAccessor: Laya.visibleNum */

/* TODO: SetAccessor: Laya.visibleNum */

/* TODO: GetAccessor: Laya.itemColors */

/* TODO: SetAccessor: Laya.itemColors */

/* TODO: GetAccessor: Laya.itemSize */

/* TODO: SetAccessor: Laya.itemSize */

/* TODO: GetAccessor: Laya.isOpen */

/* TODO: SetAccessor: Laya.isOpen */
/** @type {?} */
Laya.ComboBox.prototype._onStageMouseWheel;

/* TODO: GetAccessor: Laya.scrollBarSkin */

/* TODO: SetAccessor: Laya.scrollBarSkin */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: GetAccessor: Laya.scrollBar */

/* TODO: GetAccessor: Laya.button */

/* TODO: GetAccessor: Laya.list */

/* TODO: SetAccessor: Laya.list */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.labelColors */

/* TODO: SetAccessor: Laya.labelColors */

/* TODO: GetAccessor: Laya.labelPadding */

/* TODO: SetAccessor: Laya.labelPadding */

/* TODO: GetAccessor: Laya.labelSize */

/* TODO: SetAccessor: Laya.labelSize */

/* TODO: GetAccessor: Laya.labelBold */

/* TODO: SetAccessor: Laya.labelBold */

/* TODO: GetAccessor: Laya.labelFont */

/* TODO: SetAccessor: Laya.labelFont */

/* TODO: GetAccessor: Laya.stateNum */

/* TODO: SetAccessor: Laya.stateNum */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.ComboBox.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ComboBox.prototype.createChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ComboBox.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ComboBox.prototype.measureHeight = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ComboBox.prototype.changeList = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @param {number} index
 * @return {void}
 */
Laya.ComboBox.prototype.onlistItemMouse = function(e, index) {};

/**
 * 更改下拉列表的打开状态。
 * @protected
 * @return {void}
 */
Laya.ComboBox.prototype.changeOpen = function() {};

/**
 * 更改下拉列表。
 * @protected
 * @return {void}
 */
Laya.ComboBox.prototype.changeItem = function() {};

/**
 * 关闭下拉列表。
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ComboBox.prototype.removeList = function(e) {};

/**
 * @extends {Laya.View}
 * @constructor
 * @struct
 */
Laya.Dialog = function() {};
/** @type {string} */
Laya.Dialog.CLOSE;
/** @type {string} */
Laya.Dialog.CANCEL;
/** @type {string} */
Laya.Dialog.SURE;
/** @type {string} */
Laya.Dialog.NO;
/** @type {string} */
Laya.Dialog.YES;
/** @type {string} */
Laya.Dialog.OK;
/** @type {?} */
Laya.Dialog._manager;

/* TODO: GetAccessor: Laya.manager */

/* TODO: SetAccessor: Laya.manager */
/** @type {!Handler} */
Laya.Dialog.prototype.closeHandler;
/** @type {!Handler} */
Laya.Dialog.prototype.popupEffect;
/** @type {!Handler} */
Laya.Dialog.prototype.closeEffect;
/** @type {string} */
Laya.Dialog.prototype.group;
/** @type {boolean} */
Laya.Dialog.prototype.isModal;
/** @type {boolean} */
Laya.Dialog.prototype.isShowEffect;
/** @type {boolean} */
Laya.Dialog.prototype.isPopupCenter;
/** @type {string} */
Laya.Dialog.prototype.closeType;
/** @type {?} */
Laya.Dialog.prototype._dragArea;

/* TODO: GetAccessor: Laya.dragArea */

/* TODO: SetAccessor: Laya.dragArea */
/** @type {?} */
Laya.Dialog.prototype._onMouseDown;

/* TODO: GetAccessor: Laya.isPopup */

/* TODO: SetAccessor: Laya.zOrder */

/* TODO: GetAccessor: Laya.zOrder */

/**
 * @protected
 * @return {void}
 */
Laya.Dialog.prototype._dealDragArea = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Dialog.prototype._onClick = function(e) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} closeOther
 * @param {?=} param
 * @return {void}
 */
Laya.Dialog.prototype.open = function(closeOther, param) {};

/**
 * 关闭对话框。
 * @override
 * @param {string=} type 关闭的原因，会传递给onClosed函数
 * @return {void}
 */
Laya.Dialog.prototype.close = function(type) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Dialog.prototype.destroy = function(destroyChild) {};

/**
 * 显示对话框（以非模式窗口方式显示）。
 * @param {boolean=} closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
 * @param {boolean=} showEffect 是否显示弹出效果
 * @return {void}
 */
Laya.Dialog.prototype.show = function(closeOther, showEffect) {};

/**
 * 显示对话框（以模式窗口方式显示）。
 * @param {boolean=} closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
 * @param {boolean=} showEffect 是否显示弹出效果
 * @return {void}
 */
Laya.Dialog.prototype.popup = function(closeOther, showEffect) {};

/**
 * @protected
 * @param {boolean} modal
 * @param {boolean} closeOther
 * @param {boolean} showEffect
 * @return {void}
 */
Laya.Dialog.prototype._open = function(modal, closeOther, showEffect) {};

/**
 * 设置锁定界面，在界面未准备好前显示锁定界面，准备完毕后则移除锁定层，如果为空则什么都不显示
 * @param {!Laya.UIComponent} view 锁定界面内容
 * @return {void}
 */
Laya.Dialog.setLockView = function(view) {};

/**
 * 锁定所有层，显示加载条信息，防止下面内容被点击
 * @param {boolean} value
 * @return {void}
 */
Laya.Dialog.lock = function(value) {};

/**
 * 关闭所有对话框。
 * @return {void}
 */
Laya.Dialog.closeAll = function() {};

/**
 * 根据组获取对话框集合
 * @param {string} group 组名称
 * @return {!Array<?>} 对话框数组
 */
Laya.Dialog.getDialogsByGroup = function(group) {};

/**
 * 根据组关闭所有弹出框
 * @param {string} group 需要关闭的组名称
 * @return {!Array<?>}
 */
Laya.Dialog.closeByGroup = function(group) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * 创建一个新的 <code>DialogManager</code> 类实例。
 */
Laya.DialogManager = function() {};
/** @type {!Laya.Sprite} */
Laya.DialogManager.prototype.maskLayer;
/** @type {!Laya.Sprite} */
Laya.DialogManager.prototype.lockLayer;
/** @type {function(!Laya.Dialog): void} */
Laya.DialogManager.prototype.popupEffect;
/** @type {function(!Laya.Dialog): void} */
Laya.DialogManager.prototype.closeEffect;
/** @type {!Handler} */
Laya.DialogManager.prototype.popupEffectHandler;
/** @type {!Handler} */
Laya.DialogManager.prototype.closeEffectHandler;
/** @type {?} */
Laya.DialogManager.prototype._closeOnSide;
/** @type {?} */
Laya.DialogManager.prototype._onResize;
/** @type {?} */
Laya.DialogManager.prototype._centerDialog;
/** @type {?} */
Laya.DialogManager.prototype._clearDialogEffect;
/** @type {?} */
Laya.DialogManager.prototype._closeAll;

/**
 * 设置锁定界面，如果为空则什么都不显示
 * @param {!Laya.UIComponent} value
 * @return {void}
 */
Laya.DialogManager.prototype.setLockView = function(value) {};

/**
 * 显示对话框
 * @param {!Laya.Dialog} dialog 需要显示的对象框 <code>Dialog</code> 实例。
 * @param {boolean=} closeOther 是否关闭其它对话框，若值为ture，则关闭其它的对话框。
 * @param {boolean=} showEffect 是否显示弹出效果
 * @return {void}
 */
Laya.DialogManager.prototype.open = function(dialog, closeOther, showEffect) {};

/**
 * 执行打开对话框。
 * @param {!Laya.Dialog} dialog 需要关闭的对象框 <code>Dialog</code> 实例。
 * @return {void}
 */
Laya.DialogManager.prototype.doOpen = function(dialog) {};

/**
 * 锁定所有层，显示加载条信息，防止双击
 * @param {boolean} value
 * @return {void}
 */
Laya.DialogManager.prototype.lock = function(value) {};

/**
 * 关闭对话框。
 * @param {!Laya.Dialog} dialog 需要关闭的对象框 <code>Dialog</code> 实例。
 * @return {void}
 */
Laya.DialogManager.prototype.close = function(dialog) {};

/**
 * 执行关闭对话框。
 * @param {!Laya.Dialog} dialog 需要关闭的对象框 <code>Dialog</code> 实例。
 * @return {void}
 */
Laya.DialogManager.prototype.doClose = function(dialog) {};

/**
 * 关闭所有的对话框。
 * @return {void}
 */
Laya.DialogManager.prototype.closeAll = function() {};

/**
 * 根据组获取所有对话框
 * @param {string} group 组名称
 * @return {!Array<?>} 对话框数组
 */
Laya.DialogManager.prototype.getDialogsByGroup = function(group) {};

/**
 * 根据组关闭所有弹出框
 * @param {string} group 需要关闭的组名称
 * @return {!Array<?>} 需要关闭的对话框数组
 */
Laya.DialogManager.prototype.closeByGroup = function(group) {};

/**
 * @extends {Laya.Clip}
 * @constructor
 * @struct
 * @param {string=} skin 位图字体皮肤
 * @param {string=} sheet 位图字体内容，空格代表换行
 */
Laya.FontClip = function(skin, sheet) {};
/** @type {string} */
Laya.FontClip.prototype._valueArr;
/** @type {?} */
Laya.FontClip.prototype._indexMap;
/** @type {string} */
Laya.FontClip.prototype._sheet;
/** @type {string} */
Laya.FontClip.prototype._direction;
/** @type {number} */
Laya.FontClip.prototype._spaceX;
/** @type {number} */
Laya.FontClip.prototype._spaceY;
/** @type {?} */
Laya.FontClip.prototype._align;
/** @type {?} */
Laya.FontClip.prototype._wordsW;
/** @type {?} */
Laya.FontClip.prototype._wordsH;
/** @type {?} */
Laya.FontClip.prototype._onClipLoaded;

/* TODO: GetAccessor: Laya.sheet */

/* TODO: SetAccessor: Laya.sheet */

/* TODO: GetAccessor: Laya.value */

/* TODO: SetAccessor: Laya.value */

/* TODO: GetAccessor: Laya.direction */

/* TODO: SetAccessor: Laya.direction */

/* TODO: GetAccessor: Laya.spaceX */

/* TODO: SetAccessor: Laya.spaceX */

/* TODO: GetAccessor: Laya.spaceY */

/* TODO: SetAccessor: Laya.spaceY */

/* TODO: SetAccessor: Laya.align */

/* TODO: GetAccessor: Laya.align */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.FontClip.prototype.createChildren = function() {};

/**
 * 渲染数值
 * @protected
 * @return {void}
 */
Laya.FontClip.prototype.changeValue = function() {};

/**
 * @override
 * @protected
 * @return {number}
 */
Laya.FontClip.prototype.measureWidth = function() {};

/**
 * @override
 * @protected
 * @return {number}
 */
Laya.FontClip.prototype.measureHeight = function() {};

/**
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.FontClip.prototype.destroy = function(destroyChild) {};
/**
 * @extends {Laya.LayoutBox}
 * @constructor
 * @struct
 */
Laya.HBox = function() {};
/** @type {string} */
Laya.HBox.NONE;
/** @type {string} */
Laya.HBox.TOP;
/** @type {string} */
Laya.HBox.MIDDLE;
/** @type {string} */
Laya.HBox.BOTTOM;

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/**
 * @inheritDoc
 * @override
 * @protected
 * @param {!Array<?>} items
 * @return {void}
 */
Laya.HBox.prototype.sortItem = function(items) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.HBox.prototype.changeItems = function() {};
/**
 * @extends {Laya.ScrollBar}
 * @constructor
 * @struct
 */
Laya.HScrollBar = function() {};

/**
 * @override
 * @inheritDoc
 * @protected
 * @return {void}
 */
Laya.HScrollBar.prototype.initialize = function() {};

/**
 * @extends {Laya.Slider}
 * @constructor
 * @struct
 * 创建一个 <code>HSlider</code> 类实例。
 * @param {string=} skin 皮肤。
 */
Laya.HSlider = function(skin) {};
/**
 * @record
 * @struct
 */
Laya.IBox = function() {};
/**
 * @record
 * @struct
 */
Laya.IItem = function() {};

/**
 * 初始化列表项。
 * @return {void}
 */
Laya.IItem.prototype.initItems = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个 <code>Image</code> 实例。
 * @param {string=} skin 皮肤资源地址。
 */
Laya.Image = function(skin) {};
/** @type {string} */
Laya.Image.prototype._skin;
/** @type {string} */
Laya.Image.prototype._group;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.source */

/* TODO: SetAccessor: Laya.source */

/* TODO: GetAccessor: Laya.group */

/* TODO: SetAccessor: Laya.group */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Image.prototype.destroy = function(destroyChild) {};

/**
 * 销毁对象并释放加载的皮肤资源。
 * @return {void}
 */
Laya.Image.prototype.dispose = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Image.prototype.createChildren = function() {};

/**
 * @protected
 * @param {string} url
 * @param {?=} img
 * @return {void}
 */
Laya.Image.prototype.setSource = function(url, img) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Image.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Image.prototype.measureHeight = function() {};
/**
 * @record
 * @struct
 */
Laya.IRender = function() {};
/** @type {?} */
Laya.IRender.prototype.itemRender;
/**
 * @record
 * @struct
 */
Laya.ISelect = function() {};
/** @type {boolean} */
Laya.ISelect.prototype.selected;
/** @type {!Handler} */
Laya.ISelect.prototype.clickHandler;

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>Label</code> 实例。
 * @param {string=} text 文本内容字符串。
 */
Laya.Label = function(text) {};
/** @type {!Laya.Text} */
Laya.Label.prototype._tf;

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.wordWrap */

/* TODO: SetAccessor: Laya.wordWrap */

/* TODO: GetAccessor: Laya.color */

/* TODO: SetAccessor: Laya.color */

/* TODO: GetAccessor: Laya.font */

/* TODO: SetAccessor: Laya.font */

/* TODO: GetAccessor: Laya.align */

/* TODO: SetAccessor: Laya.align */

/* TODO: GetAccessor: Laya.valign */

/* TODO: SetAccessor: Laya.valign */

/* TODO: GetAccessor: Laya.bold */

/* TODO: SetAccessor: Laya.bold */

/* TODO: GetAccessor: Laya.italic */

/* TODO: SetAccessor: Laya.italic */

/* TODO: GetAccessor: Laya.leading */

/* TODO: SetAccessor: Laya.leading */

/* TODO: GetAccessor: Laya.fontSize */

/* TODO: SetAccessor: Laya.fontSize */

/* TODO: GetAccessor: Laya.padding */

/* TODO: SetAccessor: Laya.padding */

/* TODO: GetAccessor: Laya.bgColor */

/* TODO: SetAccessor: Laya.bgColor */

/* TODO: GetAccessor: Laya.borderColor */

/* TODO: SetAccessor: Laya.borderColor */

/* TODO: GetAccessor: Laya.stroke */

/* TODO: SetAccessor: Laya.stroke */

/* TODO: GetAccessor: Laya.strokeColor */

/* TODO: SetAccessor: Laya.strokeColor */

/* TODO: GetAccessor: Laya.textField */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.overflow */

/* TODO: SetAccessor: Laya.overflow */

/* TODO: GetAccessor: Laya.underline */

/* TODO: SetAccessor: Laya.underline */

/* TODO: GetAccessor: Laya.underlineColor */

/* TODO: SetAccessor: Laya.underlineColor */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Label.prototype.destroy = function(destroyChild) {};

/**
 * @override
 * @inheritDoc
 * @protected
 * @return {void}
 */
Laya.Label.prototype.createChildren = function() {};

/**
 * \@copy laya.display.Text#changeText()
 * @param {string} text
 * @return {void}
 */
Laya.Label.prototype.changeText = function(text) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Label.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Label.prototype.measureHeight = function() {};
/**
 * @extends {Laya.Box}
 * @constructor
 * @struct
 */
Laya.LayoutBox = function() {};
/** @type {number} */
Laya.LayoutBox.prototype._space;
/** @type {string} */
Laya.LayoutBox.prototype._align;
/** @type {boolean} */
Laya.LayoutBox.prototype._itemChanged;
/** @type {?} */
Laya.LayoutBox.prototype.onResize;

/* TODO: GetAccessor: Laya.space */

/* TODO: SetAccessor: Laya.space */

/* TODO: GetAccessor: Laya.align */

/* TODO: SetAccessor: Laya.align */

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @return {!Laya.Node}
 */
Laya.LayoutBox.prototype.addChild = function(child) {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @param {number} index
 * @return {!Laya.Node}
 */
Laya.LayoutBox.prototype.addChildAt = function(child, index) {};

/**
 * @inheritDoc
 * @override
 * @param {number} index
 * @return {!Laya.Node}
 */
Laya.LayoutBox.prototype.removeChildAt = function(index) {};

/**
 * 刷新。
 * @return {void}
 */
Laya.LayoutBox.prototype.refresh = function() {};

/**
 * 改变子对象的布局。
 * @protected
 * @return {void}
 */
Laya.LayoutBox.prototype.changeItems = function() {};

/**
 * 排序项目列表。可通过重写改变默认排序规则。
 * @protected
 * @param {!Array<?>} items 项目列表。
 * @return {void}
 */
Laya.LayoutBox.prototype.sortItem = function(items) {};

/**
 * @protected
 * @return {void}
 */
Laya.LayoutBox.prototype._setItemChanged = function() {};
/**
 * @extends {Laya.Box}
 * @implements {Laya.IRender}
 * @implements {Laya.IItem}
 * @constructor
 * @struct
 */
Laya.List = function() {};
/** @type {!Handler} */
Laya.List.prototype.selectHandler;
/** @type {!Handler} */
Laya.List.prototype.renderHandler;
/** @type {!Handler} */
Laya.List.prototype.mouseHandler;
/** @type {boolean} */
Laya.List.prototype.selectEnable;
/** @type {number} */
Laya.List.prototype.totalPage;
/** @type {!Laya.Box} */
Laya.List.prototype._content;
/** @type {!Laya.ScrollBar} */
Laya.List.prototype._scrollBar;
/** @type {?} */
Laya.List.prototype._itemRender;
/** @type {number} */
Laya.List.prototype._repeatX;
/** @type {number} */
Laya.List.prototype._repeatY;
/** @type {number} */
Laya.List.prototype._repeatX2;
/** @type {number} */
Laya.List.prototype._repeatY2;
/** @type {number} */
Laya.List.prototype._spaceX;
/** @type {number} */
Laya.List.prototype._spaceY;
/** @type {!Array<!Laya.Box>} */
Laya.List.prototype._cells;
/** @type {!Array<?>} */
Laya.List.prototype._array;
/** @type {number} */
Laya.List.prototype._startIndex;
/** @type {number} */
Laya.List.prototype._selectedIndex;
/** @type {number} */
Laya.List.prototype._page;
/** @type {boolean} */
Laya.List.prototype._isVertical;
/** @type {number} */
Laya.List.prototype._cellSize;
/** @type {number} */
Laya.List.prototype._cellOffset;
/** @type {boolean} */
Laya.List.prototype._isMoved;
/** @type {boolean} */
Laya.List.prototype.cacheContent;
/** @type {number} */
Laya.List.prototype._createdLine;
/** @type {boolean} */
Laya.List.prototype._cellChanged;
/** @type {!Laya.Point} */
Laya.List.prototype._offset;
/** @type {string} */
Laya.List.prototype._usedCache;
/** @type {boolean} */
Laya.List.prototype._elasticEnabled;

/* TODO: SetAccessor: Laya.cacheAs */

/* TODO: GetAccessor: Laya.cacheAs */
/** @type {?} */
Laya.List.prototype.onScrollStart;
/** @type {?} */
Laya.List.prototype.onScrollEnd;

/* TODO: GetAccessor: Laya.content */

/* TODO: GetAccessor: Laya.vScrollBarSkin */

/* TODO: SetAccessor: Laya.vScrollBarSkin */
/** @type {?} */
Laya.List.prototype._removePreScrollBar;

/* TODO: GetAccessor: Laya.hScrollBarSkin */

/* TODO: SetAccessor: Laya.hScrollBarSkin */

/* TODO: GetAccessor: Laya.scrollBar */

/* TODO: SetAccessor: Laya.scrollBar */

/* TODO: GetAccessor: Laya.itemRender */

/* TODO: SetAccessor: Laya.itemRender */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.repeatX */

/* TODO: SetAccessor: Laya.repeatX */

/* TODO: GetAccessor: Laya.repeatY */

/* TODO: SetAccessor: Laya.repeatY */

/* TODO: GetAccessor: Laya.spaceX */

/* TODO: SetAccessor: Laya.spaceX */

/* TODO: GetAccessor: Laya.spaceY */

/* TODO: SetAccessor: Laya.spaceY */
/** @type {?} */
Laya.List.prototype._getOneCell;
/** @type {?} */
Laya.List.prototype._createItems;
/** @type {?} */
Laya.List.prototype.posCell;

/* TODO: GetAccessor: Laya.selectedIndex */

/* TODO: SetAccessor: Laya.selectedIndex */

/* TODO: GetAccessor: Laya.selectedItem */

/* TODO: SetAccessor: Laya.selectedItem */

/* TODO: GetAccessor: Laya.selection */

/* TODO: SetAccessor: Laya.selection */

/* TODO: GetAccessor: Laya.startIndex */

/* TODO: SetAccessor: Laya.startIndex */
/** @type {?} */
Laya.List.prototype._bindData;

/* TODO: GetAccessor: Laya.array */
/** @type {?} */
Laya.List.prototype._preLen;

/* TODO: SetAccessor: Laya.array */

/* TODO: GetAccessor: Laya.page */

/* TODO: SetAccessor: Laya.page */

/* TODO: GetAccessor: Laya.length */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.cells */

/* TODO: GetAccessor: Laya.elasticEnabled */

/* TODO: SetAccessor: Laya.elasticEnabled */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.List.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.List.prototype.createChildren = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.List.prototype.changeCells = function() {};

/**
 * @protected
 * @return {!Laya.Box}
 */
Laya.List.prototype.createItem = function() {};

/**
 * @protected
 * @param {!Laya.Box} cell 需要添加的单元格对象。
 * @return {void}
 */
Laya.List.prototype.addCell = function(cell) {};

/**
 * 初始化单元格信息。
 * @return {void}
 */
Laya.List.prototype.initItems = function() {};

/**
 * 设置可视区域大小。
 * <p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
 * @param {number} width 可视区域宽度。
 * @param {number} height 可视区域高度。
 * @return {void}
 */
Laya.List.prototype.setContentSize = function(width, height) {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.List.prototype.onCellMouse = function(e) {};

/**
 * @protected
 * @param {!Laya.Box} cell 单元格对象。
 * @param {boolean} visible
 * @param {number} index 单元格的属性 <code>index</code> 值。
 * @return {void}
 */
Laya.List.prototype.changeCellState = function(cell, visible, index) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.List.prototype._sizeChanged = function() {};

/**
 * @protected
 * @param {!Laya.Event=} e
 * @return {void}
 */
Laya.List.prototype.onScrollBarChange = function(e) {};

/**
 * @protected
 * @return {void}
 */
Laya.List.prototype.changeSelectStatus = function() {};

/**
 * @protected
 * @param {number=} from
 * @param {number=} to
 * @return {void}
 */
Laya.List.prototype.renderItems = function(from, to) {};

/**
 * 渲染一个单元格。
 * @protected
 * @param {!Laya.Box} cell 需要渲染的单元格对象。
 * @param {number} index 单元格索引。
 * @return {void}
 */
Laya.List.prototype.renderItem = function(cell, index) {};

/**
 * 更新数据源，不刷新list，只增加滚动长度
 * @param {!Array<?>} array 数据源
 * @return {void}
 */
Laya.List.prototype.updateArray = function(array) {};

/**
 * 刷新列表数据源。
 * @return {void}
 */
Laya.List.prototype.refresh = function() {};

/**
 * 获取单元格数据源。
 * @param {number} index 单元格索引。
 * @return {?}
 */
Laya.List.prototype.getItem = function(index) {};

/**
 * 修改单元格数据源。
 * @param {number} index 单元格索引。
 * @param {?} source 单元格数据源。
 * @return {void}
 */
Laya.List.prototype.changeItem = function(index, source) {};

/**
 * 设置单元格数据源。
 * @param {number} index 单元格索引。
 * @param {?} source 单元格数据源。
 * @return {void}
 */
Laya.List.prototype.setItem = function(index, source) {};

/**
 * 添加单元格数据源。
 * @param {?} source 数据源。
 * @return {void}
 */
Laya.List.prototype.addItem = function(source) {};

/**
 * 添加单元格数据源到对应的数据索引处。
 * @param {?} souce 单元格数据源。
 * @param {number} index 索引。
 * @return {void}
 */
Laya.List.prototype.addItemAt = function(souce, index) {};

/**
 * 通过数据源索引删除单元格数据源。
 * @param {number} index 需要删除的数据源索引值。
 * @return {void}
 */
Laya.List.prototype.deleteItem = function(index) {};

/**
 * 通过可视单元格索引，获取单元格。
 * @param {number} index 可视单元格索引。
 * @return {!Laya.Box} 单元格对象。
 */
Laya.List.prototype.getCell = function(index) {};

/**
 * <p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
 * @param {number} index 单元格在数据列表中的索引。
 * @return {void}
 */
Laya.List.prototype.scrollTo = function(index) {};

/**
 * <p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
 * @param {number} index 单元格在数据列表中的索引。
 * @param {number=} time 缓动时间。
 * @param {!Handler=} complete 缓动结束回掉
 * @return {void}
 */
Laya.List.prototype.tweenTo = function(index, time, complete) {};

/**
 * @protected
 * @return {void}
 */
Laya.List.prototype._setCellChanged = function() {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.List.prototype.commitMeasure = function() {};

/**
 * @extends {Laya.Box}
 * @constructor
 * @struct
 * 创建一个新的 <code>Panel</code> 类实例。
 * <p>在 <code>Panel</code> 构造函数中设置属性width、height的值都为100。</p>
 */
Laya.Panel = function() {};
/** @type {!Laya.Box} */
Laya.Panel.prototype._content;
/** @type {!Laya.VScrollBar} */
Laya.Panel.prototype._vScrollBar;
/** @type {!Laya.HScrollBar} */
Laya.Panel.prototype._hScrollBar;
/** @type {boolean} */
Laya.Panel.prototype._scrollChanged;
/** @type {string} */
Laya.Panel.prototype._usedCache;
/** @type {boolean} */
Laya.Panel.prototype._elasticEnabled;
/** @type {?} */
Laya.Panel.prototype.onResize;

/* TODO: GetAccessor: Laya.numChildren */
/** @type {?} */
Laya.Panel.prototype.changeScroll;

/* TODO: GetAccessor: Laya.contentWidth */

/* TODO: GetAccessor: Laya.contentHeight */
/** @type {?} */
Laya.Panel.prototype.setContentSize;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.vScrollBarSkin */

/* TODO: SetAccessor: Laya.vScrollBarSkin */

/* TODO: GetAccessor: Laya.hScrollBarSkin */

/* TODO: SetAccessor: Laya.hScrollBarSkin */

/* TODO: GetAccessor: Laya.vScrollBar */

/* TODO: GetAccessor: Laya.hScrollBar */

/* TODO: GetAccessor: Laya.content */

/* TODO: SetAccessor: Laya.cacheAs */

/* TODO: GetAccessor: Laya.cacheAs */

/* TODO: GetAccessor: Laya.elasticEnabled */

/* TODO: SetAccessor: Laya.elasticEnabled */
/** @type {?} */
Laya.Panel.prototype.onScrollStart;
/** @type {?} */
Laya.Panel.prototype.onScrollEnd;

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Panel.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.Panel.prototype.destroyChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Panel.prototype.createChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.addChild = function(child) {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @param {number} index
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.addChildAt = function(child, index) {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.removeChild = function(child) {};

/**
 * @inheritDoc
 * @override
 * @param {number} index
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.removeChildAt = function(index) {};

/**
 * @inheritDoc
 * @override
 * @param {number=} beginIndex
 * @param {number=} endIndex
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.removeChildren = function(beginIndex, endIndex) {};

/**
 * @inheritDoc
 * @override
 * @param {number} index
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.getChildAt = function(index) {};

/**
 * @inheritDoc
 * @override
 * @param {string} name
 * @return {!Laya.Node}
 */
Laya.Panel.prototype.getChildByName = function(name) {};

/**
 * @inheritDoc
 * @override
 * @param {!Laya.Node} child
 * @return {number}
 */
Laya.Panel.prototype.getChildIndex = function(child) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Panel.prototype._sizeChanged = function() {};

/**
 * @protected
 * @param {!Laya.ScrollBar} scrollBar 滚动条对象。
 * @return {void}
 */
Laya.Panel.prototype.onScrollBarChange = function(scrollBar) {};

/**
 * <p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
 * @param {number=} x 水平方向滚动条属性value值。滚动条位置数字。
 * @param {number=} y 垂直方向滚动条属性value值。滚动条位置数字。
 * @return {void}
 */
Laya.Panel.prototype.scrollTo = function(x, y) {};

/**
 * 刷新滚动内容。
 * @return {void}
 */
Laya.Panel.prototype.refresh = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Panel.prototype._setScrollChanged = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>ProgressBar</code> 类实例。
 * @param {string=} skin 皮肤地址。
 */
Laya.ProgressBar = function(skin) {};
/** @type {!Handler} */
Laya.ProgressBar.prototype.changeHandler;
/** @type {!Laya.Image} */
Laya.ProgressBar.prototype._bg;
/** @type {!Laya.Image} */
Laya.ProgressBar.prototype._bar;
/** @type {string} */
Laya.ProgressBar.prototype._skin;
/** @type {number} */
Laya.ProgressBar.prototype._value;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.value */

/* TODO: SetAccessor: Laya.value */

/* TODO: GetAccessor: Laya.bar */

/* TODO: GetAccessor: Laya.bg */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.ProgressBar.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ProgressBar.prototype.createChildren = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ProgressBar.prototype._skinLoaded = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ProgressBar.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ProgressBar.prototype.measureHeight = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ProgressBar.prototype.changeValue = function() {};

/**
 * @extends {Laya.Button}
 * @constructor
 * @struct
 * 创建一个新的 <code>Radio</code> 类实例。
 * @param {string=} skin 皮肤。
 * @param {string=} label 标签。
 */
Laya.Radio = function(skin, label) {};
/** @type {?} */
Laya.Radio.prototype._value;

/* TODO: GetAccessor: Laya.value */

/* TODO: SetAccessor: Laya.value */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Radio.prototype.destroy = function(destroyChild) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.Radio.prototype.preinitialize = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Radio.prototype.initialize = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Radio.prototype.onClick = function(e) {};
/**
 * @extends {Laya.UIGroup}
 * @constructor
 * @struct
 */
Laya.RadioGroup = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @param {string} skin
 * @param {string} label
 * @return {!Laya.Sprite}
 */
Laya.RadioGroup.prototype.createItem = function(skin, label) {};
/**
 * @extends {Laya.Box}
 * @constructor
 * @struct
 */
Laya.ScaleBox = function() {};
/** @type {?} */
Laya.ScaleBox.prototype._oldW;
/** @type {?} */
Laya.ScaleBox.prototype._oldH;
/** @type {?} */
Laya.ScaleBox.prototype.onResize;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/**
 * @override
 * @return {void}
 */
Laya.ScaleBox.prototype.onEnable = function() {};

/**
 * @override
 * @return {void}
 */
Laya.ScaleBox.prototype.onDisable = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>ScrollBar</code> 实例。
 * @param {string=} skin 皮肤资源地址。
 */
Laya.ScrollBar = function(skin) {};
/** @type {number} */
Laya.ScrollBar.prototype.rollRatio;
/** @type {!Handler} */
Laya.ScrollBar.prototype.changeHandler;
/** @type {boolean} */
Laya.ScrollBar.prototype.scaleBar;
/** @type {boolean} */
Laya.ScrollBar.prototype.autoHide;
/** @type {number} */
Laya.ScrollBar.prototype.elasticDistance;
/** @type {number} */
Laya.ScrollBar.prototype.elasticBackTime;
/** @type {!Laya.Button} */
Laya.ScrollBar.prototype.upButton;
/** @type {!Laya.Button} */
Laya.ScrollBar.prototype.downButton;
/** @type {!Laya.Slider} */
Laya.ScrollBar.prototype.slider;
/** @type {boolean} */
Laya.ScrollBar.prototype._showButtons;
/** @type {number} */
Laya.ScrollBar.prototype._scrollSize;
/** @type {string} */
Laya.ScrollBar.prototype._skin;
/** @type {number} */
Laya.ScrollBar.prototype._thumbPercent;
/** @type {!Laya.Sprite} */
Laya.ScrollBar.prototype._target;
/** @type {!Laya.Point} */
Laya.ScrollBar.prototype._lastPoint;
/** @type {number} */
Laya.ScrollBar.prototype._lastOffset;
/** @type {boolean} */
Laya.ScrollBar.prototype._checkElastic;
/** @type {boolean} */
Laya.ScrollBar.prototype._isElastic;
/** @type {number} */
Laya.ScrollBar.prototype._value;
/** @type {boolean} */
Laya.ScrollBar.prototype._hide;
/** @type {boolean} */
Laya.ScrollBar.prototype._clickOnly;
/** @type {!Array<?>} */
Laya.ScrollBar.prototype._offsets;
/** @type {boolean} */
Laya.ScrollBar.prototype._touchScrollEnable;
/** @type {boolean} */
Laya.ScrollBar.prototype._mouseWheelEnable;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */
/** @type {?} */
Laya.ScrollBar.prototype.resetPositions;

/* TODO: GetAccessor: Laya.max */

/* TODO: SetAccessor: Laya.max */

/* TODO: GetAccessor: Laya.min */

/* TODO: SetAccessor: Laya.min */

/* TODO: GetAccessor: Laya.value */

/* TODO: SetAccessor: Laya.value */

/* TODO: GetAccessor: Laya.isVertical */

/* TODO: SetAccessor: Laya.isVertical */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: GetAccessor: Laya.scrollSize */

/* TODO: SetAccessor: Laya.scrollSize */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.thumbPercent */

/* TODO: SetAccessor: Laya.thumbPercent */

/* TODO: GetAccessor: Laya.target */

/* TODO: SetAccessor: Laya.target */

/* TODO: GetAccessor: Laya.hide */

/* TODO: SetAccessor: Laya.hide */

/* TODO: GetAccessor: Laya.showButtons */

/* TODO: SetAccessor: Laya.showButtons */

/* TODO: GetAccessor: Laya.touchScrollEnable */

/* TODO: SetAccessor: Laya.touchScrollEnable */

/* TODO: GetAccessor: Laya.mouseWheelEnable */

/* TODO: SetAccessor: Laya.mouseWheelEnable */
/** @type {!Function} */
Laya.ScrollBar.prototype.isLockedFun;
/** @type {?} */
Laya.ScrollBar.prototype.cancelDragOp;
/** @type {!Function} */
Laya.ScrollBar.prototype.triggerDownDragLimit;
/** @type {!Function} */
Laya.ScrollBar.prototype.triggerUpDragLimit;
/** @type {?} */
Laya.ScrollBar.prototype.checkTriggers;

/* TODO: GetAccessor: Laya.lastOffset */
/** @type {?} */
Laya.ScrollBar.prototype.elasticOver;

/* TODO: GetAccessor: Laya.tick */

/* TODO: SetAccessor: Laya.tick */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.ScrollBar.prototype.destroy = function(destroyChild) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.createChildren = function() {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.initialize = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.onSliderChange = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ScrollBar.prototype.onButtonMouseDown = function(e) {};

/**
 * @protected
 * @param {boolean} isUp
 * @return {void}
 */
Laya.ScrollBar.prototype.startLoop = function(isUp) {};

/**
 * @protected
 * @param {boolean} isUp
 * @return {void}
 */
Laya.ScrollBar.prototype.slide = function(isUp) {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ScrollBar.prototype.onStageMouseUp = function(e) {};

/**
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype._skinLoaded = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.changeScrollBar = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype._sizeChanged = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.resetButtonPosition = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ScrollBar.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.ScrollBar.prototype.measureHeight = function() {};

/**
 * 设置滚动条信息。
 * @param {number} min 滚动条最小位置值。
 * @param {number} max 滚动条最大位置值。
 * @param {number} value 滚动条当前位置值。
 * @return {void}
 */
Laya.ScrollBar.prototype.setScroll = function(min, max, value) {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ScrollBar.prototype.onTargetMouseWheel = function(e) {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ScrollBar.prototype.onTargetMouseDown = function(e) {};

/**
 * @return {void}
 */
Laya.ScrollBar.prototype.startDragForce = function() {};

/**
 * @param {number} lastOffset
 * @return {void}
 */
Laya.ScrollBar.prototype.startTweenMoveForce = function(lastOffset) {};

/**
 * @protected
 * @return {void}
 */
Laya.ScrollBar.prototype.loop = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.ScrollBar.prototype.onStageMouseUp2 = function(e) {};

/**
 * @protected
 * @param {number} maxDistance
 * @return {void}
 */
Laya.ScrollBar.prototype.tweenMove = function(maxDistance) {};

/**
 * 停止滑动。
 * @return {void}
 */
Laya.ScrollBar.prototype.stopScroll = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 * 创建一个新的 <code>Slider</code> 类示例。
 * @param {string=} skin 皮肤。
 */
Laya.Slider = function(skin) {};
/** @type {!Laya.Label} */
Laya.Slider.label;
/** @type {!Handler} */
Laya.Slider.prototype.changeHandler;
/** @type {boolean} */
Laya.Slider.prototype.isVertical;
/** @type {boolean} */
Laya.Slider.prototype.showLabel;
/** @type {boolean} */
Laya.Slider.prototype._allowClickBack;
/** @type {number} */
Laya.Slider.prototype._max;
/** @type {number} */
Laya.Slider.prototype._min;
/** @type {number} */
Laya.Slider.prototype._tick;
/** @type {number} */
Laya.Slider.prototype._value;
/** @type {string} */
Laya.Slider.prototype._skin;
/** @type {!Laya.Image} */
Laya.Slider.prototype._bg;
/** @type {!Laya.Image} */
Laya.Slider.prototype._progress;
/** @type {!Laya.Button} */
Laya.Slider.prototype._bar;
/** @type {number} */
Laya.Slider.prototype._tx;
/** @type {number} */
Laya.Slider.prototype._ty;
/** @type {number} */
Laya.Slider.prototype._maxMove;
/** @type {!Laya.Point} */
Laya.Slider.prototype._globalSacle;
/** @type {?} */
Laya.Slider.prototype.mouseUp;
/** @type {?} */
Laya.Slider.prototype.mouseMove;

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: GetAccessor: Laya.tick */

/* TODO: SetAccessor: Laya.tick */

/* TODO: GetAccessor: Laya.max */

/* TODO: SetAccessor: Laya.max */

/* TODO: GetAccessor: Laya.min */

/* TODO: SetAccessor: Laya.min */

/* TODO: GetAccessor: Laya.value */

/* TODO: SetAccessor: Laya.value */

/* TODO: GetAccessor: Laya.allowClickBack */

/* TODO: SetAccessor: Laya.allowClickBack */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.bar */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Slider.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Slider.prototype.createChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Slider.prototype.initialize = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Slider.prototype.onBarMouseDown = function(e) {};

/**
 * @protected
 * @return {void}
 */
Laya.Slider.prototype.showValueText = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Slider.prototype.hideValueText = function() {};

/**
 * @protected
 * @param {string=} type
 * @return {void}
 */
Laya.Slider.prototype.sendChangeEvent = function(type) {};

/**
 * @protected
 * @return {void}
 */
Laya.Slider.prototype._skinLoaded = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.Slider.prototype.setBarPoint = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Slider.prototype.measureWidth = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {number}
 */
Laya.Slider.prototype.measureHeight = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.Slider.prototype._sizeChanged = function() {};

/**
 * 设置滑动条的信息。
 * @param {number} min 滑块的最小值。
 * @param {number} max 滑块的最小值。
 * @param {number} value 滑块的当前值。
 * @return {void}
 */
Laya.Slider.prototype.setSlider = function(min, max, value) {};

/**
 * @return {void}
 */
Laya.Slider.prototype.changeValue = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.Slider.prototype.onBgMouseDown = function(e) {};
/**
 * @constructor
 * @struct
 */
Laya.Styles = function() {};
/** @type {!Array<?>} */
Laya.Styles.defaultSizeGrid;
/** @type {string} */
Laya.Styles.labelColor;
/** @type {!Array<?>} */
Laya.Styles.labelPadding;
/** @type {!Array<?>} */
Laya.Styles.inputLabelPadding;
/** @type {number} */
Laya.Styles.buttonStateNum;
/** @type {!Array<?>} */
Laya.Styles.buttonLabelColors;
/** @type {!Array<?>} */
Laya.Styles.comboBoxItemColors;
/** @type {number} */
Laya.Styles.scrollBarMinNum;
/** @type {number} */
Laya.Styles.scrollBarDelayTime;
/**
 * @extends {Laya.UIGroup}
 * @constructor
 * @struct
 */
Laya.Tab = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @param {string} skin
 * @param {string} label
 * @return {!Laya.Sprite}
 */
Laya.Tab.prototype.createItem = function(skin, label) {};

/**
 * @extends {Laya.TextInput}
 * @constructor
 * @struct
 * <p>创建一个新的 <code>TextArea</code> 示例。</p>
 * @param {string=} text 文本内容字符串。
 */
Laya.TextArea = function(text) {};
/** @type {!Laya.VScrollBar} */
Laya.TextArea.prototype._vScrollBar;
/** @type {!Laya.HScrollBar} */
Laya.TextArea.prototype._hScrollBar;
/** @type {?} */
Laya.TextArea.prototype._onTextChange;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.vScrollBarSkin */

/* TODO: SetAccessor: Laya.vScrollBarSkin */

/* TODO: GetAccessor: Laya.hScrollBarSkin */

/* TODO: SetAccessor: Laya.hScrollBarSkin */

/* TODO: GetAccessor: Laya.vScrollBar */

/* TODO: GetAccessor: Laya.hScrollBar */

/* TODO: GetAccessor: Laya.maxScrollY */

/* TODO: GetAccessor: Laya.scrollY */

/* TODO: GetAccessor: Laya.maxScrollX */

/* TODO: GetAccessor: Laya.scrollX */
/** @type {?} */
Laya.TextArea.prototype.changeScroll;

/**
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.TextArea.prototype.destroy = function(destroyChild) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.TextArea.prototype.initialize = function() {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.TextArea.prototype.onVBarChanged = function(e) {};

/**
 * @protected
 * @param {!Laya.Event} e
 * @return {void}
 */
Laya.TextArea.prototype.onHBarChanged = function(e) {};

/**
 * 滚动到某个位置
 * @param {number} y
 * @return {void}
 */
Laya.TextArea.prototype.scrollTo = function(y) {};

/**
 * @extends {Laya.Label}
 * @constructor
 * @struct
 * 创建一个新的 <code>TextInput</code> 类实例。
 * @param {string=} text 文本内容。
 */
Laya.TextInput = function(text) {};
/** @type {!Laya.AutoBitmap} */
Laya.TextInput.prototype._bg;
/** @type {string} */
Laya.TextInput.prototype._skin;
/** @type {?} */
Laya.TextInput.prototype._onFocus;
/** @type {?} */
Laya.TextInput.prototype._onBlur;
/** @type {?} */
Laya.TextInput.prototype._onInput;
/** @type {?} */
Laya.TextInput.prototype._onEnter;

/* TODO: GetAccessor: Laya.bg */

/* TODO: SetAccessor: Laya.bg */

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.sizeGrid */

/* TODO: SetAccessor: Laya.text */

/* TODO: GetAccessor: Laya.text */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.multiline */

/* TODO: SetAccessor: Laya.multiline */

/* TODO: SetAccessor: Laya.editable */

/* TODO: GetAccessor: Laya.editable */

/* TODO: GetAccessor: Laya.restrict */

/* TODO: SetAccessor: Laya.restrict */

/* TODO: GetAccessor: Laya.prompt */

/* TODO: SetAccessor: Laya.prompt */

/* TODO: GetAccessor: Laya.promptColor */

/* TODO: SetAccessor: Laya.promptColor */

/* TODO: GetAccessor: Laya.maxChars */

/* TODO: SetAccessor: Laya.maxChars */

/* TODO: GetAccessor: Laya.focus */

/* TODO: SetAccessor: Laya.focus */

/* TODO: GetAccessor: Laya.type */

/* TODO: SetAccessor: Laya.type */

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.TextInput.prototype.preinitialize = function() {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.TextInput.prototype.destroy = function(destroyChild) {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.TextInput.prototype.createChildren = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.TextInput.prototype.initialize = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.TextInput.prototype._skinLoaded = function() {};

/**
 * 选中输入框内的文本。
 * @return {void}
 */
Laya.TextInput.prototype.select = function() {};

/**
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {void}
 */
Laya.TextInput.prototype.setSelection = function(startIndex, endIndex) {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 */
Laya.TipManager = function() {};
/** @type {number} */
Laya.TipManager.offsetX;
/** @type {number} */
Laya.TipManager.offsetY;
/** @type {string} */
Laya.TipManager.tipTextColor;
/** @type {string} */
Laya.TipManager.tipBackColor;
/** @type {number} */
Laya.TipManager.tipDelay;
/** @type {?} */
Laya.TipManager.prototype._tipBox;
/** @type {?} */
Laya.TipManager.prototype._tipText;
/** @type {?} */
Laya.TipManager.prototype._defaultTipHandler;
/** @type {?} */
Laya.TipManager.prototype._onStageHideTip;
/** @type {?} */
Laya.TipManager.prototype._onStageShowTip;
/** @type {?} */
Laya.TipManager.prototype._showTip;
/** @type {?} */
Laya.TipManager.prototype._onStageMouseDown;
/** @type {?} */
Laya.TipManager.prototype._onStageMouseMove;
/** @type {?} */
Laya.TipManager.prototype._showToStage;
/** @type {?} */
Laya.TipManager.prototype._showDefaultTip;

/* TODO: GetAccessor: Laya.defaultTipHandler */

/* TODO: SetAccessor: Laya.defaultTipHandler */

/**
 * 关闭所有鼠标提示
 * @return {void}
 */
Laya.TipManager.prototype.closeAll = function() {};

/**
 * 显示显示对象类型的tip
 * @param {!Laya.Sprite} tip
 * @return {void}
 */
Laya.TipManager.prototype.showDislayTip = function(tip) {};

/**
 * @extends {Laya.Box}
 * @implements {Laya.IRender}
 * @constructor
 * @struct
 * 创建一个新的 <code>Tree</code> 类实例。
 * <p>在 <code>Tree</code> 构造函数中设置属性width、height的值都为200。</p>
 */
Laya.Tree = function() {};
/** @type {!Laya.List} */
Laya.Tree.prototype._list;
/** @type {!Array<?>} */
Laya.Tree.prototype._source;
/** @type {!Handler} */
Laya.Tree.prototype._renderHandler;
/** @type {number} */
Laya.Tree.prototype._spaceLeft;
/** @type {number} */
Laya.Tree.prototype._spaceBottom;
/** @type {boolean} */
Laya.Tree.prototype._keepStatus;

/* TODO: GetAccessor: Laya.keepStatus */

/* TODO: SetAccessor: Laya.keepStatus */

/* TODO: GetAccessor: Laya.array */

/* TODO: SetAccessor: Laya.array */

/* TODO: GetAccessor: Laya.source */

/* TODO: GetAccessor: Laya.list */

/* TODO: GetAccessor: Laya.itemRender */

/* TODO: SetAccessor: Laya.itemRender */

/* TODO: GetAccessor: Laya.scrollBarSkin */

/* TODO: SetAccessor: Laya.scrollBarSkin */

/* TODO: GetAccessor: Laya.scrollBar */

/* TODO: GetAccessor: Laya.mouseHandler */

/* TODO: SetAccessor: Laya.mouseHandler */

/* TODO: GetAccessor: Laya.renderHandler */

/* TODO: SetAccessor: Laya.renderHandler */

/* TODO: GetAccessor: Laya.spaceLeft */

/* TODO: SetAccessor: Laya.spaceLeft */

/* TODO: GetAccessor: Laya.spaceBottom */

/* TODO: SetAccessor: Laya.spaceBottom */

/* TODO: GetAccessor: Laya.selectedIndex */

/* TODO: SetAccessor: Laya.selectedIndex */

/* TODO: GetAccessor: Laya.selectedItem */

/* TODO: SetAccessor: Laya.selectedItem */

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */
/** @type {?} */
Laya.Tree.prototype.onArrowClick;

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: SetAccessor: Laya.xml */

/* TODO: GetAccessor: Laya.selectedPath */
/** @type {?} */
Laya.Tree.prototype.getFilterSource;

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.Tree.prototype.destroy = function(destroyChild) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.Tree.prototype.createChildren = function() {};

/**
 * @protected
 * @param {!Laya.Event=} e
 * @return {void}
 */
Laya.Tree.prototype.onListChange = function(e) {};

/**
 * @protected
 * @return {!Array<?>}
 */
Laya.Tree.prototype.getArray = function() {};

/**
 * @protected
 * @param {?} item
 * @param {number=} num
 * @return {number}
 */
Laya.Tree.prototype.getDepth = function(item, num) {};

/**
 * @protected
 * @param {?} item
 * @return {boolean}
 */
Laya.Tree.prototype.getParentOpenStatus = function(item) {};

/**
 * @protected
 * @param {!Laya.Box} cell 一个项对象。
 * @param {number} index 项的索引。
 * @return {void}
 */
Laya.Tree.prototype.renderItem = function(cell, index) {};

/**
 * 设置指定项索引的项对象的打开状态。
 * @param {number} index 项索引。
 * @param {boolean} isOpen 是否处于打开状态。
 * @return {void}
 */
Laya.Tree.prototype.setItemState = function(index, isOpen) {};

/**
 * 刷新项列表。
 * @return {void}
 */
Laya.Tree.prototype.fresh = function() {};

/**
 * @protected
 * @param {!ChildNode} xml
 * @param {!Array<?>} source
 * @param {?} nodeParent
 * @param {boolean} isRoot
 * @return {void}
 */
Laya.Tree.prototype.parseXml = function(xml, source, nodeParent, isRoot) {};

/**
 * @protected
 * @param {!Array<?>} oldSource
 * @param {!Array<?>} newSource
 * @return {void}
 */
Laya.Tree.prototype.parseOpenStatus = function(oldSource, newSource) {};

/**
 * @protected
 * @param {?} item1 项对象。
 * @param {?} item2 项对象。
 * @return {boolean} 如果父节点相同值为true，否则值为false。
 */
Laya.Tree.prototype.isSameParent = function(item1, item2) {};

/**
 * 更新项列表，显示指定键名的数据项。
 * @param {string} key 键名。
 * @return {void}
 */
Laya.Tree.prototype.filter = function(key) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 * <p>创建一个新的 <code>Component</code> 实例。</p>
 * @param {boolean=} createChildren
 */
Laya.UIComponent = function(createChildren) {};
/** @type {number} */
Laya.UIComponent.prototype._anchorX;
/** @type {number} */
Laya.UIComponent.prototype._anchorY;
/** @type {?} */
Laya.UIComponent.prototype._dataSource;
/** @type {?} */
Laya.UIComponent.prototype._toolTip;
/** @type {?} */
Laya.UIComponent.prototype._tag;
/** @type {boolean} */
Laya.UIComponent.prototype._disabled;
/** @type {boolean} */
Laya.UIComponent.prototype._gray;
/** @type {!Laya.Widget} */
Laya.UIComponent.prototype._widget;

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.top */

/* TODO: SetAccessor: Laya.top */

/* TODO: GetAccessor: Laya.bottom */

/* TODO: SetAccessor: Laya.bottom */

/* TODO: GetAccessor: Laya.left */

/* TODO: SetAccessor: Laya.left */

/* TODO: GetAccessor: Laya.right */

/* TODO: SetAccessor: Laya.right */

/* TODO: GetAccessor: Laya.centerX */

/* TODO: SetAccessor: Laya.centerX */

/* TODO: GetAccessor: Laya.centerY */

/* TODO: SetAccessor: Laya.centerY */

/* TODO: GetAccessor: Laya.tag */

/* TODO: SetAccessor: Laya.tag */

/* TODO: GetAccessor: Laya.toolTip */

/* TODO: SetAccessor: Laya.toolTip */
/** @type {?} */
Laya.UIComponent.prototype.onMouseOver;
/** @type {?} */
Laya.UIComponent.prototype.onMouseOut;

/* TODO: GetAccessor: Laya.gray */

/* TODO: SetAccessor: Laya.gray */

/* TODO: GetAccessor: Laya.disabled */

/* TODO: SetAccessor: Laya.disabled */
/** @type {?} */
Laya.UIComponent.prototype._getWidget;

/* TODO: SetAccessor: Laya.scaleX */

/* TODO: GetAccessor: Laya.scaleX */

/* TODO: SetAccessor: Laya.scaleY */

/* TODO: GetAccessor: Laya.scaleY */

/* TODO: SetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.anchorX */

/* TODO: SetAccessor: Laya.anchorX */

/* TODO: GetAccessor: Laya.anchorY */

/* TODO: SetAccessor: Laya.anchorY */

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.UIComponent.prototype.destroy = function(destroyChild) {};

/**
 * <p>预初始化。</p>
 * 子类可在此函数内设置、修改属性默认值
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype.preinitialize = function() {};

/**
 * <p>创建并添加控件子节点。</p>
 * 子类可在此函数内创建并添加子节点。
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype.createChildren = function() {};

/**
 * <p>控件初始化。</p>
 * 在此子对象已被创建，可以对子对象进行修改。
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype.initialize = function() {};

/**
 * @override
 * @return {number}
 */
Laya.UIComponent.prototype.get_width = function() {};

/**
 * <p>显示对象的实际显示区域宽度（以像素为单位）。</p>
 * @protected
 * @return {number}
 */
Laya.UIComponent.prototype.measureWidth = function() {};

/**
 * <p>立即执行影响宽高度量的延迟调用函数。</p>
 * <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
 * @see #callLater() / #runCallLater()
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype.commitMeasure = function() {};

/**
 * @override
 * @return {number}
 */
Laya.UIComponent.prototype.get_height = function() {};

/**
 * <p>显示对象的实际显示区域高度（以像素为单位）。</p>
 * @protected
 * @return {number}
 */
Laya.UIComponent.prototype.measureHeight = function() {};

/**
 * @return {?}
 */
Laya.UIComponent.prototype.get_dataSource = function() {};

/**
 * @param {?} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_dataSource = function(value) {};

/**
 * @return {number}
 */
Laya.UIComponent.prototype.get_top = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_top = function(value) {};

/**
 * @return {number}
 */
Laya.UIComponent.prototype.get_bottom = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_bottom = function(value) {};

/**
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype._sizeChanged = function() {};

/**
 * @override
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_scaleX = function(value) {};

/**
 * @override
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_scaleY = function(value) {};

/**
 * @protected
 * @return {void}
 */
Laya.UIComponent.prototype.onCompResize = function() {};

/**
 * @override
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_width = function(value) {};

/**
 * @override
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_height = function(value) {};

/**
 * @return {number}
 */
Laya.UIComponent.prototype.get_anchorX = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_anchorX = function(value) {};

/**
 * @return {number}
 */
Laya.UIComponent.prototype.get_anchorY = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.UIComponent.prototype.set_anchorY = function(value) {};

/**
 * @override
 * @protected
 * @param {!Laya.Node=} child
 * @return {void}
 */
Laya.UIComponent.prototype._childChanged = function(child) {};
/**
 * @extends {Laya.Event}
 * @constructor
 * @struct
 */
Laya.UIEvent = function() {};
/** @type {string} */
Laya.UIEvent.SHOW_TIP;
/** @type {string} */
Laya.UIEvent.HIDE_TIP;

/**
 * @extends {Laya.Box}
 * @implements {Laya.IItem}
 * @constructor
 * @struct
 * 创建一个新的 <code>Group</code> 类实例。
 * @param {string=} labels 标签集字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
 * @param {string=} skin 皮肤。
 */
Laya.UIGroup = function(labels, skin) {};
/** @type {!Handler} */
Laya.UIGroup.prototype.selectHandler;
/** @type {!Array<!Laya.ISelect>} */
Laya.UIGroup.prototype._items;
/** @type {number} */
Laya.UIGroup.prototype._selectedIndex;
/** @type {string} */
Laya.UIGroup.prototype._skin;
/** @type {string} */
Laya.UIGroup.prototype._direction;
/** @type {number} */
Laya.UIGroup.prototype._space;
/** @type {string} */
Laya.UIGroup.prototype._labels;
/** @type {string} */
Laya.UIGroup.prototype._labelColors;
/** @type {?} */
Laya.UIGroup.prototype._labelFont;
/** @type {string} */
Laya.UIGroup.prototype._labelStrokeColor;
/** @type {string} */
Laya.UIGroup.prototype._strokeColors;
/** @type {number} */
Laya.UIGroup.prototype._labelStroke;
/** @type {number} */
Laya.UIGroup.prototype._labelSize;
/** @type {boolean} */
Laya.UIGroup.prototype._labelBold;
/** @type {string} */
Laya.UIGroup.prototype._labelPadding;
/** @type {string} */
Laya.UIGroup.prototype._labelAlign;
/** @type {number} */
Laya.UIGroup.prototype._stateNum;
/** @type {boolean} */
Laya.UIGroup.prototype._labelChanged;

/* TODO: GetAccessor: Laya.selectedIndex */

/* TODO: SetAccessor: Laya.selectedIndex */

/* TODO: GetAccessor: Laya.skin */

/* TODO: SetAccessor: Laya.skin */

/* TODO: GetAccessor: Laya.labels */

/* TODO: SetAccessor: Laya.labels */

/* TODO: GetAccessor: Laya.labelColors */

/* TODO: SetAccessor: Laya.labelColors */

/* TODO: GetAccessor: Laya.labelStroke */

/* TODO: SetAccessor: Laya.labelStroke */

/* TODO: GetAccessor: Laya.labelStrokeColor */

/* TODO: SetAccessor: Laya.labelStrokeColor */

/* TODO: GetAccessor: Laya.strokeColors */

/* TODO: SetAccessor: Laya.strokeColors */

/* TODO: GetAccessor: Laya.labelSize */

/* TODO: SetAccessor: Laya.labelSize */

/* TODO: GetAccessor: Laya.stateNum */

/* TODO: SetAccessor: Laya.stateNum */

/* TODO: GetAccessor: Laya.labelBold */

/* TODO: SetAccessor: Laya.labelBold */

/* TODO: GetAccessor: Laya.labelFont */

/* TODO: SetAccessor: Laya.labelFont */

/* TODO: GetAccessor: Laya.labelPadding */

/* TODO: SetAccessor: Laya.labelPadding */

/* TODO: GetAccessor: Laya.direction */

/* TODO: SetAccessor: Laya.direction */

/* TODO: GetAccessor: Laya.space */

/* TODO: SetAccessor: Laya.space */

/* TODO: GetAccessor: Laya.items */

/* TODO: GetAccessor: Laya.selection */

/* TODO: SetAccessor: Laya.selection */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.UIGroup.prototype.preinitialize = function() {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.UIGroup.prototype.destroy = function(destroyChild) {};

/**
 * 添加一个项对象，返回此项对象的索引id。
 * @param {!Laya.ISelect} item 需要添加的项对象。
 * @param {boolean=} autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
 * @return {number}
 */
Laya.UIGroup.prototype.addItem = function(item, autoLayOut) {};

/**
 * 删除一个项对象。
 * @param {!Laya.ISelect} item 需要删除的项对象。
 * @param {boolean=} autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
 * @return {void}
 */
Laya.UIGroup.prototype.delItem = function(item, autoLayOut) {};

/**
 * 初始化项对象们。
 * @return {void}
 */
Laya.UIGroup.prototype.initItems = function() {};

/**
 * @protected
 * @param {number} index 项索引。
 * @return {void}
 */
Laya.UIGroup.prototype.itemClick = function(index) {};

/**
 * @protected
 * @param {number} index 需要设置的项对象的索引。
 * @param {boolean} selected 表示项对象的选中状态。
 * @return {void}
 */
Laya.UIGroup.prototype.setSelect = function(index, selected) {};

/**
 * @protected
 * @return {void}
 */
Laya.UIGroup.prototype._skinLoaded = function() {};

/**
 * @protected
 * @param {string} skin 项对象的皮肤。
 * @param {string} label 项对象标签。
 * @return {!Laya.Sprite}
 */
Laya.UIGroup.prototype.createItem = function(skin, label) {};

/**
 * @protected
 * @return {void}
 */
Laya.UIGroup.prototype.changeLabels = function() {};

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.UIGroup.prototype.commitMeasure = function() {};

/**
 * @protected
 * @return {void}
 */
Laya.UIGroup.prototype._setLabelChanged = function() {};
/**
 * @constructor
 * @struct
 */
Laya.UILib = function() {};

/**
 * @return {void}
 */
Laya.UILib.__init__ = function() {};
/**
 * @constructor
 * @struct
 */
Laya.UIUtils = function() {};
/** @type {?} */
Laya.UIUtils.grayFilter;
/** @type {?} */
Laya.UIUtils.escapeSequence;
/** @type {?} */
Laya.UIUtils._getReplaceStr;
/** @type {?} */
Laya.UIUtils._funMap;

/**
 * 用字符串填充数组，并返回数组副本。
 * @param {!Array<?>} arr 源数组对象。
 * @param {string} str 用逗号连接的字符串。如"p1,p2,p3,p4"。
 * @param {(!NumberConstructor|!StringConstructor)=} type 如果值不为null，则填充的是新增值得类型。
 * @return {!Array<?>} 填充后的数组。
 */
Laya.UIUtils.fillArray = function(arr, str, type) {};

/**
 * 转换uint类型颜色值为字符型颜色值。
 * @param {number} color uint颜色值。
 * @return {string} 字符型颜色值。
 */
Laya.UIUtils.toColor = function(color) {};

/**
 * 给指定的目标显示对象添加或移除灰度滤镜。
 * @param {!Laya.Sprite} traget 目标显示对象。
 * @param {boolean=} isGray 如果值true，则添加灰度滤镜，否则移除灰度滤镜。
 * @return {void}
 */
Laya.UIUtils.gray = function(traget, isGray) {};

/**
 * 给指定的目标显示对象添加滤镜。
 * @param {!Laya.Sprite} target 目标显示对象。
 * @param {!Laya.IFilter} filter 滤镜对象。
 * @return {void}
 */
Laya.UIUtils.addFilter = function(target, filter) {};

/**
 * 移除目标显示对象的指定类型滤镜。
 * @param {!Laya.Sprite} target 目标显示对象。
 * @param {function(new:?)} filterType 滤镜类型。
 * @return {void}
 */
Laya.UIUtils.clearFilter = function(target, filterType) {};

/**
 * 替换字符串中的转义字符
 * @param {string} str
 * @return {string}
 */
Laya.UIUtils.adptString = function(str) {};

/**
 * @param {string} value
 * @return {!Function}
 */
Laya.UIUtils.getBindFun = function(value) {};
/**
 * @extends {Laya.LayoutBox}
 * @constructor
 * @struct
 */
Laya.VBox = function() {};
/** @type {string} */
Laya.VBox.NONE;
/** @type {string} */
Laya.VBox.LEFT;
/** @type {string} */
Laya.VBox.CENTER;
/** @type {string} */
Laya.VBox.RIGHT;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */
/** @type {boolean} */
Laya.VBox.prototype.isSortItem;

/**
 * @inheritDoc
 * @override
 * @protected
 * @return {void}
 */
Laya.VBox.prototype.changeItems = function() {};

/**
 * @extends {Laya.Scene}
 * @constructor
 * @struct
 */
Laya.View = function() {};
/** @type {?} */
Laya.View.uiMap;
/** @type {!Laya.Widget} */
Laya.View.prototype._widget;
/** @type {?} */
Laya.View.prototype._dataSource;
/** @type {number} */
Laya.View.prototype._anchorX;
/** @type {number} */
Laya.View.prototype._anchorY;

/* TODO: GetAccessor: Laya.top */

/* TODO: SetAccessor: Laya.top */

/* TODO: GetAccessor: Laya.bottom */

/* TODO: SetAccessor: Laya.bottom */

/* TODO: GetAccessor: Laya.left */

/* TODO: SetAccessor: Laya.left */

/* TODO: GetAccessor: Laya.right */

/* TODO: SetAccessor: Laya.right */

/* TODO: GetAccessor: Laya.centerX */

/* TODO: SetAccessor: Laya.centerX */

/* TODO: GetAccessor: Laya.centerY */

/* TODO: SetAccessor: Laya.centerY */

/* TODO: GetAccessor: Laya.anchorX */

/* TODO: SetAccessor: Laya.anchorX */

/* TODO: GetAccessor: Laya.anchorY */

/* TODO: SetAccessor: Laya.anchorY */
/** @type {?} */
Laya.View.prototype._getWidget;

/* TODO: GetAccessor: Laya.dataSource */

/* TODO: SetAccessor: Laya.dataSource */

/**
 * @return {void}
 */
Laya.View.__init__ = function() {};

/**
 * @param {string} key 组件类的关键字。
 * @param {function(new:?)} compClass 组件类对象。
 * @return {void}
 */
Laya.View.regComponent = function(key, compClass) {};

/**
 * @param {string} key UI视图类的关键字。
 * @param {function(new:?)} compClass UI视图类对应的逻辑处理类。
 * @return {void}
 */
Laya.View.regViewRuntime = function(key, compClass) {};

/**
 * @param {string} url UI的路径
 * @param {?} json UI内容
 * @return {void}
 */
Laya.View.regUI = function(url, json) {};

/**
 * @inheritDoc
 * @override
 * @param {boolean=} destroyChild
 * @return {void}
 */
Laya.View.prototype.destroy = function(destroyChild) {};

/**
 * @param {string} key
 * @return {void}
 */
Laya.View.prototype.changeData = function(key) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.View.prototype._sizeChanged = function() {};

/**
 * @protected
 * @param {string} path
 * @return {void}
 */
Laya.View.prototype.loadUI = function(path) {};
/**
 * @extends {Laya.Box}
 * @implements {Laya.IItem}
 * @constructor
 * @struct
 */
Laya.ViewStack = function() {};
/** @type {!Array<?>} */
Laya.ViewStack.prototype._items;
/** @type {!Handler} */
Laya.ViewStack.prototype._setIndexHandler;
/** @type {number} */
Laya.ViewStack.prototype._selectedIndex;

/* TODO: GetAccessor: Laya.selectedIndex */

/* TODO: SetAccessor: Laya.selectedIndex */

/* TODO: GetAccessor: Laya.selection */

/* TODO: SetAccessor: Laya.selection */

/* TODO: GetAccessor: Laya.setIndexHandler */

/* TODO: SetAccessor: Laya.setIndexHandler */

/* TODO: GetAccessor: Laya.items */

/* TODO: SetAccessor: Laya.dataSource */

/* TODO: GetAccessor: Laya.dataSource */

/**
 * 批量设置视图对象。
 * @param {!Array<?>} views 视图对象数组。
 * @return {void}
 */
Laya.ViewStack.prototype.setItems = function(views) {};

/**
 * 添加视图。
 * 添加视图对象，并设置此视图对象的<code>name</code> 属性。
 * @param {!Laya.Node} view 需要添加的视图对象。
 * @return {void}
 */
Laya.ViewStack.prototype.addItem = function(view) {};

/**
 * 初始化视图对象集合。
 * @return {void}
 */
Laya.ViewStack.prototype.initItems = function() {};

/**
 * @protected
 * @param {number} index 需要设置的对象的索引。
 * @param {boolean} selected 表示对象的选中状态。
 * @return {void}
 */
Laya.ViewStack.prototype.setSelect = function(index, selected) {};

/**
 * @protected
 * @param {number} index 选中项索引值。
 * @return {void}
 */
Laya.ViewStack.prototype.setIndex = function(index) {};
/**
 * @extends {Laya.ScrollBar}
 * @constructor
 * @struct
 */
Laya.VScrollBar = function() {};
/**
 * @extends {Laya.Slider}
 * @constructor
 * @struct
 */
Laya.VSlider = function() {};
/**
 * @extends {Laya.Component}
 * @constructor
 * @struct
 */
Laya.Widget = function() {};
/** @type {!Laya.Widget} */
Laya.Widget.EMPTY;
/** @type {?} */
Laya.Widget.prototype._top;
/** @type {?} */
Laya.Widget.prototype._bottom;
/** @type {?} */
Laya.Widget.prototype._left;
/** @type {?} */
Laya.Widget.prototype._right;
/** @type {?} */
Laya.Widget.prototype._centerX;
/** @type {?} */
Laya.Widget.prototype._centerY;

/* TODO: GetAccessor: Laya.top */

/* TODO: SetAccessor: Laya.top */

/* TODO: GetAccessor: Laya.bottom */

/* TODO: SetAccessor: Laya.bottom */

/* TODO: GetAccessor: Laya.left */

/* TODO: SetAccessor: Laya.left */

/* TODO: GetAccessor: Laya.right */

/* TODO: SetAccessor: Laya.right */

/* TODO: GetAccessor: Laya.centerX */

/* TODO: SetAccessor: Laya.centerX */

/* TODO: GetAccessor: Laya.centerY */

/* TODO: SetAccessor: Laya.centerY */

/**
 * @override
 * @return {void}
 */
Laya.Widget.prototype.onReset = function() {};

/**
 * 父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
 * @protected
 * @return {void}
 */
Laya.Widget.prototype._onParentResize = function() {};

/**
 * <p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
 * @return {boolean}
 */
Laya.Widget.prototype.resetLayoutX = function() {};

/**
 * <p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
 * @return {boolean}
 */
Laya.Widget.prototype.resetLayoutY = function() {};

/**
 * 重新计算布局
 * @return {void}
 */
Laya.Widget.prototype.resetLayout = function() {};

/**
 * @extends {Laya.UIComponent}
 * @constructor
 * @struct
 */
Laya.WXOpenDataViewer = function() {};
/** @type {?} */
Laya.WXOpenDataViewer.prototype._onLoop;

/* TODO: SetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.width */

/* TODO: SetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.height */

/* TODO: SetAccessor: Laya.x */

/* TODO: GetAccessor: Laya.x */

/* TODO: SetAccessor: Laya.y */

/* TODO: GetAccessor: Laya.y */
/** @type {?} */
Laya.WXOpenDataViewer.prototype._postMsg;

/**
 * @override
 * @return {void}
 */
Laya.WXOpenDataViewer.prototype.onEnable = function() {};

/**
 * @override
 * @return {void}
 */
Laya.WXOpenDataViewer.prototype.onDisable = function() {};

/**
 * 向开放数据域发送消息
 * @param {?} msg
 * @return {void}
 */
Laya.WXOpenDataViewer.prototype.postMsg = function(msg) {};
/**
 * @constructor
 * @struct
 */
Laya.Browser = function() {};
/** @type {string} */
Laya.Browser.userAgent;
/** @type {boolean} */
Laya.Browser.onMobile;
/** @type {boolean} */
Laya.Browser.onIOS;
/** @type {boolean} */
Laya.Browser.onMac;
/** @type {boolean} */
Laya.Browser.onIPhone;
/** @type {boolean} */
Laya.Browser.onIPad;
/** @type {boolean} */
Laya.Browser.onAndroid;
/** @type {boolean} */
Laya.Browser.onWP;
/** @type {boolean} */
Laya.Browser.onQQBrowser;
/** @type {boolean} */
Laya.Browser.onMQQBrowser;
/** @type {boolean} */
Laya.Browser.onSafari;
/** @type {boolean} */
Laya.Browser.onIE;
/** @type {boolean} */
Laya.Browser.onWeiXin;
/** @type {boolean} */
Laya.Browser.onPC;
/** @type {boolean} */
Laya.Browser.onMiniGame;
/** @type {boolean} */
Laya.Browser.onBDMiniGame;
/** @type {boolean} */
Laya.Browser.onKGMiniGame;
/** @type {boolean} */
Laya.Browser.onQGMiniGame;
/** @type {boolean} */
Laya.Browser.onVVMiniGame;
/** @type {boolean} */
Laya.Browser.onAlipayMiniGame;
/** @type {boolean} */
Laya.Browser.onQQMiniGame;
/** @type {boolean} */
Laya.Browser.onBLMiniGame;
/** @type {boolean} */
Laya.Browser.onTTMiniGame;
/** @type {boolean} */
Laya.Browser.onHWMiniGame;
/** @type {boolean} */
Laya.Browser.onTBMiniGame;
/** @type {boolean} */
Laya.Browser.onFirefox;
/** @type {boolean} */
Laya.Browser.onEdge;
/** @type {boolean} */
Laya.Browser.onLayaRuntime;
/** @type {boolean} */
Laya.Browser.supportWebAudio;
/** @type {boolean} */
Laya.Browser.supportLocalStorage;
/** @type {!Laya.HTMLCanvas} */
Laya.Browser.canvas;
/** @type {!CanvasRenderingContext2D} */
Laya.Browser.context;
/** @type {?} */
Laya.Browser._window;
/** @type {?} */
Laya.Browser._document;
/** @type {?} */
Laya.Browser._container;
/** @type {?} */
Laya.Browser._pixelRatio;
/** @type {!Laya.HTMLCanvas} */
Laya.Browser.mainCanvas;
/** @type {?} */
Laya.Browser.hanzi;
/** @type {?} */
Laya.Browser.fontMap;
/** @type {!Function} */
Laya.Browser.measureText;

/* TODO: GetAccessor: Laya._isMiniGame */

/* TODO: GetAccessor: Laya.clientWidth */

/* TODO: GetAccessor: Laya.clientHeight */

/* TODO: GetAccessor: Laya.width */

/* TODO: GetAccessor: Laya.height */

/* TODO: GetAccessor: Laya.pixelRatio */

/* TODO: GetAccessor: Laya.container */

/* TODO: SetAccessor: Laya.container */

/* TODO: GetAccessor: Laya.window */

/* TODO: GetAccessor: Laya.document */

/**
 * 创建浏览器原生节点。
 * @param {string} type 节点类型。
 * @return {?} 创建的节点对象的引用。
 */
Laya.Browser.createElement = function(type) {};

/**
 * 返回 Document 对象中拥有指定 id 的第一个对象的引用。
 * @param {string} type 节点id。
 * @return {?} 节点对象。
 */
Laya.Browser.getElementById = function(type) {};

/**
 * 移除指定的浏览器原生节点对象。
 * @param {?} ele
 * @return {void}
 */
Laya.Browser.removeElement = function(ele) {};

/**
 * 获取浏览器当前时间戳，单位为毫秒。
 * @return {number}
 */
Laya.Browser.now = function() {};

/**
 * @constructor
 * @struct
 * 创建一个 <code>Byte</code> 类的实例。
 * @param {?=} data 用于指定初始化的元素数目，或者用于初始化的TypedArray对象、ArrayBuffer对象。如果为 null ，则预分配一定的内存空间，当可用空间不足时，优先使用这部分内存，如果还不够，则重新分配所需内存。
 */
Laya.Byte = function(data) {};
/** @type {string} */
Laya.Byte.BIG_ENDIAN;
/** @type {string} */
Laya.Byte.LITTLE_ENDIAN;
/** @type {?} */
Laya.Byte._sysEndian;
/** @type {boolean} */
Laya.Byte.prototype._xd_;
/** @type {?} */
Laya.Byte.prototype._allocated_;
/** @type {?} */
Laya.Byte.prototype._d_;
/** @type {?} */
Laya.Byte.prototype._u8d_;
/** @type {number} */
Laya.Byte.prototype._pos_;
/** @type {number} */
Laya.Byte.prototype._length;

/* TODO: GetAccessor: Laya.buffer */

/* TODO: GetAccessor: Laya.endian */

/* TODO: SetAccessor: Laya.endian */

/* TODO: SetAccessor: Laya.length */

/* TODO: GetAccessor: Laya.length */
/** @type {?} */
Laya.Byte.prototype._resizeBuffer;
/** @type {?} */
Laya.Byte.prototype._rUTF;

/* TODO: GetAccessor: Laya.pos */

/* TODO: SetAccessor: Laya.pos */

/* TODO: GetAccessor: Laya.bytesAvailable */

/**
 * <p>获取当前主机的字节序。</p>
 * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>
 * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
 * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
 * @return {string} 当前系统的字节序。
 */
Laya.Byte.getSystemEndian = function() {};

/**
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.getString = function() {};

/**
 * <p>常用于解析固定格式的字节流。</p>
 * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.readString = function() {};

/**
 * @param {number} start 开始位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {?} 读取的 Float32Array 对象。
 */
Laya.Byte.prototype.getFloat32Array = function(start, len) {};

/**
 * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
 * @param {number} start 开始位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {?} 读取的 Float32Array 对象。
 */
Laya.Byte.prototype.readFloat32Array = function(start, len) {};

/**
 * @param {number} start 开始位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {!Uint8Array} 读取的 Uint8Array 对象。
 */
Laya.Byte.prototype.getUint8Array = function(start, len) {};

/**
 * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
 * @param {number} start 开始位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {!Uint8Array} 读取的 Uint8Array 对象。
 */
Laya.Byte.prototype.readUint8Array = function(start, len) {};

/**
 * @param {number} start 开始读取的字节偏移量位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {?} 读取的 Int16Array 对象。
 */
Laya.Byte.prototype.getInt16Array = function(start, len) {};

/**
 * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
 * @param {number} start 开始读取的字节偏移量位置。
 * @param {number} len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
 * @return {?} 读取的 Uint8Array 对象。
 */
Laya.Byte.prototype.readInt16Array = function(start, len) {};

/**
 * @return {number} 单精度（32 位）浮点数。
 */
Laya.Byte.prototype.getFloat32 = function() {};

/**
 * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
 * @return {number} 单精度（32 位）浮点数。
 */
Laya.Byte.prototype.readFloat32 = function() {};

/**
 * @return {number} 双精度（64 位）浮点数。
 */
Laya.Byte.prototype.getFloat64 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
 * @return {number} 双精度（64 位）浮点数。
 */
Laya.Byte.prototype.readFloat64 = function() {};

/**
 * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
 * @param {number} value 单精度（32 位）浮点数。
 * @return {void}
 */
Laya.Byte.prototype.writeFloat32 = function(value) {};

/**
 * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
 * @param {number} value 双精度（64 位）浮点数。
 * @return {void}
 */
Laya.Byte.prototype.writeFloat64 = function(value) {};

/**
 * @return {number} Int32 值。
 */
Laya.Byte.prototype.getInt32 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 Int32 值。
 * @return {number} Int32 值。
 */
Laya.Byte.prototype.readInt32 = function() {};

/**
 * @return {number} Uint32 值。
 */
Laya.Byte.prototype.getUint32 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。
 * @return {number} Uint32 值。
 */
Laya.Byte.prototype.readUint32 = function() {};

/**
 * 在字节流的当前字节偏移量位置处写入指定的 Int32 值。
 * @param {number} value 需要写入的 Int32 值。
 * @return {void}
 */
Laya.Byte.prototype.writeInt32 = function(value) {};

/**
 * 在字节流的当前字节偏移量位置处写入 Uint32 值。
 * @param {number} value 需要写入的 Uint32 值。
 * @return {void}
 */
Laya.Byte.prototype.writeUint32 = function(value) {};

/**
 * @return {number} Int16 值。
 */
Laya.Byte.prototype.getInt16 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 Int16 值。
 * @return {number} Int16 值。
 */
Laya.Byte.prototype.readInt16 = function() {};

/**
 * @return {number} Uint16 值。
 */
Laya.Byte.prototype.getUint16 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。
 * @return {number} Uint16 值。
 */
Laya.Byte.prototype.readUint16 = function() {};

/**
 * 在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
 * @param {number} value 需要写入的Uint16 值。
 * @return {void}
 */
Laya.Byte.prototype.writeUint16 = function(value) {};

/**
 * 在字节流的当前字节偏移量位置处写入指定的 Int16 值。
 * @param {number} value 需要写入的 Int16 值。
 * @return {void}
 */
Laya.Byte.prototype.writeInt16 = function(value) {};

/**
 * @return {number} Uint8 值。
 */
Laya.Byte.prototype.getUint8 = function() {};

/**
 * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。
 * @return {number} Uint8 值。
 */
Laya.Byte.prototype.readUint8 = function() {};

/**
 * 在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
 * @param {number} value 需要写入的 Uint8 值。
 * @return {void}
 */
Laya.Byte.prototype.writeUint8 = function(value) {};

/**
 * @param {number} len 要读取的字符串的长度。
 * @return {string} 指定长度的字符串。
 */
Laya.Byte.prototype.getCustomString = function(len) {};

/**
 * @param {number} len 要读取的字符串的长度。
 * @return {string} 指定长度的字符串。
 */
Laya.Byte.prototype.readCustomString = function(len) {};

/**
 * 清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
 * @return {void}
 */
Laya.Byte.prototype.clear = function() {};

/**
 * <p>将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的字为字符串添加前缀。</p>
 * <p>对应的读取方法为： getUTFBytes 。</p>
 * @param {string} value 要写入的字符串。
 * @return {void}
 */
Laya.Byte.prototype.writeUTFBytes = function(value) {};

/**
 * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
 * <p>对应的读取方法为： getUTFString 。</p>
 * @param {string} value 要写入的字符串值。
 * @return {void}
 */
Laya.Byte.prototype.writeUTFString = function(value) {};

/**
 * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 32 位整数），然后写入表示字符串字符的字节。</p>
 * @param {string} value 要写入的字符串值。
 * @return {void}
 */
Laya.Byte.prototype.writeUTFString32 = function(value) {};

/**
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.readUTFString = function() {};

/**
 * @return {string}
 */
Laya.Byte.prototype.readUTFString32 = function() {};

/**
 * <p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
 * <p>对应的写入方法为： writeUTFString 。</p>
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.getUTFString = function() {};

/**
 * @param {number=} len 要读的buffer长度，默认将读取缓冲区全部数据。
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.readUTFBytes = function(len) {};

/**
 * <p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
 * <p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
 * @param {number=} len 要读的buffer长度，默认将读取缓冲区全部数据。
 * @return {string} 读取的字符串。
 */
Laya.Byte.prototype.getUTFBytes = function(len) {};

/**
 * <p>在字节流中写入一个字节。</p>
 * <p>使用参数的低 8 位。忽略高 24 位。</p>
 * @param {number} value
 * @return {void}
 */
Laya.Byte.prototype.writeByte = function(value) {};

/**
 * <p>从字节流中读取带符号的字节。</p>
 * <p>返回值的范围是从 -128 到 127。</p>
 * @return {number} 介于 -128 和 127 之间的整数。
 */
Laya.Byte.prototype.readByte = function() {};

/**
 * @return {number}
 */
Laya.Byte.prototype.getByte = function() {};

/**
 * <p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
 * <p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
 * <p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
 * @param {?} arraybuffer 需要写入的 Arraybuffer 对象。
 * @param {number=} offset Arraybuffer 对象的索引的偏移量（以字节为单位）
 * @param {number=} length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
 * @return {void}
 */
Laya.Byte.prototype.writeArrayBuffer = function(arraybuffer, offset, length) {};

/**
 * 读取ArrayBuffer数据
 * @param {number} length
 * @return {!ArrayBuffer}
 */
Laya.Byte.prototype.readArrayBuffer = function(length) {};

/**
 * @constructor
 * @struct
 */
Laya.CacheManger = function() {};
/** @type {number} */
Laya.CacheManger.loopTimeLimit;
/** @type {?} */
Laya.CacheManger._cacheList;
/** @type {?} */
Laya.CacheManger._index;
/** @type {?} */
Laya.CacheManger._checkLoop;

/**
 * 注册cache管理函数
 * @param {!Function} disposeFunction 释放函数 fun(force:Boolean)
 * @param {!Function} getCacheListFunction 获取cache列表函数fun():Array
 * @return {void}
 */
Laya.CacheManger.regCacheByFunction = function(disposeFunction, getCacheListFunction) {};

/**
 * 移除cache管理函数
 * @param {!Function} disposeFunction 释放函数 fun(force:Boolean)
 * @param {!Function} getCacheListFunction 获取cache列表函数fun():Array
 * @return {void}
 */
Laya.CacheManger.unRegCacheByFunction = function(disposeFunction, getCacheListFunction) {};

/**
 * 强制清理所有管理器
 * @return {void}
 */
Laya.CacheManger.forceDispose = function() {};

/**
 * 开始检测循环
 * @param {number=} waitTime 检测间隔时间
 * @return {void}
 */
Laya.CacheManger.beginCheck = function(waitTime) {};

/**
 * 停止检测循环
 * @return {void}
 */
Laya.CacheManger.stopCheck = function() {};
/**
 * @constructor
 * @struct
 */
Laya.CallLater = function() {};
/** @type {!Laya.CallLater} */
Laya.CallLater.I;
/** @type {?} */
Laya.CallLater.prototype._pool;
/** @type {?} */
Laya.CallLater.prototype._map;
/** @type {?} */
Laya.CallLater.prototype._laters;
/** @type {?} */
Laya.CallLater.prototype._getHandler;

/**
 * 延迟执行。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @return {void}
 */
Laya.CallLater.prototype.callLater = function(caller, method, args) {};

/**
 * 立即执行 callLater 。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @return {void}
 */
Laya.CallLater.prototype.runCallLater = function(caller, method) {};
/**
 * @constructor
 * @struct
 */
Laya.ClassUtils = function() {};
/** @type {?} */
Laya.ClassUtils.DrawTypeDic;
/** @type {?} */
Laya.ClassUtils._temParam;
/** @type {?} */
Laya.ClassUtils._classMap;
/** @type {?} */
Laya.ClassUtils._tM;
/** @type {?} */
Laya.ClassUtils._alpha;
/** @type {?} */
Laya.ClassUtils._getGraphicsFromSprite;
/** @type {?} */
Laya.ClassUtils._getTransformData;
/** @type {?} */
Laya.ClassUtils._addGraphicToGraphics;
/** @type {?} */
Laya.ClassUtils._adptLineData;
/** @type {?} */
Laya.ClassUtils._adptTextureData;
/** @type {?} */
Laya.ClassUtils._adptLinesData;
/** @type {?} */
Laya.ClassUtils._getParams;
/** @type {?} */
Laya.ClassUtils._getObjVar;

/**
 * 注册 Class 映射，方便在class反射时获取。
 * @param {string} className 映射的名字或者别名。
 * @param {?} classDef 类的全名或者类的引用，全名比如:"laya.display.Sprite"。
 * @return {void}
 */
Laya.ClassUtils.regClass = function(className, classDef) {};

/**
 * 根据类名短名字注册类，比如传入[Sprite]，功能同regClass("Sprite",Sprite);
 * @param {!Array<?>} classes 类数组
 * @return {void}
 */
Laya.ClassUtils.regShortClassName = function(classes) {};

/**
 * 返回注册的 Class 映射。
 * @param {string} className 映射的名字。
 * @return {?}
 */
Laya.ClassUtils.getRegClass = function(className) {};

/**
 * 根据名字返回类对象。
 * @param {string} className 类名(比如laya.display.Sprite)或者注册的别名(比如Sprite)。
 * @return {?} 类对象
 */
Laya.ClassUtils.getClass = function(className) {};

/**
 * 根据名称创建 Class 实例。
 * @param {string} className 类名(比如laya.display.Sprite)或者注册的别名(比如Sprite)。
 * @return {?} 返回类的实例。
 */
Laya.ClassUtils.getInstance = function(className) {};

/**
 * 根据指定的 json 数据创建节点对象。
 * 比如:
 * {
 *  	"type":"Sprite",
 *  	"props":{
 *  		"x":100,
 *  		"y":50,
 *  		"name":"item1",
 *  		"scale":[2,2]
 *  	},
 *  	"customProps":{
 *  		"x":100,
 *  		"y":50,
 *  		"name":"item1",
 *  		"scale":[2,2]
 *  	},
 *  	"child":[
 *  		{
 *  			"type":"Text",
 *  			"props":{
 *  				"text":"this is a test",
 *  				"var":"label",
 *  				"rumtime":""
 *  			}
 *  		}
 *  	]
 * }
 * @param {?} json json字符串或者Object对象。
 * @param {?=} node node节点，如果为空，则新创建一个。
 * @param {!Laya.Node=} root 根节点，用来设置var定义。
 * @param {!Handler=} customHandler
 * @param {!Handler=} instanceHandler
 * @return {?} 生成的节点。
 */
Laya.ClassUtils.createByJson = function(json, node, root, customHandler, instanceHandler) {};

/**
 * @constructor
 * @struct
 * 根据指定的属性值，创建一个 <code>Color</code> 类的实例。
 * @param {?} value 颜色值，可以是字符串："#ff0000"或者16进制颜色 0xff0000。
 */
Laya.ColorUtils = function(value) {};
/** @type {?} */
Laya.ColorUtils._SAVE;
/** @type {number} */
Laya.ColorUtils._SAVE_SIZE;
/** @type {?} */
Laya.ColorUtils._COLOR_MAP;
/** @type {?} */
Laya.ColorUtils._DEFAULT;
/** @type {?} */
Laya.ColorUtils._COLODID;
/** @type {!Array<?>} */
Laya.ColorUtils.prototype.arrColor;
/** @type {string} */
Laya.ColorUtils.prototype.strColor;
/** @type {number} */
Laya.ColorUtils.prototype.numColor;

/**
 * @return {?}
 */
Laya.ColorUtils._initDefault = function() {};

/**
 * @return {void}
 */
Laya.ColorUtils._initSaveMap = function() {};

/**
 * 根据指定的属性值，创建并返回一个 <code>Color</code> 类的实例。
 * @param {?} value 颜色值，可以是字符串："#ff0000"或者16进制颜色 0xff0000。
 * @return {!Laya.ColorUtils} 一个 <code>Color</code> 类的实例。
 */
Laya.ColorUtils.create = function(value) {};
/**
 * @constructor
 * @struct
 */
Laya.Dragging = function() {};
/** @type {!Laya.Sprite} */
Laya.Dragging.prototype.target;
/** @type {number} */
Laya.Dragging.prototype.ratio;
/** @type {number} */
Laya.Dragging.prototype.maxOffset;
/** @type {!Laya.Rectangle} */
Laya.Dragging.prototype.area;
/** @type {boolean} */
Laya.Dragging.prototype.hasInertia;
/** @type {number} */
Laya.Dragging.prototype.elasticDistance;
/** @type {number} */
Laya.Dragging.prototype.elasticBackTime;
/** @type {?} */
Laya.Dragging.prototype.data;
/** @type {?} */
Laya.Dragging.prototype._dragging;
/** @type {?} */
Laya.Dragging.prototype._clickOnly;
/** @type {?} */
Laya.Dragging.prototype._elasticRateX;
/** @type {?} */
Laya.Dragging.prototype._elasticRateY;
/** @type {?} */
Laya.Dragging.prototype._lastX;
/** @type {?} */
Laya.Dragging.prototype._lastY;
/** @type {?} */
Laya.Dragging.prototype._offsetX;
/** @type {?} */
Laya.Dragging.prototype._offsetY;
/** @type {?} */
Laya.Dragging.prototype._offsets;
/** @type {?} */
Laya.Dragging.prototype._disableMouseEvent;
/** @type {?} */
Laya.Dragging.prototype._tween;
/** @type {?} */
Laya.Dragging.prototype._parent;
/** @type {?} */
Laya.Dragging.prototype.clearTimer;
/** @type {?} */
Laya.Dragging.prototype.loop;
/** @type {?} */
Laya.Dragging.prototype.checkArea;
/** @type {?} */
Laya.Dragging.prototype.backToArea;
/** @type {?} */
Laya.Dragging.prototype.onStageMouseUp;
/** @type {?} */
Laya.Dragging.prototype.checkElastic;
/** @type {?} */
Laya.Dragging.prototype.tweenMove;
/** @type {?} */
Laya.Dragging.prototype.clear;

/**
 * 开始拖拽。
 * @param {!Laya.Sprite} target 待拖拽的 <code>Sprite</code> 对象。
 * @param {!Laya.Rectangle} area 滑动范围。
 * @param {boolean} hasInertia 拖动是否有惯性。
 * @param {number} elasticDistance 橡皮筋最大值。
 * @param {number} elasticBackTime 橡皮筋回弹时间，单位为毫秒。
 * @param {?} data 事件携带数据。
 * @param {boolean} disableMouseEvent 鼠标事件是否有效。
 * @param {number=} ratio 惯性阻尼系数
 * @return {void}
 */
Laya.Dragging.prototype.start = function(target, area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio) {};

/**
 * 停止拖拽。
 * @return {void}
 */
Laya.Dragging.prototype.stop = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Ease = function() {};
/** @type {?} */
Laya.Ease.HALF_PI;
/** @type {?} */
Laya.Ease.PI2;

/**
 * 定义无加速持续运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.linearNone = function(t, b, c, d) {};

/**
 * 定义无加速持续运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.linearIn = function(t, b, c, d) {};

/**
 * 定义无加速持续运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.linearInOut = function(t, b, c, d) {};

/**
 * 定义无加速持续运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.linearOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.bounceIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.bounceInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.bounceOut = function(t, b, c, d) {};

/**
 * 开始时往后运动，然后反向朝目标移动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} s 指定过冲量，此处数值越大，过冲越大。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.backIn = function(t, b, c, d, s) {};

/**
 * 开始运动时是向后跟踪，再倒转方向并朝目标移动，稍微过冲目标，然后再次倒转方向，回来朝目标移动。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} s 指定过冲量，此处数值越大，过冲越大。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.backInOut = function(t, b, c, d, s) {};

/**
 * 开始运动时是朝目标移动，稍微过冲，再倒转方向回来朝着目标。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} s 指定过冲量，此处数值越大，过冲越大。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.backOut = function(t, b, c, d, s) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * 其中的运动由按照指数方式衰减的正弦波来定义。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} a 指定正弦波的幅度。
 * @param {number=} p 指定正弦波的周期。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.elasticIn = function(t, b, c, d, a, p) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * 其中的运动由按照指数方式衰减的正弦波来定义。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} a 指定正弦波的幅度。
 * @param {number=} p 指定正弦波的周期。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.elasticInOut = function(t, b, c, d, a, p) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * 其中的运动由按照指数方式衰减的正弦波来定义。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @param {number=} a 指定正弦波的幅度。
 * @param {number=} p 指定正弦波的周期。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.elasticOut = function(t, b, c, d, a, p) {};

/**
 * 以零速率开始运动，然后在执行时加快运动速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.strongIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.strongInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.strongOut = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.sineInOut = function(t, b, c, d) {};

/**
 * 以零速率开始运动，然后在执行时加快运动速度。
 * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.sineIn = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.sineOut = function(t, b, c, d) {};

/**
 * 以零速率开始运动，然后在执行时加快运动速度。
 * Quint 缓动方程的运动加速大于 Quart 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quintIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * Quint 缓动方程的运动加速大于 Quart 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quintInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * Quint 缓动方程的运动加速大于 Quart 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quintOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * Quart 缓动方程的运动加速大于 Cubic 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quartIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * Quart 缓动方程的运动加速大于 Cubic 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quartInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * Quart 缓动方程的运动加速大于 Cubic 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quartOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.cubicIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.cubicInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.cubicOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quadIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quadInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.quadOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * 其中每个时间间隔是剩余距离减去一个固定比例部分。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.expoIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * 其中每个时间间隔是剩余距离减去一个固定比例部分。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.expoInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * 其中每个时间间隔是剩余距离减去一个固定比例部分。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.expoOut = function(t, b, c, d) {};

/**
 * 方法以零速率开始运动，然后在执行时加快运动速度。
 * 缓动方程的运动加速会产生突然的速率变化。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.circIn = function(t, b, c, d) {};

/**
 * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
 * 缓动方程的运动加速会产生突然的速率变化。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.circInOut = function(t, b, c, d) {};

/**
 * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
 * 缓动方程的运动加速会产生突然的速率变化。
 * @param {number} t 指定当前时间，介于 0 和持续时间之间（包括二者）。
 * @param {number} b 指定动画属性的初始值。
 * @param {number} c 指定动画属性的更改总计。
 * @param {number} d 指定运动的持续时间。
 * @return {number} 指定时间的插补属性的值。
 */
Laya.Ease.circOut = function(t, b, c, d) {};

/**
 * @constructor
 * @struct
 * @param {string} font
 */
Laya.FontInfo = function(font) {};
/** @type {!Laya.FontInfo} */
Laya.FontInfo.EMPTY;
/** @type {?} */
Laya.FontInfo._cache;
/** @type {?} */
Laya.FontInfo._gfontID;
/** @type {?} */
Laya.FontInfo._lastFont;
/** @type {?} */
Laya.FontInfo._lastFontInfo;

/**
 * 解析字体模型
 * @param {string} font
 * @return {!Laya.FontInfo}
 */
Laya.FontInfo.Parse = function(font) {};

/**
 * 设置字体格式
 * @param {string} value
 * @return {void}
 */
Laya.FontInfo.prototype.setFont = function(value) {};
/**
 * @extends {Laya.FrameAnimation}
 * @constructor
 * @struct
 */
Laya.GraphicAnimation = function() {};
/** @type {!Array<?>} */
Laya.GraphicAnimation.prototype.animationList;
/** @type {?} */
Laya.GraphicAnimation.prototype.animationDic;
/** @type {!Array<?>} */
Laya.GraphicAnimation.prototype._nodeList;
/** @type {?} */
Laya.GraphicAnimation.prototype._nodeDefaultProps;
/** @type {!Array<?>} */
Laya.GraphicAnimation.prototype._gList;
/** @type {?} */
Laya.GraphicAnimation.prototype._nodeIDAniDic;
/** @type {!Array<?>} */
Laya.GraphicAnimation._drawTextureCmd;
/** @type {!Array<?>} */
Laya.GraphicAnimation._temParam;
/** @type {?} */
Laya.GraphicAnimation._I;
/** @type {?} */
Laya.GraphicAnimation._rootMatrix;
/** @type {?} */
Laya.GraphicAnimation.prototype._rootNode;
/** @type {?} */
Laya.GraphicAnimation.prototype._nodeGDic;
/** @type {?} */
Laya.GraphicAnimation.prototype._parseNodeList;
/** @type {?} */
Laya.GraphicAnimation.prototype._calGraphicData;
/** @type {?} */
Laya.GraphicAnimation.prototype._createGraphicData;
/** @type {?} */
Laya.GraphicAnimation.prototype._getObjVar;
/** @type {?} */
Laya.GraphicAnimation._tempMt;

/**
 * @protected
 * @param {number} frame
 * @return {?}
 */
Laya.GraphicAnimation.prototype._createFrameGraphic = function(frame) {};

/**
 * @protected
 * @param {?} node
 * @param {number} frame
 * @param {!Laya.Matrix} parentTransfrom
 * @param {!Laya.Graphics} g
 * @param {number=} alpha
 * @return {void}
 */
Laya.GraphicAnimation.prototype._updateNodeGraphic = function(node, frame, parentTransfrom, g, alpha) {};

/**
 * @protected
 * @param {?} node
 * @param {number} frame
 * @param {!Laya.Graphics} g
 * @return {void}
 */
Laya.GraphicAnimation.prototype._updateNodeGraphic2 = function(node, frame, g) {};

/**
 * @override
 * @protected
 * @param {?} node
 * @return {void}
 */
Laya.GraphicAnimation.prototype._calculateKeyFrames = function(node) {};

/**
 * @protected
 * @param {number} nodeID
 * @return {?}
 */
Laya.GraphicAnimation.prototype.getNodeDataByID = function(nodeID) {};

/**
 * @protected
 * @param {?} obj
 * @param {!Array<?>} params
 * @param {number} frame
 * @param {?} obj2
 * @return {!Array<?>}
 */
Laya.GraphicAnimation.prototype._getParams = function(obj, params, frame, obj2) {};

/**
 * @protected
 * @param {string} url
 * @return {?}
 */
Laya.GraphicAnimation.prototype._getTextureByUrl = function(url) {};

/**
 * @param {?} uiView
 * @param {string=} aniName
 * @return {void}
 */
Laya.GraphicAnimation.prototype.setAniData = function(uiView, aniName) {};

/**
 * @param {?} aniData
 * @return {?}
 */
Laya.GraphicAnimation.prototype.parseByData = function(aniData) {};

/**
 * @param {?} uiView
 * @return {void}
 */
Laya.GraphicAnimation.prototype.setUpAniData = function(uiView) {};

/**
 * @protected
 * @return {void}
 */
Laya.GraphicAnimation.prototype._clear = function() {};

/**
 * @param {?} animationObject
 * @return {?}
 */
Laya.GraphicAnimation.parseAnimationByData = function(animationObject) {};

/**
 * @param {?} aniData
 * @return {?}
 */
Laya.GraphicAnimation.parseAnimationData = function(aniData) {};
/**
 * @constructor
 * @struct
 */
Laya.HalfFloatUtils = function() {};

/**
 * round a number to a half float number bits.
 * @param {number} num
 * @return {number}
 */
Laya.HalfFloatUtils.roundToFloat16Bits = function(num) {};

/**
 * convert a half float number bits to a number.
 * @param {number} float16bits - half float number bits
 * @return {number}
 */
Laya.HalfFloatUtils.convertToNumber = function(float16bits) {};

/**
 * @constructor
 * @struct
 * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。
 * @param {!Object=} caller 执行域。
 * @param {!Function=} method 处理函数。
 * @param {!Array<?>=} args 函数参数。
 * @param {boolean=} once 是否只执行一次。
 */
Laya.Handler = function(caller, method, args, once) {};
/** @type {!Array<!Handler>} */
Laya.Handler._pool;
/** @type {?} */
Laya.Handler._gid;
/** @type {!Object} */
Laya.Handler.prototype.caller;
/** @type {!Function} */
Laya.Handler.prototype.method;
/** @type {!Array<?>} */
Laya.Handler.prototype.args;
/** @type {boolean} */
Laya.Handler.prototype.once;
/** @type {number} */
Laya.Handler.prototype._id;

/**
 * 设置此对象的指定属性值。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 回调方法。
 * @param {!Array<?>} args 携带的参数。
 * @param {boolean=} once 是否只执行一次，如果为true，执行后执行recover()进行回收。
 * @return {!Handler} 返回 handler 本身。
 */
Laya.Handler.prototype.setTo = function(caller, method, args, once) {};

/**
 * 执行处理器。
 * @return {?}
 */
Laya.Handler.prototype.run = function() {};

/**
 * 执行处理器，并携带额外数据。
 * @param {?} data 附加的回调数据，可以是单数据或者Array(作为多参)。
 * @return {?}
 */
Laya.Handler.prototype.runWith = function(data) {};

/**
 * 清理对象引用。
 * @return {!Handler}
 */
Laya.Handler.prototype.clear = function() {};

/**
 * 清理并回收到 Handler 对象池内。
 * @return {void}
 */
Laya.Handler.prototype.recover = function() {};

/**
 * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 回调方法。
 * @param {!Array<?>=} args 携带的参数。
 * @param {boolean=} once 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。
 * @return {!Handler} 返回创建的handler实例。
 */
Laya.Handler.create = function(caller, method, args, once) {};
/**
 * @constructor
 * @struct
 */
Laya.HitArea = function() {};
/** @type {?} */
Laya.HitArea._cmds;
/** @type {?} */
Laya.HitArea._rect;
/** @type {?} */
Laya.HitArea._ptPoint;
/** @type {?} */
Laya.HitArea.prototype._hit;
/** @type {?} */
Laya.HitArea.prototype._unHit;

/* TODO: GetAccessor: Laya.hit */

/* TODO: SetAccessor: Laya.hit */

/* TODO: GetAccessor: Laya.unHit */

/* TODO: SetAccessor: Laya.unHit */

/**
 * 检测对象是否包含指定的点。
 * @param {number} x 点的 X 轴坐标值（水平位置）。
 * @param {number} y 点的 Y 轴坐标值（垂直位置）。
 * @return {boolean} 如果包含指定的点，则值为 true；否则为 false。
 */
Laya.HitArea.prototype.contains = function(x, y) {};

/**
 * @constructor
 * @struct
 * 创建实例
 */
Laya.HTMLChar = function() {};
/** @type {?} */
Laya.HTMLChar._isWordRegExp;
/** @type {number} */
Laya.HTMLChar.prototype.x;
/** @type {number} */
Laya.HTMLChar.prototype.y;
/** @type {number} */
Laya.HTMLChar.prototype.width;
/** @type {number} */
Laya.HTMLChar.prototype.height;
/** @type {boolean} */
Laya.HTMLChar.prototype.isWord;
/** @type {string} */
Laya.HTMLChar.prototype.char;
/** @type {number} */
Laya.HTMLChar.prototype.charNum;
/** @type {?} */
Laya.HTMLChar.prototype.style;

/**
 * 根据指定的字符、宽高、样式，创建一个 <code>HTMLChar</code> 类的实例。
 * @param {string} char 字符。
 * @param {number} w 宽度。
 * @param {number} h 高度。
 * @param {?} style CSS 样式。
 * @return {!Laya.HTMLChar}
 */
Laya.HTMLChar.prototype.setData = function(char, w, h, style) {};

/**
 * 重置
 * @return {!Laya.HTMLChar}
 */
Laya.HTMLChar.prototype.reset = function() {};

/**
 * 回收
 * @return {void}
 */
Laya.HTMLChar.prototype.recover = function() {};

/**
 * 创建
 * @return {!Laya.HTMLChar}
 */
Laya.HTMLChar.create = function() {};
/**
 * @constructor
 * @struct
 */
Laya.IStatRender = function() {};

/**
 * 显示性能统计信息。
 * @param {number=} x X轴显示位置。
 * @param {number=} y Y轴显示位置。
 * @return {void}
 */
Laya.IStatRender.prototype.show = function(x, y) {};

/**
 * 激活性能统计
 * @return {void}
 */
Laya.IStatRender.prototype.enable = function() {};

/**
 * 隐藏性能统计信息。
 * @return {void}
 */
Laya.IStatRender.prototype.hide = function() {};

/**
 * 点击性能统计显示区域的处理函数。
 * @param {!Function} fn
 * @return {void}
 */
Laya.IStatRender.prototype.set_onclick = function(fn) {};

/**
 * @return {boolean}
 */
Laya.IStatRender.prototype.isCanvasRender = function() {};

/**
 * @param {?} ctx
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.IStatRender.prototype.renderNotCanvas = function(ctx, x, y) {};
/**
 * @constructor
 * @struct
 */
Laya.Log = function() {};
/** @type {?} */
Laya.Log._logdiv;
/** @type {?} */
Laya.Log._btn;
/** @type {?} */
Laya.Log._count;
/** @type {number} */
Laya.Log.maxCount;
/** @type {boolean} */
Laya.Log.autoScrollToBottom;

/**
 * 激活Log系统，使用方法Laya.init(800,600,Laya.Log);
 * @return {void}
 */
Laya.Log.enable = function() {};

/**
 * 隐藏/显示日志面板
 * @return {void}
 */
Laya.Log.toggle = function() {};

/**
 * 增加日志内容。
 * @param {string} value 需要增加的日志内容。
 * @return {void}
 */
Laya.Log.print = function(value) {};

/**
 * 清理日志
 * @return {void}
 */
Laya.Log.clear = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Mouse = function() {};
/** @type {?} */
Laya.Mouse._style;
/** @type {?} */
Laya.Mouse._preCursor;

/* TODO: SetAccessor: Laya.cursor */

/* TODO: GetAccessor: Laya.cursor */

/**
 * 隐藏鼠标
 * @return {void}
 */
Laya.Mouse.hide = function() {};

/**
 * 显示鼠标
 * @return {void}
 */
Laya.Mouse.show = function() {};
/**
 * @constructor
 * @struct
 */
Laya.PerformancePlugin = function() {};
/** @type {boolean} */
Laya.PerformancePlugin._enable;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_2D;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_PRERENDER;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_UPDATESCRIPT;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_PHYSICS;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_PHYSICS_SIMULATE;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_PHYSICS_CHARACTORCOLLISION;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_PHYSICS_EVENTSCRIPTS;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_SHADOWMAP;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_CLUSTER;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_CULLING;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_RENDERDEPTHMDOE;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_RENDEROPAQUE;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_RENDERCOMMANDBUFFER;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_RENDERTRANSPARENT;
/** @type {string} */
Laya.PerformancePlugin.PERFORMANCE_LAYA_3D_RENDER_POSTPROCESS;

/* TODO: SetAccessor: Laya.enable */

/* TODO: GetAccessor: Laya.enable */

/* TODO: SetAccessor: Laya.enableDataExport */

/* TODO: GetAccessor: Laya.enableDataExport */

/**
 * @param {?} tool
 * @return {void}
 */
Laya.PerformancePlugin.setPerformanceDataTool = function(tool) {};

/**
 * @param {string} path
 * @return {void}
 */
Laya.PerformancePlugin.begainSample = function(path) {};

/**
 * @param {string} path
 * @return {number}
 */
Laya.PerformancePlugin.endSample = function(path) {};

/**
 * @param {string} path
 * @return {?}
 */
Laya.PerformancePlugin.expoertFile = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
Laya.PerformancePlugin.showFunSampleFun = function(path) {};
/**
 * @constructor
 * @struct
 */
Laya.Pool = function() {};
/** @type {?} */
Laya.Pool._CLSID;
/** @type {?} */
Laya.Pool.POOLSIGN;
/** @type {?} */
Laya.Pool._poolDic;
/** @type {?} */
Laya.Pool._getClassSign;

/**
 * 根据对象类型标识字符，获取对象池。
 * @param {string} sign 对象类型标识字符。
 * @return {!Array<?>} 对象池。
 */
Laya.Pool.getPoolBySign = function(sign) {};

/**
 * 清除对象池的对象。
 * @param {string} sign 对象类型标识字符。
 * @return {void}
 */
Laya.Pool.clearBySign = function(sign) {};

/**
 * 将对象放到对应类型标识的对象池中。
 * @param {string} sign 对象类型标识字符。
 * @param {?} item 对象。
 * @return {void}
 */
Laya.Pool.recover = function(sign, item) {};

/**
 * 根据类名进行回收，如果类有类名才进行回收，没有则不回收
 * @param {?} instance 类的具体实例
 * @return {void}
 */
Laya.Pool.recoverByClass = function(instance) {};

/**
 * 根据类名回收类的实例
 * @template T
 * @param {function(new:T)} cls
 * @return {T}
 */
Laya.Pool.createByClass = function(cls) {};

/**
 * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>
 * <p>当对象池中无此类型标识的对象时，则根据传入的类型，创建一个新的对象返回。</p>
 * @template T
 * @param {string} sign 对象类型标识字符。
 * @param {function(new:T)} cls 用于创建该类型对象的类。
 * @return {T} 此类型标识的一个对象。
 */
Laya.Pool.getItemByClass = function(sign, cls) {};

/**
 * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>
 * <p>当对象池中无此类型标识的对象时，则使用传入的创建此类型对象的函数，新建一个对象返回。</p>
 * @param {string} sign 对象类型标识字符。
 * @param {!Function} createFun 用于创建该类型对象的方法。
 * @param {?=} caller this对象
 * @return {?} 此类型标识的一个对象。
 */
Laya.Pool.getItemByCreateFun = function(sign, createFun, caller) {};

/**
 * 根据传入的对象类型标识字符，获取对象池中已存储的此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。
 * @param {string} sign 对象类型标识字符。
 * @return {?} 对象池中此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。
 */
Laya.Pool.getItem = function(sign) {};
/**
 * @constructor
 * @struct
 */
Laya.PoolCache = function() {};
/** @type {string} */
Laya.PoolCache.prototype.sign;
/** @type {number} */
Laya.PoolCache.prototype.maxCount;

/**
 * 获取缓存的对象列表
 * @return {!Array<?>}
 */
Laya.PoolCache.prototype.getCacheList = function() {};

/**
 * 尝试清理缓存
 * @param {boolean} force 是否强制清理
 * @return {void}
 */
Laya.PoolCache.prototype.tryDispose = function(force) {};

/**
 * 添加对象缓存管理
 * @param {string} sign 对象在Pool中的标识
 * @param {number=} maxCount 允许缓存的最大数量
 * @return {void}
 */
Laya.PoolCache.addPoolCacheManager = function(sign, maxCount) {};
/**
 * @constructor
 * @struct
 */
Laya.RunDriver = function() {};
/** @type {!Function} */
Laya.RunDriver.createShaderCondition;
/** @type {!Function} */
Laya.RunDriver.changeWebGLSize;
/**
 * @constructor
 * @struct
 */
Laya.SceneUtils = function() {};
/** @type {?} */
Laya.SceneUtils._funMap;
/** @type {?} */
Laya.SceneUtils._parseWatchData;
/** @type {?} */
Laya.SceneUtils._parseKeyWord;
/** @type {?} */
Laya.SceneUtils.setCompValue;

/**
 * @return {void}
 */
Laya.SceneUtils.__init = function() {};

/**
 * @param {string} value
 * @return {!Function}
 */
Laya.SceneUtils.getBindFun = function(value) {};

/**
 * @param {?} root
 * @param {?} uiView 视图数据信息。
 * @return {?}
 */
Laya.SceneUtils.createByData = function(root, uiView) {};

/**
 * @return {!Laya.InitTool}
 */
Laya.SceneUtils.createInitTool = function() {};

/**
 * 根据UI数据实例化组件。
 * @param {?} uiView UI数据。
 * @param {?=} comp 组件本体，如果为空，会新创建一个。
 * @param {?=} view 组件所在的视图实例，用来注册var全局变量，如果值为空则不注册。
 * @param {!Array<?>=} dataMap
 * @param {!Laya.InitTool=} initTool
 * @return {?} 一个 Component 对象。
 */
Laya.SceneUtils.createComp = function(uiView, comp, view, dataMap, initTool) {};

/**
 * @param {?} json UI数据。
 * @return {?} Component 对象。
 */
Laya.SceneUtils.getCompInstance = function(json) {};
/**
 * @constructor
 * @struct
 */
Laya.InitTool = function() {};
/** @type {?} */
Laya.InitTool.prototype._nodeRefList;
/** @type {?} */
Laya.InitTool.prototype._initList;
/** @type {?} */
Laya.InitTool.prototype._loadList;

/**
 * @return {void}
 */
Laya.InitTool.prototype.reset = function() {};

/**
 * @return {void}
 */
Laya.InitTool.prototype.recover = function() {};

/**
 * @return {!Laya.InitTool}
 */
Laya.InitTool.create = function() {};

/**
 * @param {string} url
 * @param {string=} type
 * @return {void}
 */
Laya.InitTool.prototype.addLoadRes = function(url, type) {};

/**
 * @param {?} node
 * @param {string} prop
 * @param {string} referStr
 * @return {void}
 */
Laya.InitTool.prototype.addNodeRef = function(node, prop, referStr) {};

/**
 * @return {void}
 */
Laya.InitTool.prototype.setNodeRef = function() {};

/**
 * @param {string} referStr
 * @return {?}
 */
Laya.InitTool.prototype.getReferData = function(referStr) {};

/**
 * @param {?} item
 * @return {void}
 */
Laya.InitTool.prototype.addInitItem = function(item) {};

/**
 * @return {void}
 */
Laya.InitTool.prototype.doInits = function() {};

/**
 * @return {void}
 */
Laya.InitTool.prototype.finish = function() {};

/**
 * @param {!Laya.Scene} scene
 * @return {void}
 */
Laya.InitTool.prototype.beginLoad = function(scene) {};
/**
 * @constructor
 * @struct
 */
Laya.Stat = function() {};
/** @type {number} */
Laya.Stat.FPS;
/** @type {number} */
Laya.Stat.loopCount;
/** @type {number} */
Laya.Stat.shaderCall;
/** @type {number} */
Laya.Stat.renderBatches;
/** @type {number} */
Laya.Stat.savedRenderBatches;
/** @type {number} */
Laya.Stat.trianglesFaces;
/** @type {number} */
Laya.Stat.spriteCount;
/** @type {number} */
Laya.Stat.spriteRenderUseCacheCount;
/** @type {number} */
Laya.Stat.frustumCulling;
/** @type {number} */
Laya.Stat.octreeNodeCulling;
/** @type {number} */
Laya.Stat.canvasNormal;
/** @type {number} */
Laya.Stat.canvasBitmap;
/** @type {number} */
Laya.Stat.canvasReCache;
/** @type {boolean} */
Laya.Stat.renderSlow;
/** @type {number} */
Laya.Stat.gpuMemory;
/** @type {number} */
Laya.Stat.cpuMemory;

/* TODO: SetAccessor: Laya.onclick */

/**
 * 显示性能统计信息。
 * @param {number=} x X轴显示位置。
 * @param {number=} y Y轴显示位置。
 * @return {void}
 */
Laya.Stat.show = function(x, y) {};

/**
 * 激活性能统计
 * @return {void}
 */
Laya.Stat.enable = function() {};

/**
 * 隐藏性能统计信息。
 * @return {void}
 */
Laya.Stat.hide = function() {};

/**
 * @return {void}
 */
Laya.Stat.clear = function() {};
/**
 * @extends {Laya.IStatRender}
 * @constructor
 * @struct
 */
Laya.StatUI = function() {};
/** @type {?} */
Laya.StatUI._fontSize;
/** @type {?} */
Laya.StatUI.prototype._txt;
/** @type {?} */
Laya.StatUI.prototype._leftText;
/** @type {?} */
Laya.StatUI.prototype._canvas;
/** @type {?} */
Laya.StatUI.prototype._ctx;
/** @type {?} */
Laya.StatUI.prototype._first;
/** @type {?} */
Laya.StatUI.prototype._vx;
/** @type {?} */
Laya.StatUI.prototype._width;
/** @type {?} */
Laya.StatUI.prototype._height;
/** @type {?} */
Laya.StatUI.prototype._view;
/** @type {?} */
Laya.StatUI.prototype.createUIPre;
/** @type {?} */
Laya.StatUI.prototype.createUI;
/** @type {?} */
Laya.StatUI.prototype.renderInfoPre;
/** @type {?} */
Laya.StatUI.prototype.renderInfo;

/**
 * @override 显示性能统计信息。
 * @param {number=} x X轴显示位置。
 * @param {number=} y Y轴显示位置。
 * @return {void}
 */
Laya.StatUI.prototype.show = function(x, y) {};

/**
 * @override 激活性能统计
 * @return {void}
 */
Laya.StatUI.prototype.enable = function() {};

/**
 * @override 隐藏性能统计信息。
 * @return {void}
 */
Laya.StatUI.prototype.hide = function() {};

/**
 * @override 点击性能统计显示区域的处理函数。
 * @param {function(this: (!GlobalEventHandlers), !MouseEvent): ?} fn
 * @return {void}
 */
Laya.StatUI.prototype.set_onclick = function(fn) {};

/**
 * @return {void}
 */
Laya.StatUI.prototype.loop = function() {};

/**
 * @override
 * @return {boolean}
 */
Laya.StatUI.prototype.isCanvasRender = function() {};

/**
 * @override 非canvas模式的渲染
 * @param {?} ctx
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.StatUI.prototype.renderNotCanvas = function(ctx, x, y) {};
/**
 * @constructor
 * @struct
 */
Laya.StringKey = function() {};
/** @type {?} */
Laya.StringKey.prototype._strsToID;
/** @type {?} */
Laya.StringKey.prototype._idToStrs;
/** @type {?} */
Laya.StringKey.prototype._length;

/**
 * 添加一个字符。
 * @param {string} str 字符，将作为key 存储相应生成的数字。
 * @return {number} 此字符对应的数字。
 */
Laya.StringKey.prototype.add = function(str) {};

/**
 * 获取指定字符对应的ID。
 * @param {string} str 字符。
 * @return {number} 此字符对应的ID。
 */
Laya.StringKey.prototype.getID = function(str) {};

/**
 * 根据指定ID获取对应字符。
 * @param {number} id ID。
 * @return {string} 此id对应的字符。
 */
Laya.StringKey.prototype.getName = function(id) {};
/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
Laya.TimeLine = function() {};
/** @type {?} */
Laya.TimeLine.prototype._labelDic;
/** @type {?} */
Laya.TimeLine.prototype._tweenDic;
/** @type {?} */
Laya.TimeLine.prototype._tweenDataList;
/** @type {?} */
Laya.TimeLine.prototype._endTweenDataList;
/** @type {?} */
Laya.TimeLine.prototype._currTime;
/** @type {?} */
Laya.TimeLine.prototype._lastTime;
/** @type {?} */
Laya.TimeLine.prototype._startTime;
/** @type {?} */
Laya.TimeLine.prototype._index;
/** @type {?} */
Laya.TimeLine.prototype._gidIndex;
/** @type {?} */
Laya.TimeLine.prototype._firstTweenDic;
/** @type {?} */
Laya.TimeLine.prototype._startTimeSort;
/** @type {?} */
Laya.TimeLine.prototype._endTimeSort;
/** @type {?} */
Laya.TimeLine.prototype._loopKey;
/** @type {number} */
Laya.TimeLine.prototype.scale;
/** @type {?} */
Laya.TimeLine.prototype._frameRate;
/** @type {?} */
Laya.TimeLine.prototype._frameIndex;
/** @type {?} */
Laya.TimeLine.prototype._total;
/** @type {?} */
Laya.TimeLine.prototype._create;
/** @type {?} */
Laya.TimeLine.prototype._update;
/** @type {?} */
Laya.TimeLine.prototype._animComplete;
/** @type {?} */
Laya.TimeLine.prototype._complete;

/* TODO: GetAccessor: Laya.index */

/* TODO: SetAccessor: Laya.index */

/* TODO: GetAccessor: Laya.total */

/**
 * 控制一个对象，从当前点移动到目标点。
 * @param {?} target 要控制的对象。
 * @param {?} props 要控制对象的属性。
 * @param {number} duration 对象TWEEN的时间。
 * @param {!Function=} ease 缓动类型
 * @param {number=} offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
 * @return {!Laya.TimeLine}
 */
Laya.TimeLine.to = function(target, props, duration, ease, offset) {};

/**
 * 从 props 属性，缓动到当前状态。
 * @param {?} target target 目标对象(即将更改属性值的对象)
 * @param {?} props 要控制对象的属性
 * @param {number} duration 对象TWEEN的时间
 * @param {!Function=} ease 缓动类型
 * @param {number=} offset 相对于上一个对象，偏移多长时间（单位：毫秒）
 * @return {!Laya.TimeLine}
 */
Laya.TimeLine.from = function(target, props, duration, ease, offset) {};

/**
 * 控制一个对象，从当前点移动到目标点。
 * @param {?} target 要控制的对象。
 * @param {?} props 要控制对象的属性。
 * @param {number} duration 对象TWEEN的时间。
 * @param {!Function=} ease 缓动类型
 * @param {number=} offset 相对于上一个对象，偏移多长时间（单位：毫秒）。
 * @return {!Laya.TimeLine}
 */
Laya.TimeLine.prototype.to = function(target, props, duration, ease, offset) {};

/**
 * 从 props 属性，缓动到当前状态。
 * @param {?} target target 目标对象(即将更改属性值的对象)
 * @param {?} props 要控制对象的属性
 * @param {number} duration 对象TWEEN的时间
 * @param {!Function=} ease 缓动类型
 * @param {number=} offset 相对于上一个对象，偏移多长时间（单位：毫秒）
 * @return {!Laya.TimeLine}
 */
Laya.TimeLine.prototype.from = function(target, props, duration, ease, offset) {};

/**
 * 在时间队列中加入一个标签。
 * @param {string} label 标签名称。
 * @param {number} offset 标签相对于上个动画的偏移时间(单位：毫秒)。
 * @return {!Laya.TimeLine}
 */
Laya.TimeLine.prototype.addLabel = function(label, offset) {};

/**
 * 移除指定的标签
 * @param {string} label
 * @return {void}
 */
Laya.TimeLine.prototype.removeLabel = function(label) {};

/**
 * 动画从整个动画的某一时间开始。
 * @param {number} time (单位：毫秒)。
 * @return {void}
 */
Laya.TimeLine.prototype.gotoTime = function(time) {};

/**
 * 从指定的标签开始播。
 * @param {string} Label 标签名。
 * @return {void}
 */
Laya.TimeLine.prototype.gotoLabel = function(Label) {};

/**
 * 暂停整个动画。
 * @return {void}
 */
Laya.TimeLine.prototype.pause = function() {};

/**
 * 恢复暂停动画的播放。
 * @return {void}
 */
Laya.TimeLine.prototype.resume = function() {};

/**
 * 播放动画。
 * @param {?=} timeOrLabel 开启播放的时间点或标签名。
 * @param {boolean=} loop 是否循环播放。
 * @return {void}
 */
Laya.TimeLine.prototype.play = function(timeOrLabel, loop) {};

/**
 * 重置所有对象，复用对象的时候使用。
 * @return {void}
 */
Laya.TimeLine.prototype.reset = function() {};

/**
 * 彻底销毁此对象。
 * @return {void}
 */
Laya.TimeLine.prototype.destroy = function() {};

/**
 * @constructor
 * @struct
 * 创建 <code>Timer</code> 类的一个实例。
 * @param {boolean=} autoActive
 */
Laya.Timer = function(autoActive) {};
/** @type {!Laya.Timer} */
Laya.Timer.gSysTimer;
/** @type {?} */
Laya.Timer._pool;
/** @type {number} */
Laya.Timer._mid;
/** @type {number} */
Laya.Timer.prototype.scale;
/** @type {number} */
Laya.Timer.prototype.currTimer;
/** @type {number} */
Laya.Timer.prototype.currFrame;
/** @type {?} */
Laya.Timer.prototype._map;
/** @type {?} */
Laya.Timer.prototype._handlers;
/** @type {?} */
Laya.Timer.prototype._temp;
/** @type {?} */
Laya.Timer.prototype._count;

/* TODO: GetAccessor: Laya.delta */
/** @type {?} */
Laya.Timer.prototype._clearHandlers;
/** @type {?} */
Laya.Timer.prototype._recoverHandler;
/** @type {?} */
Laya.Timer.prototype._indexHandler;
/** @type {?} */
Laya.Timer.prototype._getHandler;

/**
 * 定时执行一次。
 * @param {number} delay 延迟时间(单位为毫秒)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @param {boolean=} coverBefore 是否覆盖之前的延迟执行，默认为 true 。
 * @return {void}
 */
Laya.Timer.prototype.once = function(delay, caller, method, args, coverBefore) {};

/**
 * 定时重复执行。
 * @param {number} delay 间隔时间(单位毫秒)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @param {boolean=} coverBefore 是否覆盖之前的延迟执行，默认为 true 。
 * @param {boolean=} jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
 * @return {void}
 */
Laya.Timer.prototype.loop = function(delay, caller, method, args, coverBefore, jumpFrame) {};

/**
 * 定时执行一次(基于帧率)。
 * @param {number} delay 延迟几帧(单位为帧)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @param {boolean=} coverBefore 是否覆盖之前的延迟执行，默认为 true 。
 * @return {void}
 */
Laya.Timer.prototype.frameOnce = function(delay, caller, method, args, coverBefore) {};

/**
 * 定时重复执行(基于帧率)。
 * @param {number} delay 间隔几帧(单位为帧)。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @param {boolean=} coverBefore 是否覆盖之前的延迟执行，默认为 true 。
 * @return {void}
 */
Laya.Timer.prototype.frameLoop = function(delay, caller, method, args, coverBefore) {};

/**
 * 返回统计信息。
 * @return {string}
 */
Laya.Timer.prototype.toString = function() {};

/**
 * 清理定时器。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @return {void}
 */
Laya.Timer.prototype.clear = function(caller, method) {};

/**
 * 清理对象身上的所有定时器。
 * @param {?} caller 执行域(this)。
 * @return {void}
 */
Laya.Timer.prototype.clearAll = function(caller) {};

/**
 * 延迟执行。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @param {!Array<?>=} args 回调参数。
 * @return {void}
 */
Laya.Timer.prototype.callLater = function(caller, method, args) {};

/**
 * 立即执行 callLater 。
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @return {void}
 */
Laya.Timer.prototype.runCallLater = function(caller, method) {};

/**
 * 立即提前执行定时器，执行之后从队列中删除
 * @param {?} caller 执行域(this)。
 * @param {!Function} method 定时器回调函数。
 * @return {void}
 */
Laya.Timer.prototype.runTimer = function(caller, method) {};

/**
 * 暂停时钟
 * @return {void}
 */
Laya.Timer.prototype.pause = function() {};

/**
 * 恢复时钟
 * @return {void}
 */
Laya.Timer.prototype.resume = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Tween = function() {};
/** @type {?} */
Laya.Tween.tweenMap;
/** @type {?} */
Laya.Tween.prototype._complete;
/** @type {?} */
Laya.Tween.prototype._target;
/** @type {?} */
Laya.Tween.prototype._ease;
/** @type {?} */
Laya.Tween.prototype._props;
/** @type {?} */
Laya.Tween.prototype._duration;
/** @type {?} */
Laya.Tween.prototype._delay;
/** @type {?} */
Laya.Tween.prototype._startTimer;
/** @type {?} */
Laya.Tween.prototype._usedTimer;
/** @type {?} */
Laya.Tween.prototype._usedPool;
/** @type {?} */
Laya.Tween.prototype._delayParam;
/** @type {number} */
Laya.Tween.prototype.gid;
/** @type {!Handler} */
Laya.Tween.prototype.update;
/** @type {number} */
Laya.Tween.prototype.repeat;
/** @type {?} */
Laya.Tween.prototype._count;
/** @type {?} */
Laya.Tween.prototype.firstStart;
/** @type {?} */
Laya.Tween.prototype._initProps;
/** @type {?} */
Laya.Tween.prototype._beginLoop;
/** @type {?} */
Laya.Tween.prototype._doEase;

/* TODO: SetAccessor: Laya.progress */
/** @type {?} */
Laya.Tween.prototype._remove;
/** @type {?} */
Laya.Tween.easeNone;

/**
 * 缓动对象的props属性到目标值。
 * @param {?} target 目标对象(即将更改属性值的对象)。
 * @param {?} props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
 * @param {number} duration 花费的时间，单位毫秒。
 * @param {!Function=} ease 缓动类型，默认为匀速运动。
 * @param {!Handler=} complete 结束回调函数。
 * @param {number=} delay 延迟执行时间。
 * @param {boolean=} coverBefore 是否覆盖之前的缓动。
 * @param {boolean=} autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
 * @return {!Laya.Tween} 返回Tween对象。
 */
Laya.Tween.to = function(target, props, duration, ease, complete, delay, coverBefore, autoRecover) {};

/**
 * 从props属性，缓动到当前状态。
 * @param {?} target 目标对象(即将更改属性值的对象)。
 * @param {?} props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
 * @param {number} duration 花费的时间，单位毫秒。
 * @param {!Function=} ease 缓动类型，默认为匀速运动。
 * @param {!Handler=} complete 结束回调函数。
 * @param {number=} delay 延迟执行时间。
 * @param {boolean=} coverBefore 是否覆盖之前的缓动。
 * @param {boolean=} autoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。
 * @return {!Laya.Tween} 返回Tween对象。
 */
Laya.Tween.from = function(target, props, duration, ease, complete, delay, coverBefore, autoRecover) {};

/**
 * 缓动对象的props属性到目标值。
 * @param {?} target 目标对象(即将更改属性值的对象)。
 * @param {?} props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
 * @param {number} duration 花费的时间，单位毫秒。
 * @param {!Function=} ease 缓动类型，默认为匀速运动。
 * @param {!Handler=} complete 结束回调函数。
 * @param {number=} delay 延迟执行时间。
 * @param {boolean=} coverBefore 是否覆盖之前的缓动。
 * @return {!Laya.Tween} 返回Tween对象。
 */
Laya.Tween.prototype.to = function(target, props, duration, ease, complete, delay, coverBefore) {};

/**
 * 从props属性，缓动到当前状态。
 * @param {?} target 目标对象(即将更改属性值的对象)。
 * @param {?} props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
 * @param {number} duration 花费的时间，单位毫秒。
 * @param {!Function=} ease 缓动类型，默认为匀速运动。
 * @param {!Handler=} complete 结束回调函数。
 * @param {number=} delay 延迟执行时间。
 * @param {boolean=} coverBefore 是否覆盖之前的缓动。
 * @return {!Laya.Tween} 返回Tween对象。
 */
Laya.Tween.prototype.from = function(target, props, duration, ease, complete, delay, coverBefore) {};

/**
 * 立即结束缓动并到终点。
 * @return {void}
 */
Laya.Tween.prototype.complete = function() {};

/**
 * 暂停缓动，可以通过resume或restart重新开始。
 * @return {void}
 */
Laya.Tween.prototype.pause = function() {};

/**
 * 设置开始时间。
 * @param {number} startTime 开始时间。
 * @return {void}
 */
Laya.Tween.prototype.setStartTime = function(startTime) {};

/**
 * 清理指定目标对象上的所有缓动。
 * @param {?} target 目标对象。
 * @return {void}
 */
Laya.Tween.clearAll = function(target) {};

/**
 * 清理某个缓动。
 * @param {!Laya.Tween} tween 缓动对象。
 * @return {void}
 */
Laya.Tween.clear = function(tween) {};

/**
 * @param {?} target
 * @return {void}
 */
Laya.Tween.clearTween = function(target) {};

/**
 * 停止并清理当前缓动。
 * @return {void}
 */
Laya.Tween.prototype.clear = function() {};

/**
 * 回收到对象池。
 * @return {void}
 */
Laya.Tween.prototype.recover = function() {};

/**
 * 重新开始暂停的缓动。
 * @return {void}
 */
Laya.Tween.prototype.restart = function() {};

/**
 * 恢复暂停的缓动。
 * @return {void}
 */
Laya.Tween.prototype.resume = function() {};
/**
 * @constructor
 * @struct
 */
Laya.Utils = function() {};
/** @type {!Laya.Stage} */
Laya.Utils.gStage;
/** @type {?} */
Laya.Utils._gid;
/** @type {?} */
Laya.Utils._pi;
/** @type {?} */
Laya.Utils._pi2;
/** @type {!RegExp} */
Laya.Utils._extReg;
/** @type {!Function} */
Laya.Utils.parseXMLFromString;

/**
 * 角度转弧度。
 * @param {number} angle 角度值。
 * @return {number} 返回弧度值。
 */
Laya.Utils.toRadian = function(angle) {};

/**
 * 弧度转换为角度。
 * @param {number} radian 弧度值。
 * @return {number} 返回角度值。
 */
Laya.Utils.toAngle = function(radian) {};

/**
 * 将传入的 uint 类型颜色值转换为字符串型颜色值。
 * @param {number} color 颜色值。
 * @return {string} 字符串型颜色值。
 */
Laya.Utils.toHexColor = function(color) {};

/**
 * 获取一个全局唯一ID。
 * @return {number}
 */
Laya.Utils.getGID = function() {};

/**
 * @param {!Array<?>} source 待连接的数组目标对象。
 * @param {!Array<?>} array 待连接的数组对象。
 * @return {!Array<?>} 连接后的数组。
 */
Laya.Utils.concatArray = function(source, array) {};

/**
 * @param {!Array<?>} array 数组。
 * @return {!Array<?>} 清空后的 array 对象。
 */
Laya.Utils.clearArray = function(array) {};

/**
 * @param {!Array<?>} source 需要赋值的数组。
 * @param {!Array<?>} array 新的数组值。
 * @return {!Array<?>} 复制后的数据 source 。
 */
Laya.Utils.copyArray = function(source, array) {};

/**
 * @param {!Laya.Sprite} sprite 显示对象 <code>Sprite</code>。
 * @param {number} x0 点一的 X 轴坐标点。
 * @param {number} y0 点一的 Y 轴坐标点。
 * @param {number} x1 点二的 X 轴坐标点。
 * @param {number} y1 点二的 Y 轴坐标点。
 * @return {!Laya.Rectangle} 两个点在舞台坐标系组成的矩形对象 <code>Rectangle</code>。
 */
Laya.Utils.getGlobalRecByPoints = function(sprite, x0, y0, x1, y1) {};

/**
 * 计算传入的显示对象 <code>Sprite</code> 的全局坐标系的坐标和缩放值，返回 <code>Rectangle</code> 对象存放计算出的坐标X值、Y值、ScaleX值、ScaleY值。
 * @param {!Laya.Sprite} sprite <code>Sprite</code> 对象。
 * @return {!Laya.Rectangle} 矩形对象 <code>Rectangle</code>
 */
Laya.Utils.getGlobalPosAndScale = function(sprite) {};

/**
 * 给传入的函数绑定作用域，返回绑定后的函数。
 * @param {!Function} fun 函数对象。
 * @param {?} scope 函数作用域。
 * @return {!Function} 绑定后的函数。
 */
Laya.Utils.bind = function(fun, scope) {};

/**
 * @param {!Array<?>} array 子对象数组。
 * @return {boolean} Boolean 值，表示是否已重新排序。
 */
Laya.Utils.updateOrder = function(array) {};

/**
 * @param {!Array<?>} points 坐标列表。
 * @param {number} x x轴偏移量。
 * @param {number} y y轴偏移量。
 * @return {void}
 */
Laya.Utils.transPointList = function(points, x, y) {};

/**
 * 解析一个字符串，并返回一个整数。和JS原生的parseInt不同：如果str为空或者非数字，原生返回NaN，这里返回0。
 * @param {string} str 要被解析的字符串。
 * @param {number=} radix 表示要解析的数字的基数。默认值为0，表示10进制，其他值介于 2 ~ 36 之间。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数不在上述范围内，则此方法返回 0。
 * @return {number} 返回解析后的数字。
 */
Laya.Utils.parseInt = function(str, radix) {};

/**
 * @param {string} path
 * @return {string}
 */
Laya.Utils.getFileExtension = function(path) {};

/**
 * @param {string} path
 * @return {string}
 */
Laya.Utils.getFilecompatibleExtension = function(path) {};

/**
 * 获取指定区域内相对于窗口左上角的transform。
 * @param {!Laya.Sprite} coordinateSpace 坐标空间，不能是Stage引用
 * @param {number} x 相对于coordinateSpace的x坐标
 * @param {number} y 相对于coordinateSpace的y坐标
 * @return {?}
 */
Laya.Utils.getTransformRelativeToWindow = function(coordinateSpace, x, y) {};

/**
 * 使DOM元素使用舞台内的某块区域内。
 * @param {?} dom DOM元素引用
 * @param {!Laya.Sprite} coordinateSpace 坐标空间，不能是Stage引用
 * @param {number} x 相对于coordinateSpace的x坐标
 * @param {number} y 相对于coordinateSpace的y坐标
 * @param {number} width 宽度
 * @param {number} height 高度
 * @return {void}
 */
Laya.Utils.fitDOMElementInArea = function(dom, coordinateSpace, x, y, width, height) {};

/**
 * @param {!Array<?>} textureList
 * @return {boolean}
 */
Laya.Utils.isOkTextureList = function(textureList) {};

/**
 * @param {!Array<?>} cmds
 * @return {boolean}
 */
Laya.Utils.isOKCmdList = function(cmds) {};

/**
 * 获得URL参数值
 * @param {string} name 参数名称
 * @return {string} 参数值
 */
Laya.Utils.getQueryString = function(name) {};

/**
 * @constructor
 * @struct
 */
Laya.VectorGraphManager = function() {};
/** @type {!Laya.VectorGraphManager} */
Laya.VectorGraphManager.instance;
/** @type {?} */
Laya.VectorGraphManager.prototype.useDic;
/** @type {?} */
Laya.VectorGraphManager.prototype.shapeDic;
/** @type {?} */
Laya.VectorGraphManager.prototype.shapeLineDic;
/** @type {?} */
Laya.VectorGraphManager.prototype._id;
/** @type {?} */
Laya.VectorGraphManager.prototype._checkKey;
/** @type {?} */
Laya.VectorGraphManager.prototype._freeIdArray;

/**
 * @return {!Laya.VectorGraphManager}
 */
Laya.VectorGraphManager.getInstance = function() {};

/**
 * 得到个空闲的ID
 * @return {number}
 */
Laya.VectorGraphManager.prototype.getId = function() {};

/**
 * 添加一个图形到列表中
 * @param {number} id
 * @param {?} shape
 * @return {void}
 */
Laya.VectorGraphManager.prototype.addShape = function(id, shape) {};

/**
 * 添加一个线图形到列表中
 * @param {number} id
 * @param {?} Line
 * @return {void}
 */
Laya.VectorGraphManager.prototype.addLine = function(id, Line) {};

/**
 * 检测一个对象是否在使用中
 * @param {number} id
 * @return {void}
 */
Laya.VectorGraphManager.prototype.getShape = function(id) {};

/**
 * 删除一个图形对象
 * @param {number} id
 * @return {void}
 */
Laya.VectorGraphManager.prototype.deleteShape = function(id) {};

/**
 * 得到缓存列表
 * @return {!Array<?>}
 */
Laya.VectorGraphManager.prototype.getCacheList = function() {};

/**
 * 开始清理状态，准备销毁
 * @param {boolean} key
 * @return {void}
 */
Laya.VectorGraphManager.prototype.startDispose = function(key) {};

/**
 * 确认销毁
 * @return {void}
 */
Laya.VectorGraphManager.prototype.endDispose = function() {};

/**
 * @constructor
 * @struct
 */
Laya.WeakObject = function() {};
/** @type {boolean} */
Laya.WeakObject.supportWeakMap;
/** @type {number} */
Laya.WeakObject.delInterval;
/** @type {!Laya.WeakObject} */
Laya.WeakObject.I;
/** @type {?} */
Laya.WeakObject._maps;

/**
 * 清理缓存，回收内存
 * @return {void}
 */
Laya.WeakObject.clearCache = function() {};

/**
 * 设置缓存
 * @param {?} key kye对象，可被回收
 * @param {?} value object对象，可被回收
 * @return {void}
 */
Laya.WeakObject.prototype.set = function(key, value) {};

/**
 * 获取缓存
 * @param {?} key kye对象，可被回收
 * @return {?}
 */
Laya.WeakObject.prototype.get = function(key) {};

/**
 * 删除缓存
 * @param {?} key
 * @return {void}
 */
Laya.WeakObject.prototype.del = function(key) {};

/**
 * 是否有缓存
 * @param {?} key
 * @return {boolean}
 */
Laya.WeakObject.prototype.has = function(key) {};
/**
 * @constructor
 * @struct
 */
Laya.WordText = function() {};
/** @type {number} */
Laya.WordText.prototype.id;
/** @type {!Array<?>} */
Laya.WordText.prototype.save;
/** @type {string} */
Laya.WordText.prototype.toUpperCase;
/** @type {boolean} */
Laya.WordText.prototype.changed;
/** @type {number} */
Laya.WordText.prototype.width;
/** @type {!Array<?>} */
Laya.WordText.prototype.pageChars;
/** @type {number} */
Laya.WordText.prototype.startID;
/** @type {number} */
Laya.WordText.prototype.startIDStroke;
/** @type {number} */
Laya.WordText.prototype.lastGCCnt;
/** @type {boolean} */
Laya.WordText.prototype.splitRender;
/** @type {number} */
Laya.WordText.prototype.scalex;
/** @type {number} */
Laya.WordText.prototype.scaley;

/* TODO: GetAccessor: Laya.length */

/**
 * @param {string} txt
 * @return {void}
 */
Laya.WordText.prototype.setText = function(txt) {};

/**
 * @return {string}
 */
Laya.WordText.prototype.toString = function() {};

/**
 * @param {number} i
 * @return {number}
 */
Laya.WordText.prototype.charCodeAt = function(i) {};

/**
 * @param {number} i
 * @return {string}
 */
Laya.WordText.prototype.charAt = function(i) {};

/**
 * 自己主动清理缓存，需要把关联的贴图删掉
 * 不做也可以，textrender会自动清理不用的
 * TODO 重用
 * @return {void}
 */
Laya.WordText.prototype.cleanCache = function() {};

/**
 * @extends {Laya.BufferStateBase}
 * @constructor
 * @struct
 */
Laya.BufferState2D = function() {};

/**
 * @constructor
 * @struct
 */
Laya.BufferStateBase = function() {};
/** @type {?} */
Laya.BufferStateBase.prototype._nativeVertexArrayObject;

/**
 * @return {void}
 */
Laya.BufferStateBase.prototype.bind = function() {};

/**
 * @return {void}
 */
Laya.BufferStateBase.prototype.unBind = function() {};

/**
 * @return {void}
 */
Laya.BufferStateBase.prototype.destroy = function() {};

/**
 * @return {void}
 */
Laya.BufferStateBase.prototype.bindForNative = function() {};

/**
 * @return {void}
 */
Laya.BufferStateBase.prototype.unBindForNative = function() {};
/**
 * @constructor
 * @struct
 */
Laya.BlendMode = function() {};
/** @type {!Function} */
Laya.BlendMode.activeBlendFunction;
/** @type {string} */
Laya.BlendMode.NORMAL;
/** @type {string} */
Laya.BlendMode.MASK;
/** @type {string} */
Laya.BlendMode.LIGHTER;
/** @type {!Array<?>} */
Laya.BlendMode.fns;
/** @type {!Array<?>} */
Laya.BlendMode.targetFns;

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendNormal = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendAdd = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendMultiply = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendScreen = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendOverlay = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendLight = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendNormalTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendAddTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendMultiplyTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendScreenTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendOverlayTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendLightTarget = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendMask = function(gl) {};

/**
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.BlendMode.BlendDestinationOut = function(gl) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
Laya.DrawStyle = function(value) {};
/** @type {!Laya.DrawStyle} */
Laya.DrawStyle.DEFAULT;
/** @type {!Laya.ColorUtils} */
Laya.DrawStyle.prototype._color;

/**
 * @param {?} value
 * @return {!Laya.DrawStyle}
 */
Laya.DrawStyle.create = function(value) {};

/**
 * @param {?} value
 * @return {void}
 */
Laya.DrawStyle.prototype.setValue = function(value) {};

/**
 * @return {void}
 */
Laya.DrawStyle.prototype.reset = function() {};

/**
 * @return {number}
 */
Laya.DrawStyle.prototype.toInt = function() {};

/**
 * @param {?} value
 * @return {boolean}
 */
Laya.DrawStyle.prototype.equal = function(value) {};

/**
 * @return {string}
 */
Laya.DrawStyle.prototype.toColorStr = function() {};

/**
 * @constructor
 * @struct
 */
Laya.Path = function() {};
/** @type {!Array<?>} */
Laya.Path.prototype.paths;
/** @type {?} */
Laya.Path.prototype._curPath;

/**
 * @param {boolean} convex
 * @return {void}
 */
Laya.Path.prototype.beginPath = function(convex) {};

/**
 * @return {void}
 */
Laya.Path.prototype.closePath = function() {};

/**
 * @return {void}
 */
Laya.Path.prototype.newPath = function() {};

/**
 * @param {number} pointX
 * @param {number} pointY
 * @return {void}
 */
Laya.Path.prototype.addPoint = function(pointX, pointY) {};

/**
 * @param {!Array<?>} points
 * @param {boolean} convex
 * @return {void}
 */
Laya.Path.prototype.push = function(points, convex) {};

/**
 * @return {void}
 */
Laya.Path.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
Laya.ISaveData = function() {};

/**
 * @return {boolean}
 */
Laya.ISaveData.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.ISaveData.prototype.restore = function(context) {};

/**
 * @implements {Laya.ISaveData}
 * @constructor
 * @struct
 */
Laya.SaveBase = function() {};
/** @type {number} */
Laya.SaveBase.TYPE_ALPHA;
/** @type {number} */
Laya.SaveBase.TYPE_FILESTYLE;
/** @type {number} */
Laya.SaveBase.TYPE_FONT;
/** @type {number} */
Laya.SaveBase.TYPE_LINEWIDTH;
/** @type {number} */
Laya.SaveBase.TYPE_STROKESTYLE;
/** @type {number} */
Laya.SaveBase.TYPE_MARK;
/** @type {number} */
Laya.SaveBase.TYPE_TRANSFORM;
/** @type {number} */
Laya.SaveBase.TYPE_TRANSLATE;
/** @type {number} */
Laya.SaveBase.TYPE_ENABLEMERGE;
/** @type {number} */
Laya.SaveBase.TYPE_TEXTBASELINE;
/** @type {number} */
Laya.SaveBase.TYPE_TEXTALIGN;
/** @type {number} */
Laya.SaveBase.TYPE_GLOBALCOMPOSITEOPERATION;
/** @type {number} */
Laya.SaveBase.TYPE_CLIPRECT;
/** @type {number} */
Laya.SaveBase.TYPE_CLIPRECT_STENCIL;
/** @type {number} */
Laya.SaveBase.TYPE_IBVB;
/** @type {number} */
Laya.SaveBase.TYPE_SHADER;
/** @type {number} */
Laya.SaveBase.TYPE_FILTERS;
/** @type {number} */
Laya.SaveBase.TYPE_FILTERS_TYPE;
/** @type {number} */
Laya.SaveBase.TYPE_COLORFILTER;
/** @type {?} */
Laya.SaveBase.POOL;
/** @type {?} */
Laya.SaveBase._namemap;
/** @type {?} */
Laya.SaveBase.prototype._valueName;
/** @type {?} */
Laya.SaveBase.prototype._value;
/** @type {?} */
Laya.SaveBase.prototype._dataObj;
/** @type {?} */
Laya.SaveBase.prototype._newSubmit;

/**
 * @return {boolean}
 */
Laya.SaveBase.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveBase.prototype.restore = function(context) {};

/**
 * @param {!Laya.Context} context
 * @param {number} type
 * @param {?} dataObj
 * @param {boolean} newSubmit
 * @return {void}
 */
Laya.SaveBase.save = function(context, type, dataObj, newSubmit) {};
/**
 * @implements {Laya.ISaveData}
 * @constructor
 * @struct
 */
Laya.SaveClipRect = function() {};
/** @type {?} */
Laya.SaveClipRect.POOL;
/** @type {?} */
Laya.SaveClipRect.prototype._globalClipMatrix;
/** @type {?} */
Laya.SaveClipRect.prototype._clipInfoID;
/** @type {boolean} */
Laya.SaveClipRect.prototype.incache;

/**
 * @return {boolean}
 */
Laya.SaveClipRect.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveClipRect.prototype.restore = function(context) {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveClipRect.save = function(context) {};

/**
 * @implements {Laya.ISaveData}
 * @constructor
 * @struct
 */
Laya.SaveMark = function() {};
/** @type {?} */
Laya.SaveMark.POOL;

/**
 * @return {boolean}
 */
Laya.SaveMark.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveMark.prototype.restore = function(context) {};

/**
 * @param {!Laya.Context} context
 * @return {!Laya.SaveMark}
 */
Laya.SaveMark.Create = function(context) {};

/**
 * @implements {Laya.ISaveData}
 * @constructor
 * @struct
 */
Laya.SaveTransform = function() {};
/** @type {?} */
Laya.SaveTransform.POOL;

/**
 * @return {boolean}
 */
Laya.SaveTransform.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveTransform.prototype.restore = function(context) {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveTransform.save = function(context) {};
/**
 * @implements {Laya.ISaveData}
 * @constructor
 * @struct
 */
Laya.SaveTranslate = function() {};
/** @type {?} */
Laya.SaveTranslate.POOL;

/**
 * @return {boolean}
 */
Laya.SaveTranslate.prototype.isSaveMark = function() {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveTranslate.prototype.restore = function(context) {};

/**
 * @param {!Laya.Context} context
 * @return {void}
 */
Laya.SaveTranslate.save = function(context) {};

/**
 * @constructor
 * @struct
 * @param {!Laya.Context} ctx
 * @param {!Laya.Sprite} sp
 */
Laya.WebGLCacheAsNormalCanvas = function(ctx, sp) {};
/** @type {number} */
Laya.WebGLCacheAsNormalCanvas.prototype.submitStartPos;
/** @type {number} */
Laya.WebGLCacheAsNormalCanvas.prototype.submitEndPos;
/** @type {!Laya.Context} */
Laya.WebGLCacheAsNormalCanvas.prototype.context;
/** @type {!Array<?>} */
Laya.WebGLCacheAsNormalCanvas.prototype.touches;
/** @type {!Array<?>} */
Laya.WebGLCacheAsNormalCanvas.prototype.submits;
/** @type {!Laya.Sprite} */
Laya.WebGLCacheAsNormalCanvas.prototype.sprite;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._pathMesh;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._triangleMesh;
/** @type {!Array<?>} */
Laya.WebGLCacheAsNormalCanvas.prototype.meshlist;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._oldMesh;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._oldPathMesh;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._oldTriMesh;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype._oldMeshList;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype.cachedClipInfo;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype.oldTx;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.prototype.oldTy;
/** @type {?} */
Laya.WebGLCacheAsNormalCanvas.matI;
/** @type {!Laya.Matrix} */
Laya.WebGLCacheAsNormalCanvas.prototype.invMat;

/**
 * @return {void}
 */
Laya.WebGLCacheAsNormalCanvas.prototype.startRec = function() {};

/**
 * @return {void}
 */
Laya.WebGLCacheAsNormalCanvas.prototype.endRec = function() {};

/**
 * 当前缓存是否还有效。例如clip变了就失效了，因为clip太难自动处理
 * @return {boolean}
 */
Laya.WebGLCacheAsNormalCanvas.prototype.isCacheValid = function() {};

/**
 * @return {void}
 */
Laya.WebGLCacheAsNormalCanvas.prototype.flushsubmit = function() {};

/**
 * @return {void}
 */
Laya.WebGLCacheAsNormalCanvas.prototype.releaseMem = function() {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 */
Laya.BaseShader = function() {};
/** @type {!Laya.BaseShader} */
Laya.BaseShader.activeShader;
/** @type {!Laya.BaseShader} */
Laya.BaseShader.bindShader;
/**
 * @constructor
 * @struct
 */
Laya.Shader2D = function() {};
/** @type {number} */
Laya.Shader2D.prototype.ALPHA;
/** @type {!Laya.Shader} */
Laya.Shader2D.prototype.shader;
/** @type {!Array<?>} */
Laya.Shader2D.prototype.filters;
/** @type {!Laya.ShaderDefines2D} */
Laya.Shader2D.prototype.defines;
/** @type {number} */
Laya.Shader2D.prototype.shaderType;
/** @type {!Array<?>} */
Laya.Shader2D.prototype.colorAdd;
/** @type {!Laya.DrawStyle} */
Laya.Shader2D.prototype.fillStyle;
/** @type {!Laya.DrawStyle} */
Laya.Shader2D.prototype.strokeStyle;

/**
 * @return {void}
 */
Laya.Shader2D.prototype.destroy = function() {};

/**
 * @return {void}
 */
Laya.Shader2D.__init__ = function() {};

/**
 * @extends {Laya.Shader}
 * @constructor
 * @struct
 * @param {string} vs
 * @param {string} ps
 * @param {?=} saveName
 * @param {?=} nameMap
 * @param {!Array<?>=} bindAttrib
 */
Laya.Shader2X = function(vs, ps, saveName, nameMap, bindAttrib) {};
/** @type {!Array<?>} */
Laya.Shader2X.prototype._params2dQuick2;
/** @type {number} */
Laya.Shader2X.prototype._shaderValueWidth;
/** @type {number} */
Laya.Shader2X.prototype._shaderValueHeight;

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.Shader2X.prototype._disposeResource = function() {};

/**
 * @param {!Laya.ShaderValue} shaderValue
 * @return {void}
 */
Laya.Shader2X.prototype.upload2dQuick2 = function(shaderValue) {};

/**
 * @return {!Array<?>}
 */
Laya.Shader2X.prototype._make2dQuick2 = function() {};

/**
 * @param {string} vs
 * @param {string} ps
 * @param {?=} saveName
 * @param {?=} nameMap
 * @param {!Array<?>=} bindAttrib
 * @return {!Laya.Shader}
 */
Laya.Shader2X.create = function(vs, ps, saveName, nameMap, bindAttrib) {};

/**
 * @extends {Laya.ShaderDefinesBase}
 * @constructor
 * @struct
 */
Laya.ShaderDefines2D = function() {};
/** @type {number} */
Laya.ShaderDefines2D.TEXTURE2D;
/** @type {number} */
Laya.ShaderDefines2D.PRIMITIVE;
/** @type {number} */
Laya.ShaderDefines2D.FILTERGLOW;
/** @type {number} */
Laya.ShaderDefines2D.FILTERBLUR;
/** @type {number} */
Laya.ShaderDefines2D.FILTERCOLOR;
/** @type {number} */
Laya.ShaderDefines2D.COLORADD;
/** @type {number} */
Laya.ShaderDefines2D.WORLDMAT;
/** @type {number} */
Laya.ShaderDefines2D.FILLTEXTURE;
/** @type {number} */
Laya.ShaderDefines2D.SKINMESH;
/** @type {number} */
Laya.ShaderDefines2D.MVP3D;
/** @type {number} */
Laya.ShaderDefines2D.NOOPTMASK;
/** @type {?} */
Laya.ShaderDefines2D.__name2int;
/** @type {?} */
Laya.ShaderDefines2D.__int2name;
/** @type {?} */
Laya.ShaderDefines2D.__int2nameMap;

/**
 * @return {void}
 */
Laya.ShaderDefines2D.__init__ = function() {};

/**
 * @param {string} name
 * @param {number} value
 * @return {void}
 */
Laya.ShaderDefines2D.reg = function(name, value) {};

/**
 * @param {number} value
 * @param {!Array<?>} int2name
 * @param {?} int2nameMap
 * @return {?}
 */
Laya.ShaderDefines2D.toText = function(value, int2name, int2nameMap) {};

/**
 * @param {string} names
 * @return {number}
 */
Laya.ShaderDefines2D.toInt = function(names) {};

/**
 * @constructor
 * @struct
 */
Laya.SkinMeshBuffer = function() {};
/** @type {!Laya.IndexBuffer2D} */
Laya.SkinMeshBuffer.prototype.ib;
/** @type {!Laya.VertexBuffer2D} */
Laya.SkinMeshBuffer.prototype.vb;
/** @type {!Laya.SkinMeshBuffer} */
Laya.SkinMeshBuffer.instance;

/**
 * @return {!Laya.SkinMeshBuffer}
 */
Laya.SkinMeshBuffer.getInstance = function() {};

/**
 * @param {?} skinMesh
 * @return {void}
 */
Laya.SkinMeshBuffer.prototype.addSkinMesh = function(skinMesh) {};

/**
 * @return {void}
 */
Laya.SkinMeshBuffer.prototype.reset = function() {};

/**
 * @extends {Laya.Value2D}
 * @constructor
 * @struct
 * @param {?} type
 */
Laya.SkinSV = function(type) {};
/** @type {?} */
Laya.SkinSV.prototype.texcoord;
/** @type {?} */
Laya.SkinSV.prototype.position;
/** @type {number} */
Laya.SkinSV.prototype.offsetX;
/** @type {number} */
Laya.SkinSV.prototype.offsetY;

/**
 * @extends {Laya.Value2D}
 * @constructor
 * @struct
 * @param {?} args
 */
Laya.PrimitiveSV = function(args) {};

/**
 * @extends {Laya.Value2D}
 * @constructor
 * @struct
 * @param {number=} subID
 */
Laya.TextureSV = function(subID) {};
/** @type {!Array<?>} */
Laya.TextureSV.prototype.u_colorMatrix;
/** @type {number} */
Laya.TextureSV.prototype.strength;
/** @type {!Array<?>} */
Laya.TextureSV.prototype.blurInfo;
/** @type {!Float32Array} */
Laya.TextureSV.prototype.colorMat;
/** @type {!Float32Array} */
Laya.TextureSV.prototype.colorAlpha;

/**
 * @override
 * @return {void}
 */
Laya.TextureSV.prototype.clear = function() {};

/**
 * @constructor
 * @struct
 * @param {number} mainID
 * @param {number} subID
 */
Laya.Value2D = function(mainID, subID) {};
/** @type {!Array<?>} */
Laya.Value2D._cache;
/** @type {?} */
Laya.Value2D._typeClass;
/** @type {!Array<?>} */
Laya.Value2D.TEMPMAT4_ARRAY;
/** @type {!Laya.ShaderDefines2D} */
Laya.Value2D.prototype.defines;
/** @type {!Array<?>} */
Laya.Value2D.prototype.size;
/** @type {number} */
Laya.Value2D.prototype.alpha;
/** @type {!Array<?>} */
Laya.Value2D.prototype.mmat;
/** @type {!Array<?>} */
Laya.Value2D.prototype.u_MvpMatrix;
/** @type {?} */
Laya.Value2D.prototype.texture;
/** @type {number} */
Laya.Value2D.prototype.ALPHA;
/** @type {!Laya.Shader} */
Laya.Value2D.prototype.shader;
/** @type {number} */
Laya.Value2D.prototype.mainID;
/** @type {number} */
Laya.Value2D.prototype.subID;
/** @type {!Array<?>} */
Laya.Value2D.prototype.filters;
/** @type {!Laya.Texture} */
Laya.Value2D.prototype.textureHost;
/** @type {!Array<?>} */
Laya.Value2D.prototype.color;
/** @type {!Array<?>} */
Laya.Value2D.prototype.colorAdd;
/** @type {!Array<?>} */
Laya.Value2D.prototype.u_mmat2;
/** @type {number} */
Laya.Value2D.prototype.ref;
/** @type {!Array<?>} */
Laya.Value2D.prototype._attribLocation;
/** @type {?} */
Laya.Value2D.prototype._inClassCache;
/** @type {?} */
Laya.Value2D.prototype._cacheID;
/** @type {!Array<?>} */
Laya.Value2D.prototype.clipMatDir;
/** @type {!Array<?>} */
Laya.Value2D.prototype.clipMatPos;
/** @type {!Array<?>} */
Laya.Value2D.prototype.clipOff;
/** @type {?} */
Laya.Value2D.prototype._ShaderWithCompile;

/**
 * @param {number} type
 * @param {?} classT
 * @return {void}
 */
Laya.Value2D._initone = function(type, classT) {};

/**
 * @return {void}
 */
Laya.Value2D.__init__ = function() {};

/**
 * @param {!Laya.Shader2D} value
 * @return {void}
 */
Laya.Value2D.prototype.setValue = function(value) {};

/**
 * @return {void}
 */
Laya.Value2D.prototype.upload = function() {};

/**
 * @param {!Array<?>} value
 * @return {void}
 */
Laya.Value2D.prototype.setFilters = function(value) {};

/**
 * @return {void}
 */
Laya.Value2D.prototype.clear = function() {};

/**
 * @return {void}
 */
Laya.Value2D.prototype.release = function() {};

/**
 * @param {number} mainType
 * @param {number} subType
 * @return {!Laya.Value2D}
 */
Laya.Value2D.create = function(mainType, subType) {};

/**
 * @extends {Laya.BaseShader}
 * @constructor
 * @struct
 * 根据vs和ps信息生成shader对象
 * 把自己存储在 sharders 数组中
 * @param {string} vs
 * @param {string} ps
 * @param {?=} saveName
 * @param {?=} nameMap 帮助里要详细解释为什么需要nameMap
 * @param {!Array<?>=} bindAttrib
 */
Laya.Shader = function(vs, ps, saveName, nameMap, bindAttrib) {};
/** @type {?} */
Laya.Shader._count;
/** @type {?} */
Laya.Shader.prototype._attribInfo;
/** @type {number} */
Laya.Shader.SHADERNAME2ID;
/** @type {!Laya.StringKey} */
Laya.Shader.nameKey;
/** @type {!Array<?>} */
Laya.Shader.sharders;
/** @type {?} */
Laya.Shader.prototype.customCompile;
/** @type {?} */
Laya.Shader.prototype._nameMap;
/** @type {?} */
Laya.Shader.prototype._vs;
/** @type {?} */
Laya.Shader.prototype._ps;
/** @type {?} */
Laya.Shader.prototype._curActTexIndex;
/** @type {?} */
Laya.Shader.prototype._reCompile;
/** @type {?} */
Laya.Shader.prototype.tag;
/** @type {?} */
Laya.Shader.prototype._compile;
/** @type {?} */
Laya.Shader._createShader;
/** @type {?} */
Laya.Shader.prototype._uniform1f;
/** @type {?} */
Laya.Shader.prototype._uniform1fv;
/** @type {?} */
Laya.Shader.prototype._uniform_vec2;
/** @type {?} */
Laya.Shader.prototype._uniform_vec2v;
/** @type {?} */
Laya.Shader.prototype._uniform_vec3;
/** @type {?} */
Laya.Shader.prototype._uniform_vec3v;
/** @type {?} */
Laya.Shader.prototype._uniform_vec4;
/** @type {?} */
Laya.Shader.prototype._uniform_vec4v;
/** @type {?} */
Laya.Shader.prototype._uniformMatrix2fv;
/** @type {?} */
Laya.Shader.prototype._uniformMatrix3fv;
/** @type {?} */
Laya.Shader.prototype._uniformMatrix4fv;
/** @type {?} */
Laya.Shader.prototype._uniform1i;
/** @type {?} */
Laya.Shader.prototype._uniform1iv;
/** @type {?} */
Laya.Shader.prototype._uniform_ivec2;
/** @type {?} */
Laya.Shader.prototype._uniform_ivec2v;
/** @type {?} */
Laya.Shader.prototype._uniform_vec3i;
/** @type {?} */
Laya.Shader.prototype._uniform_vec3vi;
/** @type {?} */
Laya.Shader.prototype._uniform_vec4i;
/** @type {?} */
Laya.Shader.prototype._uniform_vec4vi;
/** @type {?} */
Laya.Shader.prototype._uniform_sampler2D;
/** @type {?} */
Laya.Shader.prototype._uniform_samplerCube;
/** @type {?} */
Laya.Shader.prototype._noSetValue;

/**
 * @param {?} name
 * @return {!Laya.Shader}
 */
Laya.Shader.getShader = function(name) {};

/**
 * @param {string} vs
 * @param {string} ps
 * @param {?=} saveName
 * @param {?=} nameMap
 * @param {!Array<?>=} bindAttrib
 * @return {!Laya.Shader}
 */
Laya.Shader.create = function(vs, ps, saveName, nameMap, bindAttrib) {};

/**
 * 根据宏动态生成shader文件，支持#include?COLOR_FILTER "parts/ColorFilter_ps_logic.glsl";条件嵌入文件
 * @param {number} nameID
 * @param {?} define 宏定义，格式:{name:value...}
 * @param {?} shaderName
 * @param {!Function} createShader
 * @return {!Laya.Shader}
 */
Laya.Shader.withCompile = function(nameID, define, shaderName, createShader) {};

/**
 * 根据宏动态生成shader文件，支持#include?COLOR_FILTER "parts/ColorFilter_ps_logic.glsl";条件嵌入文件
 * @param {number} nameID
 * @param {number} mainID
 * @param {?} define 宏定义，格式:{name:value...}
 * @param {?} shaderName
 * @param {!Function} createShader
 * @param {!Array<?>=} bindAttrib
 * @return {!Laya.Shader}
 */
Laya.Shader.withCompile2D = function(nameID, mainID, define, shaderName, createShader, bindAttrib) {};

/**
 * @param {string} fileName
 * @param {string} txt
 * @return {void}
 */
Laya.Shader.addInclude = function(fileName, txt) {};

/**
 * 预编译shader文件，主要是处理宏定义
 * @param {number} nameID ,一般是特殊宏+shaderNameID*0.0002组成的一个浮点数当做唯一标识
 * @param {string} vs
 * @param {string} ps
 * @param {?} nameMap
 * @return {void}
 */
Laya.Shader.preCompile = function(nameID, vs, ps, nameMap) {};

/**
 * 预编译shader文件，主要是处理宏定义
 * @param {number} nameID ,一般是特殊宏+shaderNameID*0.0002组成的一个浮点数当做唯一标识
 * @param {number} mainID
 * @param {string} vs
 * @param {string} ps
 * @param {?} nameMap
 * @return {void}
 */
Laya.Shader.preCompile2D = function(nameID, mainID, vs, ps, nameMap) {};

/**
 * @protected
 * @return {void}
 */
Laya.Shader.prototype.recreateResource = function() {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.Shader.prototype._disposeResource = function() {};

/**
 * 根据变量名字获得
 * @param {string} name
 * @return {?}
 */
Laya.Shader.prototype.getUniform = function(name) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {void}
 */
Laya.Shader.prototype.uploadOne = function(name, value) {};

/**
 * @param {?} value
 * @return {void}
 */
Laya.Shader.prototype.uploadTexture2D = function(value) {};

/**
 * 提交shader到GPU
 * @param {!Laya.ShaderValue} shaderValue
 * @param {!Array<?>=} params
 * @return {void}
 */
Laya.Shader.prototype.upload = function(shaderValue, params) {};

/**
 * 按数组的定义提交
 * @param {!Array<?>} shaderValue 数组格式[name,value,...]
 * @param {number} length
 * @param {?} _bufferUsage
 * @return {void}
 */
Laya.Shader.prototype.uploadArray = function(shaderValue, length, _bufferUsage) {};

/**
 * 得到编译后的变量及相关预定义
 * @return {!Array<?>}
 */
Laya.Shader.prototype.getParams = function() {};

/**
 * 设置shader里面的attribute绑定到哪个location，必须与mesh2d的对应起来，
 * 这个必须在编译之前设置。
 * @param {!Array<?>} attribDesc 属性描述，格式是 [attributeName, location, attributeName, location ... ]
 * @return {void}
 */
Laya.Shader.prototype.setAttributesLocation = function(attribDesc) {};

/**
 * @constructor
 * @struct
 * @param {?} name2int
 * @param {!Array<?>} int2name
 * @param {!Array<?>} int2nameMap
 */
Laya.ShaderDefinesBase = function(name2int, int2name, int2nameMap) {};
/** @type {?} */
Laya.ShaderDefinesBase.prototype._name2int;
/** @type {?} */
Laya.ShaderDefinesBase.prototype._int2name;
/** @type {?} */
Laya.ShaderDefinesBase.prototype._int2nameMap;

/**
 * @param {?} value
 * @return {number}
 */
Laya.ShaderDefinesBase.prototype.add = function(value) {};

/**
 * @param {number} value
 * @return {number}
 */
Laya.ShaderDefinesBase.prototype.addInt = function(value) {};

/**
 * @param {?} value
 * @return {number}
 */
Laya.ShaderDefinesBase.prototype.remove = function(value) {};

/**
 * @param {number} def
 * @return {boolean}
 */
Laya.ShaderDefinesBase.prototype.isDefine = function(def) {};

/**
 * @return {number}
 */
Laya.ShaderDefinesBase.prototype.getValue = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.ShaderDefinesBase.prototype.setValue = function(value) {};

/**
 * @return {?}
 */
Laya.ShaderDefinesBase.prototype.toNameDic = function() {};

/**
 * @param {string} name
 * @param {number} value
 * @param {?} _name2int
 * @param {!Array<?>} _int2name
 * @return {void}
 */
Laya.ShaderDefinesBase._reg = function(name, value, _name2int, _int2name) {};

/**
 * @param {number} value
 * @param {!Array<?>} _int2name
 * @param {?} _int2nameMap
 * @return {?}
 */
Laya.ShaderDefinesBase._toText = function(value, _int2name, _int2nameMap) {};

/**
 * @param {string} names
 * @param {?} _name2int
 * @return {number}
 */
Laya.ShaderDefinesBase._toInt = function(names, _name2int) {};

/**
 * @constructor
 * @struct
 */
Laya.ShaderValue = function() {};
/**
 * @constructor
 * @struct
 */
Laya.BasePoly = function() {};
/** @type {?} */
Laya.BasePoly.tempData;

/**
 * 构造线的三角形数据。根据一个位置数组生成vb和ib
 * @param {!Array<?>} p
 * @param {!Array<?>} indices
 * @param {number} lineWidth
 * @param {number} indexBase 顶点开始的值，ib中的索引会加上这个
 * @param {!Array<?>} outVertex
 * @param {boolean} loop
 * @return {!Array<?>}
 */
Laya.BasePoly.createLine2 = function(p, indices, lineWidth, indexBase, outVertex, loop) {};

/**
 * 相邻的两段线，边界会相交，这些交点可以作为三角形的顶点。有两种可选，一种是采用左左,右右交点，一种是采用 左右，左右交点。当两段线夹角很小的时候，如果采用
 * 左左，右右会产生很长很长的交点，这时候就要采用左右左右交点，相当于把尖角截断。
 * 当采用左左右右交点的时候，直接用切线的垂线。采用左右左右的时候，用切线
 * 切线直接采用两个方向的平均值。不能用3-1的方式，那样垂线和下一段可能都在同一方向（例如都在右方）
 * 注意把重合的点去掉
 * @param {!Array<?>} path
 * @param {number} color
 * @param {number} width
 * @param {boolean} loop
 * @param {!Float32Array} outvb
 * @param {number} vbstride 顶点占用几个float,(bytelength/4)
 * @param {!Uint16Array} outib test:
 * @return {void}
 */
Laya.BasePoly.createLineTriangle = function(path, color, width, loop, outvb, vbstride, outib) {};
/**
 * @constructor
 * @struct
 */
Laya.Earcut = function() {};

/**
 * @param {?} data
 * @param {?} holeIndices
 * @param {?} dim
 * @return {?}
 */
Laya.Earcut.earcut = function(data, holeIndices, dim) {};

/**
 * @param {?} data
 * @param {?} start
 * @param {?} end
 * @param {?} dim
 * @param {?} clockwise
 * @return {?}
 */
Laya.Earcut.linkedList = function(data, start, end, dim, clockwise) {};

/**
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
Laya.Earcut.filterPoints = function(start, end) {};

/**
 * @param {?} ear
 * @param {?} triangles
 * @param {?} dim
 * @param {?} minX
 * @param {?} minY
 * @param {?} invSize
 * @param {?=} pass
 * @return {?}
 */
Laya.Earcut.earcutLinked = function(ear, triangles, dim, minX, minY, invSize, pass) {};

/**
 * @param {?} ear
 * @return {?}
 */
Laya.Earcut.isEar = function(ear) {};

/**
 * @param {?} ear
 * @param {?} minX
 * @param {?} minY
 * @param {?} invSize
 * @return {boolean}
 */
Laya.Earcut.isEarHashed = function(ear, minX, minY, invSize) {};

/**
 * @param {?} start
 * @param {?} triangles
 * @param {?} dim
 * @return {?}
 */
Laya.Earcut.cureLocalIntersections = function(start, triangles, dim) {};

/**
 * @param {?} start
 * @param {?} triangles
 * @param {?} dim
 * @param {?} minX
 * @param {?} minY
 * @param {?} invSize
 * @return {void}
 */
Laya.Earcut.splitEarcut = function(start, triangles, dim, minX, minY, invSize) {};

/**
 * @param {?} data
 * @param {?} holeIndices
 * @param {?} outerNode
 * @param {?} dim
 * @return {?}
 */
Laya.Earcut.eliminateHoles = function(data, holeIndices, outerNode, dim) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
Laya.Earcut.compareX = function(a, b) {};

/**
 * @param {?} hole
 * @param {?} outerNode
 * @return {void}
 */
Laya.Earcut.eliminateHole = function(hole, outerNode) {};

/**
 * @param {?} hole
 * @param {?} outerNode
 * @return {?}
 */
Laya.Earcut.findHoleBridge = function(hole, outerNode) {};

/**
 * @param {?} start
 * @param {?} minX
 * @param {?} minY
 * @param {?} invSize
 * @return {void}
 */
Laya.Earcut.indexCurve = function(start, minX, minY, invSize) {};

/**
 * @param {?} list
 * @return {?}
 */
Laya.Earcut.sortLinked = function(list) {};

/**
 * @param {?} x
 * @param {?} y
 * @param {?} minX
 * @param {?} minY
 * @param {?} invSize
 * @return {?}
 */
Laya.Earcut.zOrder = function(x, y, minX, minY, invSize) {};

/**
 * @param {?} start
 * @return {?}
 */
Laya.Earcut.getLeftmost = function(start) {};

/**
 * @param {?} ax
 * @param {?} ay
 * @param {?} bx
 * @param {?} by
 * @param {?} cx
 * @param {?} cy
 * @param {?} px
 * @param {?} py
 * @return {boolean}
 */
Laya.Earcut.pointInTriangle = function(ax, ay, bx, by, cx, cy, px, py) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
Laya.Earcut.isValidDiagonal = function(a, b) {};

/**
 * @param {?} p
 * @param {?} q
 * @param {?} r
 * @return {?}
 */
Laya.Earcut.area = function(p, q, r) {};

/**
 * @param {?} p1
 * @param {?} p2
 * @return {boolean}
 */
Laya.Earcut.equals = function(p1, p2) {};

/**
 * @param {?} p1
 * @param {?} q1
 * @param {?} p2
 * @param {?} q2
 * @return {boolean}
 */
Laya.Earcut.intersects = function(p1, q1, p2, q2) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
Laya.Earcut.intersectsPolygon = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
Laya.Earcut.locallyInside = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
Laya.Earcut.middleInside = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
Laya.Earcut.splitPolygon = function(a, b) {};

/**
 * @param {?} i
 * @param {?} x
 * @param {?} y
 * @param {?} last
 * @return {?}
 */
Laya.Earcut.insertNode = function(i, x, y, last) {};

/**
 * @param {?} p
 * @return {void}
 */
Laya.Earcut.removeNode = function(p) {};

/**
 * @param {?} data
 * @param {?} start
 * @param {?} end
 * @param {?} dim
 * @return {?}
 */
Laya.Earcut.signedArea = function(data, start, end, dim) {};

/**
 * @constructor
 * @struct
 * @param {?} i
 * @param {?} x
 * @param {?} y
 */
Laya.EarcutNode = function(i, x, y) {};
/** @type {?} */
Laya.EarcutNode.prototype.i;
/** @type {?} */
Laya.EarcutNode.prototype.x;
/** @type {?} */
Laya.EarcutNode.prototype.y;
/** @type {?} */
Laya.EarcutNode.prototype.prev;
/** @type {?} */
Laya.EarcutNode.prototype.next;
/** @type {?} */
Laya.EarcutNode.prototype.z;
/** @type {?} */
Laya.EarcutNode.prototype.prevZ;
/** @type {?} */
Laya.EarcutNode.prototype.nextZ;
/** @type {?} */
Laya.EarcutNode.prototype.steiner;
/**
 * @record
 * @struct
 */
Laya.ISubmit = function() {};

/**
 * @return {number}
 */
Laya.ISubmit.prototype.renderSubmit = function() {};

/**
 * @return {number}
 */
Laya.ISubmit.prototype.getRenderType = function() {};

/**
 * @return {void}
 */
Laya.ISubmit.prototype.releaseRender = function() {};

/**
 * @extends {Laya.SubmitBase}
 * @constructor
 * @struct
 * @param {number=} renderType
 */
Laya.Submit = function(renderType) {};
/** @type {number} */
Laya.Submit._poolSize;
/** @type {!Array<!Laya.Submit>} */
Laya.Submit.POOL;

/**
 * @override
 * @return {number}
 */
Laya.Submit.prototype.renderSubmit = function() {};

/**
 * @override
 * @return {void}
 */
Laya.Submit.prototype.releaseRender = function() {};

/**
 * create方法只传对submit设置的值
 * @param {!Laya.Context} context
 * @param {!Laya.Mesh2D} mesh
 * @param {!Laya.Value2D} sv
 * @return {!Laya.Submit}
 */
Laya.Submit.create = function(context, mesh, sv) {};

/**
 * 创建一个矢量submit
 * @param {!Laya.Context} ctx
 * @param {!Laya.Mesh2D} mesh
 * @param {number} numEle 对应drawElement的第二个参数:count
 * @param {!Laya.Value2D} sv Value2D
 * @return {!Laya.Submit}
 */
Laya.Submit.createShape = function(ctx, mesh, numEle, sv) {};

/**
 * @implements {Laya.ISubmit}
 * @constructor
 * @struct
 * @param {number=} renderType
 */
Laya.SubmitBase = function(renderType) {};
/** @type {number} */
Laya.SubmitBase.TYPE_2D;
/** @type {number} */
Laya.SubmitBase.TYPE_CANVAS;
/** @type {number} */
Laya.SubmitBase.TYPE_CMDSETRT;
/** @type {number} */
Laya.SubmitBase.TYPE_CUSTOM;
/** @type {number} */
Laya.SubmitBase.TYPE_BLURRT;
/** @type {number} */
Laya.SubmitBase.TYPE_CMDDESTORYPRERT;
/** @type {number} */
Laya.SubmitBase.TYPE_DISABLESTENCIL;
/** @type {number} */
Laya.SubmitBase.TYPE_OTHERIBVB;
/** @type {number} */
Laya.SubmitBase.TYPE_PRIMITIVE;
/** @type {number} */
Laya.SubmitBase.TYPE_RT;
/** @type {number} */
Laya.SubmitBase.TYPE_BLUR_RT;
/** @type {number} */
Laya.SubmitBase.TYPE_TARGET;
/** @type {number} */
Laya.SubmitBase.TYPE_CHANGE_VALUE;
/** @type {number} */
Laya.SubmitBase.TYPE_SHAPE;
/** @type {number} */
Laya.SubmitBase.TYPE_TEXTURE;
/** @type {number} */
Laya.SubmitBase.TYPE_FILLTEXTURE;
/** @type {number} */
Laya.SubmitBase.KEY_ONCE;
/** @type {number} */
Laya.SubmitBase.KEY_FILLRECT;
/** @type {number} */
Laya.SubmitBase.KEY_DRAWTEXTURE;
/** @type {number} */
Laya.SubmitBase.KEY_VG;
/** @type {number} */
Laya.SubmitBase.KEY_TRIANGLES;
/** @type {!Laya.SubmitBase} */
Laya.SubmitBase.RENDERBASE;
/** @type {number} */
Laya.SubmitBase.ID;
/** @type {!Laya.ISubmit} */
Laya.SubmitBase.preRender;
/** @type {number} */
Laya.SubmitBase.prototype.clipInfoID;
/** @type {number} */
Laya.SubmitBase.prototype._id;
/** @type {!Laya.Value2D} */
Laya.SubmitBase.prototype.shaderValue;

/**
 * @return {void}
 */
Laya.SubmitBase.__init__ = function() {};

/**
 * @return {number}
 */
Laya.SubmitBase.prototype.getID = function() {};

/**
 * @return {number}
 */
Laya.SubmitBase.prototype.getRenderType = function() {};

/**
 * @return {string}
 */
Laya.SubmitBase.prototype.toString = function() {};

/**
 * @return {number}
 */
Laya.SubmitBase.prototype.renderSubmit = function() {};

/**
 * @return {void}
 */
Laya.SubmitBase.prototype.releaseRender = function() {};

/**
 * @extends {Laya.SubmitBase}
 * @constructor
 * @struct
 */
Laya.SubmitCanvas = function() {};
/** @type {!Laya.Context} */
Laya.SubmitCanvas.prototype.canv;
/** @type {!Array<!Laya.SubmitCanvas>} */
Laya.SubmitCanvas.POOL;

/**
 * @param {?} canvas
 * @param {number} alpha
 * @param {!Array<?>} filters
 * @return {!Laya.SubmitCanvas}
 */
Laya.SubmitCanvas.create = function(canvas, alpha, filters) {};

/**
 * @override
 * @return {number}
 */
Laya.SubmitCanvas.prototype.renderSubmit = function() {};

/**
 * @override
 * @return {void}
 */
Laya.SubmitCanvas.prototype.releaseRender = function() {};

/**
 * @override
 * @return {number}
 */
Laya.SubmitCanvas.prototype.getRenderType = function() {};

/**
 * @implements {Laya.ISubmit}
 * @constructor
 * @struct
 */
Laya.SubmitCMD = function() {};
/** @type {!Array<!Laya.SubmitCMD>} */
Laya.SubmitCMD.POOL;
/** @type {!Function} */
Laya.SubmitCMD.prototype.fun;
/** @type {!Array<?>} */
Laya.SubmitCMD.prototype.args;

/**
 * @return {number}
 */
Laya.SubmitCMD.prototype.renderSubmit = function() {};

/**
 * @return {number}
 */
Laya.SubmitCMD.prototype.getRenderType = function() {};

/**
 * @return {void}
 */
Laya.SubmitCMD.prototype.releaseRender = function() {};

/**
 * @param {!Array<?>} args
 * @param {!Function} fun
 * @param {?} thisobj
 * @return {!Laya.SubmitCMD}
 */
Laya.SubmitCMD.create = function(args, fun, thisobj) {};

/**
 * @constructor
 * @struct
 */
Laya.SubmitKey = function() {};
/** @type {number} */
Laya.SubmitKey.prototype.blendShader;
/** @type {number} */
Laya.SubmitKey.prototype.submitType;
/** @type {number} */
Laya.SubmitKey.prototype.other;

/**
 * @return {void}
 */
Laya.SubmitKey.prototype.clear = function() {};

/**
 * @param {!Laya.SubmitKey} src
 * @return {void}
 */
Laya.SubmitKey.prototype.copyFrom = function(src) {};

/**
 * @param {!Laya.SubmitKey} src
 * @param {number} submitType
 * @param {number} other
 * @return {void}
 */
Laya.SubmitKey.prototype.copyFrom2 = function(src, submitType, other) {};

/**
 * @param {!Laya.SubmitKey} next
 * @param {number} submitType
 * @param {number} other
 * @return {boolean}
 */
Laya.SubmitKey.prototype.equal3_2 = function(next, submitType, other) {};

/**
 * @param {!Laya.SubmitKey} next
 * @param {number} submitType
 * @param {number} other
 * @return {boolean}
 */
Laya.SubmitKey.prototype.equal4_2 = function(next, submitType, other) {};

/**
 * @param {!Laya.SubmitKey} next
 * @return {boolean}
 */
Laya.SubmitKey.prototype.equal_3 = function(next) {};

/**
 * @param {!Laya.SubmitKey} next
 * @return {boolean}
 */
Laya.SubmitKey.prototype.equal = function(next) {};

/**
 * @implements {Laya.ISubmit}
 * @constructor
 * @struct
 */
Laya.SubmitTarget = function() {};
/** @type {!Laya.Value2D} */
Laya.SubmitTarget.prototype.shaderValue;
/** @type {number} */
Laya.SubmitTarget.prototype.blendType;
/** @type {!Laya.RenderTexture2D} */
Laya.SubmitTarget.prototype.srcRT;
/** @type {!Array<!Laya.SubmitTarget>} */
Laya.SubmitTarget.POOL;

/**
 * @return {number}
 */
Laya.SubmitTarget.prototype.renderSubmit = function() {};

/**
 * @return {void}
 */
Laya.SubmitTarget.prototype.blend = function() {};

/**
 * @return {number}
 */
Laya.SubmitTarget.prototype.getRenderType = function() {};

/**
 * @return {void}
 */
Laya.SubmitTarget.prototype.releaseRender = function() {};

/**
 * @param {!Laya.Context} context
 * @param {!Laya.Mesh2D} mesh
 * @param {!Laya.Value2D} sv
 * @param {!Laya.RenderTexture2D} rt
 * @return {!Laya.SubmitTarget}
 */
Laya.SubmitTarget.create = function(context, mesh, sv, rt) {};

/**
 * @extends {Laya.SubmitBase}
 * @constructor
 * @struct
 * @param {number=} renderType
 */
Laya.SubmitTexture = function(renderType) {};
/** @type {?} */
Laya.SubmitTexture._poolSize;
/** @type {?} */
Laya.SubmitTexture.POOL;

/**
 * @override
 * @return {void}
 */
Laya.SubmitTexture.prototype.releaseRender = function() {};

/**
 * @return {number}
 */
Laya.SubmitTexture.prototype.renderSubmit = function() {};

/**
 * @param {!Laya.Context} context
 * @param {!Laya.Mesh2D} mesh
 * @param {!Laya.Value2D} sv
 * @return {!Laya.SubmitTexture}
 */
Laya.SubmitTexture.create = function(context, mesh, sv) {};
/**
 * @constructor
 * @struct
 */
Laya.SystemUtils = function() {};

/* TODO: GetAccessor: Laya.maxTextureCount */

/* TODO: GetAccessor: Laya.maxTextureSize */

/* TODO: GetAccessor: Laya.shaderCapailityLevel */

/**
 * 是否支持纹理格式。
 * @param {number} format 纹理格式。
 * @return {boolean} 是否支持。
 */
Laya.SystemUtils.supportTextureFormat = function(format) {};

/**
 * 是否支持渲染纹理格式。
 * @param {number} format 渲染纹理格式。
 * @return {boolean} 是否支持。
 */
Laya.SystemUtils.supportRenderTextureFormat = function(format) {};
/**
 * @constructor
 * @struct
 */
Laya.ArabicReshaper = function() {};
/** @type {?} */
Laya.ArabicReshaper.charsMap;
/** @type {?} */
Laya.ArabicReshaper.combCharsMap;
/** @type {?} */
Laya.ArabicReshaper.transChars;

/**
 * @param {number} c
 * @return {boolean}
 */
Laya.ArabicReshaper.prototype.characterMapContains = function(c) {};

/**
 * @param {number} c
 * @return {boolean}
 */
Laya.ArabicReshaper.prototype.getCharRep = function(c) {};

/**
 * @param {number} c1
 * @param {number} c2
 * @return {boolean}
 */
Laya.ArabicReshaper.prototype.getCombCharRep = function(c1, c2) {};

/**
 * @param {number} c
 * @return {boolean}
 */
Laya.ArabicReshaper.prototype.isTransparent = function(c) {};

/**
 * @param {number} code
 * @return {string}
 */
Laya.ArabicReshaper.prototype.getOriginalCharsFromCode = function(code) {};

/**
 * 转换函数。从normal转到presentB
 * 这个返回的字符串可以直接按照从左到右的顺序渲染。
 * 例如
 * graphics.fillText(convertArabic('سلام'),....)
 * @param {?} normal
 * @return {string}
 */
Laya.ArabicReshaper.prototype.convertArabic = function(normal) {};

/**
 * @param {?} apfb
 * @return {string}
 */
Laya.ArabicReshaper.prototype.convertArabicBack = function(apfb) {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {number=} id
 */
Laya.AtlasGrid = function(width, height, id) {};
/** @type {number} */
Laya.AtlasGrid.prototype.atlasID;
/** @type {?} */
Laya.AtlasGrid.prototype._width;
/** @type {?} */
Laya.AtlasGrid.prototype._height;
/** @type {?} */
Laya.AtlasGrid.prototype._texCount;
/** @type {?} */
Laya.AtlasGrid.prototype._rowInfo;
/** @type {?} */
Laya.AtlasGrid.prototype._cells;
/** @type {number} */
Laya.AtlasGrid.prototype._used;
/** @type {?} */
Laya.AtlasGrid.prototype._release;
/** @type {?} */
Laya.AtlasGrid.prototype._init;
/** @type {?} */
Laya.AtlasGrid.prototype._get;
/** @type {?} */
Laya.AtlasGrid.prototype._fill;
/** @type {?} */
Laya.AtlasGrid.prototype._check;
/** @type {?} */
Laya.AtlasGrid.prototype._clear;

/**
 * @param {number} type
 * @param {number} width
 * @param {number} height
 * @param {!Laya.Point} pt
 * @return {boolean}
 */
Laya.AtlasGrid.prototype.addRect = function(type, width, height, pt) {};
/**
 * @constructor
 * @struct
 */
Laya.CharRenderInfo = function() {};
/** @type {string} */
Laya.CharRenderInfo.prototype.char;
/** @type {?} */
Laya.CharRenderInfo.prototype.tex;
/** @type {boolean} */
Laya.CharRenderInfo.prototype.deleted;
/** @type {!Array<?>} */
Laya.CharRenderInfo.prototype.uv;
/** @type {number} */
Laya.CharRenderInfo.prototype.pos;
/** @type {number} */
Laya.CharRenderInfo.prototype.width;
/** @type {number} */
Laya.CharRenderInfo.prototype.height;
/** @type {number} */
Laya.CharRenderInfo.prototype.bmpWidth;
/** @type {number} */
Laya.CharRenderInfo.prototype.bmpHeight;
/** @type {number} */
Laya.CharRenderInfo.prototype.orix;
/** @type {number} */
Laya.CharRenderInfo.prototype.oriy;
/** @type {number} */
Laya.CharRenderInfo.prototype.touchTick;
/** @type {boolean} */
Laya.CharRenderInfo.prototype.isSpace;

/**
 * @return {void}
 */
Laya.CharRenderInfo.prototype.touch = function() {};

/**
 * @extends {Laya.ICharRender}
 * @constructor
 * @struct
 * @param {number} maxw
 * @param {number} maxh
 * @param {boolean=} scalefont
 * @param {boolean=} useImageData
 * @param {boolean=} showdbg
 */
Laya.CharRender_Canvas = function(maxw, maxh, scalefont, useImageData, showdbg) {};
/** @type {?} */
Laya.CharRender_Canvas.canvas;
/** @type {?} */
Laya.CharRender_Canvas.prototype.ctx;
/** @type {?} */
Laya.CharRender_Canvas.prototype.lastScaleX;
/** @type {?} */
Laya.CharRender_Canvas.prototype.lastScaleY;
/** @type {?} */
Laya.CharRender_Canvas.prototype.maxTexW;
/** @type {?} */
Laya.CharRender_Canvas.prototype.maxTexH;
/** @type {?} */
Laya.CharRender_Canvas.prototype.scaleFontSize;
/** @type {?} */
Laya.CharRender_Canvas.prototype.showDbgInfo;
/** @type {?} */
Laya.CharRender_Canvas.prototype.supportImageData;

/* TODO: GetAccessor: Laya.canvasWidth */

/* TODO: SetAccessor: Laya.canvasWidth */

/**
 * @override
 * @param {string} font
 * @param {string} str
 * @return {number}
 */
Laya.CharRender_Canvas.prototype.getWidth = function(font, str) {};

/**
 * @override
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
Laya.CharRender_Canvas.prototype.scale = function(sx, sy) {};

/**
 * TODO stroke
 * @override
 * @param {string} char
 * @param {string} font
 * @param {number} lineWidth
 * @param {string} colStr
 * @param {string} strokeColStr
 * @param {!Laya.CharRenderInfo} cri 修改里面的width。
 * @param {number} margin_left
 * @param {number} margin_top
 * @param {number} margin_right
 * @param {number} margin_bottom
 * @param {!Array<?>=} rect
 * @return {!ImageData}
 */
Laya.CharRender_Canvas.prototype.getCharBmp = function(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom, rect) {};

/**
 * @param {string} char
 * @param {string} font
 * @param {number} lineWidth
 * @param {string} colStr
 * @param {string} strokeColStr
 * @param {!Laya.CharRenderInfo} cri
 * @param {number} margin_left
 * @param {number} margin_top
 * @param {number} margin_right
 * @param {number} margin_bottom
 * @return {!ImageData}
 */
Laya.CharRender_Canvas.prototype.getCharCanvas = function(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom) {};

/**
 * @extends {Laya.ICharRender}
 * @constructor
 * @struct
 */
Laya.CharRender_Native = function() {};
/** @type {?} */
Laya.CharRender_Native.prototype.lastFont;
/** @type {?} */
Laya.CharRender_Native.prototype.lastScaleX;
/** @type {?} */
Laya.CharRender_Native.prototype.lastScaleY;

/**
 * @override
 * @param {string} font
 * @param {string} str
 * @return {number}
 */
Laya.CharRender_Native.prototype.getWidth = function(font, str) {};

/**
 * @override
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
Laya.CharRender_Native.prototype.scale = function(sx, sy) {};

/**
 * TODO stroke
 * @override
 * @param {string} char
 * @param {string} font
 * @param {number} lineWidth
 * @param {string} colStr
 * @param {string} strokeColStr
 * @param {!Laya.CharRenderInfo} size 返回宽高
 * @param {number} margin_left
 * @param {number} margin_top
 * @param {number} margin_right
 * @param {number} margin_bottom
 * @param {!Array<?>=} rect
 * @return {!ImageData}
 */
Laya.CharRender_Native.prototype.getCharBmp = function(char, font, lineWidth, colStr, strokeColStr, size, margin_left, margin_top, margin_right, margin_bottom, rect) {};

/**
 * @constructor
 * @struct
 */
Laya.CharSubmitCache = function() {};
/** @type {?} */
Laya.CharSubmitCache.__posPool;
/** @type {?} */
Laya.CharSubmitCache.__nPosPool;
/** @type {?} */
Laya.CharSubmitCache.prototype._data;
/** @type {?} */
Laya.CharSubmitCache.prototype._ndata;
/** @type {?} */
Laya.CharSubmitCache.prototype._tex;
/** @type {?} */
Laya.CharSubmitCache.prototype._imgId;
/** @type {?} */
Laya.CharSubmitCache.prototype._clipid;
/** @type {?} */
Laya.CharSubmitCache.prototype._clipMatrix;

/**
 * @return {void}
 */
Laya.CharSubmitCache.prototype.clear = function() {};

/**
 * @return {void}
 */
Laya.CharSubmitCache.prototype.destroy = function() {};

/**
 * @param {!Laya.Context} ctx
 * @param {!Laya.Texture} tex
 * @param {number} imgid
 * @param {!Array<?>} pos
 * @param {!ArrayLike<number>} uv
 * @param {number} color
 * @return {void}
 */
Laya.CharSubmitCache.prototype.add = function(ctx, tex, imgid, pos, uv, color) {};

/**
 * @return {!Array<?>}
 */
Laya.CharSubmitCache.prototype.getPos = function() {};

/**
 * @param {boolean} value
 * @param {!Laya.Context} ctx
 * @return {void}
 */
Laya.CharSubmitCache.prototype.enable = function(value, ctx) {};

/**
 * @param {!Laya.Context} ctx
 * @return {void}
 */
Laya.CharSubmitCache.prototype.submit = function(ctx) {};
/**
 * @constructor
 * @struct
 */
Laya.ICharRender = function() {};
/** @type {number} */
Laya.ICharRender.prototype.fontsz;

/* TODO: GetAccessor: Laya.canvasWidth */

/* TODO: SetAccessor: Laya.canvasWidth */

/**
 * @param {string} font
 * @param {string} str
 * @return {number}
 */
Laya.ICharRender.prototype.getWidth = function(font, str) {};

/**
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
Laya.ICharRender.prototype.scale = function(sx, sy) {};

/**
 * TODO stroke
 * @param {string} char
 * @param {string} font
 * @param {number} lineWidth
 * @param {string} colStr
 * @param {string} strokeColStr
 * @param {!Laya.CharRenderInfo} size 返回宽高
 * @param {number} margin_left
 * @param {number} margin_top
 * @param {number} margin_right
 * @param {number} margin_bottom
 * @param {!Array<?>=} rect
 * @return {!ImageData}
 */
Laya.ICharRender.prototype.getCharBmp = function(char, font, lineWidth, colStr, strokeColStr, size, margin_left, margin_top, margin_right, margin_bottom, rect) {};

/**
 * @constructor
 * @struct
 */
Laya.TextAtlas = function() {};
/** @type {number} */
Laya.TextAtlas.prototype.texWidth;
/** @type {number} */
Laya.TextAtlas.prototype.texHeight;
/** @type {?} */
Laya.TextAtlas.prototype.atlasgrid;
/** @type {!Laya.TextTexture} */
Laya.TextAtlas.prototype.texture;
/** @type {?} */
Laya.TextAtlas.prototype.charMaps;
/** @type {number} */
Laya.TextAtlas.atlasGridW;

/* TODO: GetAccessor: Laya.usedRate */

/**
 * @param {number} d
 * @return {void}
 */
Laya.TextAtlas.prototype.setProtecteDist = function(d) {};

/**
 * 如果返回null，则表示无法加入了
 * 分配的时候优先选择最接近自己高度的节点
 * @param {number} w
 * @param {number} h
 * @param {!Laya.Point} pt
 * @return {boolean}
 */
Laya.TextAtlas.prototype.getAEmpty = function(w, h, pt) {};

/**
 * @return {void}
 */
Laya.TextAtlas.prototype.destroy = function() {};

/**
 * @return {void}
 */
Laya.TextAtlas.prototype.printDebugInfo = function() {};

/**
 * @constructor
 * @struct
 */
Laya.TextRender = function() {};
/** @type {boolean} */
Laya.TextRender.useOldCharBook;
/** @type {number} */
Laya.TextRender.atlasWidth;
/** @type {boolean} */
Laya.TextRender.noAtlas;
/** @type {boolean} */
Laya.TextRender.forceSplitRender;
/** @type {boolean} */
Laya.TextRender.forceWholeRender;
/** @type {boolean} */
Laya.TextRender.scaleFontWithCtx;
/** @type {number} */
Laya.TextRender.standardFontSize;
/** @type {number} */
Laya.TextRender.destroyAtlasDt;
/** @type {number} */
Laya.TextRender.checkCleanTextureDt;
/** @type {number} */
Laya.TextRender.destroyUnusedTextureDt;
/** @type {number} */
Laya.TextRender.cleanMem;
/** @type {boolean} */
Laya.TextRender.isWan1Wan;
/** @type {boolean} */
Laya.TextRender.showLog;
/** @type {boolean} */
Laya.TextRender.debugUV;
/** @type {?} */
Laya.TextRender.prototype.fontSizeInfo;
/** @type {number} */
Laya.TextRender.atlasWidth2;
/** @type {?} */
Laya.TextRender.prototype.charRender;
/** @type {?} */
Laya.TextRender.tmpRI;
/** @type {?} */
Laya.TextRender.pixelBBX;
/** @type {?} */
Laya.TextRender.prototype.mapFont;
/** @type {?} */
Laya.TextRender.prototype.fontID;
/** @type {?} */
Laya.TextRender.prototype.fontScaleX;
/** @type {?} */
Laya.TextRender.prototype.fontScaleY;
/** @type {?} */
Laya.TextRender.prototype._curStrPos;
/** @type {!Laya.TextRender} */
Laya.TextRender.textRenderInst;
/** @type {!Array<!Laya.TextAtlas>} */
Laya.TextRender.prototype.textAtlases;
/** @type {?} */
Laya.TextRender.prototype.isoTextures;
/** @type {?} */
Laya.TextRender.prototype.bmpData32;
/** @type {?} */
Laya.TextRender.imgdtRect;
/** @type {?} */
Laya.TextRender.prototype.lastFont;
/** @type {?} */
Laya.TextRender.prototype.fontSizeW;
/** @type {?} */
Laya.TextRender.prototype.fontSizeH;
/** @type {?} */
Laya.TextRender.prototype.fontSizeOffX;
/** @type {?} */
Laya.TextRender.prototype.fontSizeOffY;
/** @type {?} */
Laya.TextRender.prototype.renderPerChar;
/** @type {?} */
Laya.TextRender.prototype.tmpAtlasPos;
/** @type {?} */
Laya.TextRender.prototype.textureMem;
/** @type {?} */
Laya.TextRender.prototype.fontStr;
/** @type {boolean} */
Laya.TextRender.simClean;
/** @type {?} */
Laya.TextRender.prototype.checkBmpLine;
/** @type {?} */
Laya.TextRender.prototype.updateBbx;

/**
 * 设置当前字体，获得字体的大小信息。
 * @param {!Laya.FontInfo} font
 * @return {void}
 */
Laya.TextRender.prototype.setFont = function(font) {};

/**
 * 从string中取出一个完整的char，例如emoji的话要多个
 * 会修改 _curStrPos
 * TODO 由于各种文字中的组合写法，这个需要能扩展，以便支持泰文等
 * @param {string} str
 * @return {string}
 */
Laya.TextRender.prototype.getNextChar = function(str) {};

/**
 * @param {!Laya.Context} ctx
 * @param {(string|!Laya.WordText)} data
 * @param {number} x
 * @param {number} y
 * @param {string} fontStr
 * @param {string} color
 * @param {string} strokeColor
 * @param {number} lineWidth
 * @param {string} textAlign
 * @param {number=} underLine
 * @return {void}
 */
Laya.TextRender.prototype.filltext = function(ctx, data, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine) {};

/**
 * @param {!Laya.Context} ctx
 * @param {!Array<!Laya.HTMLChar>} data
 * @param {number} x
 * @param {number} y
 * @param {(string|!Laya.FontInfo)} fontStr
 * @param {string} color
 * @param {string} strokeColor
 * @param {number} lineWidth
 * @return {void}
 */
Laya.TextRender.prototype.fillWords = function(ctx, data, x, y, fontStr, color, strokeColor, lineWidth) {};

/**
 * @param {!Laya.Context} ctx
 * @param {(string|!Laya.WordText)} data
 * @param {!Array<!Laya.HTMLChar>} htmlchars
 * @param {number} x
 * @param {number} y
 * @param {!Laya.FontInfo} font
 * @param {string} color
 * @param {string} strokeColor
 * @param {number} lineWidth
 * @param {number} textAlign
 * @param {number=} underLine
 * @return {void}
 */
Laya.TextRender.prototype._fast_filltext = function(ctx, data, htmlchars, x, y, font, color, strokeColor, lineWidth, textAlign, underLine) {};

/**
 * 画出重新按照贴图顺序分组的文字。
 * @protected
 * @param {!Laya.Context} ctx
 * @param {number} startx 保存的数据是相对位置，所以需要加上这个偏移。用相对位置更灵活一些。
 * @param {number} starty
 * @param {!Array<?>} samePagesData
 * @return {void}
 */
Laya.TextRender.prototype._drawResortedWords = function(ctx, startx, starty, samePagesData) {};

/**
 * 检查 txts数组中有没有被释放的资源
 * @param {!Array<?>} txts
 * @return {boolean}
 */
Laya.TextRender.prototype.hasFreedText = function(txts) {};

/**
 * @param {string} str
 * @param {!Laya.FontInfo} font
 * @param {string} color
 * @param {string} strokeColor
 * @param {number} lineWidth
 * @param {boolean=} isoTexture
 * @return {!Laya.CharRenderInfo}
 */
Laya.TextRender.prototype.getCharRenderInfo = function(str, font, color, strokeColor, lineWidth, isoTexture) {};

/**
 * 添加数据到大图集
 * @param {!ImageData} data
 * @param {!Laya.CharRenderInfo} ri
 * @return {!Laya.TextAtlas}
 */
Laya.TextRender.prototype.addBmpData = function(data, ri) {};

/**
 * 清理利用率低的大图集
 * @return {void}
 */
Laya.TextRender.prototype.GC = function() {};

/**
 * 尝试清理大图集
 * @return {void}
 */
Laya.TextRender.prototype.cleanAtlases = function() {};

/**
 * @param {string} c
 * @return {?}
 */
Laya.TextRender.prototype.getCharBmp = function(c) {};

/**
 * @param {string} font
 * @return {number}
 */
Laya.TextRender.prototype.getFontSizeInfo = function(font) {};

/**
 * @return {void}
 */
Laya.TextRender.prototype.printDbgInfo = function() {};

/**
 * @param {number} n
 * @param {string} bgcolor
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!Laya.Sprite}
 */
Laya.TextRender.prototype.showAtlas = function(n, bgcolor, x, y, w, h) {};

/**
 * @param {!Laya.Context} ctx
 * @param {(string|!Laya.WordText)} data
 * @param {!Array<!Laya.HTMLChar>} htmlchars
 * @param {number} x
 * @param {number} y
 * @param {string} fontStr
 * @param {string} color
 * @param {string} strokeColor
 * @param {number} lineWidth
 * @param {string} textAlign
 * @param {number=} underLine
 * @return {void}
 */
Laya.TextRender.prototype.filltext_native = function(ctx, data, htmlchars, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine) {};

/**
 * @extends {Laya.Resource}
 * @constructor
 * @struct
 * @param {number} textureW
 * @param {number} textureH
 */
Laya.TextTexture = function(textureW, textureH) {};
/** @type {!Laya.ITextRender} */
Laya.TextTexture.gTextRender;
/** @type {?} */
Laya.TextTexture.pool;
/** @type {?} */
Laya.TextTexture.poolLen;
/** @type {?} */
Laya.TextTexture.cleanTm;
/** @type {number} */
Laya.TextTexture.prototype.genID;
/** @type {?} */
Laya.TextTexture.prototype.bitmap;
/** @type {number} */
Laya.TextTexture.prototype.curUsedCovRate;
/** @type {number} */
Laya.TextTexture.prototype.curUsedCovRateAtlas;
/** @type {number} */
Laya.TextTexture.prototype.lastTouchTm;
/** @type {!Laya.CharRenderInfo} */
Laya.TextTexture.prototype.ri;

/* TODO: GetAccessor: Laya.texture */

/**
 * @return {void}
 */
Laya.TextTexture.prototype.recreateResource = function() {};

/**
 * @param {!ImageData} data
 * @param {number} x 拷贝位置。
 * @param {number} y
 * @param {!Array<?>=} uv
 * @return {!Array<?>} uv数组  如果uv不为空就返回传入的uv，否则new一个数组
 */
Laya.TextTexture.prototype.addChar = function(data, x, y, uv) {};

/**
 * 玩一玩不支持 getImageData
 * @param {?} canv
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>=} uv
 * @return {!Array<?>}
 */
Laya.TextTexture.prototype.addCharCanvas = function(canv, x, y, uv) {};

/**
 * 填充白色。调试用。
 * @return {void}
 */
Laya.TextTexture.prototype.fillWhite = function() {};

/**
 * @return {void}
 */
Laya.TextTexture.prototype.discard = function() {};

/**
 * @param {number} w
 * @param {number} h
 * @return {!Laya.TextTexture}
 */
Laya.TextTexture.getTextTexture = function(w, h) {};

/**
 * @override
 * @return {void}
 */
Laya.TextTexture.prototype.destroy = function() {};

/**
 * 定期清理
 * 为了简单，只有发生 getAPage 或者 discardPage的时候才检测是否需要清理
 * @return {void}
 */
Laya.TextTexture.clean = function() {};

/**
 * @param {!Laya.CharRenderInfo} ri
 * @param {number} curloop
 * @return {void}
 */
Laya.TextTexture.prototype.touchRect = function(ri, curloop) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
Laya.TextTexture.prototype.drawOnScreen = function(x, y) {};
/**
 * @record
 * @struct
 */
Laya.ITextRender = function() {};
/** @type {number} */
Laya.ITextRender.prototype.atlasWidth;
/** @type {number} */
Laya.ITextRender.prototype.checkCleanTextureDt;
/** @type {boolean} */
Laya.ITextRender.prototype.debugUV;
/** @type {boolean} */
Laya.ITextRender.prototype.isWan1Wan;
/** @type {number} */
Laya.ITextRender.prototype.destroyUnusedTextureDt;

/**
 * @constructor
 * @struct
 */
Laya.Buffer = function() {};
/** @type {?} */
Laya.Buffer._bindedVertexBuffer;
/** @type {?} */
Laya.Buffer._bindedIndexBuffer;
/** @type {?} */
Laya.Buffer.prototype._glBuffer;
/** @type {?} */
Laya.Buffer.prototype._buffer;
/** @type {number} */
Laya.Buffer.prototype._bufferType;
/** @type {number} */
Laya.Buffer.prototype._bufferUsage;
/** @type {number} */
Laya.Buffer.prototype._byteLength;

/* TODO: GetAccessor: Laya.bufferUsage */

/**
 * @return {void}
 */
Laya.Buffer.prototype._bindForVAO = function() {};

/**
 * @return {boolean}
 */
Laya.Buffer.prototype.bind = function() {};

/**
 * @return {void}
 */
Laya.Buffer.prototype.destroy = function() {};

/**
 * @extends {Laya.Buffer}
 * @constructor
 * @struct
 */
Laya.Buffer2D = function() {};
/** @type {number} */
Laya.Buffer2D.FLOAT32;
/** @type {number} */
Laya.Buffer2D.SHORT;
/** @type {number} */
Laya.Buffer2D.prototype._maxsize;
/** @type {boolean} */
Laya.Buffer2D.prototype._upload;
/** @type {number} */
Laya.Buffer2D.prototype._uploadSize;
/** @type {number} */
Laya.Buffer2D.prototype._bufferSize;
/** @type {!Uint8Array} */
Laya.Buffer2D.prototype._u8Array;

/* TODO: GetAccessor: Laya.bufferLength */

/* TODO: SetAccessor: Laya.byteLength */

/**
 * @param {!Laya.WebGLContext} gl
 * @return {void}
 */
Laya.Buffer2D.__int__ = function(gl) {};

/**
 * @param {number} value
 * @return {void}
 */
Laya.Buffer2D.prototype.setByteLength = function(value) {};

/**
 * 在当前的基础上需要多大空间，单位是byte
 * @param {number} sz
 * @return {number} 增加大小之前的写位置。单位是byte
 */
Laya.Buffer2D.prototype.needSize = function(sz) {};

/**
 * @protected
 * @return {void}
 */
Laya.Buffer2D.prototype._bufferData = function() {};

/**
 * @protected
 * @param {number=} offset
 * @param {number=} dataStart
 * @param {number=} dataLength
 * @return {void}
 */
Laya.Buffer2D.prototype._bufferSubData = function(offset, dataStart, dataLength) {};

/**
 * buffer重新分配了，继承类根据需要做相应的处理。
 * @protected
 * @return {void}
 */
Laya.Buffer2D.prototype._checkArrayUse = function() {};

/**
 * 给vao使用的 _bind_upload函数。不要与已经绑定的判断是否相同
 * @return {boolean}
 */
Laya.Buffer2D.prototype._bind_uploadForVAO = function() {};

/**
 * @return {boolean}
 */
Laya.Buffer2D.prototype._bind_upload = function() {};

/**
 * @param {number=} offset
 * @param {number=} dataStart
 * @param {number=} dataLength
 * @return {boolean}
 */
Laya.Buffer2D.prototype._bind_subUpload = function(offset, dataStart, dataLength) {};

/**
 * 重新分配buffer大小，如果nsz比原来的小则什么都不做。
 * @param {number} nsz buffer大小，单位是byte。
 * @param {boolean} copy 是否拷贝原来的buffer的数据。
 * @return {!Laya.Buffer2D}
 */
Laya.Buffer2D.prototype._resizeBuffer = function(nsz, copy) {};

/**
 * @param {?} data
 * @return {void}
 */
Laya.Buffer2D.prototype.append = function(data) {};

/**
 * 附加Uint16Array的数据。数据长度是len。byte的话要*2
 * @param {!Uint16Array} data
 * @param {number} len
 * @return {void}
 */
Laya.Buffer2D.prototype.appendU16Array = function(data, len) {};

/**
 * @param {?} data
 * @param {function(new:?, ?, ?)} type
 * @return {void}
 */
Laya.Buffer2D.prototype.appendEx = function(data, type) {};

/**
 * @param {?} data
 * @param {function(new:?, ?, ?)} type
 * @param {number} dataLen
 * @param {number=} perDataLen
 * @return {void}
 */
Laya.Buffer2D.prototype.appendEx2 = function(data, type, dataLen, perDataLen) {};

/**
 * @return {!ArrayBuffer}
 */
Laya.Buffer2D.prototype.getBuffer = function() {};

/**
 * @return {void}
 */
Laya.Buffer2D.prototype.setNeedUpload = function() {};

/**
 * @return {boolean}
 */
Laya.Buffer2D.prototype.getNeedUpload = function() {};

/**
 * @return {boolean}
 */
Laya.Buffer2D.prototype.upload = function() {};

/**
 * @param {number=} offset
 * @param {number=} dataStart
 * @param {number=} dataLength
 * @return {boolean}
 */
Laya.Buffer2D.prototype.subUpload = function(offset, dataStart, dataLength) {};

/**
 * @protected
 * @return {void}
 */
Laya.Buffer2D.prototype._disposeResource = function() {};

/**
 * 清理数据。保留ArrayBuffer
 * @return {void}
 */
Laya.Buffer2D.prototype.clear = function() {};
/**
 * @constructor
 * @struct
 */
Laya.CONST3D2D = function() {};
/** @type {number} */
Laya.CONST3D2D.BYTES_PE;
/** @type {number} */
Laya.CONST3D2D.BYTES_PIDX;
/** @type {!Array<?>} */
Laya.CONST3D2D.defaultMatrix4;
/** @type {!Array<?>} */
Laya.CONST3D2D.defaultMinusYMatrix4;
/** @type {!Array<?>} */
Laya.CONST3D2D.uniformMatrix3;
/** @type {!Array<?>} */
Laya.CONST3D2D._TMPARRAY;
/** @type {number} */
Laya.CONST3D2D._OFFSETX;
/** @type {number} */
Laya.CONST3D2D._OFFSETY;

/**
 * @extends {Laya.Buffer2D}
 * @constructor
 * @struct
 * @param {number=} bufferUsage
 */
Laya.IndexBuffer2D = function(bufferUsage) {};
/** @type {!Function} */
Laya.IndexBuffer2D.create;
/** @type {!Uint16Array} */
Laya.IndexBuffer2D.prototype._uint16Array;

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.IndexBuffer2D.prototype._checkArrayUse = function() {};

/**
 * @return {!Uint16Array}
 */
Laya.IndexBuffer2D.prototype.getUint16Array = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.IndexBuffer2D.prototype._bindForVAO = function() {};

/**
 * @inheritDoc
 * @override
 * @return {boolean}
 */
Laya.IndexBuffer2D.prototype.bind = function() {};

/**
 * @return {void}
 */
Laya.IndexBuffer2D.prototype.destory = function() {};

/**
 * @return {void}
 */
Laya.IndexBuffer2D.prototype.disposeResource = function() {};

/**
 * @constructor
 * @struct
 * @param {string} txt
 */
Laya.InlcudeFile = function(txt) {};
/** @type {string} */
Laya.InlcudeFile.prototype.script;
/** @type {?} */
Laya.InlcudeFile.prototype.codes;
/** @type {?} */
Laya.InlcudeFile.prototype.funs;
/** @type {number} */
Laya.InlcudeFile.prototype.curUseID;
/** @type {string} */
Laya.InlcudeFile.prototype.funnames;

/**
 * @param {string=} name
 * @return {string}
 */
Laya.InlcudeFile.prototype.getWith = function(name) {};

/**
 * @param {string} funsdef
 * @return {string}
 */
Laya.InlcudeFile.prototype.getFunsScript = function(funsdef) {};
/**
 * @constructor
 * @struct
 */
Laya.MatirxArray = function() {};

/**
 * 4*4矩阵数组相乘。
 * o=a*b;
 * @param {!Array<?>} a 4*4矩阵数组。
 * @param {!Array<?>} b 4*4矩阵数组。
 * @param {!Array<?>} o 4*4矩阵数组。
 * @return {void}
 */
Laya.MatirxArray.ArrayMul = function(a, b, o) {};

/**
 * @param {!Array<?>} f
 * @param {!Array<?>} t
 * @return {void}
 */
Laya.MatirxArray.copyArray = function(f, t) {};

/**
 * @constructor
 * @struct
 * @param {number} stride
 * @param {number} vballoc vb预分配的大小。主要是用来提高效率。防止不断的resizebfufer
 * @param {number} iballoc
 */
Laya.Mesh2D = function(stride, vballoc, iballoc) {};
/** @type {number} */
Laya.Mesh2D.prototype._stride;
/** @type {number} */
Laya.Mesh2D.prototype.vertNum;
/** @type {number} */
Laya.Mesh2D.prototype.indexNum;
/** @type {boolean} */
Laya.Mesh2D.prototype._applied;
/** @type {!Laya.VertexBuffer2D} */
Laya.Mesh2D.prototype._vb;
/** @type {!Laya.IndexBuffer2D} */
Laya.Mesh2D.prototype._ib;
/** @type {?} */
Laya.Mesh2D.prototype._vao;
/** @type {?} */
Laya.Mesh2D._gvaoid;
/** @type {?} */
Laya.Mesh2D.prototype._attribInfo;
/** @type {number} */
Laya.Mesh2D.prototype._quadNum;
/** @type {boolean} */
Laya.Mesh2D.prototype.canReuse;
/** @type {?} */
Laya.Mesh2D.prototype.configVAO;

/**
 * 重新创建一个mesh。复用这个对象的vertex结构，ib对象和attribinfo对象
 * @return {!Laya.Mesh2D}
 */
Laya.Mesh2D.prototype.cloneWithNewVB = function() {};

/**
 * 创建一个mesh，使用当前对象的vertex结构。vb和ib自己提供。
 * @return {!Laya.Mesh2D}
 */
Laya.Mesh2D.prototype.cloneWithNewVBIB = function() {};

/**
 * 获得一个可以写的vb对象
 * @return {!Laya.VertexBuffer2D}
 */
Laya.Mesh2D.prototype.getVBW = function() {};

/**
 * 获得一个只读vb
 * @return {!Laya.VertexBuffer2D}
 */
Laya.Mesh2D.prototype.getVBR = function() {};

/**
 * @return {!Laya.IndexBuffer2D}
 */
Laya.Mesh2D.prototype.getIBR = function() {};

/**
 * 获得一个可写的ib
 * @return {!Laya.IndexBuffer2D}
 */
Laya.Mesh2D.prototype.getIBW = function() {};

/**
 * 直接创建一个固定的ib。按照固定四边形的索引。
 * @param {number} QuadNum
 * @return {void}
 */
Laya.Mesh2D.prototype.createQuadIB = function(QuadNum) {};

/**
 * 设置mesh的属性。每3个一组，对应的location分别是0,1,2...
 * 含义是：type,size,offset
 * 不允许多流。因此stride是固定的，offset只是在一个vertex之内。
 * @param {!Array<?>} attribs
 * @return {void}
 */
Laya.Mesh2D.prototype.setAttributes = function(attribs) {};

/**
 * 应用这个mesh
 * @param {!WebGLRenderingContext} gl
 * @return {void}
 */
Laya.Mesh2D.prototype.useMesh = function(gl) {};

/**
 * @return {number}
 */
Laya.Mesh2D.prototype.getEleNum = function() {};

/**
 * 子类实现。用来把自己放到对应的回收池中，以便复用。
 * @return {void}
 */
Laya.Mesh2D.prototype.releaseMesh = function() {};

/**
 * 释放资源。
 * @return {void}
 */
Laya.Mesh2D.prototype.destroy = function() {};

/**
 * 清理vb数据
 * @return {void}
 */
Laya.Mesh2D.prototype.clearVB = function() {};

/**
 * @extends {Laya.Mesh2D}
 * @constructor
 * @struct
 * @param {number} maxNum
 */
Laya.MeshParticle2D = function(maxNum) {};
/** @type {number} */
Laya.MeshParticle2D.const_stride;
/** @type {?} */
Laya.MeshParticle2D._fixattriInfo;
/** @type {?} */
Laya.MeshParticle2D._POOL;

/**
 * @return {void}
 */
Laya.MeshParticle2D.__init__ = function() {};

/**
 * @param {number} maxNum
 * @return {void}
 */
Laya.MeshParticle2D.prototype.setMaxParticleNum = function(maxNum) {};

/**
 *
 * @param {number} maxNum
 * @return {!Laya.MeshParticle2D}
 */
Laya.MeshParticle2D.getAMesh = function(maxNum) {};

/**
 * 把本对象放到回收池中，以便getMesh能用。
 * @override
 * @return {void}
 */
Laya.MeshParticle2D.prototype.releaseMesh = function() {};

/**
 * @override
 * @return {void}
 */
Laya.MeshParticle2D.prototype.destroy = function() {};

/**
 * @extends {Laya.Mesh2D}
 * @constructor
 * @struct
 */
Laya.MeshQuadTexture = function() {};
/** @type {number} */
Laya.MeshQuadTexture.const_stride;
/** @type {?} */
Laya.MeshQuadTexture._fixib;
/** @type {?} */
Laya.MeshQuadTexture._maxIB;
/** @type {?} */
Laya.MeshQuadTexture._fixattriInfo;
/** @type {?} */
Laya.MeshQuadTexture._POOL;

/**
 * @return {void}
 */
Laya.MeshQuadTexture.__int__ = function() {};

/**
 *
 * @param {boolean} mainctx
 * @return {!Laya.MeshQuadTexture}
 */
Laya.MeshQuadTexture.getAMesh = function(mainctx) {};

/**
 * 把本对象放到回收池中，以便getMesh能用。
 * @override
 * @return {void}
 */
Laya.MeshQuadTexture.prototype.releaseMesh = function() {};

/**
 * @override
 * @return {void}
 */
Laya.MeshQuadTexture.prototype.destroy = function() {};

/**
 * @param {!Array<?>} pos
 * @param {!ArrayLike<number>} uv
 * @param {number} color
 * @param {boolean} useTex 是否使用贴图。false的话是给fillRect用的
 * @return {void}
 */
Laya.MeshQuadTexture.prototype.addQuad = function(pos, uv, color, useTex) {};

/**
 * @extends {Laya.Mesh2D}
 * @constructor
 * @struct
 */
Laya.MeshTexture = function() {};
/** @type {number} */
Laya.MeshTexture.const_stride;
/** @type {?} */
Laya.MeshTexture._fixattriInfo;
/** @type {?} */
Laya.MeshTexture._POOL;

/**
 * @return {void}
 */
Laya.MeshTexture.__init__ = function() {};

/**
 *
 * @param {boolean} mainctx
 * @return {!Laya.MeshTexture}
 */
Laya.MeshTexture.getAMesh = function(mainctx) {};

/**
 * @param {!Float32Array} vertices
 * @param {!Float32Array} uvs
 * @param {!Uint16Array} idx
 * @param {!Laya.Matrix} matrix
 * @param {number} rgba
 * @return {void}
 */
Laya.MeshTexture.prototype.addData = function(vertices, uvs, idx, matrix, rgba) {};

/**
 * 把本对象放到回收池中，以便getMesh能用。
 * @override
 * @return {void}
 */
Laya.MeshTexture.prototype.releaseMesh = function() {};

/**
 * @override
 * @return {void}
 */
Laya.MeshTexture.prototype.destroy = function() {};

/**
 * @extends {Laya.Mesh2D}
 * @constructor
 * @struct
 */
Laya.MeshVG = function() {};
/** @type {number} */
Laya.MeshVG.const_stride;
/** @type {?} */
Laya.MeshVG._fixattriInfo;
/** @type {?} */
Laya.MeshVG._POOL;

/**
 * @return {void}
 */
Laya.MeshVG.__init__ = function() {};

/**
 * @param {boolean} mainctx
 * @return {!Laya.MeshVG}
 */
Laya.MeshVG.getAMesh = function(mainctx) {};

/**
 * 往矢量mesh中添加顶点和index。会把rgba和points在mesh中合并。
 * @param {!Laya.Context} ctx
 * @param {!Array<?>} points 顶点数组，只包含x,y。[x,y,x,y...]
 * @param {number} rgba rgba颜色
 * @param {!Array<?>} ib index数组。
 * @return {void}
 */
Laya.MeshVG.prototype.addVertAndIBToMesh = function(ctx, points, rgba, ib) {};

/**
 * 把本对象放到回收池中，以便getMesh能用。
 * @override
 * @return {void}
 */
Laya.MeshVG.prototype.releaseMesh = function() {};

/**
 * @override
 * @return {void}
 */
Laya.MeshVG.prototype.destroy = function() {};
/**
 * @constructor
 * @struct
 */
Laya.RenderState2D = function() {};
/** @type {number} */
Laya.RenderState2D._MAXSIZE;
/** @type {!Array<number>} */
Laya.RenderState2D.EMPTYMAT4_ARRAY;
/** @type {!Array<number>} */
Laya.RenderState2D.TEMPMAT4_ARRAY;
/** @type {!Array<number>} */
Laya.RenderState2D.worldMatrix4;
/** @type {!Laya.Matrix} */
Laya.RenderState2D.worldMatrix;
/** @type {?} */
Laya.RenderState2D.matWVP;
/** @type {number} */
Laya.RenderState2D.worldAlpha;
/** @type {boolean} */
Laya.RenderState2D.worldScissorTest;
/** @type {!Laya.ShaderDefines2D} */
Laya.RenderState2D.worldShaderDefines;
/** @type {!Array<?>} */
Laya.RenderState2D.worldFilters;
/** @type {number} */
Laya.RenderState2D.width;
/** @type {number} */
Laya.RenderState2D.height;

/**
 * @param {!Laya.Matrix} mat
 * @param {!Array<?>} matArray
 * @return {!Array<?>}
 */
Laya.RenderState2D.mat2MatArray = function(mat, matArray) {};

/**
 * @return {void}
 */
Laya.RenderState2D.restoreTempArray = function() {};

/**
 * @return {void}
 */
Laya.RenderState2D.clear = function() {};

/**
 * @constructor
 * @struct
 * @param {string} vs
 * @param {string} ps
 * @param {?} nameMap
 */
Laya.ShaderCompile = function(vs, ps, nameMap) {};
/** @type {number} */
Laya.ShaderCompile.IFDEF_NO;
/** @type {number} */
Laya.ShaderCompile.IFDEF_YES;
/** @type {number} */
Laya.ShaderCompile.IFDEF_ELSE;
/** @type {number} */
Laya.ShaderCompile.IFDEF_PARENT;
/** @type {!RegExp} */
Laya.ShaderCompile._removeAnnotation;
/** @type {!RegExp} */
Laya.ShaderCompile._reg;
/** @type {!RegExp} */
Laya.ShaderCompile._splitToWordExps;
/** @type {?} */
Laya.ShaderCompile.includes;
/** @type {?} */
Laya.ShaderCompile.shaderParamsMap;
/** @type {?} */
Laya.ShaderCompile.prototype._nameMap;
/** @type {?} */
Laya.ShaderCompile._parseOne;
/** @type {!RegExp} */
Laya.ShaderCompile._clearCR;
/** @type {!Object} */
Laya.ShaderCompile.prototype.defs;
/** @type {!RegExp} */
Laya.ShaderCompile._splitToWordExps3;

/**
 * @param {string} fileName
 * @param {string} txt
 * @return {void}
 */
Laya.ShaderCompile.addInclude = function(fileName, txt) {};

/**
 * @param {string} vs
 * @param {string} ps
 * @return {?}
 */
Laya.ShaderCompile.preGetParams = function(vs, ps) {};

/**
 * @param {string} str
 * @param {!Laya.ShaderNode} block
 * @return {!Array<?>}
 */
Laya.ShaderCompile.splitToWords = function(str, block) {};

/**
 * @protected
 * @param {!Laya.ShaderNode} parent
 * @param {!Array<?>} lines
 * @param {number} start
 * @param {!Array<?>} includefiles
 * @param {?} defs
 * @return {void}
 */
Laya.ShaderCompile.prototype._compileToTree = function(parent, lines, start, includefiles, defs) {};

/**
 * @param {?} define
 * @param {?} shaderName
 * @param {!Function} createShader
 * @param {!Array<?>} bindAttrib
 * @return {!Laya.Shader}
 */
Laya.ShaderCompile.prototype.createShader = function(define, shaderName, createShader, bindAttrib) {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} includefiles
 */
Laya.ShaderNode = function(includefiles) {};
/** @type {?} */
Laya.ShaderNode.__id;
/** @type {!Array<?>} */
Laya.ShaderNode.prototype.childs;
/** @type {string} */
Laya.ShaderNode.prototype.text;
/** @type {!Laya.ShaderNode} */
Laya.ShaderNode.prototype.parent;
/** @type {string} */
Laya.ShaderNode.prototype.name;
/** @type {boolean} */
Laya.ShaderNode.prototype.noCompile;
/** @type {!Array<?>} */
Laya.ShaderNode.prototype.includefiles;
/** @type {?} */
Laya.ShaderNode.prototype.condition;
/** @type {number} */
Laya.ShaderNode.prototype.conditionType;
/** @type {string} */
Laya.ShaderNode.prototype.useFuns;
/** @type {number} */
Laya.ShaderNode.prototype.z;
/** @type {string} */
Laya.ShaderNode.prototype.src;
/** @type {?} */
Laya.ShaderNode.prototype._toscript;

/**
 * @param {!Laya.ShaderNode} parent
 * @return {void}
 */
Laya.ShaderNode.prototype.setParent = function(parent) {};

/**
 * @param {string} condition
 * @param {number} type
 * @return {void}
 */
Laya.ShaderNode.prototype.setCondition = function(condition, type) {};

/**
 * @param {?} def
 * @param {!Array<?>} out
 * @return {!Array<?>}
 */
Laya.ShaderNode.prototype.toscript = function(def, out) {};

/**
 * @extends {Laya.Buffer2D}
 * @constructor
 * @struct
 * @param {number} vertexStride
 * @param {number} bufferUsage
 */
Laya.VertexBuffer2D = function(vertexStride, bufferUsage) {};
/** @type {!Function} */
Laya.VertexBuffer2D.create;
/** @type {!Float32Array} */
Laya.VertexBuffer2D.prototype._floatArray32;
/** @type {!Uint32Array} */
Laya.VertexBuffer2D.prototype._uint32Array;
/** @type {?} */
Laya.VertexBuffer2D.prototype._vertexStride;

/* TODO: GetAccessor: Laya.vertexStride */

/**
 * @return {!Float32Array}
 */
Laya.VertexBuffer2D.prototype.getFloat32Array = function() {};

/**
 * 在当前位置插入float数组。
 * @param {!Array<?>} data
 * @return {void}
 */
Laya.VertexBuffer2D.prototype.appendArray = function(data) {};

/**
 * @override
 * @protected
 * @return {void}
 */
Laya.VertexBuffer2D.prototype._checkArrayUse = function() {};

/**
 * @return {void}
 */
Laya.VertexBuffer2D.prototype.deleteBuffer = function() {};

/**
 * @inheritDoc
 * @override
 * @return {void}
 */
Laya.VertexBuffer2D.prototype._bindForVAO = function() {};

/**
 * @inheritDoc
 * @override
 * @return {boolean}
 */
Laya.VertexBuffer2D.prototype.bind = function() {};

/**
 * @override
 * @return {void}
 */
Laya.VertexBuffer2D.prototype.destroy = function() {};

/**
 * @constructor
 * @struct
 */
Laya.VertexArrayObject = function() {};
/**
 * @constructor
 * @struct
 */
Laya.WebGL = function() {};
/** @type {boolean} */
Laya.WebGL._isWebGL2;
/** @type {boolean} */
Laya.WebGL.isNativeRender_enable;
/** @type {?} */
Laya.WebGL._uint8ArraySlice;
/** @type {?} */
Laya.WebGL._float32ArraySlice;
/** @type {?} */
Laya.WebGL._uint16ArraySlice;

/**
 * @return {void}
 */
Laya.WebGL._nativeRender_enable = function() {};

/**
 * @return {boolean}
 */
Laya.WebGL.enable = function() {};

/**
 * @return {boolean}
 */
Laya.WebGL.inner_enable = function() {};

/**
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
Laya.WebGL.onStageResize = function(width, height) {};
/**
 * @constructor
 * @struct
 */
Laya.WebGLContext = function() {};

/**
 * @return {number}
 */
Laya.WebGLContext.getUniformMaxVector = function() {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/behavior3js.d.ts
/** @const */
var b3 = {};
/**
 * @record
 * @struct
 */
b3.Class1 = function() {};
/** @type {string} */
b3.Class1.prototype.name;
/** @type {string} */
b3.Class1.prototype.title;
/** @type {{milliseconds: number}} */
b3.Class1.prototype.parameters;
/** @type {number} */
b3.Class1.prototype.endTime;

/**
 * Initialization method.
 * 
 * Settings parameters:
 * 
 * - **milliseconds** (*Integer*) Maximum time, in milliseconds, a child
 *                                can execute.
 * 
 * \@method initialize
 * @param {?} settings
 * @return {void}
 */
b3.Class1.prototype.initialize = function(settings) {};

/**
 * Open method.
 * \@method open
 * @param {?} tick
 * @return {void}
 */
b3.Class1.prototype.open = function(tick) {};

/**
 * Tick method.
 * \@method tick
 * @param {?} tick
 * @return {number}
 */
b3.Class1.prototype.tick = function(tick) {};

/** @typedef {function(?): void} */
b3.ClassRet;
/** @type {string} */
b3.VERSION;
/** @type {number} */
b3.SUCCESS;
/** @type {number} */
b3.FAILURE;
/** @type {number} */
b3.RUNNING;
/** @type {number} */
b3.ERROR;
/** @type {string} */
b3.COMPOSITE;
/** @type {string} */
b3.DECORATOR;
/** @type {string} */
b3.ACTION;
/** @type {string} */
b3.CONDITION;

/**
 * This function is used to create unique IDs for trees and nodes.
 * 
 * (consult http://www.ietf.org/rfc/rfc4122.txt).
 * 
 * @return {string}
 */
b3.createUUID = function() {};

/**
 * @extends {Function}
 * @constructor
 * @struct
 * @param {?} baseClass
 * @param {?=} properties
 */
b3.Class = function(baseClass, properties) {};

/**
 *
 * @param {(*|function(?): void)} baseClass
 * @param {!b3.Class1} properties
 * @return {function(?): void}
 */
b3.Class.prototype.new = function(baseClass, properties) {};
/**
 * @constructor
 * @struct
 */
b3.BehaviorTree = function() {};

/**
 *
 * @param {?} params
 * @return {!b3.BehaviorTree}
 */
b3.BehaviorTree.prototype.new = function(params) {};

/**
 * @param {!JSON} data
 * @param {!Object} names
 * @return {void}
 */
b3.BehaviorTree.prototype.load = function(data, names) {};

/**
 * @param {!Object} target
 * @param {!b3.Blackboard} blackboard
 * @return {number}
 */
b3.BehaviorTree.prototype.tick = function(target, blackboard) {};
/**
 * @constructor
 * @struct
 */
b3.Tick = function() {};
/** @type {!b3.Blackboard} */
b3.Tick.prototype.blackboard;
/** @type {?} */
b3.Tick.prototype.target;

/**
 *
 * @param {?} params
 * @return {!b3.Tick}
 */
b3.Tick.prototype.new = function(params) {};
/**
 * @constructor
 * @struct
 */
b3.Blackboard = function() {};

/**
 *
 * @param {?} params
 * @return {!b3.Blackboard}
 */
b3.Blackboard.prototype.new = function(params) {};

/**
 * @param {?} key
 * @param {?} value
 * @param {?=} treeScope
 * @param {?=} nodeScope
 * @return {void}
 */
b3.Blackboard.prototype.set = function(key, value, treeScope, nodeScope) {};

/**
 * @param {?} key
 * @param {?=} treeScope
 * @param {?=} nodeScope
 * @return {?}
 */
b3.Blackboard.prototype.get = function(key, treeScope, nodeScope) {};
/**
 * @record
 * @struct
 */
b3.BaseNode = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @constructor
 * @struct
 */
b3.Action = function() {};

/**
 *
 * @param {?} params
 * @return {!b3.Action}
 */
b3.Action.prototype.new = function(params) {};
/**
 * @record
 * @struct
 */
b3.Composite = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @constructor
 * @struct
 */
b3.Condition = function() {};

/**
 *
 * @param {?} params
 * @return {!b3.Condition}
 */
b3.Condition.prototype.new = function(params) {};
/**
 * @record
 * @struct
 */
b3.Decorator = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.MemPriority = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.MemSequence = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Priority = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Sequence = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Inverter = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Limiter = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.MaxTime = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.RepeatUntilFailure = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.RepeatUntilSuccess = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Repeater = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Error = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Failer = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Runner = function() {};

/* TODO: ConstructSignature: b3 */
/**
 * @record
 * @struct
 */
b3.Succeeder = function() {};

/* TODO: ConstructSignature: b3 */
// Generated from: C:/workspace/ClosureCompilerJS/libs/box2d.d.ts
/** @const */
var C_$workspace$ClosureCompilerJS$libs$box2d = {};

/**
 * @param {boolean} condition
 * @param {...?} args
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Assert = function(condition, args) {};

/**
 * @template T
 * @param {T} value
 * @param {T} def
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Maybe = function(value, def) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxFloat;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_epsilon;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_epsilon_sq;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_pi;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_lengthUnitsPerMeter;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxPolygonVertices;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxManifoldPoints;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_aabbExtension;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_aabbMultiplier;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_linearSlop;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_angularSlop;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_polygonRadius;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxSubSteps;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxTOIContacts;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxLinearCorrection;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxAngularCorrection;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxTranslationSquared;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxRotation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_maxRotationSquared;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_baumgarte;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiBaumgarte;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_timeToSleep;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_linearSleepTolerance;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_angularSleepTolerance;

/**
 * @constructor
 * @struct
 * @param {number=} major
 * @param {number=} minor
 * @param {number=} revision
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Version = function(major, minor, revision) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Version.prototype.major;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Version.prototype.minor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Version.prototype.revision;

/**
 * @return {string}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Version.prototype.toString = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Version} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_version;
/** @type {string} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_branch;
/** @type {string} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_commit;

/**
 * @param {string} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ParseInt = function(v) {};

/**
 * @param {string} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ParseUInt = function(v) {};

/**
 * @template T
 * @param {number} length
 * @param {function(number): T} init
 * @return {!Array<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MakeArray = function(length, init) {};

/**
 * @template T
 * @param {number} length
 * @return {!Array<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MakeNullArray = function(length) {};

/**
 * @param {number} length
 * @param {number=} init
 * @return {!Array<number>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MakeNumberArray = function(length, init) {};

/**
 * @param {number} size
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Alloc = function(size) {};

/**
 * @param {?} mem
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Free = function(mem) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Log = function(message, args) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_pi_over_180;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_180_over_pi;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_two_pi;
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Abs;

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Min = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Max = function(a, b) {};

/**
 * @param {number} a
 * @param {number} lo
 * @param {number} hi
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Clamp = function(a, lo, hi) {};

/**
 * @template T
 * @param {!Array<T>} a
 * @param {!Array<T>} b
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Swap = function(a, b) {};
/** @type {function(number): boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IsValid;

/**
 * @param {number} n
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sq = function(n) {};

/**
 * @param {number} n
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2InvSqrt = function(n) {};
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sqrt;
/** @type {function(number, number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Pow;

/**
 * @param {number} degrees
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DegToRad = function(degrees) {};

/**
 * @param {number} radians
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RadToDeg = function(radians) {};
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Cos;
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sin;
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Acos;
/** @type {function(number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Asin;
/** @type {function(number, number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Atan2;

/**
 * @param {number} x
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2NextPowerOfTwo = function(x) {};

/**
 * @param {number} x
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IsPowerOfTwo = function(x) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Random = function() {};

/**
 * @param {number} lo
 * @param {number} hi
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RandomRange = function(lo, hi) {};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.XY = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.XY.prototype.x;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.XY.prototype.y;

/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.XY}
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2 = function(x, y) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.x;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.y;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.ZERO;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.UNITX;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.UNITY;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.s_t0;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.s_t1;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.s_t2;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.s_t3;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SetZero = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Set = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfAdd = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfAddXY = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfSub = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfSubXY = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfMul = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfMulAdd = function(s, v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfMulSub = function(s, v) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Dot = function(v) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Cross = function(v) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Length = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.LengthSquared = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.Normalize = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfNormalize = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} radians
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfRotate = function(radians) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} c
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfRotateCosSin = function(c, s) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.IsValid = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfCrossVS = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfCrossSV = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfMinV = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfMaxV = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfAbs = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfNeg = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.prototype.SelfSkew = function() {};

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MakeArray = function(length) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.AbsV = function(v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MinV = function(a, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MaxV = function(a, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} lo
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} hi
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.ClampV = function(v, lo, hi, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {number} radians
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.RotateV = function(v, radians, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.DotVV = function(a, b) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.CrossVV = function(a, b) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {number} s
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.CrossVS = function(v, s, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.CrossVOne = function(v, out) {};

/**
 * @template T
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.CrossSV = function(s, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.CrossOneV = function(v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.AddVV = function(a, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.SubVV = function(a, b, out) {};

/**
 * @template T
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MulSV = function(s, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {number} s
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MulVS = function(v, s, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.AddVMulSV = function(a, s, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.SubVMulSV = function(a, s, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.AddVCrossSV = function(a, s, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.MidVV = function(a, b, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.ExtVV = function(a, b, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.IsEqualToV = function(a, b) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.DistanceVV = function(a, b) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.DistanceSquaredVV = function(a, b) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2.NegV = function(v, out) {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2_zero;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 * @constructor
 * @struct
 * @param {!Float32Array|number=} data_or_x
 * @param {number=} y
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2 = function(data_or_x, y) {};
/** @type {!Float32Array} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.data;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.x */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.x */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.y */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.y */

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SetZero = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Set = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfAdd = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfAddXY = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfSub = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfSubXY = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfMul = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfMulAdd = function(s, v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfMulSub = function(s, v) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Dot = function(v) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Cross = function(v) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Length = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.LengthSquared = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.Normalize = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfNormalize = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} radians
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfRotate = function(radians) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} c
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfRotateCosSin = function(c, s) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.IsValid = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfCrossVS = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfCrossSV = function(s) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfMinV = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfMaxV = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfAbs = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfNeg = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedVec2.prototype.SelfSkew = function() {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.XY}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.XYZ = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.XYZ.prototype.z;

/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.XYZ}
 * @constructor
 * @struct
 * @param {!Float32Array|number=} data_or_x
 * @param {number=} y
 * @param {number=} z
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3 = function(data_or_x, y, z) {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.ZERO;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.s_t0;
/** @type {!Float32Array} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.data;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.x */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.x */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.y */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.y */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.z */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.z */

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SetZero = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SetXYZ = function(x, y, z) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfNeg = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfAdd = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfAddXYZ = function(x, y, z) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} v
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfSub = function(v) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfSubXYZ = function(x, y, z) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.prototype.SelfMul = function(s) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} b
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.DotV3V3 = function(a, b) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} b
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3.CrossV3V3 = function(a, b, out) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22 = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.IDENTITY;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.ex;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.ey;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} c1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} c2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.FromVV = function(c1, c2) {};

/**
 * @param {number} r1c1
 * @param {number} r1c2
 * @param {number} r2c1
 * @param {number} r2c2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.FromSSSS = function(r1c1, r1c2, r2c1, r2c2) {};

/**
 * @param {number} radians
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.FromAngle = function(radians) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r1c1
 * @param {number} r1c2
 * @param {number} r2c1
 * @param {number} r2c2
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SetSSSS = function(r1c1, r1c2, r2c1, r2c2) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} c1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} c2
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SetVV = function(c1, c2) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} radians
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SetAngle = function(radians) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SetIdentity = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SetZero = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.GetAngle = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.GetInverse = function(out) {};

/**
 * @template T
 * @param {number} b_x
 * @param {number} b_y
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.Solve = function(b_x, b_y, out) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SelfAbs = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SelfInv = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} M
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SelfAddM = function(M) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} M
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.prototype.SelfSubM = function(M) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} M
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.AbsM = function(M, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} M
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.MulMV = function(M, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} M
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.MulTMV = function(M, v, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} B
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.AddMM = function(A, B, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} B
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.MulMM = function(A, B, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} B
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22.MulTMM = function(A, B, out) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33 = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.IDENTITY;
/** @type {!Float32Array} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.data;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.ex;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.ey;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.ez;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} c1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} c2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} c3
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.SetVVV = function(c1, c2, c3) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.SetIdentity = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.SetZero = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} M
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.SelfAddM = function(M) {};

/**
 * @template T
 * @param {number} b_x
 * @param {number} b_y
 * @param {number} b_z
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.Solve33 = function(b_x, b_y, b_z, out) {};

/**
 * @template T
 * @param {number} b_x
 * @param {number} b_y
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.Solve22 = function(b_x, b_y, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} M
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.GetInverse22 = function(M) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} M
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.prototype.GetSymInverse33 = function(M) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XYZ} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.MulM33V3 = function(A, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} A
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.MulM33XYZ = function(A, x, y, z, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.MulM33V2 = function(A, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} A
 * @param {number} x
 * @param {number} y
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33.MulM33XY = function(A, x, y, out) {};

/**
 * @constructor
 * @struct
 * @param {number=} angle
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot = function(angle) {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.IDENTITY;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.s;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.c;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} angle
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.SetAngle = function(angle) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.SetIdentity = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.GetAngle = function() {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.GetXAxis = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.prototype.GetYAxis = function(out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} q
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} r
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.MulRR = function(q, r, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} q
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} r
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.MulTRR = function(q, r, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} q
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.MulRV = function(q, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} q
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot.MulTRV = function(q, v, out) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.IDENTITY;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.p;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.q;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.Copy = function(other) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetIdentity = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @param {?} q
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetPositionRotation = function(position, q) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} pos
 * @param {number} a
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetPositionAngle = function(pos, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetPosition = function(position) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} x
 * @param {number} y
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetPositionXY = function(x, y) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {?} rotation
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetRotation = function(rotation) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} radians
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.SetRotationAngle = function(radians) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.GetPosition = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.GetRotation = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.GetRotationAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.prototype.GetAngle = function() {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.MulXV = function(T, v, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.MulTXV = function(T, v, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} B
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.MulXX = function(A, B, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} A
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} B
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform.MulTXX = function(A, B, out) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.localCenter;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.c0;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.c;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.a0;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.a;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.alpha0;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.Copy = function(other) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} beta
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.GetTransform = function(xf, beta) {};

/**
 * @param {number} alpha
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.Advance = function(alpha) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep.prototype.Normalize = function() {};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.RGB = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.RGB.prototype.r;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.RGB.prototype.g;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.RGB.prototype.b;
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.RGB}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.RGBA = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.RGBA.prototype.a;

/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.RGBA}
 * @constructor
 * @struct
 * @param {number=} r
 * @param {number=} g
 * @param {number=} b
 * @param {number=} a
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color = function(r, g, b, a) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.r;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.g;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.b;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.a;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.ZERO;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.RED;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.GREEN;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.BLUE;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Color}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Copy = function(other) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.IsEqual = function(color) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.IsZero = function() {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number=} a
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Set = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SetByteRGB = function(r, g, b) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SetByteRGBA = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} rr
 * @param {number} gg
 * @param {number} bb
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SetRGB = function(rr, gg, bb) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} rr
 * @param {number} gg
 * @param {number} bb
 * @param {number} aa
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SetRGBA = function(rr, gg, bb, aa) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SelfAdd = function(color) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Add = function(color, out) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SelfSub = function(color) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Sub = function(color, out) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.SelfMul = function(s) {};

/**
 * @template T
 * @param {number} s
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Mul = function(s, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} mixColor
 * @param {number} strength
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.Mix = function(mixColor, strength) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} colorA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} colorB
 * @param {number} strength
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.MixColors = function(colorA, colorB, strength) {};

/**
 * @param {number=} alpha
 * @return {string}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.prototype.MakeStyleString = function(alpha) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number=} a
 * @return {string}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Color.MakeStyleString = function(r, g, b, a) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Color}
 * @constructor
 * @struct
 * @param {!Float32Array|number=} data_or_rr
 * @param {number=} gg
 * @param {number=} bb
 * @param {number=} aa
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor = function(data_or_rr, gg, bb, aa) {};
/** @type {!Float32Array} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.data;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.r */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.r */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.g */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.g */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.b */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.b */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.a */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.a */

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Copy = function(other) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.IsEqual = function(color) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.IsZero = function() {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number=} a
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Set = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SetByteRGB = function(r, g, b) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SetByteRGBA = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} rr
 * @param {number} gg
 * @param {number} bb
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SetRGB = function(rr, gg, bb) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} rr
 * @param {number} gg
 * @param {number} bb
 * @param {number} aa
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SetRGBA = function(rr, gg, bb, aa) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SelfAdd = function(color) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Add = function(color, out) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SelfSub = function(color) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Sub = function(color, out) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} s
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.SelfMul = function(s) {};

/**
 * @template T
 * @param {number} s
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Mul = function(s, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} mixColor
 * @param {number} strength
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.Mix = function(mixColor, strength) {};

/**
 * @param {number=} alpha
 * @return {string}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TypedColor.prototype.MakeStyleString = function(alpha) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags = {
  e_none: 1,
  e_shapeBit: 1,
  e_jointBit: 1,
  e_aabbBit: 1,
  e_pairBit: 1,
  e_centerOfMassBit: 1,
  e_all: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.m_drawFlags;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags} flags
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.SetFlags = function(flags) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.GetFlags = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags} flags
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.AppendFlags = function(flags) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DrawFlags} flags
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.ClearFlags = function(flags) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.PushTransform = function(xf) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.PopTransform = function(xf) {};

/**
 * @abstract
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.XY>} vertices
 * @param {number} vertexCount
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawPolygon = function(vertices, vertexCount, color) {};

/**
 * @abstract
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.XY>} vertices
 * @param {number} vertexCount
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} center
 * @param {number} radius
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawCircle = function(center, radius, color) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} center
 * @param {number} radius
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} axis
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawSolidCircle = function(center, radius, axis, color) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawSegment = function(p1, p2, color) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawTransform = function(xf) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @param {number} size
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.RGBA} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw.prototype.DrawPoint = function(p, size, color) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Timer = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Timer.prototype.m_start;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Timer}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Timer.prototype.Reset = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Timer.prototype.GetMilliseconds = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.m_count;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.m_min_count;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.m_max_count;

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.GetCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.GetMinCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.GetMaxCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.ResetCount = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.ResetMinCount = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.ResetMaxCount = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.Increment = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Counter.prototype.Decrement = function() {};

/**
 * @template T
 * @constructor
 * @struct
 * @param {number} N
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack = function(N) {};
/** @type {!Array<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.m_stack;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.m_count;

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.Reset = function() {};

/**
 * @param {T} element
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.Push = function(element) {};

/**
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.Pop = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack.prototype.GetCount = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BlockAllocator = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2StackAllocator = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.m_buffer;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.m_vertices;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.m_count;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.m_radius;

/**
 * @template THIS
 * @this {THIS}
 * @param {?} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.Copy = function(other) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.Reset = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} shape
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.SetShape = function(shape, index) {};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} vertices
 * @param {number} count
 * @param {number} radius
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.SetVerticesRadius = function(vertices, count, radius) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape|!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} shape_or_vertices
 * @param {number} index_or_count
 * @param {number=} radius
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.Set = function(shape_or_vertices, index_or_count, radius) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} d
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.GetSupport = function(d) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} d
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.GetSupportVertex = function(d) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.GetVertexCount = function() {};

/**
 * @param {number} index
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy.prototype.GetVertex = function(index) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache.prototype.metric;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache.prototype.count;
/** @type {!Array<?>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache.prototype.indexA;
/** @type {!Array<?>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache.prototype.indexB;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache.prototype.Reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.proxyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.proxyB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.transformA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.transformB;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.useRadii;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput.prototype.Reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput.prototype.pointA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput.prototype.pointB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput.prototype.distance;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput.prototype.iterations;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput.prototype.Reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput.prototype.proxyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput.prototype.proxyB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput.prototype.transformA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput.prototype.transformB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput.prototype.translationB;
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput.prototype.point;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput.prototype.normal;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput.prototype.lambda;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput.prototype.iterations;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_gjkCalls;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_gjkIters;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_gjkMaxIters;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_gjk_reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.wA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.wB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.w;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.a;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.indexB;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex.prototype.Copy = function(other) {};

/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.m_v1;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.m_v2;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.m_v3;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexVertex>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.m_vertices;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.m_count;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.s_e12;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.s_e13;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.s_e23;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache} cache
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transformA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxyB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transformB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.ReadCache = function(cache, proxyA, transformA, proxyB, transformB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache} cache
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.WriteCache = function(cache) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.GetSearchDirection = function(out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.GetClosestPoint = function(out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} pA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} pB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.GetWitnessPoints = function(pA, pB) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.GetMetric = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.Solve2 = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Simplex.prototype.Solve3 = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache} cache
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceInput} input
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Distance = function(output, cache, input) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCastInput} input
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeCast = function(output, input) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData.prototype.mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData.prototype.center;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData.prototype.I;

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeType = {
  e_unknown: 1,
  e_circleShape: 1,
  e_edgeShape: 1,
  e_polygonShape: 1,
  e_chainShape: 1,
  e_shapeTypeCount: 1,
};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeType} type
 * @param {number} radius
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape = function(type, radius) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.m_type;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.m_radius;

/**
 * @abstract
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.Copy = function(other) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeType}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.GetType = function() {};

/**
 * @abstract
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.GetChildCount = function() {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.TestPoint = function(xf, p) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.RayCast = function(output, input, transform, childIndex) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.ComputeAABB = function(aabb, xf, childIndex) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.ComputeMass = function(massData, density) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxy
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.SetupDistanceProxy = function(proxy, index) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} c
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {};

/**
 * @abstract
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape.prototype.Dump = function(log) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeatureType = {
  e_vertex: 1,
  e_face: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._key;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._key_invalid;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._indexA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._indexB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._typeA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature.prototype._typeB;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.key */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.key */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.indexA */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.indexA */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.indexB */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.indexB */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.typeA */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.typeA */

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.typeB */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.typeB */
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFeature} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID.prototype.cf;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.key */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.key */

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID.prototype.Copy = function(o) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID.prototype.Clone = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.localPoint;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.normalImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.tangentImpulse;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.id;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.MakeArray = function(length) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.Reset = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint.prototype.Copy = function(o) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldType = {
  e_unknown: 1,
  e_circles: 1,
  e_faceA: 1,
  e_faceB: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldPoint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.points;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.localNormal;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.localPoint;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.type;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.pointCount;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.Reset = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.Copy = function(o) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold.prototype.Clone = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.prototype.normal;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.prototype.points;
/** @type {!Array<number>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.prototype.separations;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_pointA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_pointB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_cA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_cB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_planePoint;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.Initialize_s_clipPoint;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {number} radiusA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @param {number} radiusB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold.prototype.Initialize = function(manifold, xfA, radiusA, xfB, radiusB) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PointState = {
  b2_nullState: 1,
  b2_addState: 1,
  b2_persistState: 1,
  b2_removeState: 1,
};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2PointState>} state1
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2PointState>} state2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold2
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GetPointStates = function(state1, state2, manifold1, manifold2) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex.prototype.v;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactID} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex.prototype.id;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex.MakeArray = function(length) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipVertex.prototype.Copy = function(other) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput.prototype.p1;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput.prototype.p2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput.prototype.maxFraction;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput.prototype.Copy = function(o) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput.prototype.normal;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput.prototype.fraction;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput.prototype.Copy = function(o) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.lowerBound;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.upperBound;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.m_cache_center;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.m_cache_extent;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} o
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.Copy = function(o) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.IsValid = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.GetCenter = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.GetExtents = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.GetPerimeter = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.Combine1 = function(aabb) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.Combine2 = function(aabb1, aabb2) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.Combine = function(aabb1, aabb2, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.Contains = function(aabb) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.RayCast = function(output, input) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.TestContain = function(point) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} other
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB.prototype.TestOverlap = function(other) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} a
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} b
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TestOverlapAABB = function(a, b) {};

/**
 * @param {!Array<?>} vOut
 * @param {!Array<?>} vIn
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {number} vertexIndexA
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ClipSegmentToLine = function(vOut, vIn, normal, offset, vertexIndexA) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} shapeA
 * @param {number} indexA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} shapeB
 * @param {number} indexB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TestOverlapShape = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {};

/**
 * @template T
 * @constructor
 * @struct
 * @param {number=} id
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode = function(id) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.m_id;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.aabb;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype._userData;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.userData */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.userData */
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.parent;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.child1;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.child2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.height;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.moved;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.Reset = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode.prototype.IsLeaf = function() {};
/**
 * @template T
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.m_root;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.m_freeList;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.m_insertionCount;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2GrowableStack<!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.m_stack;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_r;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_v;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_abs_v;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_segmentAABB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_subInput;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_combinedAABB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_aabb;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.s_node_id;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.MoveProxy_s_fatAABB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.MoveProxy_s_hugeAABB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.GetAreaNode;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.GetMaxBalanceNode;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.ShiftOriginNode;

/**
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean|!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} callback_or_aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean} aabb_or_callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.Query = function(callback_or_aabb, aabb_or_callback) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean} callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.QueryPoint = function(point, callback) {};

/**
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput, !C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): number|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} callback_or_input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput, !C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): number} input_or_callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.RayCast = function(callback_or_input, input_or_callback) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.AllocateNode = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.FreeNode = function(node) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {T} userData
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.CreateProxy = function(aabb, userData) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.DestroyProxy = function(node) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} displacement
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.MoveProxy = function(node, aabb, displacement) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} leaf
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.InsertLeaf = function(leaf) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} leaf
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.RemoveLeaf = function(leaf) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} A
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.Balance = function(A) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.GetHeight = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.GetAreaRatio = function() {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.ComputeHeightNode = function(node) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.ComputeHeight = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.ValidateStructure = function(node) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} node
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.ValidateMetrics = function(node) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.Validate = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.GetMaxBalance = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.RebuildBottomUp = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree.prototype.ShiftOrigin = function(newOrigin) {};

/**
 * @template T
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxyB
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Pair = function(proxyA, proxyB) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Pair.prototype.proxyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Pair.prototype.proxyB;
/**
 * @template T
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DynamicTree<T>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_tree;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_proxyCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_moveCount;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_moveBuffer;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_pairCount;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Pair<T>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.m_pairBuffer;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {T} userData
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.CreateProxy = function(aabb, userData) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxy
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.DestroyProxy = function(proxy) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxy
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} displacement
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.MoveProxy = function(proxy, aabb, displacement) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxy
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.TouchProxy = function(proxy) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.GetProxyCount = function() {};

/**
 * @param {function(T, T): void} callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.UpdatePairs = function(callback) {};

/**
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean|!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} callback_or_aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean} aabb_or_callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.Query = function(callback_or_aabb, aabb_or_callback) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): boolean} callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.QueryPoint = function(point, callback) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput, !C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>): number} callback
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.RayCast = function(input, callback) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.GetTreeHeight = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.GetTreeBalance = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.GetTreeQuality = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.ShiftOrigin = function(newOrigin) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxy
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.BufferMove = function(proxy) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<T>} proxy
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase.prototype.UnBufferMove = function(proxy) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiTime;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiMaxTime;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiCalls;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiIters;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiMaxIters;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiRootIters;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toiMaxRootIters;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_toi_reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput.prototype.proxyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput.prototype.proxyB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput.prototype.sweepA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput.prototype.sweepB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput.prototype.tMax;

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutputState = {
  e_unknown: 1,
  e_failed: 1,
  e_overlapped: 1,
  e_touching: 1,
  e_separated: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutput = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutputState} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutput.prototype.state;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutput.prototype.t;

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunctionType = {
  e_unknown: 1,
  e_points: 1,
  e_faceA: 1,
  e_faceB: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_proxyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_proxyB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_sweepA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_sweepB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunctionType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_type;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_localPoint;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.m_axis;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SimplexCache} cache
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} sweepA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxyB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} sweepB
 * @param {number} t1
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.Initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {};

/**
 * @param {!Array<?>} indexA
 * @param {!Array<?>} indexB
 * @param {number} t
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.FindMinSeparation = function(indexA, indexB, t) {};

/**
 * @param {number} indexA
 * @param {number} indexB
 * @param {number} t
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SeparationFunction.prototype.Evaluate = function(indexA, indexB, t) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TOIInput} input
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeOfImpact = function(output, input) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 * @constructor
 * @struct
 * @param {number=} radius
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape = function(radius) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.m_p;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.TestPoint_s_center;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.TestPoint_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.RayCast_s_position;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.RayCast_s_s;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.RayCast_s_r;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.ComputeAABB_s_p;

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @param {number=} radius
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.Set = function(position, radius) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.Copy = function(other) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.GetChildCount = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.TestPoint = function(transform, p) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.RayCast = function(output, input, transform, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform
 * @param {number} childIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.ComputeAABB = function(aabb, transform, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.ComputeMass = function(massData, density) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxy
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.SetupDistanceProxy = function(proxy, index) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} c
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape.prototype.Dump = function(log) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.m_centroid;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.m_vertices;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.m_normals;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.m_count;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.Set_s_r;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.Set_s_v;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.TestPoint_s_pLocal;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.RayCast_s_p1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.RayCast_s_p2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.RayCast_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeAABB_s_v;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeMass_s_center;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeMass_s_s;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeMass_s_e1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeMass_s_e2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.Validate_s_e;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.Validate_s_v;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeSubmergedArea_s_normalL;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeSubmergedArea_s_md;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeSubmergedArea_s_intoVec;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeSubmergedArea_s_outoVec;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeSubmergedArea_s_center;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_s;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_p1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_p2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_p3;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_e1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid_s_e2;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.Copy = function(other) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.GetChildCount = function() {};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.XY>|!Array<number>} vertices
 * @param {number=} count
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.Set = function(vertices, count) {};

/**
 * @param {function(number): !C_$workspace$ClosureCompilerJS$libs$box2d.XY} vertices
 * @param {number} count
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype._Set = function(vertices, count) {};

/**
 * @param {number} hx
 * @param {number} hy
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY=} center
 * @param {number=} angle
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.SetAsBox = function(hx, hy, center, angle) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.TestPoint = function(xf, p) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.RayCast = function(output, input, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.ComputeMass = function(massData, density) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.Validate = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxy
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.SetupDistanceProxy = function(proxy, index) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} c
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.prototype.Dump = function(log) {};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} vs
 * @param {number} count
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} out
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape.ComputeCentroid = function(vs, count, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape} circleA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape} circleB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CollideCircles = function(manifold, circleA, xfA, circleB, xfB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape} polygonA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape} circleB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CollidePolygonAndCircle = function(manifold, polygonA, xfA, circleB, xfB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape} polyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape} polyB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CollidePolygons = function(manifold, polyA, xfA, polyB, xfB) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.m_vertex1;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.m_vertex2;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.m_vertex0;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.m_vertex3;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.m_oneSided;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_p1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_p2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_e;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_q;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.RayCast_s_r;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.ComputeAABB_s_v1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.ComputeAABB_s_v2;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v0
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v3
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.SetOneSided = function(v0, v1, v2, v3) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.SetTwoSided = function(v1, v2) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.Copy = function(other) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.GetChildCount = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.TestPoint = function(xf, p) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.RayCast = function(output, input, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.ComputeMass = function(massData, density) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxy
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.SetupDistanceProxy = function(proxy, index) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} c
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape} edgeA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape} circleB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CollideEdgeAndCircle = function(manifold, edgeA, xfA, circleB, xfB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape} edgeA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape} polygonB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CollideEdgeAndPolygon = function(manifold, edgeA, xfA, polygonB, xfB) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.m_vertices;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.m_count;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.m_prevVertex;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.m_nextVertex;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype._CreateLoop;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype._CreateChain;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.RayCast_s_edgeShape;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.ComputeAABB_s_v1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.ComputeAABB_s_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.ComputeAABB_s_lower;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.ComputeAABB_s_upper;

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.XY>|!Array<number>} vertices
 * @param {number=} count
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.CreateLoop = function(vertices, count) {};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.XY>|!Array<number>} vertices
 * @param {?|number} prevVertex_or_count
 * @param {?} nextVertex_or_prevVertex
 * @param {?=} nextVertex
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.CreateChain = function(vertices, prevVertex_or_count, nextVertex_or_prevVertex, nextVertex) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.Clone = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape} other
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.Copy = function(other) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.GetChildCount = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape} edge
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.GetChildEdge = function(edge, index) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.TestPoint = function(xf, p) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.RayCast = function(output, input, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {number} childIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.ComputeAABB = function(aabb, xf, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.ComputeMass = function(massData, density) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceProxy} proxy
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.SetupDistanceProxy = function(proxy, index) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} offset
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xf
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} c
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape.prototype.Dump = function(log) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.step;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.collide;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.solve;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.solveInit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.solveVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.solvePosition;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.broadphase;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.solveTOI;

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile.prototype.Reset = function() {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.dt;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.inv_dt;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.dtRatio;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.velocityIterations;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.positionIterations;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.warmStarting;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} step
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep.prototype.Copy = function(step) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Position = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Position.prototype.c;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Position.prototype.a;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Position>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Position.MakeArray = function(length) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity.prototype.v;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity.prototype.w;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity.MakeArray = function(length) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData.prototype.step;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Position>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData.prototype.positions;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData.prototype.velocities;

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType = {
  e_unknownJoint: 1,
  e_revoluteJoint: 1,
  e_prismaticJoint: 1,
  e_distanceJoint: 1,
  e_pulleyJoint: 1,
  e_mouseJoint: 1,
  e_gearJoint: 1,
  e_wheelJoint: 1,
  e_weldJoint: 1,
  e_frictionJoint: 1,
  e_ropeJoint: 1,
  e_motorJoint: 1,
  e_areaJoint: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian.prototype.linear;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian.prototype.angularA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian.prototype.angularB;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian.prototype.SetZero = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} x
 * @param {number} a1
 * @param {number} a2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Jacobian.prototype.Set = function(x, a1, a2) {};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} joint
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge = function(joint) {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge.prototype._other;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.other */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.other */
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge.prototype.joint;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge.prototype.prev;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge.prototype.next;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge.prototype.Reset = function() {};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef.prototype.type;
/** @type {?|undefined} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef.prototype.userData;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef.prototype.bodyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef.prototype.bodyB;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef.prototype.collideConnected;

/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} type
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef = function(type) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef.prototype.type;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef.prototype.userData;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef.prototype.bodyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef.prototype.bodyB;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef.prototype.collideConnected;

/**
 * @param {{stiffness: number, damping: number}} def
 * @param {number} frequencyHertz
 * @param {number} dampingRatio
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bodyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bodyB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2LinearStiffness = function(def, frequencyHertz, dampingRatio, bodyA, bodyB) {};

/**
 * @param {{stiffness: number, damping: number}} def
 * @param {number} frequencyHertz
 * @param {number} dampingRatio
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bodyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bodyB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AngularStiffness = function(def, frequencyHertz, dampingRatio, bodyA, bodyB) {};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_type;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_prev;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_next;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_edgeA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_edgeB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_bodyA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_bodyB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_index;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_islandFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_collideConnected;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.m_userData;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.Draw_s_p1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.Draw_s_p2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.Draw_s_color;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.Draw_s_c;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetType = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetBodyA = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetBodyB = function() {};

/**
 * @abstract
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetAnchorA = function(out) {};

/**
 * @abstract
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetAnchorB = function(out) {};

/**
 * @abstract
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @abstract
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetNext = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetUserData = function() {};

/**
 * @param {?} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.SetUserData = function(data) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.IsEnabled = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.GetCollideConnected = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.ShiftOrigin = function(newOrigin) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.Draw = function(draw) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint.prototype.SolvePositionConstraints = function(data) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DestructionListener = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} joint
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DestructionListener.prototype.SayGoodbyeJoint = function(joint) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DestructionListener.prototype.SayGoodbyeFixture = function(fixture) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter.b2_defaultFilter;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureB
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter.prototype.ShouldCollide = function(fixtureA, fixtureB) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactImpulse = function() {};
/** @type {!Array<number>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactImpulse.prototype.normalImpulses;
/** @type {!Array<number>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactImpulse.prototype.tangentImpulses;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactImpulse.prototype.count;
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener.b2_defaultListener;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener.prototype.BeginContact = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener.prototype.EndContact = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} oldManifold
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener.prototype.PreSolve = function(contact, oldManifold) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactImpulse} impulse
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener.prototype.PostSolve = function(contact, impulse) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback.prototype.ReportFixture = function(fixture) {};

/** @typedef {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture): boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallbackFunction;
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastCallback = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} point
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} normal
 * @param {number} fraction
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastCallback.prototype.ReportFixture = function(fixture, point, normal, fraction) {};

/** @typedef {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2, number): number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastCallbackFunction;

/**
 * @param {number} friction1
 * @param {number} friction2
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MixFriction = function(friction1, friction2) {};

/**
 * @param {number} restitution1
 * @param {number} restitution2
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MixRestitution = function(restitution1, restitution2) {};

/**
 * @param {number} threshold1
 * @param {number} threshold2
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MixRestitutionThreshold = function(threshold1, threshold2) {};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge = function(contact) {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge.prototype._other;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.other */

/* TODO: SetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.other */
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge.prototype.contact;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge.prototype.prev;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge.prototype.next;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge.prototype.Reset = function() {};
/**
 * @template A, B
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact = function() {};
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_islandFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_touchingFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_enabledFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_filterFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_bulletHitFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_toiFlag;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_prev;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_next;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_nodeA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_nodeB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_fixtureA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_fixtureB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_manifold;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_toiCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_toi;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_friction;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_restitution;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_restitutionThreshold;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_tangentSpeed;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.m_oldManifold;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.ComputeTOI_s_input;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.ComputeTOI_s_output;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetManifold = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2WorldManifold} worldManifold
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetWorldManifold = function(worldManifold) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.IsTouching = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.SetEnabled = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.IsEnabled = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetNext = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetFixtureA = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetChildIndexA = function() {};

/**
 * @return {A}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetShapeA = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetFixtureB = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetChildIndexB = function() {};

/**
 * @return {B}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetShapeB = function() {};

/**
 * @abstract
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.Evaluate = function(manifold, xfA, xfB) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.FlagForFiltering = function() {};

/**
 * @param {number} friction
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.SetFriction = function(friction) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetFriction = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.ResetFriction = function() {};

/**
 * @param {number} restitution
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.SetRestitution = function(restitution) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetRestitution = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.ResetRestitution = function() {};

/**
 * @param {number} threshold
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.SetRestitutionThreshold = function(threshold) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetRestitutionThreshold = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.ResetRestitutionThreshold = function() {};

/**
 * @param {number} speed
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.SetTangentSpeed = function(speed) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.GetTangentSpeed = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureA
 * @param {number} indexA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureB
 * @param {number} indexB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.Reset = function(fixtureA, indexA, fixtureB, indexB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} listener
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.Update = function(listener) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} sweepA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} sweepB
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact.prototype.ComputeTOI = function(sweepA, sweepB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.length;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.minLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.maxLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.length;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.minLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.maxLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.damping;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} b1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} b2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} anchor1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} anchor2
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJointDef.prototype.Initialize = function(b1, b2, anchor1, anchor2) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint = function(def) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_bias;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_length;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_minLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_maxLength;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_gamma;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_lowerImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_upperImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_u;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_currentLength;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_invIB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_softMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.m_lalcB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.InitVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.SolveVelocityConstraints_s_vpA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.SolveVelocityConstraints_s_vpB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.SolveVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.SolvePositionConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_pA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_pB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_axis;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_c1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_c2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_c3;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_c4;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_pRest;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_pMin;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.Draw_s_pMax;

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @param {number} length
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SetLength = function(length) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetLength = function() {};

/**
 * @param {number} minLength
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SetMinLength = function(minLength) {};

/**
 * @param {number} maxLength
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SetMaxLength = function(maxLength) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetCurrentLength = function() {};

/**
 * @param {number} stiffness
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SetStiffness = function(stiffness) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetStiffness = function() {};

/**
 * @param {number} damping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SetDamping = function(damping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.GetDamping = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint.prototype.Draw = function(draw) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef.prototype.bodies;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJointDef = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJointDef.prototype.bodies;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJointDef.prototype.damping;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} body
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJointDef.prototype.AddBody = function(body) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint = function(def) {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_bodies;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_impulse;
/** @type {!Array<number>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_targetLengths;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_targetArea;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_normals;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_joints;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_deltas;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.m_delta;

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @param {number} stiffness
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.SetStiffness = function(stiffness) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetStiffness = function() {};

/**
 * @param {number} damping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.SetDamping = function(damping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.GetDamping = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint.prototype.SolvePositionConstraints = function(data) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef.prototype.maxTorque;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef.prototype.maxTorque;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchor
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJointDef.prototype.Initialize = function(bA, bB, anchor) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_linearImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_angularImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_maxTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_linearMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_angularMass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.m_K;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.SolveVelocityConstraints_s_impulseV;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @param {number} force
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.SetMaxForce = function(force) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetMaxForce = function() {};

/**
 * @param {number} torque
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.SetMaxTorque = function(torque) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.GetMaxTorque = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint.prototype.Dump = function(log) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.localAxisA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.referenceAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.upperTranslation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.maxMotorForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef.prototype.motorSpeed;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.localAxisA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.referenceAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.upperTranslation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.maxMotorForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.motorSpeed;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchor
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} axis
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localXAxisA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localYAxisA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_referenceAngle;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_motorImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_lowerImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_upperImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_upperTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_maxMotorForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_motorSpeed;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_enableLimit;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_axis;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_perp;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_s1;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_s2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_a1;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_a2;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_K;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_K3;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_K2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_translation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_axialMass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.m_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.InitVelocityConstraints_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.InitVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolveVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolveVelocityConstraints_s_df;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolvePositionConstraints_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolvePositionConstraints_s_impulse;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolvePositionConstraints_s_impulse1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.SolvePositionConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.GetJointTranslation_s_pA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.GetJointTranslation_s_pB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.GetJointTranslation_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.GetJointTranslation_s_axis;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_pA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_pB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_axis;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_c1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_c2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_c3;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_c4;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_c5;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_lower;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_upper;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.Draw_s_perp;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetLocalAxisA = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetReferenceAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetJointTranslation = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetJointSpeed = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.IsLimitEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.EnableLimit = function(flag) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetLowerLimit = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetUpperLimit = function() {};

/**
 * @param {number} lower
 * @param {number} upper
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.SetLimits = function(lower, upper) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.IsMotorEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.EnableMotor = function(flag) {};

/**
 * @param {number} speed
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.SetMotorSpeed = function(speed) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetMotorSpeed = function() {};

/**
 * @param {number} force
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.SetMaxMotorForce = function(force) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetMaxMotorForce = function() {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.GetMotorForce = function(inv_dt) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint.prototype.Draw = function(draw) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.referenceAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.lowerAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.upperAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.motorSpeed;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef.prototype.maxMotorTorque;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.referenceAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.lowerAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.upperAngle;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.motorSpeed;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.maxMotorTorque;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} anchor
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJointDef.prototype.Initialize = function(bA, bB, anchor) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_motorImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_lowerImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_upperImpulse;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_maxMotorTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_motorSpeed;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_referenceAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_lowerAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_upperAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_K;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_angle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_axialMass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.m_lalcB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.InitVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.SolvePositionConstraints_s_C_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.SolvePositionConstraints_s_impulse;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_pA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_pB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_c1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_c2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_c3;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_c4;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_c5;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_color_;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_r;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_rlo;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.Draw_s_rhi;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetReferenceAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetJointAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetJointSpeed = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.IsMotorEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.EnableMotor = function(flag) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetMotorTorque = function(inv_dt) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetMotorSpeed = function() {};

/**
 * @param {number} torque
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.SetMaxMotorTorque = function(torque) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetMaxMotorTorque = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.IsLimitEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.EnableLimit = function(flag) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetLowerLimit = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.GetUpperLimit = function() {};

/**
 * @param {number} lower
 * @param {number} upper
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.SetLimits = function(lower, upper) {};

/**
 * @param {number} speed
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.SetMotorSpeed = function(speed) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint.prototype.Draw = function(draw) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef = function() {};
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef.prototype.joint1;
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef.prototype.joint2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef.prototype.ratio;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJointDef = function() {};
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJointDef.prototype.joint1;
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJointDef.prototype.joint2;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJointDef.prototype.ratio;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint = function(def) {};
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_joint1;
/** @type {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_joint2;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_typeA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_typeB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_bodyC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_bodyD;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAnchorC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAnchorD;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAxisC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_localAxisD;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_referenceAngleA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_referenceAngleB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_constant;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_ratio;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_indexB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_indexC;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_indexD;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lcC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lcD;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_mA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_mB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_mC;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_mD;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_iA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_iB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_iC;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_iD;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JvAC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JvBD;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JwA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JwB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JwC;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_JwD;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_qC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_qD;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lalcC;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.m_lalcD;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.InitVelocityConstraints_s_u;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.InitVelocityConstraints_s_rA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.InitVelocityConstraints_s_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.InitVelocityConstraints_s_rC;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.InitVelocityConstraints_s_rD;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.SolvePositionConstraints_s_u;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.SolvePositionConstraints_s_rA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.SolvePositionConstraints_s_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.SolvePositionConstraints_s_rC;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.SolvePositionConstraints_s_rD;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetJoint1 = function() {};

/**
 * @return {(!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint)}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetJoint2 = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.GetRatio = function() {};

/**
 * @param {number} ratio
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.SetRatio = function(ratio) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint.prototype.Dump = function(log) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef.prototype.linearOffset;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef.prototype.angularOffset;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef.prototype.maxTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef.prototype.correctionFactor;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.linearOffset;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.angularOffset;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.maxTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.correctionFactor;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJointDef.prototype.Initialize = function(bA, bB) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_linearOffset;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_angularOffset;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_linearImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_angularImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_maxTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_correctionFactor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_localCenterB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_linearError;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_angularError;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_linearMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_angularMass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.m_K;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.SolveVelocityConstraints_s_impulse_v2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2;

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} linearOffset
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SetLinearOffset = function(linearOffset) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetLinearOffset = function() {};

/**
 * @param {number} angularOffset
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SetAngularOffset = function(angularOffset) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetAngularOffset = function() {};

/**
 * @param {number} force
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SetMaxForce = function(force) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetMaxForce = function() {};

/**
 * @param {number} torque
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SetMaxTorque = function(torque) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.GetMaxTorque = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint.prototype.Dump = function(log) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef.prototype.target;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJointDef.prototype.target;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJointDef.prototype.maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_targetA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_beta;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_maxForce;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_gamma;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_C;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.m_K;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.SolveVelocityConstraints_s_Cdot;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.SolveVelocityConstraints_s_impulse;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.SolveVelocityConstraints_s_oldImpulse;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} target
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SetTarget = function(target) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetTarget = function() {};

/**
 * @param {number} maxForce
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SetMaxForce = function(maxForce) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetMaxForce = function() {};

/**
 * @param {number} stiffness
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SetStiffness = function(stiffness) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetStiffness = function() {};

/**
 * @param {number} damping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SetDamping = function(damping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetDamping = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint.prototype.ShiftOrigin = function(newOrigin) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2_minPulleyLength;
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.groundAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.groundAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.lengthA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.lengthB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef.prototype.ratio;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.groundAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.groundAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.lengthA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.lengthB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.ratio;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} groundA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} groundB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchorA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchorB
 * @param {number} r
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJointDef.prototype.Initialize = function(bA, bB, groundA, groundB, anchorA, anchorB, r) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_groundAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_groundAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_lengthA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_lengthB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_constant;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_ratio;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_uA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_uB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_invIB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.m_lalcB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.InitVelocityConstraints_s_PA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.InitVelocityConstraints_s_PB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolveVelocityConstraints_s_vpA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolveVelocityConstraints_s_vpB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolveVelocityConstraints_s_PA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolveVelocityConstraints_s_PB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolvePositionConstraints_s_PA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.SolvePositionConstraints_s_PB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.GetCurrentLengthA_s_p;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.GetCurrentLengthB_s_p;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetGroundAnchorA = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetGroundAnchorB = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetLengthA = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetLengthB = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetRatio = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetCurrentLengthA = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.GetCurrentLengthB = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint.prototype.ShiftOrigin = function(newOrigin) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef.prototype.referenceAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.referenceAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.damping;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchor
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJointDef.prototype.Initialize = function(bA, bB, anchor) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint = function(def) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_bias;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_localAnchorB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_referenceAngle;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_gamma;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec3} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_rB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_mass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat33} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.m_K;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.InitVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolveVelocityConstraints_s_Cdot1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolveVelocityConstraints_s_impulse1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolveVelocityConstraints_s_impulse;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolveVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolvePositionConstraints_s_C1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolvePositionConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.SolvePositionConstraints_s_impulse;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetReferenceAngle = function() {};

/**
 * @param {number} stiffness
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.SetStiffness = function(stiffness) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetStiffness = function() {};

/**
 * @param {number} damping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.SetDamping = function(damping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.GetDamping = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint.prototype.Dump = function(log) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2IJointDef}
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.localAxisA;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.upperTranslation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.maxMotorTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.motorSpeed;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef.prototype.damping;

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2JointDef}
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.localAxisA;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.enableLimit;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.upperTranslation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.maxMotorTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.motorSpeed;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.damping;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} bB
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} anchor
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} axis
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {};

/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint = function(def) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localAnchorA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localAnchorB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localXAxisA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localYAxisA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_impulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_motorImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_springImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_lowerImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_upperImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_translation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_lowerTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_upperTranslation;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_maxMotorTorque;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_motorSpeed;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_enableLimit;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_enableMotor;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_stiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_indexB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_ax;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_ay;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_sAx;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_sBx;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_sAy;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_sBy;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_mass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_motorMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_axialMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_springMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_bias;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_gamma;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_qA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Rot} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_qB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_lalcA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_lalcB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.m_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.InitVelocityConstraints_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.InitVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.SolveVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.SolvePositionConstraints_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.SolvePositionConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_pA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_pB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_axis;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_c1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_c2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_c3;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_c4;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_c5;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_lower;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_upper;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.Draw_s_perp;

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetMotorSpeed = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetMaxMotorTorque = function() {};

/**
 * @param {number} hz
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SetStiffness = function(hz) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetStiffness = function() {};

/**
 * @param {number} ratio
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SetDamping = function(ratio) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetDamping = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.InitVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SolveVelocityConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2SolverData} data
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SolvePositionConstraints = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef} def
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJointDef}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetDefinition = function(def) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetAnchorA = function(out) {};

/**
 * @template T
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetAnchorB = function(out) {};

/**
 * @template T
 * @param {number} inv_dt
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetReactionForce = function(inv_dt, out) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetReactionTorque = function(inv_dt) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetLocalAnchorA = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetLocalAnchorB = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetLocalAxisA = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetJointTranslation = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetJointLinearSpeed = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetJointAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetJointAngularSpeed = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetPrismaticJointTranslation = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetPrismaticJointSpeed = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetRevoluteJointAngle = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetRevoluteJointSpeed = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.IsMotorEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.EnableMotor = function(flag) {};

/**
 * @param {number} speed
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SetMotorSpeed = function(speed) {};

/**
 * @param {number} force
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SetMaxMotorTorque = function(force) {};

/**
 * @param {number} inv_dt
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetMotorTorque = function(inv_dt) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.IsLimitEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.EnableLimit = function(flag) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetLowerLimit = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.GetUpperLimit = function() {};

/**
 * @param {number} lower
 * @param {number} upper
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.SetLimits = function(lower, upper) {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint.prototype.Draw = function(draw) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister.prototype.pool;
/** @type {function(): !C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister.prototype.createFcn;
/** @type {function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>): void} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister.prototype.destroyFcn;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister.prototype.primary;

/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory = function() {};
/** @type {!Array<!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactRegister>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory.prototype.m_registers;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory.prototype.AddType;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory.prototype.InitializeRegisters;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureA
 * @param {number} indexA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixtureB
 * @param {number} indexB
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory.prototype.Create = function(fixtureA, indexA, fixtureB, indexB) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory.prototype.Destroy = function(contact) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BroadPhase<!C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_broadPhase;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_contactList;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_contactCount;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_contactFilter;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_contactListener;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFactory} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.m_contactFactory;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy} proxyA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy} proxyB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.AddPair = function(proxyA, proxyB) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.FindNewContacts = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} c
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.Destroy = function(c) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager.prototype.Collide = function() {};
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.g_blockSolve;

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.get_g_blockSolve = function() {};

/**
 * @param {boolean} value
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.set_g_blockSolve = function(value) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.rA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.rB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.normalImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.tangentImpulse;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.normalMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.tangentMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.prototype.velocityBias;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint.MakeArray = function(length) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2VelocityConstraintPoint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.points;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.normal;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.tangent;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.normalMass;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Mat22} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.K;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.indexB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.invMassB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.invIB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.friction;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.restitution;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.threshold;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.tangentSpeed;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.pointCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.prototype.contactIndex;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint.MakeArray = function(length) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint = function() {};
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.localPoints;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.localNormal;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.localPoint;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.indexA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.indexB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.invMassA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.invMassB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.localCenterA;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.localCenterB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.invIA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.invIB;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ManifoldType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.type;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.radiusA;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.radiusB;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.prototype.pointCount;

/**
 * @param {number} length
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint.MakeArray = function(length) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef.prototype.step;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef.prototype.contacts;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef.prototype.count;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Position>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef.prototype.positions;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef.prototype.velocities;
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.prototype.normal;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.prototype.point;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.prototype.separation;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.Initialize_s_pointA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.Initialize_s_pointB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.Initialize_s_planePoint;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.Initialize_s_clipPoint;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint} pc
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @param {number} index
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PositionSolverManifold.prototype.Initialize = function(pc, xfA, xfB, index) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_step;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Position>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_positions;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_velocities;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactPositionConstraint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_positionConstraints;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_velocityConstraints;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_contacts;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.m_count;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.InitializeVelocityConstraints_s_xfA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.InitializeVelocityConstraints_s_xfB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.WarmStart_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_dv;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_dv1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_dv2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_a;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_b;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_x;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_d;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_P1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_P2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveVelocityConstraints_s_P1P2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_xfA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_xfB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_psm;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_rA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolvePositionConstraints_s_P;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_xfA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_xfB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_psm;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_rA;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_rB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.SolveTOIPositionConstraints_s_P;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolverDef} def
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.Initialize = function(def) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.InitializeVelocityConstraints = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.WarmStart = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.SolveVelocityConstraints = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.StoreImpulses = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.SolvePositionConstraints = function() {};

/**
 * @param {number} toiIndexA
 * @param {number} toiIndexB
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactSolver.prototype.SolveTOIPositionConstraints = function(toiIndexA, toiIndexB) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_listener;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_bodies;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_contacts;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_joints;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Position>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_positions;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Velocity>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_velocities;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_bodyCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_jointCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_contactCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_bodyCapacity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_contactCapacity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.m_jointCapacity;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_timer;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_solverData;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_contactSolverDef;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_contactSolver;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_translation;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.s_impulse;

/**
 * @param {number} bodyCapacity
 * @param {number} contactCapacity
 * @param {number} jointCapacity
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} listener
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.Initialize = function(bodyCapacity, contactCapacity, jointCapacity, listener) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.Clear = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} body
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.AddBody = function(body) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.AddContact = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} joint
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.AddJoint = function(joint) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile} profile
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} step
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} gravity
 * @param {boolean} allowSleep
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.Solve = function(profile, step, gravity, allowSleep) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} subStep
 * @param {number} toiIndexA
 * @param {number} toiIndexB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.SolveTOI = function(subStep, toiIndexA, toiIndexB) {};

/**
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactVelocityConstraint>} constraints
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Island.prototype.Report = function(constraints) {};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} gravity
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World = function(gravity) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_contactManager;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_bodyList;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_jointList;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_bodyCount;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_jointCount;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_gravity;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_allowSleep;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DestructionListener} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_destructionListener;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_debugDraw;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_inv_dt0;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_newContacts;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_locked;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_clearForces;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_warmStarting;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_continuousPhysics;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_subStepping;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_stepComplete;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_profile;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Island} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.m_island;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.s_stack;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World._Joint_Create;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World._Joint_Destroy;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.Step_s_step;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.Step_s_stepTimer;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.Step_s_timer;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.DebugDraw_s_color;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.DebugDraw_s_vs;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.DebugDraw_s_xf;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype._QueryAABB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype._QueryPointAABB;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.QueryFixtureShape_s_aabb;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype._QueryFixtureShape;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype._QueryFixturePoint;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.RayCast_s_input;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.RayCast_s_output;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.RayCast_s_point;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype._RayCast;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_subStep;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_backup;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_backup1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_backup2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_toi_input;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.SolveTOI_s_toi_output;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2DestructionListener} listener
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetDestructionListener = function(listener) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactFilter} filter
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetContactFilter = function(filter) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactListener} listener
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetContactListener = function(listener) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} debugDraw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetDebugDraw = function(debugDraw) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef=} def
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.CreateBody = function(def) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} b
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.DestroyBody = function(b) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IAreaJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IDistanceJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFrictionJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IGearJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IMotorJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IMouseJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IPrismaticJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IPulleyJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IRevoluteJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IWeldJointDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2IWheelJointDef} def
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AreaJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2DistanceJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2FrictionJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2GearJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2MotorJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2MouseJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2PrismaticJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2PulleyJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2RevoluteJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2WeldJoint|!C_$workspace$ClosureCompilerJS$libs$box2d.b2WheelJoint}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.CreateJoint = function(def) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint} j
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.DestroyJoint = function(j) {};

/**
 * @param {number} dt
 * @param {number} velocityIterations
 * @param {number} positionIterations
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.Step = function(dt, velocityIterations, positionIterations) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.ClearForces = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.DebugDraw = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback|!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} callback_or_aabb
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture): boolean} aabb_or_fn
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryAABB = function(callback_or_aabb, aabb_or_fn) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} aabb
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>=} out
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryAllAABB = function(aabb, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback|!C_$workspace$ClosureCompilerJS$libs$box2d.XY} callback_or_point
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture): boolean} point_or_fn
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryPointAABB = function(callback_or_point, point_or_fn) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>=} out
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryAllPointAABB = function(point, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback|!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} callback_or_shape
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape|number} shape_or_index
 * @param {number|!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} index_or_transform
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture): boolean} transform_or_fn
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryFixtureShape = function(callback_or_shape, shape_or_index, index_or_transform, transform_or_fn) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} shape
 * @param {number} index
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>=} out
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryAllFixtureShape = function(shape, index, transform, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2QueryCallback|!C_$workspace$ClosureCompilerJS$libs$box2d.XY} callback_or_point
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture): boolean} point_or_fn
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryFixturePoint = function(callback_or_point, point_or_fn) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>=} out
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.QueryAllFixturePoint = function(point, out) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastCallback|!C_$workspace$ClosureCompilerJS$libs$box2d.XY} callback_or_point1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point1_or_point2
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY|function(!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2, number): number} point2_or_fn
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.RayCast = function(callback_or_point1, point1_or_point2, point2_or_fn) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point2
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.RayCastOne = function(point1, point2) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point2
 * @param {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>=} out
 * @return {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.RayCastAll = function(point1, point2, out) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetBodyList = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Joint}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetJointList = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetContactList = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetAllowSleeping = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetAllowSleeping = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetWarmStarting = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetWarmStarting = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetContinuousPhysics = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetContinuousPhysics = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetSubStepping = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetSubStepping = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetProxyCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetBodyCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetJointCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetContactCount = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetTreeHeight = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetTreeBalance = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetTreeQuality = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} gravity
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetGravity = function(gravity, wake) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetGravity = function() {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.IsLocked = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SetAutoClearForces = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetAutoClearForces = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} newOrigin
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.ShiftOrigin = function(newOrigin) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactManager}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetContactManager = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Profile}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.GetProfile = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.Dump = function(log) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Color} color
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.DrawShape = function(fixture, color) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} step
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.Solve = function(step) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TimeStep} step
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2World.prototype.SolveTOI = function(step) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType = {
  b2_unknown: 1,
  b2_staticBody: 1,
  b2_kinematicBody: 1,
  b2_dynamicBody: 1,
};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.type;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.position;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.angle;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.linearVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.angularVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.linearDamping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.angularDamping;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.allowSleep;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.awake;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.fixedRotation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.bullet;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.enabled;
/** @type {?|undefined} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.userData;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef.prototype.gravityScale;
/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.type;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.position;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.angle;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.linearVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.angularVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.linearDamping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.angularDamping;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.allowSleep;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.awake;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.fixedRotation;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.bullet;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.enabled;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.userData;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef.prototype.gravityScale;

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IBodyDef} bd
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2World} world
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body = function(bd, world) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_type;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_islandFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_awakeFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_autoSleepFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_bulletFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_fixedRotationFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_enabledFlag;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_toiFlag;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_islandIndex;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_xf;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Sweep} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_sweep;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_linearVelocity;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_angularVelocity;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_force;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_torque;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2World} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_world;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_prev;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_next;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_fixtureList;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_fixtureCount;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_jointList;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_contactList;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_mass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_invMass;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_I;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_invI;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_linearDamping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_angularDamping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_gravityScale;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_sleepTime;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.m_userData;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.CreateFixtureShapeDensity_s_def;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.SetMassData_s_oldCenter;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.ResetMassData_s_localCenter;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.ResetMassData_s_oldCenter;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.ResetMassData_s_massData;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.SynchronizeFixtures_s_xf1;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef|!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} def_or_shape
 * @param {number=} density
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.CreateFixture = function(def_or_shape, density) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef} def
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.CreateFixtureDef = function(def) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} shape
 * @param {number=} density
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.CreateFixtureShapeDensity = function(shape, density) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.DestroyFixture = function(fixture) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @param {number} angle
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetTransformVec = function(position, angle) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} angle
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetTransformXY = function(x, y, angle) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @param {number} angle
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetTransform = function(position, angle) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetTransform = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetPosition = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} position
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetPosition = function(position) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetPositionXY = function(x, y) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetAngle = function() {};

/**
 * @param {number} angle
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetAngle = function(angle) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetWorldCenter = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLocalCenter = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} v
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetLinearVelocity = function(v) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLinearVelocity = function() {};

/**
 * @param {number} w
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetAngularVelocity = function(w) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetAngularVelocity = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef} bd
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyDef}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetDefinition = function(bd) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} force
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyForce = function(force, point, wake) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} force
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyForceToCenter = function(force, wake) {};

/**
 * @param {number} torque
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyTorque = function(torque, wake) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} impulse
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} point
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyLinearImpulse = function(impulse, point, wake) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} impulse
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyLinearImpulseToCenter = function(impulse, wake) {};

/**
 * @param {number} impulse
 * @param {boolean=} wake
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ApplyAngularImpulse = function(impulse, wake) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetMass = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetInertia = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} data
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetMassData = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData} massData
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetMassData = function(massData) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ResetMassData = function() {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} localPoint
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetWorldPoint = function(localPoint, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} localVector
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetWorldVector = function(localVector, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} worldPoint
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLocalPoint = function(worldPoint, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} worldVector
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLocalVector = function(worldVector, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} worldPoint
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLinearVelocityFromWorldPoint = function(worldPoint, out) {};

/**
 * @template T
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} localPoint
 * @param {T} out
 * @return {T}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLinearVelocityFromLocalPoint = function(localPoint, out) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetLinearDamping = function() {};

/**
 * @param {number} linearDamping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetLinearDamping = function(linearDamping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetAngularDamping = function() {};

/**
 * @param {number} angularDamping
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetAngularDamping = function(angularDamping) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetGravityScale = function() {};

/**
 * @param {number} scale
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetGravityScale = function(scale) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType} type
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetType = function(type) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BodyType}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetType = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetBullet = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.IsBullet = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetSleepingAllowed = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.IsSleepingAllowed = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetAwake = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.IsAwake = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetEnabled = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.IsEnabled = function() {};

/**
 * @param {boolean} flag
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetFixedRotation = function(flag) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.IsFixedRotation = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetFixtureList = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2JointEdge}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetJointList = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ContactEdge}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetContactList = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetNext = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetUserData = function() {};

/**
 * @param {?} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SetUserData = function(data) {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2World}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.GetWorld = function() {};

/**
 * @param {function(string, ...?): void} log
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.Dump = function(log) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SynchronizeFixtures = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.SynchronizeTransform = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} other
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ShouldCollide = function(other) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} other
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.ShouldCollideConnected = function(other) {};

/**
 * @param {number} alpha
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Body.prototype.Advance = function(alpha) {};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter = function() {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter.prototype.categoryBits;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter.prototype.maskBits;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter.prototype.groupIndex;
/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.DEFAULT;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.prototype.categoryBits;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.prototype.maskBits;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.prototype.groupIndex;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.prototype.Clone = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter.prototype.Copy = function(other) {};
/**
 * @record
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.shape;
/** @type {?|undefined} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.userData;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.friction;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.restitution;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.restitutionThreshold;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.density;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.isSensor;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFilter} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef.prototype.filter;
/**
 * @implements {C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.shape;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.userData;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.friction;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.restitution;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.restitutionThreshold;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.density;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.isSensor;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureDef.prototype.filter;

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} fixture
 * @param {number} childIndex
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy = function(fixture, childIndex) {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2AABB} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.aabb;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.fixture;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.childIndex;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2TreeNode<!C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.treeNode;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.Synchronize_s_aabb1;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.Synchronize_s_aabb2;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.Synchronize_s_displacement;

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.Reset = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.Touch = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform2
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy.prototype.Synchronize = function(transform1, transform2) {};

/**
 * @constructor
 * @struct
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} body
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2IFixtureDef} def
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture = function(body, def) {};
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_density;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_next;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_body;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_shape;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_friction;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_restitution;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_restitutionThreshold;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2FixtureProxy>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_proxies;

/* TODO: GetAccessor: C_$workspace$ClosureCompilerJS$libs$box2d.m_proxyCount */
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_filter;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_isSensor;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.m_userData;

/**
 * @param {?} allocator
 * @param {?} body
 * @param {?} def
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Create = function(allocator, body, def) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Destroy = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Reset = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2ShapeType}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetType = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetShape = function() {};

/**
 * @param {boolean} sensor
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetSensor = function(sensor) {};

/**
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.IsSensor = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Filter} filter
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetFilterData = function(filter) {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetFilterData = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Refilter = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Body}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetBody = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetNext = function() {};

/**
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetUserData = function() {};

/**
 * @param {?} data
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetUserData = function(data) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.XY} p
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.TestPoint = function(p) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastOutput} output
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RayCastInput} input
 * @param {number} childIndex
 * @return {boolean}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.RayCast = function(output, input, childIndex) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData=} massData
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2MassData}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetMassData = function(massData) {};

/**
 * @param {number} density
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetDensity = function(density) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetDensity = function() {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetFriction = function() {};

/**
 * @param {number} friction
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetFriction = function(friction) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetRestitution = function() {};

/**
 * @param {number} restitution
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetRestitution = function(restitution) {};

/**
 * @return {number}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetRestitutionThreshold = function() {};

/**
 * @param {number} threshold
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SetRestitutionThreshold = function(threshold) {};

/**
 * @param {number} childIndex
 * @return {?}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.GetAABB = function(childIndex) {};

/**
 * @param {function(string, ...?): void} log
 * @param {number} bodyIndex
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Dump = function(log, bodyIndex) {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.CreateProxies = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.DestroyProxies = function() {};

/**
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.TouchProxies = function() {};

/**
 * @param {?} broadPhase
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform2
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.Synchronize = function(broadPhase, transform1, transform2) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform1
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} transform2
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Fixture.prototype.SynchronizeProxies = function(transform1, transform2) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleContact = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonContact = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonAndCircleContact = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonAndCircleContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonAndCircleContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndCircleContact = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndCircleContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndCircleContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndPolygonContact = function() {};

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndPolygonContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndPolygonContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2EdgeAndPolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2CircleShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndCircleContact = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndCircleContact.Evaluate_s_edge;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndCircleContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndCircleContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndCircleContact.prototype.Evaluate = function(manifold, xfA, xfB) {};
/**
 * @extends {C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainShape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2PolygonShape>}
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndPolygonContact = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndPolygonContact.Evaluate_s_edge;

/**
 * @return {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndPolygonContact.Create = function() {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Contact<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape, !C_$workspace$ClosureCompilerJS$libs$box2d.b2Shape>} contact
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndPolygonContact.Destroy = function(contact) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Manifold} manifold
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfA
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Transform} xfB
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2ChainAndPolygonContact.prototype.Evaluate = function(manifold, xfA, xfB) {};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2StretchingModel = {
  b2_pbdStretchingModel: 1,
  b2_xpbdStretchingModel: 1,
};

/** @enum {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2BendingModel = {
  b2_springAngleBendingModel: 1,
  b2_pbdAngleBendingModel: 1,
  b2_xpbdAngleBendingModel: 1,
  b2_pbdDistanceBendingModel: 1,
  b2_pbdHeightBendingModel: 1,
  b2_pbdTriangleBendingModel: 1,
};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2StretchingModel} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.stretchingModel;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2BendingModel} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.bendingModel;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.damping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.stretchStiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.stretchHertz;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.stretchDamping;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.bendStiffness;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.bendHertz;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.bendDamping;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.isometric;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.fixedEffectiveMass;
/** @type {boolean} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.warmStart;

/**
 * @template THIS
 * @this {THIS}
 * @param {?} other
 * @return {THIS}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning.prototype.Copy = function(other) {};
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef = function() {};
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.position;
/** @type {!Array<!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.vertices;
/** @type {number} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.count;
/** @type {!Array<number>} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.masses;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Vec2} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.gravity;
/** @type {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef.prototype.tuning;
/**
 * @constructor
 * @struct
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope = function() {};
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_position;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_count;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_stretchCount;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_bendCount;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_stretchConstraints;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_bendConstraints;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_bindPositions;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_ps;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_p0s;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_vs;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_invMasses;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_gravity;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.m_tuning;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveStretch_PBD;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveStretch_XPBD;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveBend_PBD_Angle;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveBend_XPBD_Angle;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveBend_PBD_Distance;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveBend_PBD_Height;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SolveBend_PBD_Triangle;
/** @type {?} */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.ApplyBendForces;

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeDef} def
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.Create = function(def) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2RopeTuning} tuning
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.SetTuning = function(tuning) {};

/**
 * @param {number} dt
 * @param {number} iterations
 * @param {?} position
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.Step = function(dt, iterations, position) {};

/**
 * @param {?} position
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.Reset = function(position) {};

/**
 * @param {!C_$workspace$ClosureCompilerJS$libs$box2d.b2Draw} draw
 * @return {void}
 */
C_$workspace$ClosureCompilerJS$libs$box2d.b2Rope.prototype.Draw = function(draw) {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/cannon.d.ts
/** @const */
var CANNON = {};
/**
 * @record
 * @struct
 */
CANNON.IAABBOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IAABBOptions.prototype.upperBound;
/** @type {!CANNON.Vec3} */
CANNON.IAABBOptions.prototype.lowerBound;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IAABBOptions=} options
 */
CANNON.AABB = function(options) {};
/** @type {!CANNON.Vec3} */
CANNON.AABB.prototype.lowerBound;
/** @type {!CANNON.Vec3} */
CANNON.AABB.prototype.upperBound;

/**
 * @return {!CANNON.AABB}
 */
CANNON.AABB.prototype.clone = function() {};

/**
 * @param {!Array<!CANNON.Vec3>} points
 * @param {!CANNON.Vec3=} position
 * @param {!CANNON.Quaternion=} quaternion
 * @param {number=} skinSize
 * @return {void}
 */
CANNON.AABB.prototype.setFromPoints = function(points, position, quaternion, skinSize) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {void}
 */
CANNON.AABB.prototype.copy = function(aabb) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {void}
 */
CANNON.AABB.prototype.extend = function(aabb) {};

/**
 * @param {!CANNON.Vec3} a
 * @param {!CANNON.Vec3} b
 * @param {!CANNON.Vec3} c
 * @param {!CANNON.Vec3} d
 * @param {!CANNON.Vec3} e
 * @param {!CANNON.Vec3} f
 * @param {!CANNON.Vec3} g
 * @param {!CANNON.Vec3} h
 * @return {void}
 */
CANNON.AABB.prototype.getCorners = function(a, b, c, d, e, f, g, h) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {boolean}
 */
CANNON.AABB.prototype.overlaps = function(aabb) {};

/**
 * @param {!CANNON.Transform} frame
 * @param {!CANNON.AABB} target
 * @return {!CANNON.AABB}
 */
CANNON.AABB.prototype.toLocalFrame = function(frame, target) {};

/**
 * @param {!CANNON.Transform} frame
 * @param {!CANNON.AABB} target
 * @return {!CANNON.AABB}
 */
CANNON.AABB.prototype.toWorldFrame = function(frame, target) {};
/**
 * @constructor
 * @struct
 */
CANNON.ArrayCollisionMatrix = function() {};
/** @type {!Array<!CANNON.Mat3>} */
CANNON.ArrayCollisionMatrix.prototype.matrix;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.ArrayCollisionMatrix.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number=} value
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.reset = function() {};

/**
 * @param {number} n
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.setNumObjects = function(n) {};
/**
 * @constructor
 * @struct
 */
CANNON.Broadphase = function() {};
/** @type {!CANNON.World} */
CANNON.Broadphase.prototype.world;
/** @type {boolean} */
CANNON.Broadphase.prototype.useBoundingBoxes;
/** @type {boolean} */
CANNON.Broadphase.prototype.dirty;

/**
 * @param {!CANNON.World} world
 * @param {!Array<!CANNON.Body>} p1
 * @param {!Array<!CANNON.Body>} p2
 * @return {void}
 */
CANNON.Broadphase.prototype.collisionPairs = function(world, p1, p2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @return {boolean}
 */
CANNON.Broadphase.prototype.needBroadphaseCollision = function(bodyA, bodyB) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.Broadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.Broadphase.prototype.doBoundingSphereBroadphase = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.Broadphase.prototype.doBoundingBoxBroadphase = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.Broadphase.prototype.makePairsUnique = function(pairs1, pairs2) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.Broadphase.prototype.setWorld = function(world) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @return {boolean}
 */
CANNON.Broadphase.prototype.boundingSphereCheck = function(bodyA, bodyB) {};

/**
 * @param {!CANNON.World} world
 * @param {!CANNON.AABB} aabb
 * @param {!Array<!CANNON.Body>} result
 * @return {!Array<!CANNON.Body>}
 */
CANNON.Broadphase.prototype.aabbQuery = function(world, aabb, result) {};

/**
 * @extends {CANNON.Broadphase}
 * @constructor
 * @struct
 * @param {!CANNON.Vec3=} aabbMin
 * @param {!CANNON.Vec3=} aabbMax
 * @param {number=} nx
 * @param {number=} ny
 * @param {number=} nz
 */
CANNON.GridBroadphase = function(aabbMin, aabbMax, nx, ny, nz) {};
/** @type {number} */
CANNON.GridBroadphase.prototype.nx;
/** @type {number} */
CANNON.GridBroadphase.prototype.ny;
/** @type {number} */
CANNON.GridBroadphase.prototype.nz;
/** @type {!CANNON.Vec3} */
CANNON.GridBroadphase.prototype.aabbMin;
/** @type {!CANNON.Vec3} */
CANNON.GridBroadphase.prototype.aabbMax;
/** @type {!Array<?>} */
CANNON.GridBroadphase.prototype.bins;
/**
 * @extends {CANNON.Broadphase}
 * @constructor
 * @struct
 */
CANNON.NaiveBroadphase = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.ObjectCollisionMatrix = function() {};
/** @type {!Array<number>} */
CANNON.ObjectCollisionMatrix.prototype.matrix;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.ObjectCollisionMatrix.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number} value
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.reset = function() {};

/**
 * @param {number} n
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.setNumObjects = function(n) {};
/**
 * @record
 * @struct
 */
CANNON.IRayIntersectWorldOptions = function() {};
/** @type {number} */
CANNON.IRayIntersectWorldOptions.prototype.mode;
/** @type {boolean} */
CANNON.IRayIntersectWorldOptions.prototype.result;
/** @type {boolean} */
CANNON.IRayIntersectWorldOptions.prototype.skipBackfaces;
/** @type {number} */
CANNON.IRayIntersectWorldOptions.prototype.collisionFilterMask;
/** @type {number} */
CANNON.IRayIntersectWorldOptions.prototype.collisionFilterGroup;
/** @type {!CANNON.Vec3} */
CANNON.IRayIntersectWorldOptions.prototype.from;
/** @type {!CANNON.Vec3} */
CANNON.IRayIntersectWorldOptions.prototype.to;
/** @type {!Function} */
CANNON.IRayIntersectWorldOptions.prototype.callback;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Vec3=} from
 * @param {!CANNON.Vec3=} to
 */
CANNON.Ray = function(from, to) {};
/** @type {number} */
CANNON.Ray.CLOSEST;
/** @type {number} */
CANNON.Ray.ANY;
/** @type {number} */
CANNON.Ray.ALL;
/** @type {!CANNON.Vec3} */
CANNON.Ray.prototype.from;
/** @type {!CANNON.Vec3} */
CANNON.Ray.prototype.to;
/** @type {number} */
CANNON.Ray.prototype.precision;
/** @type {boolean} */
CANNON.Ray.prototype.checkCollisionResponse;
/** @type {!Function} */
CANNON.Ray.prototype.callback;
/** @type {number} */
CANNON.Ray.prototype.collisionFilterGroup;
/** @type {number} */
CANNON.Ray.prototype.collisionFilterMask;
/** @type {boolean} */
CANNON.Ray.prototype.hasHit;
/** @type {number} */
CANNON.Ray.prototype.mode;
/** @type {!CANNON.RaycastResult} */
CANNON.Ray.prototype.result;
/** @type {boolean} */
CANNON.Ray.prototype.skipBackfaces;

/**
 * @param {!CANNON.RaycastResult} result
 * @return {void}
 */
CANNON.Ray.prototype.getAABB = function(result) {};

/**
 * @param {!Array<!CANNON.Body>} bodies
 * @param {!CANNON.RaycastResult=} result
 * @return {void}
 */
CANNON.Ray.prototype.intersectBodies = function(bodies, result) {};

/**
 * @param {!CANNON.World} world
 * @param {?} options
 * @return {boolean}
 */
CANNON.Ray.prototype.intersectWorld = function(world, options) {};
/**
 * @constructor
 * @struct
 */
CANNON.RaycastResult = function() {};
/** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.rayFromWorld;
/** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.rayToWorld;
/** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.hitNormalWorld;
/** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.hitPointWorld;
/** @type {number} */
CANNON.RaycastResult.prototype.hitFaceIndex;
/** @type {boolean} */
CANNON.RaycastResult.prototype.hasHit;
/** @type {!CANNON.Shape} */
CANNON.RaycastResult.prototype.shape;
/** @type {!CANNON.Body} */
CANNON.RaycastResult.prototype.body;
/** @type {number} */
CANNON.RaycastResult.prototype.distance;

/**
 * @return {void}
 */
CANNON.RaycastResult.prototype.abort = function() {};

/**
 * @return {void}
 */
CANNON.RaycastResult.prototype.reset = function() {};

/**
 * @param {!CANNON.Vec3} rayFromWorld
 * @param {!CANNON.Vec3} rayToWorld
 * @param {!CANNON.Vec3} hitNormalWorld
 * @param {!CANNON.Vec3} hitPointWorld
 * @param {!CANNON.Shape} shape
 * @param {!CANNON.Body} body
 * @param {number} distance
 * @return {void}
 */
CANNON.RaycastResult.prototype.set = function(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {};

/**
 * @extends {CANNON.Broadphase}
 * @constructor
 * @struct
 * @param {!CANNON.World=} world
 */
CANNON.SAPBroadphase = function(world) {};
/** @type {!Array<?>} */
CANNON.SAPBroadphase.prototype.axisList;
/** @type {!CANNON.World} */
CANNON.SAPBroadphase.prototype.world;
/** @type {number} */
CANNON.SAPBroadphase.prototype.axisIndex;

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortX = function(a) {};

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortY = function(a) {};

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortZ = function(a) {};

/**
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number=} axisIndex
 * @return {boolean}
 */
CANNON.SAPBroadphase.checkBounds = function(bi, bj, axisIndex) {};

/**
 * @return {void}
 */
CANNON.SAPBroadphase.prototype.autoDetectAxis = function() {};

/**
 * @param {!CANNON.World} world
 * @param {!CANNON.AABB} aabb
 * @param {!Array<!CANNON.Body>=} result
 * @return {!Array<!CANNON.Body>}
 */
CANNON.SAPBroadphase.prototype.aabbQuery = function(world, aabb, result) {};
/**
 * @record
 * @struct
 */
CANNON.IConstraintOptions = function() {};
/** @type {boolean} */
CANNON.IConstraintOptions.prototype.collideConnected;
/** @type {boolean} */
CANNON.IConstraintOptions.prototype.wakeUpBodies;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IConstraintOptions=} options
 */
CANNON.Constraint = function(bodyA, bodyB, options) {};
/** @type {!Array<?>} */
CANNON.Constraint.prototype.equations;
/** @type {!CANNON.Body} */
CANNON.Constraint.prototype.bodyA;
/** @type {!CANNON.Body} */
CANNON.Constraint.prototype.bodyB;
/** @type {number} */
CANNON.Constraint.prototype.id;
/** @type {boolean} */
CANNON.Constraint.prototype.collideConnected;

/**
 * @return {void}
 */
CANNON.Constraint.prototype.update = function() {};

/**
 * @return {void}
 */
CANNON.Constraint.prototype.disable = function() {};

/**
 * @return {void}
 */
CANNON.Constraint.prototype.enable = function() {};

/**
 * @extends {CANNON.Constraint}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {number=} distance
 * @param {number=} maxForce
 */
CANNON.DistanceConstraint = function(bodyA, bodyB, distance, maxForce) {};
/** @type {number} */
CANNON.DistanceConstraint.prototype.distance;
/** @type {!CANNON.ContactEquation} */
CANNON.DistanceConstraint.prototype.distanceEquation;
/**
 * @record
 * @struct
 */
CANNON.IHingeConstraintOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.pivotA;
/** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.axisA;
/** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.pivotB;
/** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.axisB;
/** @type {number} */
CANNON.IHingeConstraintOptions.prototype.maxForce;

/**
 * @extends {CANNON.Constraint}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IHingeConstraintOptions=} options
 */
CANNON.HingeConstraint = function(bodyA, bodyB, options) {};
/** @type {!CANNON.Vec3} */
CANNON.HingeConstraint.prototype.axisA;
/** @type {!CANNON.Vec3} */
CANNON.HingeConstraint.prototype.axisB;
/** @type {!CANNON.RotationalEquation} */
CANNON.HingeConstraint.prototype.rotationalEquation1;
/** @type {!CANNON.RotationalEquation} */
CANNON.HingeConstraint.prototype.rotationalEquation2;
/** @type {boolean} */
CANNON.HingeConstraint.prototype.motorEnabled;
/** @type {number} */
CANNON.HingeConstraint.prototype.motorTargetVelocity;
/** @type {number} */
CANNON.HingeConstraint.prototype.motorMinForce;
/** @type {number} */
CANNON.HingeConstraint.prototype.motorMaxForce;
/** @type {!CANNON.RotationalMotorEquation} */
CANNON.HingeConstraint.prototype.motorEquation;

/**
 * @return {void}
 */
CANNON.HingeConstraint.prototype.enableMotor = function() {};

/**
 * @return {void}
 */
CANNON.HingeConstraint.prototype.disableMotor = function() {};

/**
 * @param {number} maxForce
 * @return {void}
 */
CANNON.HingeConstraint.prototype.setMotorMaxForce = function(maxForce) {};

/**
 * @param {number} speed
 * @return {void}
 */
CANNON.HingeConstraint.prototype.setMotorSpeed = function(speed) {};

/**
 * @extends {CANNON.Constraint}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Vec3} pivotA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.Vec3} pivotB
 * @param {number=} maxForce
 */
CANNON.PointToPointConstraint = function(bodyA, pivotA, bodyB, pivotB, maxForce) {};
/** @type {!CANNON.ContactEquation} */
CANNON.PointToPointConstraint.prototype.equationX;
/** @type {!CANNON.ContactEquation} */
CANNON.PointToPointConstraint.prototype.equationY;
/** @type {!CANNON.ContactEquation} */
CANNON.PointToPointConstraint.prototype.equationZ;
/** @type {!CANNON.Vec3} */
CANNON.PointToPointConstraint.prototype.pivotA;
/** @type {!CANNON.Vec3} */
CANNON.PointToPointConstraint.prototype.pivotB;

/**
 * @extends {CANNON.PointToPointConstraint}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IHingeConstraintOptions=} options
 */
CANNON.ConeTwistConstraint = function(bodyA, bodyB, options) {};
/** @type {!CANNON.ConeEquation} */
CANNON.ConeTwistConstraint.prototype.coneEquation;
/** @type {!CANNON.RotationalEquation} */
CANNON.ConeTwistConstraint.prototype.twistEquation;

/**
 * @extends {CANNON.PointToPointConstraint}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {number=} maxForce
 */
CANNON.LockConstraint = function(bodyA, bodyB, maxForce) {};
/** @type {!CANNON.RotationalEquation} */
CANNON.LockConstraint.prototype.rotationalEquation1;
/** @type {!CANNON.RotationalEquation} */
CANNON.LockConstraint.prototype.rotationalEquation2;
/** @type {!CANNON.RotationalEquation} */
CANNON.LockConstraint.prototype.rotationalEquation3;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number=} minForce
 * @param {number=} maxForce
 */
CANNON.Equation = function(bi, bj, minForce, maxForce) {};
/** @type {number} */
CANNON.Equation.prototype.id;
/** @type {number} */
CANNON.Equation.prototype.minForce;
/** @type {number} */
CANNON.Equation.prototype.maxForce;
/** @type {!CANNON.Body} */
CANNON.Equation.prototype.bi;
/** @type {!CANNON.Body} */
CANNON.Equation.prototype.bj;
/** @type {number} */
CANNON.Equation.prototype.a;
/** @type {number} */
CANNON.Equation.prototype.b;
/** @type {number} */
CANNON.Equation.prototype.eps;
/** @type {!CANNON.JacobianElement} */
CANNON.Equation.prototype.jacobianElementA;
/** @type {!CANNON.JacobianElement} */
CANNON.Equation.prototype.jacobianElementB;
/** @type {boolean} */
CANNON.Equation.prototype.enabled;

/**
 * @param {number} stiffness
 * @param {number} relaxation
 * @param {number} timeStep
 * @return {void}
 */
CANNON.Equation.prototype.setSpookParams = function(stiffness, relaxation, timeStep) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
CANNON.Equation.prototype.computeB = function(a, b, h) {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGq = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGW = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGWlamda = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGiMf = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGiMGt = function() {};

/**
 * @param {number} deltalambda
 * @return {number}
 */
CANNON.Equation.prototype.addToWlamda = function(deltalambda) {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeC = function() {};

/**
 * @param {number} eps
 * @return {number}
 */
CANNON.Equation.prototype.computeInvC = function(eps) {};

/**
 * @extends {CANNON.Equation}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number} slipForce
 */
CANNON.FrictionEquation = function(bi, bj, slipForce) {};
/**
 * @record
 * @struct
 */
CANNON.IRotationalEquationOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IRotationalEquationOptions.prototype.axisA;
/** @type {!CANNON.Vec3} */
CANNON.IRotationalEquationOptions.prototype.axisB;
/** @type {number} */
CANNON.IRotationalEquationOptions.prototype.maxForce;

/**
 * @extends {CANNON.Equation}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IRotationalEquationOptions=} options
 */
CANNON.RotationalEquation = function(bodyA, bodyB, options) {};
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.ni;
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.nj;
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.nixnj;
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.njxni;
/** @type {!CANNON.Mat3} */
CANNON.RotationalEquation.prototype.invIi;
/** @type {!CANNON.Mat3} */
CANNON.RotationalEquation.prototype.invIj;
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.relVel;
/** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.relForce;

/**
 * @extends {CANNON.Equation}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {number=} maxForce
 */
CANNON.RotationalMotorEquation = function(bodyA, bodyB, maxForce) {};
/** @type {!CANNON.Vec3} */
CANNON.RotationalMotorEquation.prototype.axisA;
/** @type {!CANNON.Vec3} */
CANNON.RotationalMotorEquation.prototype.axisB;
/** @type {!CANNON.Mat3} */
CANNON.RotationalMotorEquation.prototype.invLi;
/** @type {!CANNON.Mat3} */
CANNON.RotationalMotorEquation.prototype.invIj;
/** @type {number} */
CANNON.RotationalMotorEquation.prototype.targetVelocity;
/**
 * @record
 * @struct
 */
CANNON.IConeEquationOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IConeEquationOptions.prototype.axisA;
/** @type {!CANNON.Vec3} */
CANNON.IConeEquationOptions.prototype.axisB;
/** @type {number} */
CANNON.IConeEquationOptions.prototype.maxForce;

/**
 * @extends {CANNON.Equation}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IConeEquationOptions=} options
 */
CANNON.ConeEquation = function(bodyA, bodyB, options) {};
/** @type {number} */
CANNON.ConeEquation.prototype.angle;

/**
 * @extends {CANNON.Equation}
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 */
CANNON.ContactEquation = function(bi, bj) {};
/** @type {number} */
CANNON.ContactEquation.prototype.restitution;
/** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.ri;
/** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.rj;
/** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.ni;

/**
 * @return {number}
 */
CANNON.ContactEquation.prototype.getImpactVelocityAlongNormal = function() {};
/**
 * @record
 * @struct
 */
CANNON.IContactMaterialOptions = function() {};
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.friction;
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.restitution;
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.contactEquationStiffness;
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.contactEquationRelaxation;
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.frictionEquationStiffness;
/** @type {number} */
CANNON.IContactMaterialOptions.prototype.frictionEquationRelaxation;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Material} m1
 * @param {!CANNON.Material} m2
 * @param {!CANNON.IContactMaterialOptions=} options
 */
CANNON.ContactMaterial = function(m1, m2, options) {};
/** @type {number} */
CANNON.ContactMaterial.prototype.id;
/** @type {!Array<!CANNON.Material>} */
CANNON.ContactMaterial.prototype.materials;
/** @type {number} */
CANNON.ContactMaterial.prototype.friction;
/** @type {number} */
CANNON.ContactMaterial.prototype.restitution;
/** @type {number} */
CANNON.ContactMaterial.prototype.contactEquationStiffness;
/** @type {number} */
CANNON.ContactMaterial.prototype.contactEquationRelaxation;
/** @type {number} */
CANNON.ContactMaterial.prototype.frictionEquationStiffness;
/** @type {number} */
CANNON.ContactMaterial.prototype.frictionEquationRelaxation;
/**
 * @record
 * @struct
 */
CANNON.IMaterialOptions = function() {};
/** @type {number} */
CANNON.IMaterialOptions.prototype.friction;
/** @type {number} */
CANNON.IMaterialOptions.prototype.restitution;

/**
 * @constructor
 * @struct
 * @param {(string|!CANNON.IMaterialOptions)=} options
 */
CANNON.Material = function(options) {};
/** @type {string} */
CANNON.Material.prototype.name;
/** @type {number} */
CANNON.Material.prototype.id;
/** @type {number} */
CANNON.Material.prototype.friction;
/** @type {number} */
CANNON.Material.prototype.restitution;
/**
 * @constructor
 * @struct
 */
CANNON.JacobianElement = function() {};
/** @type {!CANNON.Vec3} */
CANNON.JacobianElement.prototype.spatial;
/** @type {!CANNON.Vec3} */
CANNON.JacobianElement.prototype.rotational;

/**
 * @param {!CANNON.JacobianElement} element
 * @return {number}
 */
CANNON.JacobianElement.prototype.multiplyElement = function(element) {};

/**
 * @param {!CANNON.Vec3} spacial
 * @param {!CANNON.Vec3} rotational
 * @return {number}
 */
CANNON.JacobianElement.prototype.multiplyVectors = function(spacial, rotational) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>=} elements
 */
CANNON.Mat3 = function(elements) {};
/** @type {!Array<number>} */
CANNON.Mat3.prototype.elements;

/**
 * @return {void}
 */
CANNON.Mat3.prototype.identity = function() {};

/**
 * @return {void}
 */
CANNON.Mat3.prototype.setZero = function() {};

/**
 * @param {!CANNON.Vec3} vec3
 * @return {void}
 */
CANNON.Mat3.prototype.setTrace = function(vec3) {};

/**
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.Mat3.prototype.getTrace = function(target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Mat3.prototype.vmult = function(v, target) {};

/**
 * @param {number} s
 * @return {void}
 */
CANNON.Mat3.prototype.smult = function(s) {};

/**
 * @param {!CANNON.Mat3} m
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.mmult = function(m) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.scale = function(v, target) {};

/**
 * @param {!CANNON.Vec3} b
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Mat3.prototype.solve = function(b, target) {};

/**
 * @param {number} row
 * @param {number} column
 * @param {number=} value
 * @return {number}
 */
CANNON.Mat3.prototype.e = function(row, column, value) {};

/**
 * @param {!CANNON.Mat3} source
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.copy = function(source) {};

/**
 * @return {string}
 */
CANNON.Mat3.prototype.toString = function() {};

/**
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.reverse = function(target) {};

/**
 * @param {!CANNON.Quaternion} q
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.setRotationFromQuaternion = function(q) {};

/**
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.transpose = function(target) {};

/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 * @param {!Array<number>} vertices
 * @param {!Array<number>} indices
 */
CANNON.Trimesh = function(vertices, indices) {};
/** @type {!CANNON.AABB} */
CANNON.Trimesh.prototype.aabb;
/** @type {!Array<number>} */
CANNON.Trimesh.prototype.edges;
/** @type {!Array<number>} */
CANNON.Trimesh.prototype.indices;
/** @type {!Array<number>} */
CANNON.Trimesh.prototype.normals;
/** @type {!CANNON.Vec3} */
CANNON.Trimesh.prototype.scale;
/** @type {!CANNON.Octree} */
CANNON.Trimesh.prototype.tree;
/** @type {!Array<number>} */
CANNON.Trimesh.prototype.vertices;

/**
 * @param {!CANNON.Vec3} va
 * @param {!CANNON.Vec3} vb
 * @param {!CANNON.Vec3} vc
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.Trimesh.computeNormal = function(va, vb, vc, target) {};

/**
 * @param {number=} radius
 * @param {number=} tube
 * @param {number=} radialSegments
 * @param {number=} tubularSegments
 * @param {number=} arc
 * @return {!CANNON.Trimesh}
 */
CANNON.Trimesh.createTorus = function(radius, tube, radialSegments, tubularSegments, arc) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!CANNON.Vec3} min
 * @param {!CANNON.Vec3} max
 * @return {void}
 */
CANNON.Trimesh.prototype.calculateWorldAABB = function(pos, quat, min, max) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {void}
 */
CANNON.Trimesh.prototype.computeLocalAABB = function(aabb) {};

/**
 * @param {number} edgeIndex
 * @param {!CANNON.Vec3} vectorStore
 * @return {void}
 */
CANNON.Trimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore) {};

/**
 * @param {number} edgeIndex
 * @param {number} firstOrSecond
 * @param {!CANNON.Vec3} vertexStore
 * @return {void}
 */
CANNON.Trimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore) {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.Trimesh.prototype.getNormal = function(i, target) {};

/**
 * @param {!CANNON.AABB} aabb
 * @param {!Array<number>} result
 * @return {void}
 */
CANNON.Trimesh.prototype.getTrianglesAABB = function(aabb, result) {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} a
 * @param {!CANNON.Vec3} b
 * @param {!CANNON.Vec3} c
 * @return {void}
 */
CANNON.Trimesh.prototype.getTriangleVertices = function(i, a, b, c) {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} out
 * @return {!CANNON.Vec3}
 */
CANNON.Trimesh.prototype.getVertex = function(i, out) {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!CANNON.Vec3} out
 * @return {!CANNON.Vec3}
 */
CANNON.Trimesh.prototype.getWorldVertex = function(i, pos, quat, out) {};

/**
 * @param {!CANNON.Vec3} scale
 * @return {void}
 */
CANNON.Trimesh.prototype.setScale = function(scale) {};

/**
 * @return {void}
 */
CANNON.Trimesh.prototype.updateAABB = function() {};

/**
 * @return {void}
 */
CANNON.Trimesh.prototype.updateEdges = function() {};

/**
 * @return {void}
 */
CANNON.Trimesh.prototype.updateNormals = function() {};

/**
 * @return {void}
 */
CANNON.Trimesh.prototype.updateTree = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @param {number=} w
 */
CANNON.Quaternion = function(x, y, z, w) {};
/** @type {number} */
CANNON.Quaternion.prototype.x;
/** @type {number} */
CANNON.Quaternion.prototype.y;
/** @type {number} */
CANNON.Quaternion.prototype.z;
/** @type {number} */
CANNON.Quaternion.prototype.w;

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} w
 * @return {void}
 */
CANNON.Quaternion.prototype.set = function(x, y, z, w) {};

/**
 * @return {string}
 */
CANNON.Quaternion.prototype.toString = function() {};

/**
 * @return {!Array<number>}
 */
CANNON.Quaternion.prototype.toArray = function() {};

/**
 * @param {!CANNON.Vec3} axis
 * @param {number} angle
 * @return {void}
 */
CANNON.Quaternion.prototype.setFromAxisAngle = function(axis, angle) {};

/**
 * @param {!CANNON.Vec3=} targetAxis
 * @return {!Array<?>}
 */
CANNON.Quaternion.prototype.toAxisAngle = function(targetAxis) {};

/**
 * @param {!CANNON.Vec3} u
 * @param {!CANNON.Vec3} v
 * @return {void}
 */
CANNON.Quaternion.prototype.setFromVectors = function(u, v) {};

/**
 * @param {!CANNON.Quaternion} q
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.mult = function(q, target) {};

/**
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.inverse = function(target) {};

/**
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.conjugate = function(target) {};

/**
 * @return {void}
 */
CANNON.Quaternion.prototype.normalize = function() {};

/**
 * @return {void}
 */
CANNON.Quaternion.prototype.normalizeFast = function() {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Quaternion.prototype.vmult = function(v, target) {};

/**
 * @param {!CANNON.Quaternion} source
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.copy = function(source) {};

/**
 * @param {!CANNON.Vec3} target
 * @param {string=} order
 * @return {void}
 */
CANNON.Quaternion.prototype.toEuler = function(target, order) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {string=} order
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.setFromEuler = function(x, y, z, order) {};

/**
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.Transform = function() {};
/** @type {!CANNON.Vec3} */
CANNON.Transform.prototype.position;
/** @type {!CANNON.Quaternion} */
CANNON.Transform.prototype.quaternion;

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.pointToLocalFrame = function(position, quaternion, worldPoint, result) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} localPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.pointToWorldFrame = function(position, quaternion, localPoint, result) {};

/**
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} localVector
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.vectorToWorldFrame = function(quaternion, localVector, result) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} worldVector
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.vectorToLocalFrame = function(position, quaternion, worldVector, result) {};

/**
 * @param {!CANNON.Vec3} point
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.prototype.pointToLocal = function(point, result) {};

/**
 * @param {!CANNON.Vec3} point
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.prototype.pointToWorld = function(point, result) {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 */
CANNON.Vec3 = function(x, y, z) {};
/** @type {!CANNON.Vec3} */
CANNON.Vec3.ZERO;
/** @type {!CANNON.Vec3} */
CANNON.Vec3.UNIT_X;
/** @type {!CANNON.Vec3} */
CANNON.Vec3.UNIT_Y;
/** @type {!CANNON.Vec3} */
CANNON.Vec3.UNIT_Z;
/** @type {number} */
CANNON.Vec3.prototype.x;
/** @type {number} */
CANNON.Vec3.prototype.y;
/** @type {number} */
CANNON.Vec3.prototype.z;

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.cross = function(v, target) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.set = function(x, y, z) {};

/**
 * @return {void}
 */
CANNON.Vec3.prototype.setZero = function() {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.vadd = function(v, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.vsub = function(v, target) {};

/**
 * @return {!CANNON.Mat3}
 */
CANNON.Vec3.prototype.crossmat = function() {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.normalize = function() {};

/**
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.unit = function(target) {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.norm = function() {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.norm2 = function() {};

/**
 * @param {!CANNON.Vec3} p
 * @return {number}
 */
CANNON.Vec3.prototype.distanceTo = function(p) {};

/**
 * @param {!CANNON.Vec3} p
 * @return {number}
 */
CANNON.Vec3.prototype.distanceSquared = function(p) {};

/**
 * @param {number} scalar
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.mult = function(scalar, target) {};

/**
 * @param {number} scalar
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.scale = function(scalar, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @return {number}
 */
CANNON.Vec3.prototype.dot = function(v) {};

/**
 * @return {boolean}
 */
CANNON.Vec3.prototype.isZero = function() {};

/**
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.negate = function(target) {};

/**
 * @param {!CANNON.Vec3} t1
 * @param {!CANNON.Vec3} t2
 * @return {void}
 */
CANNON.Vec3.prototype.tangents = function(t1, t2) {};

/**
 * @return {string}
 */
CANNON.Vec3.prototype.toString = function() {};

/**
 * @return {!Array<number>}
 */
CANNON.Vec3.prototype.toArray = function() {};

/**
 * @param {!CANNON.Vec3} source
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.copy = function(source) {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.length = function() {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.lengthSquared = function() {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number} t
 * @param {!CANNON.Vec3=} target
 * @return {void}
 */
CANNON.Vec3.prototype.lerp = function(v, t, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number=} precision
 * @return {boolean}
 */
CANNON.Vec3.prototype.almostEquals = function(v, precision) {};

/**
 * @param {number=} precision
 * @return {boolean}
 */
CANNON.Vec3.prototype.almostZero = function(precision) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number=} prescision
 * @return {boolean}
 */
CANNON.Vec3.prototype.isAntiparallelTo = function(v, prescision) {};

/**
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.clone = function() {};
/**
 * @record
 * @struct
 */
CANNON.IBodyOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.position;
/** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.velocity;
/** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.angularVelocity;
/** @type {!CANNON.Quaternion} */
CANNON.IBodyOptions.prototype.quaternion;
/** @type {number} */
CANNON.IBodyOptions.prototype.mass;
/** @type {!CANNON.Material} */
CANNON.IBodyOptions.prototype.material;
/** @type {number} */
CANNON.IBodyOptions.prototype.type;
/** @type {number} */
CANNON.IBodyOptions.prototype.linearDamping;
/** @type {number} */
CANNON.IBodyOptions.prototype.angularDamping;
/** @type {boolean} */
CANNON.IBodyOptions.prototype.allowSleep;
/** @type {number} */
CANNON.IBodyOptions.prototype.sleepSpeedLimit;
/** @type {number} */
CANNON.IBodyOptions.prototype.sleepTimeLimit;
/** @type {number} */
CANNON.IBodyOptions.prototype.collisionFilterGroup;
/** @type {number} */
CANNON.IBodyOptions.prototype.collisionFilterMask;
/** @type {boolean} */
CANNON.IBodyOptions.prototype.fixedRotation;
/** @type {!CANNON.Shape} */
CANNON.IBodyOptions.prototype.shape;

/**
 * @extends {CANNON.EventTarget}
 * @constructor
 * @struct
 * @param {!CANNON.IBodyOptions=} options
 */
CANNON.Body = function(options) {};
/** @type {number} */
CANNON.Body.DYNAMIC;
/** @type {number} */
CANNON.Body.STATIC;
/** @type {number} */
CANNON.Body.KINEMATIC;
/** @type {number} */
CANNON.Body.AWAKE;
/** @type {number} */
CANNON.Body.SLEEPY;
/** @type {number} */
CANNON.Body.SLEEPING;
/** @type {!CANNON.IEvent} */
CANNON.Body.sleepyEvent;
/** @type {!CANNON.IEvent} */
CANNON.Body.sleepEvent;
/** @type {number} */
CANNON.Body.prototype.id;
/** @type {number} */
CANNON.Body.prototype.layaID;
/** @type {boolean} */
CANNON.Body.prototype.isTrigger;
/** @type {!CANNON.World} */
CANNON.Body.prototype.world;
/** @type {!Function} */
CANNON.Body.prototype.preStep;
/** @type {!Function} */
CANNON.Body.prototype.postStep;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.vlambda;
/** @type {number} */
CANNON.Body.prototype.collisionFilterGroup;
/** @type {number} */
CANNON.Body.prototype.collisionFilterMask;
/** @type {boolean} */
CANNON.Body.prototype.collisionResponse;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.position;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.previousPosition;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initPosition;
/** @type {number} */
CANNON.Body.prototype.boundingRadius;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.velocity;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initVelocity;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.force;
/** @type {number} */
CANNON.Body.prototype.mass;
/** @type {number} */
CANNON.Body.prototype.invMass;
/** @type {!CANNON.Material} */
CANNON.Body.prototype.material;
/** @type {number} */
CANNON.Body.prototype.linearDamping;
/** @type {number} */
CANNON.Body.prototype.type;
/** @type {boolean} */
CANNON.Body.prototype.allowSleep;
/** @type {number} */
CANNON.Body.prototype.sleepState;
/** @type {number} */
CANNON.Body.prototype.sleepSpeedLimit;
/** @type {number} */
CANNON.Body.prototype.sleepTimeLimit;
/** @type {number} */
CANNON.Body.prototype.timeLastSleepy;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.torque;
/** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.quaternion;
/** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.initQuaternion;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.angularVelocity;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initAngularVelocity;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.interpolatedPosition;
/** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.interpolatedQuaternion;
/** @type {!Array<!CANNON.Shape>} */
CANNON.Body.prototype.shapes;
/** @type {!Array<?>} */
CANNON.Body.prototype.shapeOffsets;
/** @type {!Array<?>} */
CANNON.Body.prototype.shapeOrientations;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.inertia;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.invInertia;
/** @type {!CANNON.Mat3} */
CANNON.Body.prototype.invInertiaWorld;
/** @type {number} */
CANNON.Body.prototype.invMassSolve;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.invInertiaSolve;
/** @type {!CANNON.Mat3} */
CANNON.Body.prototype.invInteriaWorldSolve;
/** @type {boolean} */
CANNON.Body.prototype.fixedRotation;
/** @type {number} */
CANNON.Body.prototype.angularDamping;
/** @type {!CANNON.AABB} */
CANNON.Body.prototype.aabb;
/** @type {boolean} */
CANNON.Body.prototype.aabbNeedsUpdate;
/** @type {!CANNON.Vec3} */
CANNON.Body.prototype.wlambda;

/**
 * @return {void}
 */
CANNON.Body.prototype.wakeUp = function() {};

/**
 * @return {void}
 */
CANNON.Body.prototype.sleep = function() {};

/**
 * @param {number} time
 * @return {void}
 */
CANNON.Body.prototype.sleepTick = function(time) {};

/**
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.pointToLocalFrame = function(worldPoint, result) {};

/**
 * @param {!CANNON.Vec3} localPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.pointToWorldFrame = function(localPoint, result) {};

/**
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.vectorToLocalFrame = function(worldPoint, result) {};

/**
 * @param {!CANNON.Vec3} localVector
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.vectorToWorldFrame = function(localVector, result) {};

/**
 * @param {!CANNON.Shape} shape
 * @param {!CANNON.Vec3=} offset
 * @param {!CANNON.Vec3=} orientation
 * @return {void}
 */
CANNON.Body.prototype.addShape = function(shape, offset, orientation) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.computeAABB = function() {};

/**
 * @param {!CANNON.Vec3} force
 * @param {!CANNON.Vec3} worldPoint
 * @return {void}
 */
CANNON.Body.prototype.applyForce = function(force, worldPoint) {};

/**
 * @param {!CANNON.Vec3} impulse
 * @param {!CANNON.Vec3} worldPoint
 * @return {void}
 */
CANNON.Body.prototype.applyImpulse = function(impulse, worldPoint) {};

/**
 * @param {!CANNON.Vec3} force
 * @param {!CANNON.Vec3} localPoint
 * @return {void}
 */
CANNON.Body.prototype.applyLocalForce = function(force, localPoint) {};

/**
 * @param {!CANNON.Vec3} impulse
 * @param {!CANNON.Vec3} localPoint
 * @return {void}
 */
CANNON.Body.prototype.applyLocalImplse = function(impulse, localPoint) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateBoundingRadius = function() {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateMassProperties = function() {};

/**
 * @param {!CANNON.Vec3} force
 * @return {void}
 */
CANNON.Body.prototype.updateInertiaWorld = function(force) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateSolveMassProperties = function() {};

/**
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.getVelocityAtWorldPoint = function(worldPoint, result) {};
/**
 * @record
 * @struct
 */
CANNON.IWheelInfoOptions = function() {};
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.chassisConnectionPointLocal;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.chassisConnectionPointWorld;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.directionLocal;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.directionWorld;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axleLocal;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axleWorld;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionRestLength;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionMaxLength;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.radius;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionStiffness;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.dampingCompression;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.dampingRelaxation;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.frictionSlip;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.steering;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.rotation;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.deltaRotation;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.rollInfluence;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.maxSuspensionForce;
/** @type {boolean} */
CANNON.IWheelInfoOptions.prototype.isFrontWheel;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.clippedInvContactDotSuspension;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionRelativeVelocity;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionForce;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.skidInfo;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionLength;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.maxSuspensionTravel;
/** @type {boolean} */
CANNON.IWheelInfoOptions.prototype.useCustomSlidingRotationalSpeed;
/** @type {number} */
CANNON.IWheelInfoOptions.prototype.customSlidingRotationalSpeed;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.position;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.direction;
/** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axis;
/** @type {!CANNON.Body} */
CANNON.IWheelInfoOptions.prototype.body;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IWheelInfoOptions=} options
 */
CANNON.WheelInfo = function(options) {};
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.axleLocal;
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.axleWorld;
/** @type {number} */
CANNON.WheelInfo.prototype.brake;
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.chassisConnectionPointLocal;
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.chassisConnectionPointWorld;
/** @type {number} */
CANNON.WheelInfo.prototype.clippedInvContactDotSuspension;
/** @type {number} */
CANNON.WheelInfo.prototype.customSlidingRotationalSpeed;
/** @type {number} */
CANNON.WheelInfo.prototype.dampingCompression;
/** @type {number} */
CANNON.WheelInfo.prototype.dampingRelaxation;
/** @type {number} */
CANNON.WheelInfo.prototype.deltaRotation;
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.directionLocal;
/** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.directionWorld;
/** @type {number} */
CANNON.WheelInfo.prototype.engineForce;
/** @type {number} */
CANNON.WheelInfo.prototype.forwardImpulse;
/** @type {number} */
CANNON.WheelInfo.prototype.frictionSlip;
/** @type {boolean} */
CANNON.WheelInfo.prototype.isFrontWheel;
/** @type {boolean} */
CANNON.WheelInfo.prototype.isInContact;
/** @type {number} */
CANNON.WheelInfo.prototype.maxSuspensionForce;
/** @type {number} */
CANNON.WheelInfo.prototype.maxSuspensionTravel;
/** @type {number} */
CANNON.WheelInfo.prototype.radius;
/** @type {!CANNON.RaycastResult} */
CANNON.WheelInfo.prototype.raycastResult;
/** @type {number} */
CANNON.WheelInfo.prototype.rollInfluence;
/** @type {number} */
CANNON.WheelInfo.prototype.rotation;
/** @type {number} */
CANNON.WheelInfo.prototype.sideImpulse;
/** @type {number} */
CANNON.WheelInfo.prototype.skidInfo;
/** @type {boolean} */
CANNON.WheelInfo.prototype.sliding;
/** @type {number} */
CANNON.WheelInfo.prototype.steering;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionForce;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionLength;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionMaxLength;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionRelativeVelocity;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionStiffness;
/** @type {number} */
CANNON.WheelInfo.prototype.suspensionRestLength;
/** @type {boolean} */
CANNON.WheelInfo.prototype.useCustomSlidingRotationalSpeed;
/** @type {!CANNON.Transform} */
CANNON.WheelInfo.prototype.worldTransform;
/**
 * @record
 * @struct
 */
CANNON.IRaycastVehicleOptions = function() {};
/** @type {!CANNON.Body} */
CANNON.IRaycastVehicleOptions.prototype.chassisBody;
/** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexRightAxis;
/** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexLeftAxis;
/** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexUpAxis;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IRaycastVehicleOptions=} options
 */
CANNON.RaycastVehicle = function(options) {};
/** @type {!CANNON.Body} */
CANNON.RaycastVehicle.prototype.chassisBody;
/** @type {!Array<!CANNON.IWheelInfoOptions>} */
CANNON.RaycastVehicle.prototype.wheelInfos;
/** @type {boolean} */
CANNON.RaycastVehicle.prototype.sliding;
/** @type {!CANNON.World} */
CANNON.RaycastVehicle.prototype.world;
/** @type {number} */
CANNON.RaycastVehicle.prototype.iindexRightAxis;
/** @type {number} */
CANNON.RaycastVehicle.prototype.indexForwardAxis;
/** @type {number} */
CANNON.RaycastVehicle.prototype.indexUpAxis;

/**
 * @param {!CANNON.IWheelInfoOptions=} options
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.addWheel = function(options) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex) {};

/**
 * @param {number} brake
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.setBrake = function(brake, wheelIndex) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.addToWorld = function(world) {};

/**
 * @param {number} axisIndex
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.RaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result) {};

/**
 * @param {number} timeStep
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.updateVehicle = function(timeStep) {};

/**
 * @param {number} deltaTime
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.updateSuspension = function(deltaTime) {};

/**
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.updateWheelTransform = function(wheelIndex) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.removeFromWorld = function(world) {};

/**
 * @param {number} wheelIndex
 * @return {!CANNON.Transform}
 */
CANNON.RaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {};
/**
 * @record
 * @struct
 */
CANNON.IRigidVehicleOptions = function() {};
/** @type {!CANNON.Body} */
CANNON.IRigidVehicleOptions.prototype.chassisBody;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IRigidVehicleOptions=} options
 */
CANNON.RigidVehicle = function(options) {};
/** @type {!Array<!CANNON.Body>} */
CANNON.RigidVehicle.prototype.wheelBodies;
/** @type {!CANNON.Vec3} */
CANNON.RigidVehicle.prototype.coordinateSystem;
/** @type {!CANNON.Body} */
CANNON.RigidVehicle.prototype.chassisBody;
/** @type {!Array<!CANNON.Constraint>} */
CANNON.RigidVehicle.prototype.constraints;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.RigidVehicle.prototype.wheelAxes;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.RigidVehicle.prototype.wheelForces;

/**
 * @param {!CANNON.IWheelInfoOptions=} options
 * @return {!CANNON.Body}
 */
CANNON.RigidVehicle.prototype.addWheel = function(options) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setSteeringValue = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex) {};

/**
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.disableMotor = function(wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setWheelForce = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.applyWheelForce = function(value, wheelIndex) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RigidVehicle.prototype.addToWorld = function(world) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RigidVehicle.prototype.removeFromWorld = function(world) {};

/**
 * @param {number} wheelIndex
 * @return {number}
 */
CANNON.RigidVehicle.prototype.getWheelSpeed = function(wheelIndex) {};
/**
 * @constructor
 * @struct
 */
CANNON.SPHSystem = function() {};
/** @type {!Array<!CANNON.Particle>} */
CANNON.SPHSystem.prototype.particles;
/** @type {number} */
CANNON.SPHSystem.prototype.density;
/** @type {number} */
CANNON.SPHSystem.prototype.smoothingRadius;
/** @type {number} */
CANNON.SPHSystem.prototype.speedOfSound;
/** @type {number} */
CANNON.SPHSystem.prototype.viscosity;
/** @type {number} */
CANNON.SPHSystem.prototype.eps;
/** @type {!Array<number>} */
CANNON.SPHSystem.prototype.pressures;
/** @type {!Array<number>} */
CANNON.SPHSystem.prototype.densities;
/** @type {!Array<number>} */
CANNON.SPHSystem.prototype.neighbors;

/**
 * @param {!CANNON.Particle} particle
 * @return {void}
 */
CANNON.SPHSystem.prototype.add = function(particle) {};

/**
 * @param {!CANNON.Particle} particle
 * @return {void}
 */
CANNON.SPHSystem.prototype.remove = function(particle) {};

/**
 * @param {!CANNON.Particle} particle
 * @param {!Array<!CANNON.Particle>} neighbors
 * @return {void}
 */
CANNON.SPHSystem.prototype.getNeighbors = function(particle, neighbors) {};

/**
 * @return {void}
 */
CANNON.SPHSystem.prototype.update = function() {};

/**
 * @param {number} r
 * @return {number}
 */
CANNON.SPHSystem.prototype.w = function(r) {};

/**
 * @param {!CANNON.Vec3} rVec
 * @param {!CANNON.Vec3} resultVec
 * @return {void}
 */
CANNON.SPHSystem.prototype.gradw = function(rVec, resultVec) {};

/**
 * @param {number} r
 * @return {number}
 */
CANNON.SPHSystem.prototype.nablaw = function(r) {};
/**
 * @record
 * @struct
 */
CANNON.ISpringOptions = function() {};
/** @type {number} */
CANNON.ISpringOptions.prototype.restLength;
/** @type {number} */
CANNON.ISpringOptions.prototype.stiffness;
/** @type {number} */
CANNON.ISpringOptions.prototype.damping;
/** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.worldAnchorA;
/** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.worldAnchorB;
/** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.localAnchorA;
/** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.localAnchorB;

/**
 * @constructor
 * @struct
 * @param {!CANNON.ISpringOptions=} options
 */
CANNON.Spring = function(options) {};
/** @type {number} */
CANNON.Spring.prototype.restLength;
/** @type {number} */
CANNON.Spring.prototype.stffness;
/** @type {number} */
CANNON.Spring.prototype.damping;
/** @type {!CANNON.Body} */
CANNON.Spring.prototype.bodyA;
/** @type {!CANNON.Body} */
CANNON.Spring.prototype.bodyB;
/** @type {!CANNON.Vec3} */
CANNON.Spring.prototype.localAnchorA;
/** @type {!CANNON.Vec3} */
CANNON.Spring.prototype.localAnchorB;

/**
 * @param {!CANNON.Vec3} worldAnchorA
 * @return {void}
 */
CANNON.Spring.prototype.setWorldAnchorA = function(worldAnchorA) {};

/**
 * @param {!CANNON.Vec3} worldAnchorB
 * @return {void}
 */
CANNON.Spring.prototype.setWorldAnchorB = function(worldAnchorB) {};

/**
 * @param {!CANNON.Vec3} result
 * @return {void}
 */
CANNON.Spring.prototype.getWorldAnchorA = function(result) {};

/**
 * @param {!CANNON.Vec3} result
 * @return {void}
 */
CANNON.Spring.prototype.getWorldAnchorB = function(result) {};

/**
 * @return {void}
 */
CANNON.Spring.prototype.applyForce = function() {};

/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 * @param {!CANNON.Vec3} halfExtents
 */
CANNON.Box = function(halfExtents) {};
/** @type {!CANNON.Vec3} */
CANNON.Box.prototype.halfExtents;
/** @type {!CANNON.ConvexPolyhedron} */
CANNON.Box.prototype.convexPolyhedronRepresentation;

/**
 * @param {!CANNON.Vec3} halfExtents
 * @param {number} mass
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.Box.calculateInertia = function(halfExtents, mass, target) {};

/**
 * @return {void}
 */
CANNON.Box.prototype.updateConvexPolyhedronRepresentation = function() {};

/**
 * @param {boolean} sixTargetVectors
 * @param {!CANNON.Quaternion=} quat
 * @return {!Array<!CANNON.Vec3>}
 */
CANNON.Box.prototype.getSideNormals = function(sixTargetVectors, quat) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!Function} callback
 * @return {void}
 */
CANNON.Box.prototype.forEachWorldCorner = function(pos, quat, callback) {};

/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 * @param {!Array<!CANNON.Vec3>=} points
 * @param {!Array<number>=} faces
 */
CANNON.ConvexPolyhedron = function(points, faces) {};
/** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.vertices;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.worldVertices;
/** @type {boolean} */
CANNON.ConvexPolyhedron.prototype.worldVerticesNeedsUpdate;
/** @type {!Array<number>} */
CANNON.ConvexPolyhedron.prototype.faces;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.faceNormals;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.uniqueEdges;
/** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.uniqueAxes;

/**
 * @param {!CANNON.Vec3} va
 * @param {!CANNON.Vec3} vb
 * @param {!CANNON.Vec3} vc
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.ConvexPolyhedron.computeNormal = function(va, vb, vc, target) {};

/**
 * @param {!CANNON.ConvexPolyhedron} hull
 * @param {!CANNON.Vec3} axis
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!Array<number>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.project = function(hull, axis, pos, quat, result) {};

/**
 * @param {!CANNON.Vec3} va
 * @param {!CANNON.Vec3} vb
 * @param {!CANNON.Vec3} vc
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.ConvexPolyhedron.getFaceNormal = function(va, vb, vc, target) {};

/**
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeEdges = function() {};

/**
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeNormals = function() {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.getFaceNormal = function(i, target) {};

/**
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} hullB
 * @param {!CANNON.Quaternion} quatB
 * @param {!CANNON.Vec3} separatingNormal
 * @param {number} minDist
 * @param {number} maxDist
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.clipAgainstHull = function(posA, quatA, hullB, quatB, separatingNormal, minDist, maxDist, result) {};

/**
 * @param {!CANNON.ConvexPolyhedron} hullB
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} posB
 * @param {!CANNON.Quaternion} quatB
 * @param {!CANNON.Vec3} target
 * @param {!Array<?>} faceListA
 * @param {!Array<?>} faceListB
 * @return {boolean}
 */
CANNON.ConvexPolyhedron.prototype.findSeparatingAxis = function(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {};

/**
 * @param {!CANNON.Vec3} axis
 * @param {!CANNON.ConvexPolyhedron} hullB
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} posB
 * @param {!CANNON.Quaternion} quatB
 * @return {number}
 */
CANNON.ConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB) {};

/**
 * @param {number} face_i
 * @return {number}
 */
CANNON.ConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i) {};

/**
 * @param {!CANNON.Vec3} separatingNormal
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!Array<!CANNON.Vec3>} worldVertsB1
 * @param {number} minDist
 * @param {number} maxDist
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {};

/**
 * @param {!Array<!CANNON.Vec3>} inVertices
 * @param {!Array<!CANNON.Vec3>} outVertices
 * @param {!CANNON.Vec3} planeNormal
 * @param {number} planeConstant
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices, outVertices, planeNormal, planeConstant) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeWorldVertices = function(position, quat) {};

/**
 * @param {!CANNON.Vec3} aabbmin
 * @param {!CANNON.Vec3} aabbmax
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin, aabbmax) {};

/**
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!CANNON.Vec3} min
 * @param {!CANNON.Vec3} max
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.calculateWorldAABB = function(pos, quat, min, max) {};

/**
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.getAveragePointLocal = function(target) {};

/**
 * @param {!CANNON.Vec3} offset
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.transformAllPoints = function(offset, quat) {};

/**
 * @param {!CANNON.Vec3} p
 * @return {boolean}
 */
CANNON.ConvexPolyhedron.prototype.pointIsInside = function(p) {};

/**
 * @extends {CANNON.ConvexPolyhedron}
 * @constructor
 * @struct
 * @param {number} radiusTop
 * @param {number} radiusBottom
 * @param {number} height
 * @param {number} numSegments
 */
CANNON.Cylinder = function(radiusTop, radiusBottom, height, numSegments) {};
/**
 * @record
 * @struct
 */
CANNON.IHightfieldOptions = function() {};
/** @type {number} */
CANNON.IHightfieldOptions.prototype.minValue;
/** @type {number} */
CANNON.IHightfieldOptions.prototype.maxValue;
/** @type {number} */
CANNON.IHightfieldOptions.prototype.elementSize;

/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 * @param {!Array<number>} data
 * @param {!CANNON.IHightfieldOptions=} options
 */
CANNON.Heightfield = function(data, options) {};
/** @type {!Array<number>} */
CANNON.Heightfield.prototype.data;
/** @type {number} */
CANNON.Heightfield.prototype.maxValue;
/** @type {number} */
CANNON.Heightfield.prototype.minValue;
/** @type {number} */
CANNON.Heightfield.prototype.elementSize;
/** @type {boolean} */
CANNON.Heightfield.prototype.cacheEnabled;
/** @type {!CANNON.ConvexPolyhedron} */
CANNON.Heightfield.prototype.pillarConvex;
/** @type {!CANNON.Vec3} */
CANNON.Heightfield.prototype.pillarOffset;
/** @type {number} */
CANNON.Heightfield.prototype.type;

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.update = function() {};

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.updateMinValue = function() {};

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.updateMaxValue = function() {};

/**
 * @param {number} xi
 * @param {number} yi
 * @param {number} value
 * @return {void}
 */
CANNON.Heightfield.prototype.setHeightValueAtIndex = function(xi, yi, value) {};

/**
 * @param {number} iMinX
 * @param {number} iMinY
 * @param {number} iMaxX
 * @param {number} iMaxY
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.Heightfield.prototype.getRectMinMax = function(iMinX, iMinY, iMaxX, iMaxY, result) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} result
 * @param {boolean} clamp
 * @return {boolean}
 */
CANNON.Heightfield.prototype.getIndexOfPosition = function(x, y, result, clamp) {};

/**
 * @param {number} xi
 * @param {number} yi
 * @param {boolean} getUpperTriangle
 * @return {void}
 */
CANNON.Heightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle) {};
/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 */
CANNON.Particle = function() {};
/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 */
CANNON.Plane = function() {};
/** @type {!CANNON.Vec3} */
CANNON.Plane.prototype.worldNormal;
/** @type {boolean} */
CANNON.Plane.prototype.worldNormalNeedsUpdate;
/** @type {number} */
CANNON.Plane.prototype.boundingSphereRadius;

/**
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.Plane.prototype.computeWorldNormal = function(quat) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {number} min
 * @param {number} max
 * @return {void}
 */
CANNON.Plane.prototype.calculateWorldAABB = function(pos, quat, min, max) {};
/**
 * @constructor
 * @struct
 */
CANNON.Shape = function() {};
/** @type {{SPHERE: number, PLANE: number, BOX: number, COMPOUND: number, CONVEXPOLYHEDRON: number, HEIGHTFIELD: number, PARTICLE: number, CYLINDER: number}} */
CANNON.Shape.types;
/** @type {number} */
CANNON.Shape.prototype.id;
/** @type {number} */
CANNON.Shape.prototype.type;
/** @type {number} */
CANNON.Shape.prototype.boundingSphereRadius;
/** @type {boolean} */
CANNON.Shape.prototype.collisionResponse;

/**
 * @return {number}
 */
CANNON.Shape.prototype.updateBoundingSphereRadius = function() {};

/**
 * @return {number}
 */
CANNON.Shape.prototype.volume = function() {};

/**
 * @param {number} mass
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Shape.prototype.calculateLocalInertia = function(mass, target) {};

/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 * @param {number} radius
 */
CANNON.Sphere = function(radius) {};
/** @type {number} */
CANNON.Sphere.prototype.radius;
/**
 * @extends {CANNON.Solver}
 * @constructor
 * @struct
 */
CANNON.GSSolver = function() {};
/** @type {number} */
CANNON.GSSolver.prototype.iterations;
/** @type {number} */
CANNON.GSSolver.prototype.tolerance;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.GSSolver.prototype.solve = function(dy, world) {};
/**
 * @constructor
 * @struct
 */
CANNON.Solver = function() {};
/** @type {!Array<!CANNON.Equation>} */
CANNON.Solver.prototype.equations;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.Solver.prototype.solve = function(dy, world) {};

/**
 * @param {!CANNON.Equation} eq
 * @return {void}
 */
CANNON.Solver.prototype.addEquation = function(eq) {};

/**
 * @param {!CANNON.Equation} eq
 * @return {void}
 */
CANNON.Solver.prototype.removeEquation = function(eq) {};

/**
 * @return {void}
 */
CANNON.Solver.prototype.removeAllEquations = function() {};

/**
 * @extends {CANNON.Solver}
 * @constructor
 * @struct
 * @param {!CANNON.Solver} subsolver
 */
CANNON.SplitSolver = function(subsolver) {};
/** @type {!CANNON.Solver} */
CANNON.SplitSolver.prototype.subsolver;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.SplitSolver.prototype.solve = function(dy, world) {};
/**
 * @constructor
 * @struct
 */
CANNON.EventTarget = function() {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.EventTarget.prototype.addEventListener = function(type, listener) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {boolean}
 */
CANNON.EventTarget.prototype.hasEventListener = function(type, listener) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.EventTarget.prototype.removeEventListener = function(type, listener) {};

/**
 * @param {!CANNON.IEvent} event
 * @return {!CANNON.IEvent}
 */
CANNON.EventTarget.prototype.dispatchEvent = function(event) {};
/**
 * @constructor
 * @struct
 */
CANNON.Pool = function() {};
/** @type {!Array<?>} */
CANNON.Pool.prototype.objects;
/** @type {!Array<?>} */
CANNON.Pool.prototype.type;

/**
 * @return {?}
 */
CANNON.Pool.prototype.release = function() {};

/**
 * @return {?}
 */
CANNON.Pool.prototype.get = function() {};

/**
 * @return {?}
 */
CANNON.Pool.prototype.constructObject = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.TupleDictionary = function() {};
/** @type {{keys: !Array<?>}} */
CANNON.TupleDictionary.prototype.data;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.TupleDictionary.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number} value
 * @return {void}
 */
CANNON.TupleDictionary.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.TupleDictionary.prototype.reset = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.Utils = function() {};

/**
 * @param {?=} options
 * @param {?=} defaults
 * @return {?}
 */
CANNON.Utils.defaults = function(options, defaults) {};
/**
 * @extends {CANNON.Pool}
 * @constructor
 * @struct
 */
CANNON.Vec3Pool = function() {};

/**
 * @param {!Object} options
 * @param {!Object} defaults
 * @return {!Object}
 */
CANNON.Vec3Pool.defaults = function(options, defaults) {};

/**
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3Pool.prototype.constructObject = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.NarrowPhase = function() {};
/** @type {!Array<!CANNON.Pool>} */
CANNON.NarrowPhase.prototype.contactPointPool;
/** @type {boolean} */
CANNON.NarrowPhase.prototype.enableFrictionReduction;
/** @type {!CANNON.Vec3Pool} */
CANNON.NarrowPhase.prototype.v3pool;

/**
 * @param {!CANNON.Shape} convexShape
 * @param {!CANNON.Heightfield} hfShape
 * @param {!CANNON.Vec3} convexPos
 * @param {!CANNON.Vec3} hfPos
 * @param {!CANNON.Quaternion} convexQuat
 * @param {!CANNON.Quaternion} hfQuat
 * @param {!CANNON.Body} convexBody
 * @param {!CANNON.Body} hfBody
 * @return {void}
 */
CANNON.NarrowPhase.prototype.convexHeightfield = function(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.convexConvex = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.convexParticle = function(result, si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.convexTrimesh = function(result, si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Shape} rsi
 * @param {!CANNON.Shape} rsj
 * @return {!CANNON.ContactEquation}
 */
CANNON.NarrowPhase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj) {};

/**
 * @param {!Array<!CANNON.Body>} p1
 * @param {!Array<!CANNON.Body>} p2
 * @param {!CANNON.World} world
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!Array<!CANNON.ContactEquation>} oldcontacts
 * @return {void}
 */
CANNON.NarrowPhase.prototype.getContacts = function(p1, p2, world, result, oldcontacts) {};

/**
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.particlePlane = function(result, si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.particleSphere = function(result, si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!Array<!CANNON.ContactEquation>} result
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.planeBox = function(result, si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.planeConvex = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.planeTrimesh = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.sphereBox = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.sphereConvex = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} sphereShape
 * @param {!CANNON.Heightfield} hfShape
 * @param {!CANNON.Vec3} spherePos
 * @param {!CANNON.Vec3} hfPos
 * @param {!CANNON.Quaternion} sphereQuat
 * @param {!CANNON.Quaternion} hfQuat
 * @param {!CANNON.Body} sphereBody
 * @param {!CANNON.Body} hfBody
 * @return {void}
 */
CANNON.NarrowPhase.prototype.sphereHeightfield = function(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.spherePlane = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} si
 * @param {!CANNON.Shape} sj
 * @param {!CANNON.Vec3} xi
 * @param {!CANNON.Vec3} xj
 * @param {!CANNON.Quaternion} qi
 * @param {!CANNON.Quaternion} qj
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @return {void}
 */
CANNON.NarrowPhase.prototype.sphereSphere = function(si, sj, xi, xj, qi, qj, bi, bj) {};

/**
 * @param {!CANNON.Shape} sphereShape
 * @param {!CANNON.Shape} trimeshShape
 * @param {!CANNON.Vec3} spherePos
 * @param {!CANNON.Vec3} trimeshPos
 * @param {!CANNON.Quaternion} sphereQuat
 * @param {!CANNON.Quaternion} trimeshQuat
 * @param {!CANNON.Body} sphereBody
 * @param {!CANNON.Body} trimeshBody
 * @return {void}
 */
CANNON.NarrowPhase.prototype.sphereTrimesh = function(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody) {};
/**
 * @record
 * @struct
 */
CANNON.IOctreeOptions = function() {};
/** @type {!CANNON.Octree} */
CANNON.IOctreeOptions.prototype.root;
/** @type {!CANNON.AABB} */
CANNON.IOctreeOptions.prototype.aabb;
/**
 * @constructor
 * @struct
 */
CANNON.OctreeNode = function() {};
/** @type {!CANNON.AABB} */
CANNON.OctreeNode.prototype.aabb;
/** @type {!Array<!CANNON.Octree>} */
CANNON.OctreeNode.prototype.children;
/** @type {!Array<number>} */
CANNON.OctreeNode.prototype.data;
/** @type {!CANNON.OctreeNode} */
CANNON.OctreeNode.prototype.root;

/**
 * @extends {CANNON.OctreeNode}
 * @constructor
 * @struct
 * @param {!CANNON.AABB} aabb
 * @param {!CANNON.IOctreeOptions} options
 */
CANNON.Octree = function(aabb, options) {};
/** @type {number} */
CANNON.Octree.prototype.maxDepth;

/**
 * @param {!CANNON.AABB} aabb
 * @param {!Array<!Object>} result
 * @return {!Array<!Object>}
 */
CANNON.Octree.prototype.aabbQuery = function(aabb, result) {};

/**
 * @param {!CANNON.AABB} aabb
 * @param {!Object} elementData
 * @return {boolean}
 */
CANNON.Octree.prototype.insert = function(aabb, elementData) {};

/**
 * @param {!CANNON.Ray} ray
 * @param {!CANNON.Transform} treeTransform
 * @param {!Array<!Object>} result
 * @return {!Array<!Object>}
 */
CANNON.Octree.prototype.rayQuery = function(ray, treeTransform, result) {};

/**
 * @return {void}
 */
CANNON.Octree.prototype.removeEmptyNodes = function() {};

/**
 * @return {void}
 */
CANNON.Octree.prototype.subdivide = function() {};
/**
 * @record
 * @struct
 */
CANNON.IWorld = function() {};
/** @type {number} */
CANNON.IWorld.prototype.collisisonFilterMask;
/** @type {number} */
CANNON.IWorld.prototype.collisionFilterGroup;
/** @type {boolean} */
CANNON.IWorld.prototype.skipBackfaces;
/** @type {boolean} */
CANNON.IWorld.prototype.checkCollisionResponse;
/**
 * @extends {CANNON.EventTarget}
 * @constructor
 * @struct
 */
CANNON.World = function() {};
/** @type {number} */
CANNON.World.prototype.dt;
/** @type {boolean} */
CANNON.World.prototype.allowSleep;
/** @type {!Array<!CANNON.ContactEquation>} */
CANNON.World.prototype.contacts;
/** @type {!Array<!CANNON.FrictionEquation>} */
CANNON.World.prototype.frictionEquations;
/** @type {number} */
CANNON.World.prototype.quatNormalizeSkip;
/** @type {boolean} */
CANNON.World.prototype.quatNormalizeFast;
/** @type {number} */
CANNON.World.prototype.time;
/** @type {number} */
CANNON.World.prototype.stepnumber;
/** @type {number} */
CANNON.World.prototype.default_dt;
/** @type {number} */
CANNON.World.prototype.nextId;
/** @type {!CANNON.Vec3} */
CANNON.World.prototype.gravity;
/** @type {!CANNON.NaiveBroadphase} */
CANNON.World.prototype.broadphase;
/** @type {!Array<!CANNON.Body>} */
CANNON.World.prototype.bodies;
/** @type {!Array<!CANNON.ContactEquation>} */
CANNON.World.prototype.allContacts;
/** @type {!Array<!CANNON.Body>} */
CANNON.World.prototype.callBackBody;
/** @type {!CANNON.Solver} */
CANNON.World.prototype.solver;
/** @type {!Array<!CANNON.Constraint>} */
CANNON.World.prototype.constraints;
/** @type {!CANNON.NarrowPhase} */
CANNON.World.prototype.narrowPhase;
/** @type {!CANNON.ArrayCollisionMatrix} */
CANNON.World.prototype.collisionMatrix;
/** @type {!CANNON.ArrayCollisionMatrix} */
CANNON.World.prototype.collisionMatrixPrevious;
/** @type {!Array<!CANNON.Material>} */
CANNON.World.prototype.materials;
/** @type {!Array<!CANNON.ContactMaterial>} */
CANNON.World.prototype.contactMaterials;
/** @type {!CANNON.TupleDictionary} */
CANNON.World.prototype.contactMaterialTable;
/** @type {!CANNON.Material} */
CANNON.World.prototype.defaultMaterial;
/** @type {!CANNON.ContactMaterial} */
CANNON.World.prototype.defaultContactMaterial;
/** @type {boolean} */
CANNON.World.prototype.doProfiling;
/** @type {{solve: number, makeContactConstraints: number, broadphaser: number, integrate: number, narrowphase: number}} */
CANNON.World.prototype.profile;
/** @type {!Array<?>} */
CANNON.World.prototype.subsystems;
/** @type {!CANNON.IBodyEvent} */
CANNON.World.prototype.addBodyEvent;
/** @type {!CANNON.IBodyEvent} */
CANNON.World.prototype.removeBodyEvent;

/**
 * @param {!CANNON.Body} body
 * @return {void}
 */
CANNON.World.prototype.addBody = function(body) {};

/**
 * @param {!CANNON.Constraint} c
 * @return {void}
 */
CANNON.World.prototype.addConstraint = function(c) {};

/**
 * @param {!CANNON.ContactMaterial} cmat
 * @return {void}
 */
CANNON.World.prototype.addContactMaterial = function(cmat) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.World.prototype.addEventListener = function(type, listener) {};

/**
 * @param {!CANNON.Material} m
 * @return {void}
 */
CANNON.World.prototype.addMaterial = function(m) {};

/**
 * @return {void}
 */
CANNON.World.prototype.clearForces = function() {};

/**
 * @return {void}
 */
CANNON.World.prototype.collisionMatrixTick = function() {};

/**
 * @param {!CANNON.Material} m1
 * @param {!CANNON.Material} m2
 * @return {!CANNON.ContactMaterial}
 */
CANNON.World.prototype.getContactMaterial = function(m1, m2) {};

/**
 * @return {number}
 */
CANNON.World.prototype.numObjects = function() {};

/**
 * @param {!CANNON.Vec3} from
 * @param {!CANNON.Vec3} to
 * @param {!CANNON.IWorld} options
 * @param {!Function} callback
 * @return {boolean}
 */
CANNON.World.prototype.raycastAll = function(from, to, options, callback) {};

/**
 * @param {!CANNON.Vec3} from
 * @param {!CANNON.Vec3} to
 * @param {!CANNON.IWorld} options
 * @param {!CANNON.RaycastResult} result
 * @return {boolean}
 */
CANNON.World.prototype.raycastAny = function(from, to, options, result) {};

/**
 * @param {!CANNON.Vec3} from
 * @param {!CANNON.Vec3} to
 * @param {!CANNON.IWorld} options
 * @param {!CANNON.RaycastResult} result
 * @return {boolean}
 */
CANNON.World.prototype.raycastClosest = function(from, to, options, result) {};

/**
 * @param {!CANNON.Vec3} from
 * @param {!CANNON.Vec3} to
 * @param {!CANNON.RaycastResult} result
 * @return {void}
 */
CANNON.World.prototype.rayTest = function(from, to, result) {};

/**
 * @param {!CANNON.Body} body
 * @return {void}
 */
CANNON.World.prototype.remove = function(body) {};

/**
 * @param {!CANNON.Body} body
 * @return {void}
 */
CANNON.World.prototype.removeBody = function(body) {};

/**
 * @param {!CANNON.Constraint} c
 * @return {void}
 */
CANNON.World.prototype.removeConstraint = function(c) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.World.prototype.removeEventListener = function(type, listener) {};

/**
 * @param {number} dy
 * @param {number=} timeSinceLastCalled
 * @param {number=} maxSubSteps
 * @return {void}
 */
CANNON.World.prototype.step = function(dy, timeSinceLastCalled, maxSubSteps) {};
/**
 * @record
 * @struct
 */
CANNON.IEvent = function() {};
/** @type {string} */
CANNON.IEvent.prototype.type;
/**
 * @extends {CANNON.IEvent}
 * @record
 * @struct
 */
CANNON.IBodyEvent = function() {};
/** @type {!CANNON.Body} */
CANNON.IBodyEvent.prototype.body;

/**
 * @constructor
 * @struct
 * @param {!Object} options
 */
CANNON.Demo = function(options) {};

/**
 * @param {string} title
 * @param {!Function} initfunc
 * @return {void}
 */
CANNON.Demo.prototype.addScene = function(title, initfunc) {};

/**
 * @return {void}
 */
CANNON.Demo.prototype.restartCurrentScene = function() {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/fairygui.d.ts
/** @const */
var fgui = {};

/**
 * @constructor
 * @struct
 */
fgui.AssetProxy = function() {};
/** @type {?} */
fgui.AssetProxy.prototype._asset;
/** @type {?} */
fgui.AssetProxy._inst;
/** @type {!fairygui.AssetProxy} */
fgui.AssetProxy.inst;

/**
 * @param {string} url
 * @return {?}
 */
fgui.AssetProxy.prototype.getRes = function(url) {};

/**
 * @param {?} url
 * @param {!Handler=} complete
 * @param {!Handler=} progress
 * @param {string=} type
 * @param {number=} priority
 * @param {boolean=} cache
 * @return {void}
 */
fgui.AssetProxy.prototype.load = function(url, complete, progress, type, priority, cache) {};

/**
 * @param {?} asset
 * @return {void}
 */
fgui.AssetProxy.prototype.setAsset = function(asset) {};

/**
 * @constructor
 * @struct
 */
fgui.AsyncOperation = function() {};
/** @type {!Handler} */
fgui.AsyncOperation.prototype.callback;
/** @type {?} */
fgui.AsyncOperation.prototype._itemList;
/** @type {?} */
fgui.AsyncOperation.prototype._objectPool;
/** @type {?} */
fgui.AsyncOperation.prototype._index;
/** @type {?} */
fgui.AsyncOperation.prototype.internalCreateObject;
/** @type {?} */
fgui.AsyncOperation.prototype.collectComponentChildren;
/** @type {?} */
fgui.AsyncOperation.prototype.collectListChildren;
/** @type {?} */
fgui.AsyncOperation.prototype.run;

/**
 * @param {string} pkgName
 * @param {string} resName
 * @return {void}
 */
fgui.AsyncOperation.prototype.createObject = function(pkgName, resName) {};

/**
 * @param {string} url
 * @return {void}
 */
fgui.AsyncOperation.prototype.createObjectFromURL = function(url) {};

/**
 * @return {void}
 */
fgui.AsyncOperation.prototype.cancel = function() {};

/**
 * @extends {Laya.EventDispatcher}
 * @constructor
 * @struct
 */
fgui.Controller = function() {};
/** @type {?} */
fgui.Controller.prototype._selectedIndex;
/** @type {?} */
fgui.Controller.prototype._previousIndex;
/** @type {?} */
fgui.Controller.prototype._pageIds;
/** @type {?} */
fgui.Controller.prototype._pageNames;
/** @type {?|undefined} */
fgui.Controller.prototype._actions;
/** @type {string} */
fgui.Controller.prototype.name;
/** @type {!fairygui.GComponent} */
fgui.Controller.prototype.parent;
/** @type {boolean} */
fgui.Controller.prototype.autoRadioGroupDepth;
/** @type {boolean} */
fgui.Controller.prototype.changing;
/** @type {number} */
fgui.Controller.prototype.selectedIndex;
/** @type {number} */
fgui.Controller.prototype.previsousIndex;
/** @type {string} */
fgui.Controller.prototype.selectedPage;
/** @type {string} */
fgui.Controller.prototype.previousPage;
/** @type {number} */
fgui.Controller.prototype.pageCount;
/** @type {string} */
fgui.Controller.prototype.selectedPageId;
/** @type {string} */
fgui.Controller.prototype.oppositePageId;
/** @type {string} */
fgui.Controller.prototype.previousPageId;

/**
 * @return {void}
 */
fgui.Controller.prototype.dispose = function() {};

/**
 * 功能和设置selectedIndex一样，但不会触发事件
 * @param {number} value
 * @return {void}
 */
fgui.Controller.prototype.setSelectedIndex = function(value) {};

/**
 * 功能和设置selectedPage一样，但不会触发事件
 * @param {string} value
 * @return {void}
 */
fgui.Controller.prototype.setSelectedPage = function(value) {};

/**
 * @param {number} index
 * @return {string}
 */
fgui.Controller.prototype.getPageName = function(index) {};

/**
 * @param {string} name
 * @return {void}
 */
fgui.Controller.prototype.addPage = function(name) {};

/**
 * @param {string} name
 * @param {number} index
 * @return {void}
 */
fgui.Controller.prototype.addPageAt = function(name, index) {};

/**
 * @param {string} name
 * @return {void}
 */
fgui.Controller.prototype.removePage = function(name) {};

/**
 * @param {number} index
 * @return {void}
 */
fgui.Controller.prototype.removePageAt = function(index) {};

/**
 * @return {void}
 */
fgui.Controller.prototype.clearPages = function() {};

/**
 * @param {string} aName
 * @return {boolean}
 */
fgui.Controller.prototype.hasPage = function(aName) {};

/**
 * @param {string} aId
 * @return {number}
 */
fgui.Controller.prototype.getPageIndexById = function(aId) {};

/**
 * @param {string} aName
 * @return {string}
 */
fgui.Controller.prototype.getPageIdByName = function(aName) {};

/**
 * @param {string} aId
 * @return {string}
 */
fgui.Controller.prototype.getPageNameById = function(aId) {};

/**
 * @param {number} index
 * @return {string}
 */
fgui.Controller.prototype.getPageId = function(index) {};

/**
 * @return {void}
 */
fgui.Controller.prototype.runActions = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.Controller.prototype.setup = function(buffer) {};

/**
 * @constructor
 * @struct
 */
fgui.DragDropManager = function() {};
/** @type {?} */
fgui.DragDropManager.prototype._agent;
/** @type {?} */
fgui.DragDropManager.prototype._sourceData;
/** @type {?} */
fgui.DragDropManager._inst;
/** @type {!fairygui.DragDropManager} */
fgui.DragDropManager.inst;
/** @type {!fairygui.GObject} */
fgui.DragDropManager.prototype.dragAgent;
/** @type {boolean} */
fgui.DragDropManager.prototype.dragging;
/** @type {?} */
fgui.DragDropManager.prototype.__dragEnd;

/**
 * @param {!fairygui.GObject} source
 * @param {string} icon
 * @param {?=} sourceData
 * @param {number=} touchID
 * @return {void}
 */
fgui.DragDropManager.prototype.startDrag = function(source, icon, sourceData, touchID) {};

/**
 * @return {void}
 */
fgui.DragDropManager.prototype.cancel = function() {};
/**
 * @constructor
 * @struct
 */
fgui.Events = function() {};
/** @type {string} */
fgui.Events.STATE_CHANGED;
/** @type {string} */
fgui.Events.XY_CHANGED;
/** @type {string} */
fgui.Events.SIZE_CHANGED;
/** @type {string} */
fgui.Events.SIZE_DELAY_CHANGE;
/** @type {string} */
fgui.Events.CLICK_ITEM;
/** @type {string} */
fgui.Events.SCROLL;
/** @type {string} */
fgui.Events.SCROLL_END;
/** @type {string} */
fgui.Events.DROP;
/** @type {string} */
fgui.Events.DRAG_START;
/** @type {string} */
fgui.Events.DRAG_MOVE;
/** @type {string} */
fgui.Events.DRAG_END;
/** @type {string} */
fgui.Events.PULL_DOWN_RELEASE;
/** @type {string} */
fgui.Events.PULL_UP_RELEASE;
/** @type {string} */
fgui.Events.GEAR_STOP;
/** @type {!Laya.Event} */
fgui.Events.$event;

/**
 * @param {string} type
 * @param {!Laya.Sprite} target
 * @param {{target: !Laya.Sprite, touchId: number}=} source
 * @return {!Laya.Event}
 */
fgui.Events.createEvent = function(type, target, source) {};

/**
 * @param {string} type
 * @param {!Laya.Sprite} target
 * @param {{target: !Laya.Sprite, touchId: number}=} source
 * @return {void}
 */
fgui.Events.dispatch = function(type, target, source) {};

/** @enum {number} */
fgui.ButtonMode = {
  Common: 1,
  Check: 1,
  Radio: 1,
};

/** @enum {number} */
fgui.AutoSizeType = {
  None: 1,
  Both: 1,
  Height: 1,
};

/** @enum {number} */
fgui.AlignType = {
  Left: 1,
  Center: 1,
  Right: 1,
};

/** @enum {number} */
fgui.VertAlignType = {
  Top: 1,
  Middle: 1,
  Bottom: 1,
};

/** @enum {number} */
fgui.LoaderFillType = {
  None: 1,
  Scale: 1,
  ScaleMatchHeight: 1,
  ScaleMatchWidth: 1,
  ScaleFree: 1,
  ScaleNoBorder: 1,
};

/** @enum {number} */
fgui.ListLayoutType = {
  SingleColumn: 1,
  SingleRow: 1,
  FlowHorizontal: 1,
  FlowVertical: 1,
  Pagination: 1,
};

/** @enum {number} */
fgui.ListSelectionMode = {
  Single: 1,
  Multiple: 1,
  Multiple_SingleClick: 1,
  None: 1,
};

/** @enum {number} */
fgui.OverflowType = {
  Visible: 1,
  Hidden: 1,
  Scroll: 1,
};

/** @enum {number} */
fgui.PackageItemType = {
  Image: 1,
  MovieClip: 1,
  Sound: 1,
  Component: 1,
  Atlas: 1,
  Font: 1,
  Swf: 1,
  Misc: 1,
  Unknown: 1,
  Spine: 1,
  DragonBones: 1,
};

/** @enum {number} */
fgui.ObjectType = {
  Image: 1,
  MovieClip: 1,
  Swf: 1,
  Graph: 1,
  Loader: 1,
  Group: 1,
  Text: 1,
  RichText: 1,
  InputText: 1,
  Component: 1,
  List: 1,
  Label: 1,
  Button: 1,
  ComboBox: 1,
  ProgressBar: 1,
  Slider: 1,
  ScrollBar: 1,
  Tree: 1,
  Loader3D: 1,
};

/** @enum {number} */
fgui.ProgressTitleType = {
  Percent: 1,
  ValueAndMax: 1,
  Value: 1,
  Max: 1,
};

/** @enum {number} */
fgui.ScrollBarDisplayType = {
  Default: 1,
  Visible: 1,
  Auto: 1,
  Hidden: 1,
};

/** @enum {number} */
fgui.ScrollType = {
  Horizontal: 1,
  Vertical: 1,
  Both: 1,
};

/** @enum {number} */
fgui.FlipType = {
  None: 1,
  Horizontal: 1,
  Vertical: 1,
  Both: 1,
};

/** @enum {number} */
fgui.ChildrenRenderOrder = {
  Ascent: 1,
  Descent: 1,
  Arch: 1,
};

/** @enum {number} */
fgui.GroupLayoutType = {
  None: 1,
  Horizontal: 1,
  Vertical: 1,
};

/** @enum {number} */
fgui.PopupDirection = {
  Auto: 1,
  Up: 1,
  Down: 1,
};

/** @enum {number} */
fgui.RelationType = {
  Left_Left: 1,
  Left_Center: 1,
  Left_Right: 1,
  Center_Center: 1,
  Right_Left: 1,
  Right_Center: 1,
  Right_Right: 1,
  Top_Top: 1,
  Top_Middle: 1,
  Top_Bottom: 1,
  Middle_Middle: 1,
  Bottom_Top: 1,
  Bottom_Middle: 1,
  Bottom_Bottom: 1,
  Width: 1,
  Height: 1,
  LeftExt_Left: 1,
  LeftExt_Right: 1,
  RightExt_Left: 1,
  RightExt_Right: 1,
  TopExt_Top: 1,
  TopExt_Bottom: 1,
  BottomExt_Top: 1,
  BottomExt_Bottom: 1,
  Size: 1,
};

/** @enum {number} */
fgui.FillMethod = {
  None: 1,
  Horizontal: 1,
  Vertical: 1,
  Radial90: 1,
  Radial180: 1,
  Radial360: 1,
};

/** @enum {number} */
fgui.FillOrigin = {
  Top: 1,
  Bottom: 1,
  Left: 1,
  Right: 1,
  TopLeft: 1,
  TopRight: 1,
  BottomLeft: 1,
  BottomRight: 1,
};

/** @enum {number} */
fgui.FillOrigin90 = {
  TopLeft: 1,
  TopRight: 1,
  BottomLeft: 1,
  BottomRight: 1,
};

/** @enum {number} */
fgui.ObjectPropID = {
  Text: 1,
  Icon: 1,
  Color: 1,
  OutlineColor: 1,
  Playing: 1,
  Frame: 1,
  DeltaTime: 1,
  TimeScale: 1,
  FontSize: 1,
  Selected: 1,
};

/**
 * @constructor
 * @struct
 */
fgui.GObject = function() {};
/** @type {!Object} */
fgui.GObject.prototype.data;
/** @type {!fairygui.PackageItem} */
fgui.GObject.prototype.packageItem;
/** @type {!fairygui.GObject} */
fgui.GObject.draggingObject;
/** @type {?} */
fgui.GObject.prototype._x;
/** @type {?} */
fgui.GObject.prototype._y;
/** @type {?} */
fgui.GObject.prototype._alpha;
/** @type {?} */
fgui.GObject.prototype._rotation;
/** @type {?} */
fgui.GObject.prototype._visible;
/** @type {?} */
fgui.GObject.prototype._touchable;
/** @type {?} */
fgui.GObject.prototype._grayed;
/** @type {?|undefined} */
fgui.GObject.prototype._draggable;
/** @type {?} */
fgui.GObject.prototype._scaleX;
/** @type {?} */
fgui.GObject.prototype._scaleY;
/** @type {?} */
fgui.GObject.prototype._skewX;
/** @type {?} */
fgui.GObject.prototype._skewY;
/** @type {?} */
fgui.GObject.prototype._pivotX;
/** @type {?} */
fgui.GObject.prototype._pivotY;
/** @type {?} */
fgui.GObject.prototype._pivotAsAnchor;
/** @type {?} */
fgui.GObject.prototype._pivotOffsetX;
/** @type {?} */
fgui.GObject.prototype._pivotOffsetY;
/** @type {?} */
fgui.GObject.prototype._sortingOrder;
/** @type {?} */
fgui.GObject.prototype._internalVisible;
/** @type {?|undefined} */
fgui.GObject.prototype._handlingController;
/** @type {?|undefined} */
fgui.GObject.prototype._tooltips;
/** @type {?|undefined} */
fgui.GObject.prototype._pixelSnapping;
/** @type {?} */
fgui.GObject.prototype._relations;
/** @type {?|undefined} */
fgui.GObject.prototype._group;
/** @type {?} */
fgui.GObject.prototype._gears;
/** @type {?|undefined} */
fgui.GObject.prototype._dragBounds;
/** @type {?|undefined} */
fgui.GObject.prototype._dragTesting;
/** @type {?|undefined} */
fgui.GObject.prototype._dragStartPos;
/** @type {!Laya.Sprite} */
fgui.GObject.prototype._displayObject;
/** @type {number} */
fgui.GObject.prototype._yOffset;
/** @type {number} */
fgui.GObject.prototype.minWidth;
/** @type {number} */
fgui.GObject.prototype.minHeight;
/** @type {number} */
fgui.GObject.prototype.maxWidth;
/** @type {number} */
fgui.GObject.prototype.maxHeight;
/** @type {number} */
fgui.GObject.prototype.sourceWidth;
/** @type {number} */
fgui.GObject.prototype.sourceHeight;
/** @type {number} */
fgui.GObject.prototype.initWidth;
/** @type {number} */
fgui.GObject.prototype.initHeight;
/** @type {!fairygui.GComponent} */
fgui.GObject.prototype._parent;
/** @type {number} */
fgui.GObject.prototype._width;
/** @type {number} */
fgui.GObject.prototype._height;
/** @type {number} */
fgui.GObject.prototype._rawWidth;
/** @type {number} */
fgui.GObject.prototype._rawHeight;
/** @type {string} */
fgui.GObject.prototype._id;
/** @type {string} */
fgui.GObject.prototype._name;
/** @type {boolean} */
fgui.GObject.prototype._underConstruct;
/** @type {boolean} */
fgui.GObject.prototype._gearLocked;
/** @type {number} */
fgui.GObject.prototype._sizePercentInGroup;
/** @type {!fairygui.GTreeNode} */
fgui.GObject.prototype._treeNode;
/** @type {string} */
fgui.GObject.prototype.id;
/** @type {string} */
fgui.GObject.prototype.name;
/** @type {number} */
fgui.GObject.prototype.x;
/** @type {number} */
fgui.GObject.prototype.y;
/** @type {number} */
fgui.GObject.prototype.xMin;
/** @type {number} */
fgui.GObject.prototype.yMin;
/** @type {boolean} */
fgui.GObject.prototype.pixelSnapping;
/** @type {number} */
fgui.GObject.prototype.width;
/** @type {number} */
fgui.GObject.prototype.height;
/** @type {number} */
fgui.GObject.prototype.actualWidth;
/** @type {number} */
fgui.GObject.prototype.actualHeight;
/** @type {number} */
fgui.GObject.prototype.scaleX;
/** @type {number} */
fgui.GObject.prototype.scaleY;
/** @type {number} */
fgui.GObject.prototype.skewX;
/** @type {number} */
fgui.GObject.prototype.skewY;
/** @type {number} */
fgui.GObject.prototype.pivotX;
/** @type {number} */
fgui.GObject.prototype.pivotY;
/** @type {boolean} */
fgui.GObject.prototype.pivotAsAnchor;
/** @type {?} */
fgui.GObject.prototype.updatePivotOffset;
/** @type {?} */
fgui.GObject.prototype.applyPivot;
/** @type {boolean} */
fgui.GObject.prototype.touchable;
/** @type {boolean} */
fgui.GObject.prototype.grayed;
/** @type {boolean} */
fgui.GObject.prototype.enabled;
/** @type {number} */
fgui.GObject.prototype.rotation;
/** @type {number} */
fgui.GObject.prototype.normalizeRotation;
/** @type {number} */
fgui.GObject.prototype.alpha;
/** @type {boolean} */
fgui.GObject.prototype.visible;
/** @type {boolean} */
fgui.GObject.prototype.internalVisible;
/** @type {boolean} */
fgui.GObject.prototype.internalVisible2;
/** @type {boolean} */
fgui.GObject.prototype.internalVisible3;
/** @type {number} */
fgui.GObject.prototype.sortingOrder;
/** @type {boolean} */
fgui.GObject.prototype.focused;
/** @type {string} */
fgui.GObject.prototype.tooltips;
/** @type {?} */
fgui.GObject.prototype.__rollOver;
/** @type {?} */
fgui.GObject.prototype.__doShowTooltips;
/** @type {?} */
fgui.GObject.prototype.__rollOut;
/** @type {string} */
fgui.GObject.prototype.blendMode;
/** @type {!Array<?>} */
fgui.GObject.prototype.filters;
/** @type {boolean} */
fgui.GObject.prototype.inContainer;
/** @type {boolean} */
fgui.GObject.prototype.onStage;
/** @type {string} */
fgui.GObject.prototype.resourceURL;
/** @type {!fairygui.GGroup} */
fgui.GObject.prototype.group;
/** @type {?} */
fgui.GObject.prototype.checkGearDisplay;
/** @type {!fairygui.Relations} */
fgui.GObject.prototype.relations;
/** @type {!Laya.Sprite} */
fgui.GObject.prototype.displayObject;
/** @type {!fairygui.GComponent} */
fgui.GObject.prototype.parent;
/** @type {!fairygui.GRoot} */
fgui.GObject.prototype.root;
/** @type {!fairygui.GComponent} */
fgui.GObject.prototype.asCom;
/** @type {!fairygui.GButton} */
fgui.GObject.prototype.asButton;
/** @type {!fairygui.GLabel} */
fgui.GObject.prototype.asLabel;
/** @type {!fairygui.GProgressBar} */
fgui.GObject.prototype.asProgress;
/** @type {!fairygui.GTextField} */
fgui.GObject.prototype.asTextField;
/** @type {!fairygui.GRichTextField} */
fgui.GObject.prototype.asRichTextField;
/** @type {!fairygui.GTextInput} */
fgui.GObject.prototype.asTextInput;
/** @type {!fairygui.GLoader} */
fgui.GObject.prototype.asLoader;
/** @type {!fairygui.GList} */
fgui.GObject.prototype.asList;
/** @type {!fairygui.GTree} */
fgui.GObject.prototype.asTree;
/** @type {!fairygui.GGraph} */
fgui.GObject.prototype.asGraph;
/** @type {!fairygui.GGroup} */
fgui.GObject.prototype.asGroup;
/** @type {!fairygui.GSlider} */
fgui.GObject.prototype.asSlider;
/** @type {!fairygui.GComboBox} */
fgui.GObject.prototype.asComboBox;
/** @type {!fairygui.GImage} */
fgui.GObject.prototype.asImage;
/** @type {!fairygui.GMovieClip} */
fgui.GObject.prototype.asMovieClip;
/** @type {string} */
fgui.GObject.prototype.text;
/** @type {string} */
fgui.GObject.prototype.icon;
/** @type {!fairygui.GTreeNode} */
fgui.GObject.prototype.treeNode;
/** @type {boolean} */
fgui.GObject.prototype.isDisposed;
/** @type {boolean} */
fgui.GObject.prototype.draggable;
/** @type {!Laya.Rectangle} */
fgui.GObject.prototype.dragBounds;
/** @type {boolean} */
fgui.GObject.prototype.dragging;
/** @type {?} */
fgui.GObject.prototype.initDrag;
/** @type {?} */
fgui.GObject.prototype.dragBegin;
/** @type {?} */
fgui.GObject.prototype.dragEnd;
/** @type {?} */
fgui.GObject.prototype.reset;
/** @type {?} */
fgui.GObject.prototype.__begin;
/** @type {?} */
fgui.GObject.prototype.__moving;
/** @type {?} */
fgui.GObject.prototype.__end;

/**
 * @param {number} xv
 * @param {number} yv
 * @return {void}
 */
fgui.GObject.prototype.setXY = function(xv, yv) {};

/**
 * @param {boolean=} restraint
 * @return {void}
 */
fgui.GObject.prototype.center = function(restraint) {};

/**
 * @param {number} wv
 * @param {number} hv
 * @param {boolean=} ignorePivot
 * @return {void}
 */
fgui.GObject.prototype.setSize = function(wv, hv, ignorePivot) {};

/**
 * @return {void}
 */
fgui.GObject.prototype.ensureSizeCorrect = function() {};

/**
 * @return {void}
 */
fgui.GObject.prototype.makeFullScreen = function() {};

/**
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
fgui.GObject.prototype.setScale = function(sx, sy) {};

/**
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
fgui.GObject.prototype.setSkew = function(sx, sy) {};

/**
 * @param {number} xv
 * @param {number=} yv
 * @param {boolean=} asAnchor
 * @return {void}
 */
fgui.GObject.prototype.setPivot = function(xv, yv, asAnchor) {};

/**
 * @protected
 * @param {number} xv
 * @param {number} yv
 * @param {boolean} asAnchor
 * @return {void}
 */
fgui.GObject.prototype.internalSetPivot = function(xv, yv, asAnchor) {};

/**
 * @return {void}
 */
fgui.GObject.prototype.requestFocus = function() {};

/**
 * @param {number} index
 * @return {!fairygui.GearBase}
 */
fgui.GObject.prototype.getGear = function(index) {};

/**
 * @protected
 * @param {number} index
 * @return {void}
 */
fgui.GObject.prototype.updateGear = function(index) {};

/**
 * @param {number} index
 * @param {!fairygui.Controller} c
 * @return {boolean}
 */
fgui.GObject.prototype.checkGearController = function(index, c) {};

/**
 * @param {number} index
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.GObject.prototype.updateGearFromRelations = function(index, dx, dy) {};

/**
 * @return {number}
 */
fgui.GObject.prototype.addDisplayLock = function() {};

/**
 * @param {number} token
 * @return {void}
 */
fgui.GObject.prototype.releaseDisplayLock = function(token) {};

/**
 * @param {!fairygui.GObject} target
 * @param {number} relationType
 * @param {boolean=} usePercent
 * @return {void}
 */
fgui.GObject.prototype.addRelation = function(target, relationType, usePercent) {};

/**
 * @param {!fairygui.GObject} target
 * @param {number=} relationType
 * @return {void}
 */
fgui.GObject.prototype.removeRelation = function(target, relationType) {};

/**
 * @return {void}
 */
fgui.GObject.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
fgui.GObject.prototype.dispose = function() {};

/**
 * @param {?} thisObj
 * @param {!Function} listener
 * @param {!Array<?>=} args
 * @return {void}
 */
fgui.GObject.prototype.onClick = function(thisObj, listener, args) {};

/**
 * @param {?} thisObj
 * @param {!Function} listener
 * @return {void}
 */
fgui.GObject.prototype.offClick = function(thisObj, listener) {};

/**
 * @return {boolean}
 */
fgui.GObject.prototype.hasClickListener = function() {};

/**
 * @param {string} type
 * @param {?} thisObject
 * @param {!Function} listener
 * @param {!Array<?>=} args
 * @return {void}
 */
fgui.GObject.prototype.on = function(type, thisObject, listener, args) {};

/**
 * @param {string} type
 * @param {?} thisObject
 * @param {!Function} listener
 * @return {void}
 */
fgui.GObject.prototype.off = function(type, thisObject, listener) {};

/**
 * @param {number=} touchID
 * @return {void}
 */
fgui.GObject.prototype.startDrag = function(touchID) {};

/**
 * @return {void}
 */
fgui.GObject.prototype.stopDrag = function() {};

/**
 * @param {number=} ax
 * @param {number=} ay
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GObject.prototype.localToGlobal = function(ax, ay, result) {};

/**
 * @param {number=} ax
 * @param {number=} ay
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GObject.prototype.globalToLocal = function(ax, ay, result) {};

/**
 * @param {number=} ax
 * @param {number=} ay
 * @param {number=} aw
 * @param {number=} ah
 * @param {!Laya.Rectangle=} result
 * @return {!Laya.Rectangle}
 */
fgui.GObject.prototype.localToGlobalRect = function(ax, ay, aw, ah, result) {};

/**
 * @param {number=} ax
 * @param {number=} ay
 * @param {number=} aw
 * @param {number=} ah
 * @param {!Laya.Rectangle=} result
 * @return {!Laya.Rectangle}
 */
fgui.GObject.prototype.globalToLocalRect = function(ax, ay, aw, ah, result) {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GObject.prototype.handleControllerChanged = function(c) {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.createDisplayObject = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.handleXYChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.handleSizeChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.handleScaleChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.handleGrayedChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GObject.prototype.handleAlphaChanged = function() {};

/**
 * @return {void}
 */
fgui.GObject.prototype.handleVisibleChanged = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GObject.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GObject.prototype.setProp = function(index, value) {};

/**
 * @return {void}
 */
fgui.GObject.prototype.constructFromResource = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GObject.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GObject.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @param {!Laya.Sprite} sprite
 * @return {!fairygui.GObject}
 */
fgui.GObject.cast = function(sprite) {};
/** @type {*} */
fgui.BlendMode;

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GTextField = function() {};
/** @type {!Object<string,string>} */
fgui.GTextField.prototype._templateVars;
/** @type {string} */
fgui.GTextField.prototype._text;
/** @type {number} */
fgui.GTextField.prototype._autoSize;
/** @type {boolean} */
fgui.GTextField.prototype._widthAutoSize;
/** @type {boolean} */
fgui.GTextField.prototype._heightAutoSize;
/** @type {boolean} */
fgui.GTextField.prototype._ubbEnabled;
/** @type {boolean} */
fgui.GTextField.prototype._updatingSize;
/** @type {string} */
fgui.GTextField.prototype.font;
/** @type {number} */
fgui.GTextField.prototype.fontSize;
/** @type {string} */
fgui.GTextField.prototype.color;
/** @type {string} */
fgui.GTextField.prototype.align;
/** @type {string} */
fgui.GTextField.prototype.valign;
/** @type {number} */
fgui.GTextField.prototype.leading;
/** @type {number} */
fgui.GTextField.prototype.letterSpacing;
/** @type {boolean} */
fgui.GTextField.prototype.bold;
/** @type {boolean} */
fgui.GTextField.prototype.italic;
/** @type {boolean} */
fgui.GTextField.prototype.underline;
/** @type {boolean} */
fgui.GTextField.prototype.singleLine;
/** @type {number} */
fgui.GTextField.prototype.stroke;
/** @type {string} */
fgui.GTextField.prototype.strokeColor;
/** @type {boolean} */
fgui.GTextField.prototype.ubbEnabled;
/** @type {number} */
fgui.GTextField.prototype.autoSize;
/** @type {number} */
fgui.GTextField.prototype.textWidth;
/** @type {!Object<string,string>} */
fgui.GTextField.prototype.templateVars;

/**
 * @protected
 * @return {void}
 */
fgui.GTextField.prototype.updateAutoSize = function() {};

/**
 * @protected
 * @param {string} template
 * @return {string}
 */
fgui.GTextField.prototype.parseTemplate = function(template) {};

/**
 * @param {string} name
 * @param {string} value
 * @return {!fairygui.GTextField}
 */
fgui.GTextField.prototype.setVar = function(name, value) {};

/**
 * @return {void}
 */
fgui.GTextField.prototype.flushVars = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GTextField.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GTextField.prototype.setProp = function(index, value) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GTextField.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GTextField.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GTextField}
 * @constructor
 * @struct
 */
fgui.GBasicTextField = function() {};
/** @type {?} */
fgui.GBasicTextField.prototype._textField;
/** @type {?} */
fgui.GBasicTextField.prototype._font;
/** @type {?} */
fgui.GBasicTextField.prototype._color;
/** @type {?} */
fgui.GBasicTextField.prototype._singleLine;
/** @type {?} */
fgui.GBasicTextField.prototype._letterSpacing;
/** @type {?} */
fgui.GBasicTextField.prototype._textWidth;
/** @type {?} */
fgui.GBasicTextField.prototype._textHeight;
/** @type {?|undefined} */
fgui.GBasicTextField.prototype._bitmapFont;
/** @type {?|undefined} */
fgui.GBasicTextField.prototype._lines;
/** @type {!Laya.Text} */
fgui.GBasicTextField.prototype.nativeText;
/** @type {string} */
fgui.GBasicTextField.prototype.text;
/** @type {string} */
fgui.GBasicTextField.prototype.font;
/** @type {number} */
fgui.GBasicTextField.prototype.fontSize;
/** @type {string} */
fgui.GBasicTextField.prototype.color;
/** @type {string} */
fgui.GBasicTextField.prototype.align;
/** @type {string} */
fgui.GBasicTextField.prototype.valign;
/** @type {number} */
fgui.GBasicTextField.prototype.leading;
/** @type {number} */
fgui.GBasicTextField.prototype.letterSpacing;
/** @type {boolean} */
fgui.GBasicTextField.prototype.bold;
/** @type {boolean} */
fgui.GBasicTextField.prototype.italic;
/** @type {boolean} */
fgui.GBasicTextField.prototype.underline;
/** @type {boolean} */
fgui.GBasicTextField.prototype.singleLine;
/** @type {number} */
fgui.GBasicTextField.prototype.stroke;
/** @type {string} */
fgui.GBasicTextField.prototype.strokeColor;
/** @type {number} */
fgui.GBasicTextField.prototype.textWidth;
/** @type {?} */
fgui.GBasicTextField.prototype.updateSize;
/** @type {?} */
fgui.GBasicTextField.prototype.renderWithBitmapFont;
/** @type {?} */
fgui.GBasicTextField.prototype.doAlign;

/**
 * @protected
 * @return {void}
 */
fgui.GBasicTextField.prototype.createDisplayObject = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GBasicTextField.prototype.updateAutoSize = function() {};

/**
 * @return {void}
 */
fgui.GBasicTextField.prototype.ensureSizeCorrect = function() {};

/**
 * @return {void}
 */
fgui.GBasicTextField.prototype.typeset = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GBasicTextField.prototype.handleSizeChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GBasicTextField.prototype.handleGrayedChanged = function() {};

/**
 * @return {void}
 */
fgui.GBasicTextField.prototype.flushVars = function() {};
/**
 * @record
 * @struct
 */
fgui.LineInfo = function() {};
/** @type {number} */
fgui.LineInfo.prototype.width;
/** @type {number} */
fgui.LineInfo.prototype.height;
/** @type {number} */
fgui.LineInfo.prototype.textHeight;
/** @type {string} */
fgui.LineInfo.prototype.text;
/** @type {number} */
fgui.LineInfo.prototype.y;
/**
 * @constructor
 * @struct
 */
fgui.Margin = function() {};
/** @type {number} */
fgui.Margin.prototype.left;
/** @type {number} */
fgui.Margin.prototype.right;
/** @type {number} */
fgui.Margin.prototype.top;
/** @type {number} */
fgui.Margin.prototype.bottom;

/**
 * @param {!fairygui.Margin} source
 * @return {void}
 */
fgui.Margin.prototype.copy = function(source) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GComponent = function() {};
/** @type {?} */
fgui.GComponent.prototype._sortingChildCount;
/** @type {?} */
fgui.GComponent.prototype._opaque;
/** @type {?|undefined} */
fgui.GComponent.prototype._applyingController;
/** @type {?|undefined} */
fgui.GComponent.prototype._mask;
/** @type {!fairygui.Margin} */
fgui.GComponent.prototype._margin;
/** @type {boolean} */
fgui.GComponent.prototype._trackBounds;
/** @type {boolean} */
fgui.GComponent.prototype._boundsChanged;
/** @type {number} */
fgui.GComponent.prototype._childrenRenderOrder;
/** @type {number} */
fgui.GComponent.prototype._apexIndex;
/** @type {boolean} */
fgui.GComponent.prototype._buildingDisplayList;
/** @type {!Array<!fairygui.GObject>} */
fgui.GComponent.prototype._children;
/** @type {!Array<!fairygui.Controller>} */
fgui.GComponent.prototype._controllers;
/** @type {!Array<!fairygui.Transition>} */
fgui.GComponent.prototype._transitions;
/** @type {!Laya.Sprite} */
fgui.GComponent.prototype._container;
/** @type {!fairygui.ScrollPane} */
fgui.GComponent.prototype._scrollPane;
/** @type {!Laya.Point} */
fgui.GComponent.prototype._alignOffset;
/** @type {!Laya.Sprite} */
fgui.GComponent.prototype.displayListContainer;
/** @type {?} */
fgui.GComponent.prototype.getInsertPosForSortingChild;
/** @type {?} */
fgui.GComponent.prototype._setChildIndex;
/** @type {number} */
fgui.GComponent.prototype.numChildren;
/** @type {!Array<!fairygui.Controller>} */
fgui.GComponent.prototype.controllers;
/** @type {?} */
fgui.GComponent.prototype.buildNativeDisplayList;
/** @type {!fairygui.ScrollPane} */
fgui.GComponent.prototype.scrollPane;
/** @type {boolean} */
fgui.GComponent.prototype.opaque;
/** @type {!fairygui.Margin} */
fgui.GComponent.prototype.margin;
/** @type {number} */
fgui.GComponent.prototype.childrenRenderOrder;
/** @type {number} */
fgui.GComponent.prototype.apexIndex;
/** @type {!Laya.Sprite} */
fgui.GComponent.prototype.mask;
/** @type {string} */
fgui.GComponent.prototype.baseUserData;
/** @type {?} */
fgui.GComponent.prototype.__render;
/** @type {number} */
fgui.GComponent.prototype.viewWidth;
/** @type {number} */
fgui.GComponent.prototype.viewHeight;
/** @type {?} */
fgui.GComponent.prototype.___added;
/** @type {?} */
fgui.GComponent.prototype.___removed;

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GComponent.prototype.dispose = function() {};

/**
 * @param {!fairygui.GObject} child
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.addChild = function(child) {};

/**
 * @param {!fairygui.GObject} child
 * @param {number} index
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.addChildAt = function(child, index) {};

/**
 * @param {!fairygui.GObject} child
 * @param {boolean=} dispose
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.removeChild = function(child, dispose) {};

/**
 * @param {number} index
 * @param {boolean=} dispose
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.removeChildAt = function(index, dispose) {};

/**
 * @param {number=} beginIndex
 * @param {number=} endIndex
 * @param {boolean=} dispose
 * @return {void}
 */
fgui.GComponent.prototype.removeChildren = function(beginIndex, endIndex, dispose) {};

/**
 * @param {number} index
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getChildAt = function(index) {};

/**
 * @param {string} name
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getChild = function(name) {};

/**
 * @param {!String} path
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getChildByPath = function(path) {};

/**
 * @param {string} name
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getVisibleChild = function(name) {};

/**
 * @param {string} name
 * @param {!fairygui.GGroup} group
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getChildInGroup = function(name, group) {};

/**
 * @param {string} id
 * @return {!fairygui.GObject}
 */
fgui.GComponent.prototype.getChildById = function(id) {};

/**
 * @param {!fairygui.GObject} child
 * @return {number}
 */
fgui.GComponent.prototype.getChildIndex = function(child) {};

/**
 * @param {!fairygui.GObject} child
 * @param {number} index
 * @return {void}
 */
fgui.GComponent.prototype.setChildIndex = function(child, index) {};

/**
 * @param {!fairygui.GObject} child
 * @param {number} index
 * @return {number}
 */
fgui.GComponent.prototype.setChildIndexBefore = function(child, index) {};

/**
 * @param {!fairygui.GObject} child1
 * @param {!fairygui.GObject} child2
 * @return {void}
 */
fgui.GComponent.prototype.swapChildren = function(child1, child2) {};

/**
 * @param {number} index1
 * @param {number} index2
 * @return {void}
 */
fgui.GComponent.prototype.swapChildrenAt = function(index1, index2) {};

/**
 * @param {!fairygui.GObject} child
 * @return {boolean}
 */
fgui.GComponent.prototype.isAncestorOf = function(child) {};

/**
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.GComponent.prototype.addController = function(controller) {};

/**
 * @param {number} index
 * @return {!fairygui.Controller}
 */
fgui.GComponent.prototype.getControllerAt = function(index) {};

/**
 * @param {string} name
 * @return {!fairygui.Controller}
 */
fgui.GComponent.prototype.getController = function(name) {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GComponent.prototype.removeController = function(c) {};

/**
 * @param {!fairygui.GObject} child
 * @return {void}
 */
fgui.GComponent.prototype.childStateChanged = function(child) {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GComponent.prototype.applyController = function(c) {};

/**
 * @return {void}
 */
fgui.GComponent.prototype.applyAllControllers = function() {};

/**
 * @param {!fairygui.GObject} obj
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GComponent.prototype.adjustRadioGroupDepth = function(obj, c) {};

/**
 * @param {number} index
 * @return {!fairygui.Transition}
 */
fgui.GComponent.prototype.getTransitionAt = function(index) {};

/**
 * @param {string} transName
 * @return {!fairygui.Transition}
 */
fgui.GComponent.prototype.getTransition = function(transName) {};

/**
 * @param {!fairygui.GObject} child
 * @return {boolean}
 */
fgui.GComponent.prototype.isChildInView = function(child) {};

/**
 * @return {number}
 */
fgui.GComponent.prototype.getFirstChildInView = function() {};

/**
 * @param {!Laya.Sprite} value
 * @param {boolean} reversed
 * @return {void}
 */
fgui.GComponent.prototype.setMask = function(value, reversed) {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.updateHitArea = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.updateMask = function() {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GComponent.prototype.setupScroll = function(buffer) {};

/**
 * @protected
 * @param {number} overflow
 * @return {void}
 */
fgui.GComponent.prototype.setupOverflow = function(overflow) {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.handleSizeChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.handleGrayedChanged = function() {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GComponent.prototype.handleControllerChanged = function(c) {};

/**
 * @return {void}
 */
fgui.GComponent.prototype.setBoundsChangedFlag = function() {};

/**
 * @return {void}
 */
fgui.GComponent.prototype.ensureBoundsCorrect = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.updateBounds = function() {};

/**
 * @param {number} ax
 * @param {number} ay
 * @param {number} aw
 * @param {number} ah
 * @return {void}
 */
fgui.GComponent.prototype.setBounds = function(ax, ay, aw, ah) {};

/**
 * @param {number} xValue
 * @param {number} yValue
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GComponent.prototype.getSnappingPosition = function(xValue, yValue, result) {};

/**
 * dir正数表示右移或者下移，负数表示左移或者上移
 * @param {number} xValue
 * @param {number} yValue
 * @param {number} xDir
 * @param {number} yDir
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GComponent.prototype.getSnappingPositionWithDir = function(xValue, yValue, xDir, yDir, result) {};

/**
 * @param {!fairygui.GObject} child
 * @param {number} oldValue
 * @param {number} newValue
 * @return {void}
 */
fgui.GComponent.prototype.childSortingOrderChanged = function(child, oldValue, newValue) {};

/**
 * @return {void}
 */
fgui.GComponent.prototype.constructFromResource = function() {};

/**
 * @param {!Array<!fairygui.GObject>} objectPool
 * @param {number} poolIndex
 * @return {void}
 */
fgui.GComponent.prototype.constructFromResource2 = function(objectPool, poolIndex) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GComponent.prototype.constructExtension = function(buffer) {};

/**
 * @protected
 * @return {void}
 */
fgui.GComponent.prototype.onConstruct = function() {};

/**
 * @protected
 * @param {!Object} xml
 * @return {void}
 */
fgui.GComponent.prototype.constructFromXML = function(xml) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GComponent.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GButton = function() {};
/** @type {!fairygui.GObject} */
fgui.GButton.prototype._titleObject;
/** @type {!fairygui.GObject} */
fgui.GButton.prototype._iconObject;
/** @type {?} */
fgui.GButton.prototype._mode;
/** @type {?} */
fgui.GButton.prototype._selected;
/** @type {?} */
fgui.GButton.prototype._title;
/** @type {?} */
fgui.GButton.prototype._selectedTitle;
/** @type {?} */
fgui.GButton.prototype._icon;
/** @type {?} */
fgui.GButton.prototype._selectedIcon;
/** @type {?} */
fgui.GButton.prototype._sound;
/** @type {?} */
fgui.GButton.prototype._soundVolumeScale;
/** @type {?} */
fgui.GButton.prototype._buttonController;
/** @type {?} */
fgui.GButton.prototype._relatedController;
/** @type {?} */
fgui.GButton.prototype._relatedPageId;
/** @type {?} */
fgui.GButton.prototype._changeStateOnClick;
/** @type {?|undefined} */
fgui.GButton.prototype._linkedPopup;
/** @type {?} */
fgui.GButton.prototype._downEffect;
/** @type {?} */
fgui.GButton.prototype._downEffectValue;
/** @type {?|undefined} */
fgui.GButton.prototype._downScaled;
/** @type {?} */
fgui.GButton.prototype._down;
/** @type {?} */
fgui.GButton.prototype._over;
/** @type {string} */
fgui.GButton.UP;
/** @type {string} */
fgui.GButton.DOWN;
/** @type {string} */
fgui.GButton.OVER;
/** @type {string} */
fgui.GButton.SELECTED_OVER;
/** @type {string} */
fgui.GButton.DISABLED;
/** @type {string} */
fgui.GButton.SELECTED_DISABLED;
/** @type {string} */
fgui.GButton.prototype.icon;
/** @type {string} */
fgui.GButton.prototype.selectedIcon;
/** @type {string} */
fgui.GButton.prototype.title;
/** @type {string} */
fgui.GButton.prototype.text;
/** @type {string} */
fgui.GButton.prototype.selectedTitle;
/** @type {string} */
fgui.GButton.prototype.titleColor;
/** @type {number} */
fgui.GButton.prototype.titleFontSize;
/** @type {string} */
fgui.GButton.prototype.sound;
/** @type {number} */
fgui.GButton.prototype.soundVolumeScale;
/** @type {boolean} */
fgui.GButton.prototype.selected;
/** @type {number} */
fgui.GButton.prototype.mode;
/** @type {!fairygui.Controller} */
fgui.GButton.prototype.relatedController;
/** @type {string} */
fgui.GButton.prototype.relatedPageId;
/** @type {boolean} */
fgui.GButton.prototype.changeStateOnClick;
/** @type {!fairygui.GObject} */
fgui.GButton.prototype.linkedPopup;
/** @type {?} */
fgui.GButton.prototype.__rollover;
/** @type {?} */
fgui.GButton.prototype.__rollout;
/** @type {?} */
fgui.GButton.prototype.__mousedown;
/** @type {?} */
fgui.GButton.prototype.__mouseup;
/** @type {?} */
fgui.GButton.prototype.__click;

/**
 * @return {!fairygui.GTextField}
 */
fgui.GButton.prototype.getTextField = function() {};

/**
 * @param {boolean=} downEffect
 * @return {void}
 */
fgui.GButton.prototype.fireClick = function(downEffect) {};

/**
 * @protected
 * @param {string} val
 * @return {void}
 */
fgui.GButton.prototype.setState = function(val) {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GButton.prototype.handleControllerChanged = function(c) {};

/**
 * @protected
 * @return {void}
 */
fgui.GButton.prototype.handleGrayedChanged = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GButton.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GButton.prototype.setProp = function(index, value) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GButton.prototype.constructExtension = function(buffer) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GButton.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GComboBox = function() {};
/** @type {!fairygui.GComponent} */
fgui.GComboBox.prototype.dropdown;
/** @type {!fairygui.GObject} */
fgui.GComboBox.prototype._titleObject;
/** @type {!fairygui.GObject} */
fgui.GComboBox.prototype._iconObject;
/** @type {!fairygui.GList} */
fgui.GComboBox.prototype._list;
/** @type {!Array<string>} */
fgui.GComboBox.prototype._items;
/** @type {!Array<string>} */
fgui.GComboBox.prototype._icons;
/** @type {!Array<string>} */
fgui.GComboBox.prototype._values;
/** @type {!fairygui.PopupDirection} */
fgui.GComboBox.prototype._popupDirection;
/** @type {?} */
fgui.GComboBox.prototype._visibleItemCount;
/** @type {?} */
fgui.GComboBox.prototype._itemsUpdated;
/** @type {?} */
fgui.GComboBox.prototype._selectedIndex;
/** @type {?} */
fgui.GComboBox.prototype._buttonController;
/** @type {?|undefined} */
fgui.GComboBox.prototype._selectionController;
/** @type {?} */
fgui.GComboBox.prototype._down;
/** @type {?} */
fgui.GComboBox.prototype._over;
/** @type {string} */
fgui.GComboBox.prototype.text;
/** @type {string} */
fgui.GComboBox.prototype.titleColor;
/** @type {number} */
fgui.GComboBox.prototype.titleFontSize;
/** @type {string} */
fgui.GComboBox.prototype.icon;
/** @type {number} */
fgui.GComboBox.prototype.visibleItemCount;
/** @type {number} */
fgui.GComboBox.prototype.popupDirection;
/** @type {!Array<string>} */
fgui.GComboBox.prototype.items;
/** @type {!Array<string>} */
fgui.GComboBox.prototype.icons;
/** @type {!Array<string>} */
fgui.GComboBox.prototype.values;
/** @type {number} */
fgui.GComboBox.prototype.selectedIndex;
/** @type {string} */
fgui.GComboBox.prototype.value;
/** @type {!fairygui.Controller} */
fgui.GComboBox.prototype.selectionController;
/** @type {?} */
fgui.GComboBox.prototype.updateSelectionController;
/** @type {?} */
fgui.GComboBox.prototype.__popupWinClosed;
/** @type {?} */
fgui.GComboBox.prototype.__clickItem;
/** @type {?} */
fgui.GComboBox.prototype.__clickItem2;
/** @type {?} */
fgui.GComboBox.prototype.__rollover;
/** @type {?} */
fgui.GComboBox.prototype.__rollout;
/** @type {?} */
fgui.GComboBox.prototype.__mousedown;
/** @type {?} */
fgui.GComboBox.prototype.__mouseup;

/**
 * @return {!fairygui.GTextField}
 */
fgui.GComboBox.prototype.getTextField = function() {};

/**
 * @protected
 * @param {string} val
 * @return {void}
 */
fgui.GComboBox.prototype.setState = function(val) {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GComboBox.prototype.handleControllerChanged = function(c) {};

/**
 * @return {void}
 */
fgui.GComboBox.prototype.dispose = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GComboBox.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GComboBox.prototype.setProp = function(index, value) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GComboBox.prototype.constructExtension = function(buffer) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GComboBox.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @protected
 * @return {void}
 */
fgui.GComboBox.prototype.showDropdown = function() {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GGraph = function() {};
/** @type {?} */
fgui.GGraph.prototype._type;
/** @type {?} */
fgui.GGraph.prototype._lineSize;
/** @type {?} */
fgui.GGraph.prototype._lineColor;
/** @type {?} */
fgui.GGraph.prototype._fillColor;
/** @type {?|undefined} */
fgui.GGraph.prototype._cornerRadius;
/** @type {?|undefined} */
fgui.GGraph.prototype._hitArea;
/** @type {?|undefined} */
fgui.GGraph.prototype._sides;
/** @type {?|undefined} */
fgui.GGraph.prototype._startAngle;
/** @type {?|undefined} */
fgui.GGraph.prototype._polygonPoints;
/** @type {?|undefined} */
fgui.GGraph.prototype._distances;
/** @type {!Array<number>} */
fgui.GGraph.prototype.distances;
/** @type {string} */
fgui.GGraph.prototype.color;
/** @type {?} */
fgui.GGraph.prototype.updateGraph;

/**
 * @param {number} lineSize
 * @param {string} lineColor
 * @param {string} fillColor
 * @param {!Array<number>=} cornerRadius
 * @return {void}
 */
fgui.GGraph.prototype.drawRect = function(lineSize, lineColor, fillColor, cornerRadius) {};

/**
 * @param {number} lineSize
 * @param {string} lineColor
 * @param {string} fillColor
 * @return {void}
 */
fgui.GGraph.prototype.drawEllipse = function(lineSize, lineColor, fillColor) {};

/**
 * @param {number} lineSize
 * @param {string} lineColor
 * @param {string} fillColor
 * @param {number} sides
 * @param {number=} startAngle
 * @param {!Array<number>=} distances
 * @return {void}
 */
fgui.GGraph.prototype.drawRegularPolygon = function(lineSize, lineColor, fillColor, sides, startAngle, distances) {};

/**
 * @param {number} lineSize
 * @param {string} lineColor
 * @param {string} fillColor
 * @param {!Array<number>} points
 * @return {void}
 */
fgui.GGraph.prototype.drawPolygon = function(lineSize, lineColor, fillColor, points) {};

/**
 * @param {!fairygui.GObject} target
 * @return {void}
 */
fgui.GGraph.prototype.replaceMe = function(target) {};

/**
 * @param {!fairygui.GObject} target
 * @return {void}
 */
fgui.GGraph.prototype.addBeforeMe = function(target) {};

/**
 * @param {!fairygui.GObject} target
 * @return {void}
 */
fgui.GGraph.prototype.addAfterMe = function(target) {};

/**
 * @param {!Laya.Sprite} obj
 * @return {void}
 */
fgui.GGraph.prototype.setNativeObject = function(obj) {};

/**
 * @protected
 * @return {void}
 */
fgui.GGraph.prototype.createDisplayObject = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GGraph.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GGraph.prototype.setProp = function(index, value) {};

/**
 * @protected
 * @return {void}
 */
fgui.GGraph.prototype.handleSizeChanged = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GGraph.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GGroup = function() {};
/** @type {?} */
fgui.GGroup.prototype._layout;
/** @type {?} */
fgui.GGroup.prototype._lineGap;
/** @type {?} */
fgui.GGroup.prototype._columnGap;
/** @type {?} */
fgui.GGroup.prototype._excludeInvisibles;
/** @type {?} */
fgui.GGroup.prototype._autoSizeDisabled;
/** @type {?} */
fgui.GGroup.prototype._mainGridIndex;
/** @type {?} */
fgui.GGroup.prototype._mainGridMinSize;
/** @type {?} */
fgui.GGroup.prototype._boundsChanged;
/** @type {?} */
fgui.GGroup.prototype._percentReady;
/** @type {?} */
fgui.GGroup.prototype._mainChildIndex;
/** @type {?} */
fgui.GGroup.prototype._totalSize;
/** @type {?} */
fgui.GGroup.prototype._numChildren;
/** @type {number} */
fgui.GGroup.prototype._updating;
/** @type {number} */
fgui.GGroup.prototype.layout;
/** @type {number} */
fgui.GGroup.prototype.lineGap;
/** @type {number} */
fgui.GGroup.prototype.columnGap;
/** @type {boolean} */
fgui.GGroup.prototype.excludeInvisibles;
/** @type {boolean} */
fgui.GGroup.prototype.autoSizeDisabled;
/** @type {number} */
fgui.GGroup.prototype.mainGridMinSize;
/** @type {number} */
fgui.GGroup.prototype.mainGridIndex;
/** @type {?} */
fgui.GGroup.prototype.updateBounds;
/** @type {?} */
fgui.GGroup.prototype.handleLayout;

/**
 * @return {void}
 */
fgui.GGroup.prototype.dispose = function() {};

/**
 * @param {boolean=} positionChangedOnly
 * @return {void}
 */
fgui.GGroup.prototype.setBoundsChangedFlag = function(positionChangedOnly) {};

/**
 * @return {void}
 */
fgui.GGroup.prototype.ensureSizeCorrect = function() {};

/**
 * @return {void}
 */
fgui.GGroup.prototype.ensureBoundsCorrect = function() {};

/**
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.GGroup.prototype.moveChildren = function(dx, dy) {};

/**
 * @param {number} dw
 * @param {number} dh
 * @return {void}
 */
fgui.GGroup.prototype.resizeChildren = function(dw, dh) {};

/**
 * @protected
 * @return {void}
 */
fgui.GGroup.prototype.handleAlphaChanged = function() {};

/**
 * @return {void}
 */
fgui.GGroup.prototype.handleVisibleChanged = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GGroup.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GGroup.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GImage = function() {};
/** @type {?} */
fgui.GImage.prototype._image;
/** @type {?} */
fgui.GImage.prototype._flip;
/** @type {?} */
fgui.GImage.prototype._contentItem;
/** @type {!fairygui.Image} */
fgui.GImage.prototype.image;
/** @type {string} */
fgui.GImage.prototype.color;
/** @type {number} */
fgui.GImage.prototype.flip;
/** @type {number} */
fgui.GImage.prototype.fillMethod;
/** @type {number} */
fgui.GImage.prototype.fillOrigin;
/** @type {boolean} */
fgui.GImage.prototype.fillClockwise;
/** @type {number} */
fgui.GImage.prototype.fillAmount;

/**
 * @protected
 * @return {void}
 */
fgui.GImage.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GImage.prototype.constructFromResource = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GImage.prototype.handleXYChanged = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GImage.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GImage.prototype.setProp = function(index, value) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GImage.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GLabel = function() {};
/** @type {!fairygui.GObject} */
fgui.GLabel.prototype._titleObject;
/** @type {!fairygui.GObject} */
fgui.GLabel.prototype._iconObject;
/** @type {string} */
fgui.GLabel.prototype.icon;
/** @type {string} */
fgui.GLabel.prototype.title;
/** @type {string} */
fgui.GLabel.prototype.text;
/** @type {string} */
fgui.GLabel.prototype.titleColor;
/** @type {number} */
fgui.GLabel.prototype.titleFontSize;
/** @type {string} */
fgui.GLabel.prototype.color;
/** @type {boolean} */
fgui.GLabel.prototype.editable;

/**
 * @return {!fairygui.GTextField}
 */
fgui.GLabel.prototype.getTextField = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GLabel.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GLabel.prototype.setProp = function(index, value) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GLabel.prototype.constructExtension = function(buffer) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GLabel.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GList = function() {};
/** @type {!Handler} */
fgui.GList.prototype.itemRenderer;
/** @type {!Handler} */
fgui.GList.prototype.itemProvider;
/** @type {boolean} */
fgui.GList.prototype.scrollItemToViewOnClick;
/** @type {boolean} */
fgui.GList.prototype.foldInvisibleItems;
/** @type {?} */
fgui.GList.prototype._layout;
/** @type {?} */
fgui.GList.prototype._lineCount;
/** @type {?} */
fgui.GList.prototype._columnCount;
/** @type {?} */
fgui.GList.prototype._lineGap;
/** @type {?} */
fgui.GList.prototype._columnGap;
/** @type {?} */
fgui.GList.prototype._defaultItem;
/** @type {?} */
fgui.GList.prototype._autoResizeItem;
/** @type {?} */
fgui.GList.prototype._selectionMode;
/** @type {?} */
fgui.GList.prototype._align;
/** @type {?} */
fgui.GList.prototype._verticalAlign;
/** @type {?|undefined} */
fgui.GList.prototype._selectionController;
/** @type {?} */
fgui.GList.prototype._lastSelectedIndex;
/** @type {?} */
fgui.GList.prototype._pool;
/** @type {?|undefined} */
fgui.GList.prototype._virtual;
/** @type {?|undefined} */
fgui.GList.prototype._loop;
/** @type {?} */
fgui.GList.prototype._numItems;
/** @type {?} */
fgui.GList.prototype._realNumItems;
/** @type {?} */
fgui.GList.prototype._firstIndex;
/** @type {?} */
fgui.GList.prototype._curLineItemCount;
/** @type {?} */
fgui.GList.prototype._curLineItemCount2;
/** @type {?|undefined} */
fgui.GList.prototype._itemSize;
/** @type {?} */
fgui.GList.prototype._virtualListChanged;
/** @type {?|undefined} */
fgui.GList.prototype._virtualItems;
/** @type {?|undefined} */
fgui.GList.prototype._eventLocked;
/** @type {?} */
fgui.GList.prototype.itemInfoVer;
/** @type {number} */
fgui.GList.prototype.layout;
/** @type {number} */
fgui.GList.prototype.lineCount;
/** @type {number} */
fgui.GList.prototype.columnCount;
/** @type {number} */
fgui.GList.prototype.lineGap;
/** @type {number} */
fgui.GList.prototype.columnGap;
/** @type {string} */
fgui.GList.prototype.align;
/** @type {string} */
fgui.GList.prototype.verticalAlign;
/** @type {!Laya.Point} */
fgui.GList.prototype.virtualItemSize;
/** @type {string} */
fgui.GList.prototype.defaultItem;
/** @type {boolean} */
fgui.GList.prototype.autoResizeItem;
/** @type {number} */
fgui.GList.prototype.selectionMode;
/** @type {!fairygui.Controller} */
fgui.GList.prototype.selectionController;
/** @type {!fairygui.GObjectPool} */
fgui.GList.prototype.itemPool;
/** @type {number} */
fgui.GList.prototype.selectedIndex;
/** @type {?} */
fgui.GList.prototype.clearSelectionExcept;
/** @type {?} */
fgui.GList.prototype.__clickItem;
/** @type {?} */
fgui.GList.prototype.setSelectionOnEvent;
/** @type {?} */
fgui.GList.prototype.updateSelectionController;
/** @type {?} */
fgui.GList.prototype.shouldSnapToNext;
/** @type {?} */
fgui.GList.prototype._setVirtual;
/** @type {number} */
fgui.GList.prototype.numItems;
/** @type {?} */
fgui.GList.prototype.checkVirtualList;
/** @type {?} */
fgui.GList.prototype.setVirtualListChangedFlag;
/** @type {?} */
fgui.GList.prototype._refreshVirtualList;
/** @type {?} */
fgui.GList.prototype.__scrolled;
/** @type {?} */
fgui.GList.prototype.getIndexOnPos1;
/** @type {?} */
fgui.GList.prototype.getIndexOnPos2;
/** @type {?} */
fgui.GList.prototype.getIndexOnPos3;
/** @type {?} */
fgui.GList.prototype.handleScroll;
/** @type {?} */
fgui.GList.prototype.handleScroll1;
/** @type {?} */
fgui.GList.prototype.handleScroll2;
/** @type {?} */
fgui.GList.prototype.handleScroll3;
/** @type {?} */
fgui.GList.prototype.handleArchOrder1;
/** @type {?} */
fgui.GList.prototype.handleArchOrder2;
/** @type {?} */
fgui.GList.prototype.handleAlign;

/**
 * @return {void}
 */
fgui.GList.prototype.dispose = function() {};

/**
 * @param {string=} url
 * @return {!fairygui.GObject}
 */
fgui.GList.prototype.getFromPool = function(url) {};

/**
 * @param {!fairygui.GObject} obj
 * @return {void}
 */
fgui.GList.prototype.returnToPool = function(obj) {};

/**
 * @param {!fairygui.GObject} child
 * @param {number} index
 * @return {!fairygui.GObject}
 */
fgui.GList.prototype.addChildAt = function(child, index) {};

/**
 * @param {string=} url
 * @return {!fairygui.GObject}
 */
fgui.GList.prototype.addItem = function(url) {};

/**
 * @param {string=} url
 * @return {!fairygui.GObject}
 */
fgui.GList.prototype.addItemFromPool = function(url) {};

/**
 * @param {number} index
 * @param {boolean=} dispose
 * @return {!fairygui.GObject}
 */
fgui.GList.prototype.removeChildAt = function(index, dispose) {};

/**
 * @param {number} index
 * @return {void}
 */
fgui.GList.prototype.removeChildToPoolAt = function(index) {};

/**
 * @param {!fairygui.GObject} child
 * @return {void}
 */
fgui.GList.prototype.removeChildToPool = function(child) {};

/**
 * @param {number=} beginIndex
 * @param {number=} endIndex
 * @return {void}
 */
fgui.GList.prototype.removeChildrenToPool = function(beginIndex, endIndex) {};

/**
 * @param {!Array<number>=} result
 * @return {!Array<number>}
 */
fgui.GList.prototype.getSelection = function(result) {};

/**
 * @param {number} index
 * @param {boolean=} scrollItToView
 * @return {void}
 */
fgui.GList.prototype.addSelection = function(index, scrollItToView) {};

/**
 * @param {number} index
 * @return {void}
 */
fgui.GList.prototype.removeSelection = function(index) {};

/**
 * @return {void}
 */
fgui.GList.prototype.clearSelection = function() {};

/**
 * @return {void}
 */
fgui.GList.prototype.selectAll = function() {};

/**
 * @return {void}
 */
fgui.GList.prototype.selectNone = function() {};

/**
 * @return {void}
 */
fgui.GList.prototype.selectReverse = function() {};

/**
 * @param {number} dir
 * @return {void}
 */
fgui.GList.prototype.handleArrowKey = function(dir) {};

/**
 * @protected
 * @param {!fairygui.GObject} item
 * @param {!Laya.Event} evt
 * @return {void}
 */
fgui.GList.prototype.dispatchItemEvent = function(item, evt) {};

/**
 * @param {number=} itemCount
 * @param {number=} minSize
 * @return {void}
 */
fgui.GList.prototype.resizeToFit = function(itemCount, minSize) {};

/**
 * @return {number}
 */
fgui.GList.prototype.getMaxItemWidth = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GList.prototype.handleSizeChanged = function() {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.GList.prototype.handleControllerChanged = function(c) {};

/**
 * @param {number} xValue
 * @param {number} yValue
 * @param {number} xDir
 * @param {number} yDir
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GList.prototype.getSnappingPositionWithDir = function(xValue, yValue, xDir, yDir, result) {};

/**
 * @param {number} index
 * @param {boolean=} ani
 * @param {boolean=} setFirst
 * @return {void}
 */
fgui.GList.prototype.scrollToView = function(index, ani, setFirst) {};

/**
 * @return {number}
 */
fgui.GList.prototype.getFirstChildInView = function() {};

/**
 * @param {number} index
 * @return {number}
 */
fgui.GList.prototype.childIndexToItemIndex = function(index) {};

/**
 * @param {number} index
 * @return {number}
 */
fgui.GList.prototype.itemIndexToChildIndex = function(index) {};

/**
 * @return {void}
 */
fgui.GList.prototype.setVirtual = function() {};

/**
 * Set the list to be virtual list, and has loop behavior.
 * @return {void}
 */
fgui.GList.prototype.setVirtualAndLoop = function() {};

/**
 * @return {void}
 */
fgui.GList.prototype.refreshVirtualList = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GList.prototype.updateBounds = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GList.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GList.prototype.readItems = function(buffer) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @param {!fairygui.GObject} obj
 * @return {void}
 */
fgui.GList.prototype.setupItem = function(buffer, obj) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GList.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @constructor
 * @struct
 */
fgui.GObjectPool = function() {};
/** @type {?} */
fgui.GObjectPool.prototype._pool;
/** @type {?} */
fgui.GObjectPool.prototype._count;
/** @type {number} */
fgui.GObjectPool.prototype.count;

/**
 * @return {void}
 */
fgui.GObjectPool.prototype.clear = function() {};

/**
 * @param {string} url
 * @return {!fairygui.GObject}
 */
fgui.GObjectPool.prototype.getObject = function(url) {};

/**
 * @param {!fairygui.GObject} obj
 * @return {void}
 */
fgui.GObjectPool.prototype.returnObject = function(obj) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GLoader = function() {};
/** @type {?} */
fgui.GLoader.prototype._url;
/** @type {?} */
fgui.GLoader.prototype._align;
/** @type {?} */
fgui.GLoader.prototype._valign;
/** @type {?} */
fgui.GLoader.prototype._autoSize;
/** @type {?} */
fgui.GLoader.prototype._fill;
/** @type {?} */
fgui.GLoader.prototype._shrinkOnly;
/** @type {?} */
fgui.GLoader.prototype._showErrorSign;
/** @type {?} */
fgui.GLoader.prototype._contentItem;
/** @type {?} */
fgui.GLoader.prototype._content;
/** @type {?|undefined} */
fgui.GLoader.prototype._errorSign;
/** @type {?|undefined} */
fgui.GLoader.prototype._content2;
/** @type {?} */
fgui.GLoader.prototype._updatingLayout;
/** @type {?} */
fgui.GLoader._errorSignPool;
/** @type {string} */
fgui.GLoader.prototype.url;
/** @type {string} */
fgui.GLoader.prototype.icon;
/** @type {string} */
fgui.GLoader.prototype.align;
/** @type {string} */
fgui.GLoader.prototype.verticalAlign;
/** @type {number} */
fgui.GLoader.prototype.fill;
/** @type {boolean} */
fgui.GLoader.prototype.shrinkOnly;
/** @type {boolean} */
fgui.GLoader.prototype.autoSize;
/** @type {boolean} */
fgui.GLoader.prototype.playing;
/** @type {number} */
fgui.GLoader.prototype.frame;
/** @type {string} */
fgui.GLoader.prototype.color;
/** @type {number} */
fgui.GLoader.prototype.fillMethod;
/** @type {number} */
fgui.GLoader.prototype.fillOrigin;
/** @type {boolean} */
fgui.GLoader.prototype.fillClockwise;
/** @type {number} */
fgui.GLoader.prototype.fillAmount;
/** @type {boolean} */
fgui.GLoader.prototype.showErrorSign;
/** @type {!fairygui.MovieClip} */
fgui.GLoader.prototype.content;
/** @type {!fairygui.GComponent} */
fgui.GLoader.prototype.component;
/** @type {?} */
fgui.GLoader.prototype.__getResCompleted;
/** @type {?} */
fgui.GLoader.prototype.setErrorState;
/** @type {?} */
fgui.GLoader.prototype.clearErrorState;
/** @type {?} */
fgui.GLoader.prototype.updateLayout;
/** @type {?} */
fgui.GLoader.prototype.clearContent;

/**
 * @protected
 * @return {void}
 */
fgui.GLoader.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GLoader.prototype.dispose = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader.prototype.loadContent = function() {};

/**
 * @protected
 * @param {string} itemURL
 * @return {void}
 */
fgui.GLoader.prototype.loadFromPackage = function(itemURL) {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader.prototype.loadExternal = function() {};

/**
 * @protected
 * @param {!Laya.Texture} texture
 * @return {void}
 */
fgui.GLoader.prototype.freeExternal = function(texture) {};

/**
 * @protected
 * @param {!Laya.Texture} texture
 * @return {void}
 */
fgui.GLoader.prototype.onExternalLoadSuccess = function(texture) {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader.prototype.onExternalLoadFailed = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader.prototype.handleSizeChanged = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GLoader.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GLoader.prototype.setProp = function(index, value) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GLoader.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GLoader3D = function() {};
/** @type {?} */
fgui.GLoader3D.prototype._url;
/** @type {?} */
fgui.GLoader3D.prototype._align;
/** @type {?} */
fgui.GLoader3D.prototype._verticalAlign;
/** @type {?} */
fgui.GLoader3D.prototype._autoSize;
/** @type {?} */
fgui.GLoader3D.prototype._fill;
/** @type {?} */
fgui.GLoader3D.prototype._shrinkOnly;
/** @type {?} */
fgui.GLoader3D.prototype._playing;
/** @type {?} */
fgui.GLoader3D.prototype._frame;
/** @type {?} */
fgui.GLoader3D.prototype._loop;
/** @type {?} */
fgui.GLoader3D.prototype._animationName;
/** @type {?} */
fgui.GLoader3D.prototype._skinName;
/** @type {?} */
fgui.GLoader3D.prototype._color;
/** @type {?} */
fgui.GLoader3D.prototype._contentItem;
/** @type {?} */
fgui.GLoader3D.prototype._container;
/** @type {?} */
fgui.GLoader3D.prototype._content;
/** @type {?} */
fgui.GLoader3D.prototype._updatingLayout;
/** @type {string} */
fgui.GLoader3D.prototype.url;
/** @type {string} */
fgui.GLoader3D.prototype.icon;
/** @type {!fairygui.AlignType} */
fgui.GLoader3D.prototype.align;
/** @type {!fairygui.VertAlignType} */
fgui.GLoader3D.prototype.verticalAlign;
/** @type {!fairygui.LoaderFillType} */
fgui.GLoader3D.prototype.fill;
/** @type {boolean} */
fgui.GLoader3D.prototype.shrinkOnly;
/** @type {boolean} */
fgui.GLoader3D.prototype.autoSize;
/** @type {boolean} */
fgui.GLoader3D.prototype.playing;
/** @type {number} */
fgui.GLoader3D.prototype.frame;
/** @type {string} */
fgui.GLoader3D.prototype.animationName;
/** @type {string} */
fgui.GLoader3D.prototype.skinName;
/** @type {boolean} */
fgui.GLoader3D.prototype.loop;
/** @type {string} */
fgui.GLoader3D.prototype.color;
/** @type {!Laya.Sprite} */
fgui.GLoader3D.prototype.content;
/** @type {?} */
fgui.GLoader3D.prototype.onLoaded;
/** @type {?} */
fgui.GLoader3D.prototype.onChange;
/** @type {?} */
fgui.GLoader3D.prototype.updateLayout;
/** @type {?} */
fgui.GLoader3D.prototype.clearContent;

/**
 * @protected
 * @return {void}
 */
fgui.GLoader3D.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GLoader3D.prototype.dispose = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader3D.prototype.loadContent = function() {};

/**
 * @protected
 * @param {string} itemURL
 * @return {void}
 */
fgui.GLoader3D.prototype.loadFromPackage = function(itemURL) {};

/**
 * @param {!Laya.Skeleton} skeleton
 * @param {!Laya.Point=} anchor
 * @return {void}
 */
fgui.GLoader3D.prototype.setSkeleton = function(skeleton, anchor) {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader3D.prototype.loadExternal = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader3D.prototype.handleSizeChanged = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GLoader3D.prototype.handleGrayedChanged = function() {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GLoader3D.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GLoader3D.prototype.setProp = function(index, value) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GLoader3D.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GObject}
 * @constructor
 * @struct
 */
fgui.GMovieClip = function() {};
/** @type {?} */
fgui.GMovieClip.prototype._movieClip;
/** @type {string} */
fgui.GMovieClip.prototype.color;
/** @type {boolean} */
fgui.GMovieClip.prototype.playing;
/** @type {number} */
fgui.GMovieClip.prototype.frame;
/** @type {number} */
fgui.GMovieClip.prototype.timeScale;

/**
 * @protected
 * @return {void}
 */
fgui.GMovieClip.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GMovieClip.prototype.rewind = function() {};

/**
 * @param {!fairygui.GMovieClip} anotherMc
 * @return {void}
 */
fgui.GMovieClip.prototype.syncStatus = function(anotherMc) {};

/**
 * @param {number} timeInMiniseconds
 * @return {void}
 */
fgui.GMovieClip.prototype.advance = function(timeInMiniseconds) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @param {number=} times
 * @param {number=} endAt
 * @param {!Handler=} endHandler
 * @return {void}
 */
fgui.GMovieClip.prototype.setPlaySettings = function(start, end, times, endAt, endHandler) {};

/**
 * @param {number} index
 * @return {?}
 */
fgui.GMovieClip.prototype.getProp = function(index) {};

/**
 * @param {number} index
 * @param {?} value
 * @return {void}
 */
fgui.GMovieClip.prototype.setProp = function(index, value) {};

/**
 * @return {void}
 */
fgui.GMovieClip.prototype.constructFromResource = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GMovieClip.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GProgressBar = function() {};
/** @type {?} */
fgui.GProgressBar.prototype._min;
/** @type {?} */
fgui.GProgressBar.prototype._max;
/** @type {?} */
fgui.GProgressBar.prototype._value;
/** @type {?} */
fgui.GProgressBar.prototype._titleType;
/** @type {?} */
fgui.GProgressBar.prototype._reverse;
/** @type {?} */
fgui.GProgressBar.prototype._titleObject;
/** @type {?} */
fgui.GProgressBar.prototype._aniObject;
/** @type {?} */
fgui.GProgressBar.prototype._barObjectH;
/** @type {?} */
fgui.GProgressBar.prototype._barObjectV;
/** @type {?} */
fgui.GProgressBar.prototype._barMaxWidth;
/** @type {?} */
fgui.GProgressBar.prototype._barMaxHeight;
/** @type {?} */
fgui.GProgressBar.prototype._barMaxWidthDelta;
/** @type {?} */
fgui.GProgressBar.prototype._barMaxHeightDelta;
/** @type {?} */
fgui.GProgressBar.prototype._barStartX;
/** @type {?} */
fgui.GProgressBar.prototype._barStartY;
/** @type {number} */
fgui.GProgressBar.prototype.titleType;
/** @type {number} */
fgui.GProgressBar.prototype.min;
/** @type {number} */
fgui.GProgressBar.prototype.max;
/** @type {number} */
fgui.GProgressBar.prototype.value;
/** @type {?} */
fgui.GProgressBar.prototype.setFillAmount;

/**
 * @param {number} value
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GProgressBar.prototype.tweenValue = function(value, duration) {};

/**
 * @param {number} newValue
 * @return {void}
 */
fgui.GProgressBar.prototype.update = function(newValue) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GProgressBar.prototype.constructExtension = function(buffer) {};

/**
 * @protected
 * @return {void}
 */
fgui.GProgressBar.prototype.handleSizeChanged = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GProgressBar.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GTextField}
 * @constructor
 * @struct
 */
fgui.GRichTextField = function() {};
/** @type {?} */
fgui.GRichTextField.prototype._div;
/** @type {!Laya.HTMLDivElement} */
fgui.GRichTextField.prototype.div;
/** @type {string} */
fgui.GRichTextField.prototype.text;
/** @type {string} */
fgui.GRichTextField.prototype.font;
/** @type {number} */
fgui.GRichTextField.prototype.fontSize;
/** @type {string} */
fgui.GRichTextField.prototype.color;
/** @type {string} */
fgui.GRichTextField.prototype.align;
/** @type {string} */
fgui.GRichTextField.prototype.valign;
/** @type {number} */
fgui.GRichTextField.prototype.leading;
/** @type {boolean} */
fgui.GRichTextField.prototype.bold;
/** @type {boolean} */
fgui.GRichTextField.prototype.italic;
/** @type {number} */
fgui.GRichTextField.prototype.stroke;
/** @type {string} */
fgui.GRichTextField.prototype.strokeColor;
/** @type {boolean} */
fgui.GRichTextField.prototype.ubbEnabled;
/** @type {number} */
fgui.GRichTextField.prototype.textWidth;
/** @type {?} */
fgui.GRichTextField.prototype.refresh;

/**
 * @protected
 * @return {void}
 */
fgui.GRichTextField.prototype.createDisplayObject = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GRichTextField.prototype.updateAutoSize = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GRichTextField.prototype.handleSizeChanged = function() {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GRoot = function() {};
/** @type {number} */
fgui.GRoot.contentScaleLevel;
/** @type {?} */
fgui.GRoot.prototype._modalLayer;
/** @type {?} */
fgui.GRoot.prototype._popupStack;
/** @type {?} */
fgui.GRoot.prototype._justClosedPopups;
/** @type {?} */
fgui.GRoot.prototype._modalWaitPane;
/** @type {?} */
fgui.GRoot.prototype._tooltipWin;
/** @type {?} */
fgui.GRoot.prototype._defaultTooltipWin;
/** @type {?} */
fgui.GRoot.prototype._checkPopups;
/** @type {?} */
fgui.GRoot._inst;
/** @type {!fairygui.GRoot} */
fgui.GRoot.inst;
/** @type {!fairygui.GGraph} */
fgui.GRoot.prototype.modalLayer;
/** @type {boolean} */
fgui.GRoot.prototype.hasModalWindow;
/** @type {boolean} */
fgui.GRoot.prototype.modalWaiting;
/** @type {boolean} */
fgui.GRoot.prototype.hasAnyPopup;
/** @type {?} */
fgui.GRoot.prototype.closePopup;
/** @type {!fairygui.GObject} */
fgui.GRoot.prototype.focus;
/** @type {?} */
fgui.GRoot.prototype.setFocus;
/** @type {number} */
fgui.GRoot.prototype.volumeScale;
/** @type {?} */
fgui.GRoot.prototype.adjustModalLayer;
/** @type {?} */
fgui.GRoot.prototype.__addedToStage;
/** @type {?} */
fgui.GRoot.prototype.__stageMouseDown;
/** @type {?} */
fgui.GRoot.prototype.__stageMouseUp;
/** @type {?} */
fgui.GRoot.prototype.__winResize;
/** @type {?} */
fgui.GRoot.prototype.updateContentScaleLevel;

/**
 * @param {!fairygui.Window} win
 * @return {void}
 */
fgui.GRoot.prototype.showWindow = function(win) {};

/**
 * @param {!fairygui.Window} win
 * @return {void}
 */
fgui.GRoot.prototype.hideWindow = function(win) {};

/**
 * @param {!fairygui.Window} win
 * @return {void}
 */
fgui.GRoot.prototype.hideWindowImmediately = function(win) {};

/**
 * @param {!fairygui.Window} win
 * @return {void}
 */
fgui.GRoot.prototype.bringToFront = function(win) {};

/**
 * @param {string=} msg
 * @return {void}
 */
fgui.GRoot.prototype.showModalWait = function(msg) {};

/**
 * @return {void}
 */
fgui.GRoot.prototype.closeModalWait = function() {};

/**
 * @return {void}
 */
fgui.GRoot.prototype.closeAllExceptModals = function() {};

/**
 * @return {void}
 */
fgui.GRoot.prototype.closeAllWindows = function() {};

/**
 * @return {!fairygui.Window}
 */
fgui.GRoot.prototype.getTopWindow = function() {};

/**
 * @param {!fairygui.GObject} popup
 * @param {!fairygui.GObject=} target
 * @param {(boolean|!fairygui.PopupDirection)=} dir
 * @return {void}
 */
fgui.GRoot.prototype.showPopup = function(popup, target, dir) {};

/**
 * @param {!fairygui.GObject} popup
 * @param {!fairygui.GObject=} target
 * @param {(boolean|!fairygui.PopupDirection)=} dir
 * @return {void}
 */
fgui.GRoot.prototype.togglePopup = function(popup, target, dir) {};

/**
 * @param {!fairygui.GObject=} popup
 * @return {void}
 */
fgui.GRoot.prototype.hidePopup = function(popup) {};

/**
 * @param {string} msg
 * @return {void}
 */
fgui.GRoot.prototype.showTooltips = function(msg) {};

/**
 * @param {!fairygui.GObject} tooltipWin
 * @param {!Laya.Point=} position
 * @return {void}
 */
fgui.GRoot.prototype.showTooltipsWin = function(tooltipWin, position) {};

/**
 * @return {void}
 */
fgui.GRoot.prototype.hideTooltips = function() {};

/**
 * @param {string} url
 * @param {number=} volumeScale
 * @return {void}
 */
fgui.GRoot.prototype.playOneShotSound = function(url, volumeScale) {};

/**
 * @param {!Laya.Sprite} clickTarget
 * @return {void}
 */
fgui.GRoot.prototype.checkPopups = function(clickTarget) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GScrollBar = function() {};
/** @type {?} */
fgui.GScrollBar.prototype._grip;
/** @type {?} */
fgui.GScrollBar.prototype._arrowButton1;
/** @type {?} */
fgui.GScrollBar.prototype._arrowButton2;
/** @type {?} */
fgui.GScrollBar.prototype._bar;
/** @type {?} */
fgui.GScrollBar.prototype._target;
/** @type {?} */
fgui.GScrollBar.prototype._vertical;
/** @type {?} */
fgui.GScrollBar.prototype._scrollPerc;
/** @type {?} */
fgui.GScrollBar.prototype._fixedGripSize;
/** @type {?} */
fgui.GScrollBar.prototype._dragOffset;
/** @type {?} */
fgui.GScrollBar.prototype._gripDragging;
/** @type {number} */
fgui.GScrollBar.prototype.minSize;
/** @type {boolean} */
fgui.GScrollBar.prototype.gripDragging;
/** @type {?} */
fgui.GScrollBar.prototype.__gripMouseDown;
/** @type {?} */
fgui.GScrollBar.prototype.__gripMouseMove;
/** @type {?} */
fgui.GScrollBar.prototype.__gripMouseUp;
/** @type {?} */
fgui.GScrollBar.prototype.__arrowButton1Click;
/** @type {?} */
fgui.GScrollBar.prototype.__arrowButton2Click;
/** @type {?} */
fgui.GScrollBar.prototype.__barMouseDown;

/**
 * @param {!fairygui.ScrollPane} target
 * @param {boolean} vertical
 * @return {void}
 */
fgui.GScrollBar.prototype.setScrollPane = function(target, vertical) {};

/**
 * @param {number} value
 * @return {void}
 */
fgui.GScrollBar.prototype.setDisplayPerc = function(value) {};

/**
 * @param {number} val
 * @return {void}
 */
fgui.GScrollBar.prototype.setScrollPerc = function(val) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GScrollBar.prototype.constructExtension = function(buffer) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.GSlider = function() {};
/** @type {?} */
fgui.GSlider.prototype._min;
/** @type {?} */
fgui.GSlider.prototype._max;
/** @type {?} */
fgui.GSlider.prototype._value;
/** @type {?} */
fgui.GSlider.prototype._titleType;
/** @type {?} */
fgui.GSlider.prototype._reverse;
/** @type {?} */
fgui.GSlider.prototype._wholeNumbers;
/** @type {?} */
fgui.GSlider.prototype._titleObject;
/** @type {?} */
fgui.GSlider.prototype._barObjectH;
/** @type {?} */
fgui.GSlider.prototype._barObjectV;
/** @type {?} */
fgui.GSlider.prototype._barMaxWidth;
/** @type {?} */
fgui.GSlider.prototype._barMaxHeight;
/** @type {?} */
fgui.GSlider.prototype._barMaxWidthDelta;
/** @type {?} */
fgui.GSlider.prototype._barMaxHeightDelta;
/** @type {?} */
fgui.GSlider.prototype._gripObject;
/** @type {?} */
fgui.GSlider.prototype._clickPos;
/** @type {?} */
fgui.GSlider.prototype._clickPercent;
/** @type {?} */
fgui.GSlider.prototype._barStartX;
/** @type {?} */
fgui.GSlider.prototype._barStartY;
/** @type {boolean} */
fgui.GSlider.prototype.changeOnClick;
/** @type {boolean} */
fgui.GSlider.prototype.canDrag;
/** @type {number} */
fgui.GSlider.prototype.titleType;
/** @type {boolean} */
fgui.GSlider.prototype.wholeNumbers;
/** @type {number} */
fgui.GSlider.prototype.min;
/** @type {number} */
fgui.GSlider.prototype.max;
/** @type {number} */
fgui.GSlider.prototype.value;
/** @type {?} */
fgui.GSlider.prototype.updateWithPercent;
/** @type {?} */
fgui.GSlider.prototype.__gripMouseDown;
/** @type {?} */
fgui.GSlider.prototype.__gripMouseMove;
/** @type {?} */
fgui.GSlider.prototype.__gripMouseUp;
/** @type {?} */
fgui.GSlider.prototype.__barMouseDown;

/**
 * @return {void}
 */
fgui.GSlider.prototype.update = function() {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GSlider.prototype.constructExtension = function(buffer) {};

/**
 * @protected
 * @return {void}
 */
fgui.GSlider.prototype.handleSizeChanged = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GSlider.prototype.setup_afterAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GTextField}
 * @constructor
 * @struct
 */
fgui.GTextInput = function() {};
/** @type {?} */
fgui.GTextInput.prototype._input;
/** @type {?} */
fgui.GTextInput.prototype._prompt;
/** @type {!Laya.Input} */
fgui.GTextInput.prototype.nativeInput;
/** @type {string} */
fgui.GTextInput.prototype.text;
/** @type {string} */
fgui.GTextInput.prototype.font;
/** @type {number} */
fgui.GTextInput.prototype.fontSize;
/** @type {string} */
fgui.GTextInput.prototype.color;
/** @type {string} */
fgui.GTextInput.prototype.align;
/** @type {string} */
fgui.GTextInput.prototype.valign;
/** @type {number} */
fgui.GTextInput.prototype.leading;
/** @type {boolean} */
fgui.GTextInput.prototype.bold;
/** @type {boolean} */
fgui.GTextInput.prototype.italic;
/** @type {boolean} */
fgui.GTextInput.prototype.singleLine;
/** @type {number} */
fgui.GTextInput.prototype.stroke;
/** @type {string} */
fgui.GTextInput.prototype.strokeColor;
/** @type {boolean} */
fgui.GTextInput.prototype.password;
/** @type {string} */
fgui.GTextInput.prototype.keyboardType;
/** @type {boolean} */
fgui.GTextInput.prototype.editable;
/** @type {number} */
fgui.GTextInput.prototype.maxLength;
/** @type {string} */
fgui.GTextInput.prototype.promptText;
/** @type {string} */
fgui.GTextInput.prototype.restrict;
/** @type {number} */
fgui.GTextInput.prototype.textWidth;

/**
 * @protected
 * @return {void}
 */
fgui.GTextInput.prototype.createDisplayObject = function() {};

/**
 * @return {void}
 */
fgui.GTextInput.prototype.requestFocus = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.GTextInput.prototype.handleSizeChanged = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GTextInput.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @extends {fairygui.GList}
 * @constructor
 * @struct
 */
fgui.GTree = function() {};
/** @type {!Handler} */
fgui.GTree.prototype.treeNodeRender;
/** @type {!Handler} */
fgui.GTree.prototype.treeNodeWillExpand;
/** @type {?} */
fgui.GTree.prototype._indent;
/** @type {?} */
fgui.GTree.prototype._clickToExpand;
/** @type {?} */
fgui.GTree.prototype._rootNode;
/** @type {?} */
fgui.GTree.prototype._expandedStatusInEvt;
/** @type {!fairygui.GTreeNode} */
fgui.GTree.prototype.rootNode;
/** @type {number} */
fgui.GTree.prototype.indent;
/** @type {number} */
fgui.GTree.prototype.clickToExpand;
/** @type {?} */
fgui.GTree.prototype.createCell;
/** @type {?} */
fgui.GTree.prototype.getInsertIndexForNode;
/** @type {?} */
fgui.GTree.prototype.getFolderEndIndex;
/** @type {?} */
fgui.GTree.prototype.checkChildren;
/** @type {?} */
fgui.GTree.prototype.hideFolderNode;
/** @type {?} */
fgui.GTree.prototype.removeNode;
/** @type {?} */
fgui.GTree.prototype.__cellMouseDown;
/** @type {?} */
fgui.GTree.prototype.__expandedStateChanged;

/**
 * @return {!fairygui.GTreeNode}
 */
fgui.GTree.prototype.getSelectedNode = function() {};

/**
 * @param {!Array<!fairygui.GTreeNode>=} result
 * @return {!Array<!fairygui.GTreeNode>}
 */
fgui.GTree.prototype.getSelectedNodes = function(result) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @param {boolean=} scrollItToView
 * @return {void}
 */
fgui.GTree.prototype.selectNode = function(node, scrollItToView) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype.unselectNode = function(node) {};

/**
 * @param {!fairygui.GTreeNode=} folderNode
 * @return {void}
 */
fgui.GTree.prototype.expandAll = function(folderNode) {};

/**
 * @param {!fairygui.GTreeNode=} folderNode
 * @return {void}
 */
fgui.GTree.prototype.collapseAll = function(folderNode) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype._afterInserted = function(node) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype._afterRemoved = function(node) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype._afterExpanded = function(node) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype._afterCollapsed = function(node) {};

/**
 * @param {!fairygui.GTreeNode} node
 * @return {void}
 */
fgui.GTree.prototype._afterMoved = function(node) {};

/**
 * @protected
 * @param {!fairygui.GObject} item
 * @param {!Laya.Event} evt
 * @return {void}
 */
fgui.GTree.prototype.dispatchItemEvent = function(item, evt) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {number} beginPos
 * @return {void}
 */
fgui.GTree.prototype.setup_beforeAdd = function(buffer, beginPos) {};

/**
 * @protected
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GTree.prototype.readItems = function(buffer) {};

/**
 * @constructor
 * @struct
 * @param {boolean} hasChild
 * @param {string=} resURL
 */
fgui.GTreeNode = function(hasChild, resURL) {};
/** @type {?} */
fgui.GTreeNode.prototype.data;
/** @type {?} */
fgui.GTreeNode.prototype._parent;
/** @type {?} */
fgui.GTreeNode.prototype._children;
/** @type {?} */
fgui.GTreeNode.prototype._expanded;
/** @type {?} */
fgui.GTreeNode.prototype._level;
/** @type {?} */
fgui.GTreeNode.prototype._tree;
/** @type {!fairygui.GComponent} */
fgui.GTreeNode.prototype._cell;
/** @type {string} */
fgui.GTreeNode.prototype._resURL;
/** @type {boolean} */
fgui.GTreeNode.prototype.expanded;
/** @type {boolean} */
fgui.GTreeNode.prototype.isFolder;
/** @type {!fairygui.GTreeNode} */
fgui.GTreeNode.prototype.parent;
/** @type {string} */
fgui.GTreeNode.prototype.text;
/** @type {string} */
fgui.GTreeNode.prototype.icon;
/** @type {!fairygui.GComponent} */
fgui.GTreeNode.prototype.cell;
/** @type {number} */
fgui.GTreeNode.prototype.level;
/** @type {number} */
fgui.GTreeNode.prototype.numChildren;
/** @type {!fairygui.GTree} */
fgui.GTreeNode.prototype.tree;

/**
 * @param {number} value
 * @return {void}
 */
fgui.GTreeNode.prototype._setLevel = function(value) {};

/**
 * @param {!fairygui.GTreeNode} child
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.addChild = function(child) {};

/**
 * @param {!fairygui.GTreeNode} child
 * @param {number} index
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.addChildAt = function(child, index) {};

/**
 * @param {!fairygui.GTreeNode} child
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.removeChild = function(child) {};

/**
 * @param {number} index
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.removeChildAt = function(index) {};

/**
 * @param {number=} beginIndex
 * @param {number=} endIndex
 * @return {void}
 */
fgui.GTreeNode.prototype.removeChildren = function(beginIndex, endIndex) {};

/**
 * @param {number} index
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.getChildAt = function(index) {};

/**
 * @param {!fairygui.GTreeNode} child
 * @return {number}
 */
fgui.GTreeNode.prototype.getChildIndex = function(child) {};

/**
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.getPrevSibling = function() {};

/**
 * @return {!fairygui.GTreeNode}
 */
fgui.GTreeNode.prototype.getNextSibling = function() {};

/**
 * @param {!fairygui.GTreeNode} child
 * @param {number} index
 * @return {void}
 */
fgui.GTreeNode.prototype.setChildIndex = function(child, index) {};

/**
 * @param {!fairygui.GTreeNode} child1
 * @param {!fairygui.GTreeNode} child2
 * @return {void}
 */
fgui.GTreeNode.prototype.swapChildren = function(child1, child2) {};

/**
 * @param {number} index1
 * @param {number} index2
 * @return {void}
 */
fgui.GTreeNode.prototype.swapChildrenAt = function(index1, index2) {};

/**
 * @return {void}
 */
fgui.GTreeNode.prototype.expandToRoot = function() {};

/**
 * @param {!fairygui.GTree} value
 * @return {void}
 */
fgui.GTreeNode.prototype._setTree = function(value) {};
/**
 * @record
 * @struct
 */
fgui.IUISource = function() {};
/** @type {string} */
fgui.IUISource.prototype.fileName;
/** @type {boolean} */
fgui.IUISource.prototype.loaded;

/**
 * @param {!Function} callback
 * @param {?} thisObj
 * @return {void}
 */
fgui.IUISource.prototype.load = function(callback, thisObj) {};

/**
 * @constructor
 * @struct
 */
fgui.PackageItem = function() {};
/** @type {!fairygui.UIPackage} */
fgui.PackageItem.prototype.owner;
/** @type {number} */
fgui.PackageItem.prototype.type;
/** @type {number} */
fgui.PackageItem.prototype.objectType;
/** @type {string} */
fgui.PackageItem.prototype.id;
/** @type {string} */
fgui.PackageItem.prototype.name;
/** @type {number} */
fgui.PackageItem.prototype.width;
/** @type {number} */
fgui.PackageItem.prototype.height;
/** @type {string} */
fgui.PackageItem.prototype.file;
/** @type {boolean} */
fgui.PackageItem.prototype.decoded;
/** @type {!Array<!Function>} */
fgui.PackageItem.prototype.loading;
/** @type {!fairygui.ByteBuffer} */
fgui.PackageItem.prototype.rawData;
/** @type {!Array<string>} */
fgui.PackageItem.prototype.highResolution;
/** @type {!Array<string>} */
fgui.PackageItem.prototype.branches;
/** @type {!Laya.Rectangle} */
fgui.PackageItem.prototype.scale9Grid;
/** @type {boolean} */
fgui.PackageItem.prototype.scaleByTile;
/** @type {number} */
fgui.PackageItem.prototype.tileGridIndice;
/** @type {boolean} */
fgui.PackageItem.prototype.smoothing;
/** @type {!Laya.Texture} */
fgui.PackageItem.prototype.texture;
/** @type {!fairygui.PixelHitTestData} */
fgui.PackageItem.prototype.pixelHitTestData;
/** @type {number} */
fgui.PackageItem.prototype.interval;
/** @type {number} */
fgui.PackageItem.prototype.repeatDelay;
/** @type {boolean} */
fgui.PackageItem.prototype.swing;
/** @type {!Array<!fairygui.Frame>} */
fgui.PackageItem.prototype.frames;
/** @type {?|undefined} */
fgui.PackageItem.prototype.extensionType;
/** @type {!fairygui.BitmapFont} */
fgui.PackageItem.prototype.bitmapFont;
/** @type {!Laya.Templet} */
fgui.PackageItem.prototype.templet;
/** @type {!Laya.Point} */
fgui.PackageItem.prototype.skeletonAnchor;

/**
 * @return {!Object}
 */
fgui.PackageItem.prototype.load = function() {};

/**
 * @return {!fairygui.PackageItem}
 */
fgui.PackageItem.prototype.getBranch = function() {};

/**
 * @return {!fairygui.PackageItem}
 */
fgui.PackageItem.prototype.getHighResolution = function() {};

/**
 * @return {string}
 */
fgui.PackageItem.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {string=} resourceURL
 */
fgui.PopupMenu = function(resourceURL) {};
/** @type {!fairygui.GComponent} */
fgui.PopupMenu.prototype._contentPane;
/** @type {!fairygui.GList} */
fgui.PopupMenu.prototype._list;
/** @type {number} */
fgui.PopupMenu.prototype.itemCount;
/** @type {!fairygui.GComponent} */
fgui.PopupMenu.prototype.contentPane;
/** @type {!fairygui.GList} */
fgui.PopupMenu.prototype.list;
/** @type {?} */
fgui.PopupMenu.prototype.__clickItem;
/** @type {?} */
fgui.PopupMenu.prototype.__clickItem2;
/** @type {?} */
fgui.PopupMenu.prototype.__addedToStage;

/**
 * @return {void}
 */
fgui.PopupMenu.prototype.dispose = function() {};

/**
 * @param {string} caption
 * @param {!Handler=} handler
 * @return {!fairygui.GButton}
 */
fgui.PopupMenu.prototype.addItem = function(caption, handler) {};

/**
 * @param {string} caption
 * @param {number} index
 * @param {!Handler=} handler
 * @return {!fairygui.GButton}
 */
fgui.PopupMenu.prototype.addItemAt = function(caption, index, handler) {};

/**
 * @return {void}
 */
fgui.PopupMenu.prototype.addSeperator = function() {};

/**
 * @param {number} index
 * @return {string}
 */
fgui.PopupMenu.prototype.getItemName = function(index) {};

/**
 * @param {string} name
 * @param {string} caption
 * @return {void}
 */
fgui.PopupMenu.prototype.setItemText = function(name, caption) {};

/**
 * @param {string} name
 * @param {boolean} visible
 * @return {void}
 */
fgui.PopupMenu.prototype.setItemVisible = function(name, visible) {};

/**
 * @param {string} name
 * @param {boolean} grayed
 * @return {void}
 */
fgui.PopupMenu.prototype.setItemGrayed = function(name, grayed) {};

/**
 * @param {string} name
 * @param {boolean} checkable
 * @return {void}
 */
fgui.PopupMenu.prototype.setItemCheckable = function(name, checkable) {};

/**
 * @param {string} name
 * @param {boolean} checked
 * @return {void}
 */
fgui.PopupMenu.prototype.setItemChecked = function(name, checked) {};

/**
 * @param {string} name
 * @return {boolean}
 */
fgui.PopupMenu.prototype.isItemChecked = function(name) {};

/**
 * @param {string} name
 * @return {boolean}
 */
fgui.PopupMenu.prototype.removeItem = function(name) {};

/**
 * @return {void}
 */
fgui.PopupMenu.prototype.clearItems = function() {};

/**
 * @param {!fairygui.GObject=} target
 * @param {(boolean|!fairygui.PopupDirection)=} dir
 * @return {void}
 */
fgui.PopupMenu.prototype.show = function(target, dir) {};

/**
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.RelationItem = function(owner) {};
/** @type {?} */
fgui.RelationItem.prototype._owner;
/** @type {?} */
fgui.RelationItem.prototype._target;
/** @type {?} */
fgui.RelationItem.prototype._defs;
/** @type {?} */
fgui.RelationItem.prototype._targetX;
/** @type {?} */
fgui.RelationItem.prototype._targetY;
/** @type {?} */
fgui.RelationItem.prototype._targetWidth;
/** @type {?} */
fgui.RelationItem.prototype._targetHeight;
/** @type {!fairygui.GObject} */
fgui.RelationItem.prototype.owner;
/** @type {!fairygui.GObject} */
fgui.RelationItem.prototype.target;
/** @type {boolean} */
fgui.RelationItem.prototype.isEmpty;
/** @type {?} */
fgui.RelationItem.prototype.applyOnXYChanged;
/** @type {?} */
fgui.RelationItem.prototype.applyOnSizeChanged;
/** @type {?} */
fgui.RelationItem.prototype.addRefTarget;
/** @type {?} */
fgui.RelationItem.prototype.releaseRefTarget;
/** @type {?} */
fgui.RelationItem.prototype.__targetXYChanged;
/** @type {?} */
fgui.RelationItem.prototype.__targetSizeChanged;
/** @type {?} */
fgui.RelationItem.prototype.__targetSizeWillChange;

/**
 * @param {number} relationType
 * @param {boolean} usePercent
 * @return {void}
 */
fgui.RelationItem.prototype.add = function(relationType, usePercent) {};

/**
 * @param {number} relationType
 * @param {boolean} usePercent
 * @return {void}
 */
fgui.RelationItem.prototype.internalAdd = function(relationType, usePercent) {};

/**
 * @param {number} relationType
 * @return {void}
 */
fgui.RelationItem.prototype.remove = function(relationType) {};

/**
 * @param {!fairygui.RelationItem} source
 * @return {void}
 */
fgui.RelationItem.prototype.copyFrom = function(source) {};

/**
 * @return {void}
 */
fgui.RelationItem.prototype.dispose = function() {};

/**
 * @param {number} dWidth
 * @param {number} dHeight
 * @param {boolean} applyPivot
 * @return {void}
 */
fgui.RelationItem.prototype.applyOnSelfResized = function(dWidth, dHeight, applyPivot) {};

/**
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.Relations = function(owner) {};
/** @type {?} */
fgui.Relations.prototype._owner;
/** @type {?} */
fgui.Relations.prototype._items;
/** @type {!fairygui.GObject} */
fgui.Relations.prototype.handling;
/** @type {boolean} */
fgui.Relations.prototype.sizeDirty;
/** @type {boolean} */
fgui.Relations.prototype.empty;

/**
 * @param {!fairygui.GObject} target
 * @param {number} relationType
 * @param {boolean=} usePercent
 * @return {void}
 */
fgui.Relations.prototype.add = function(target, relationType, usePercent) {};

/**
 * @param {!fairygui.GObject} target
 * @param {number=} relationType
 * @return {void}
 */
fgui.Relations.prototype.remove = function(target, relationType) {};

/**
 * @param {!fairygui.GObject} target
 * @return {boolean}
 */
fgui.Relations.prototype.contains = function(target) {};

/**
 * @param {!fairygui.GObject} target
 * @return {void}
 */
fgui.Relations.prototype.clearFor = function(target) {};

/**
 * @return {void}
 */
fgui.Relations.prototype.clearAll = function() {};

/**
 * @param {!fairygui.Relations} source
 * @return {void}
 */
fgui.Relations.prototype.copyFrom = function(source) {};

/**
 * @return {void}
 */
fgui.Relations.prototype.dispose = function() {};

/**
 * @param {number} dWidth
 * @param {number} dHeight
 * @param {boolean} applyPivot
 * @return {void}
 */
fgui.Relations.prototype.onOwnerSizeChanged = function(dWidth, dHeight, applyPivot) {};

/**
 * @return {void}
 */
fgui.Relations.prototype.ensureRelationsSizeCorrect = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @param {boolean} parentToChild
 * @return {void}
 */
fgui.Relations.prototype.setup = function(buffer, parentToChild) {};

/**
 * @constructor
 * @struct
 * @param {!fairygui.GComponent} owner
 */
fgui.ScrollPane = function(owner) {};
/** @type {?} */
fgui.ScrollPane.prototype._owner;
/** @type {?} */
fgui.ScrollPane.prototype._container;
/** @type {?} */
fgui.ScrollPane.prototype._maskContainer;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._alignContainer;
/** @type {?} */
fgui.ScrollPane.prototype._scrollType;
/** @type {?} */
fgui.ScrollPane.prototype._scrollStep;
/** @type {?} */
fgui.ScrollPane.prototype._mouseWheelStep;
/** @type {?} */
fgui.ScrollPane.prototype._decelerationRate;
/** @type {?} */
fgui.ScrollPane.prototype._scrollBarMargin;
/** @type {?} */
fgui.ScrollPane.prototype._bouncebackEffect;
/** @type {?} */
fgui.ScrollPane.prototype._touchEffect;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._scrollBarDisplayAuto;
/** @type {?} */
fgui.ScrollPane.prototype._vScrollNone;
/** @type {?} */
fgui.ScrollPane.prototype._hScrollNone;
/** @type {?} */
fgui.ScrollPane.prototype._needRefresh;
/** @type {?} */
fgui.ScrollPane.prototype._refreshBarAxis;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._displayOnLeft;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._snapToItem;
/** @type {boolean} */
fgui.ScrollPane.prototype._displayInDemand;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._mouseWheelEnabled;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._pageMode;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._inertiaDisabled;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._floating;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._dontClipMargin;
/** @type {?} */
fgui.ScrollPane.prototype._xPos;
/** @type {?} */
fgui.ScrollPane.prototype._yPos;
/** @type {?} */
fgui.ScrollPane.prototype._viewSize;
/** @type {?} */
fgui.ScrollPane.prototype._contentSize;
/** @type {?} */
fgui.ScrollPane.prototype._overlapSize;
/** @type {?} */
fgui.ScrollPane.prototype._pageSize;
/** @type {?} */
fgui.ScrollPane.prototype._containerPos;
/** @type {?} */
fgui.ScrollPane.prototype._beginTouchPos;
/** @type {?} */
fgui.ScrollPane.prototype._lastTouchPos;
/** @type {?} */
fgui.ScrollPane.prototype._lastTouchGlobalPos;
/** @type {?} */
fgui.ScrollPane.prototype._velocity;
/** @type {?} */
fgui.ScrollPane.prototype._velocityScale;
/** @type {?} */
fgui.ScrollPane.prototype._lastMoveTime;
/** @type {?} */
fgui.ScrollPane.prototype._isHoldAreaDone;
/** @type {?} */
fgui.ScrollPane.prototype._aniFlag;
/** @type {number} */
fgui.ScrollPane.prototype._loop;
/** @type {?} */
fgui.ScrollPane.prototype._headerLockedSize;
/** @type {?} */
fgui.ScrollPane.prototype._footerLockedSize;
/** @type {?} */
fgui.ScrollPane.prototype._refreshEventDispatching;
/** @type {?} */
fgui.ScrollPane.prototype._dragged;
/** @type {?} */
fgui.ScrollPane.prototype._tweening;
/** @type {?} */
fgui.ScrollPane.prototype._tweenTime;
/** @type {?} */
fgui.ScrollPane.prototype._tweenDuration;
/** @type {?} */
fgui.ScrollPane.prototype._tweenStart;
/** @type {?} */
fgui.ScrollPane.prototype._tweenChange;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._pageController;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._hzScrollBar;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._vtScrollBar;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._header;
/** @type {?|undefined} */
fgui.ScrollPane.prototype._footer;
/** @type {!fairygui.ScrollPane} */
fgui.ScrollPane.draggingPane;
/** @type {!fairygui.GComponent} */
fgui.ScrollPane.prototype.owner;
/** @type {!fairygui.GScrollBar} */
fgui.ScrollPane.prototype.hzScrollBar;
/** @type {!fairygui.GScrollBar} */
fgui.ScrollPane.prototype.vtScrollBar;
/** @type {!fairygui.GComponent} */
fgui.ScrollPane.prototype.header;
/** @type {!fairygui.GComponent} */
fgui.ScrollPane.prototype.footer;
/** @type {boolean} */
fgui.ScrollPane.prototype.bouncebackEffect;
/** @type {boolean} */
fgui.ScrollPane.prototype.touchEffect;
/** @type {number} */
fgui.ScrollPane.prototype.scrollStep;
/** @type {boolean} */
fgui.ScrollPane.prototype.snapToItem;
/** @type {boolean} */
fgui.ScrollPane.prototype.mouseWheelEnabled;
/** @type {number} */
fgui.ScrollPane.prototype.decelerationRate;
/** @type {boolean} */
fgui.ScrollPane.prototype.isDragged;
/** @type {number} */
fgui.ScrollPane.prototype.percX;
/** @type {number} */
fgui.ScrollPane.prototype.percY;
/** @type {number} */
fgui.ScrollPane.prototype.posX;
/** @type {number} */
fgui.ScrollPane.prototype.posY;
/** @type {number} */
fgui.ScrollPane.prototype.contentWidth;
/** @type {number} */
fgui.ScrollPane.prototype.contentHeight;
/** @type {number} */
fgui.ScrollPane.prototype.viewWidth;
/** @type {number} */
fgui.ScrollPane.prototype.viewHeight;
/** @type {number} */
fgui.ScrollPane.prototype.currentPageX;
/** @type {number} */
fgui.ScrollPane.prototype.currentPageY;
/** @type {boolean} */
fgui.ScrollPane.prototype.isBottomMost;
/** @type {boolean} */
fgui.ScrollPane.prototype.isRightMost;
/** @type {!fairygui.Controller} */
fgui.ScrollPane.prototype.pageController;
/** @type {number} */
fgui.ScrollPane.prototype.scrollingPosX;
/** @type {number} */
fgui.ScrollPane.prototype.scrollingPosY;
/** @type {?} */
fgui.ScrollPane.prototype.updatePageController;
/** @type {?} */
fgui.ScrollPane.prototype.handleSizeChanged;
/** @type {?} */
fgui.ScrollPane.prototype.posChanged;
/** @type {?} */
fgui.ScrollPane.prototype.refresh;
/** @type {?} */
fgui.ScrollPane.prototype.refresh2;
/** @type {?} */
fgui.ScrollPane.prototype.__mouseDown;
/** @type {?} */
fgui.ScrollPane.prototype.__mouseMove;
/** @type {?} */
fgui.ScrollPane.prototype.__mouseUp;
/** @type {?} */
fgui.ScrollPane.prototype.__click;
/** @type {?} */
fgui.ScrollPane.prototype.__mouseWheel;
/** @type {?} */
fgui.ScrollPane.prototype.updateScrollBarPos;
/** @type {?} */
fgui.ScrollPane.prototype.updateScrollBarVisible2;
/** @type {?} */
fgui.ScrollPane.prototype.__barTweenComplete;
/** @type {?} */
fgui.ScrollPane.prototype.getLoopPartSize;
/** @type {?} */
fgui.ScrollPane.prototype.loopCheckingCurrent;
/** @type {?} */
fgui.ScrollPane.prototype.loopCheckingTarget;
/** @type {?} */
fgui.ScrollPane.prototype.loopCheckingTarget2;
/** @type {?} */
fgui.ScrollPane.prototype.loopCheckingNewPos;
/** @type {?} */
fgui.ScrollPane.prototype.alignPosition;
/** @type {?} */
fgui.ScrollPane.prototype.alignByPage;
/** @type {?} */
fgui.ScrollPane.prototype.updateTargetAndDuration;
/** @type {?} */
fgui.ScrollPane.prototype.updateTargetAndDuration2;
/** @type {?} */
fgui.ScrollPane.prototype.fixDuration;
/** @type {?} */
fgui.ScrollPane.prototype.startTween;
/** @type {?} */
fgui.ScrollPane.prototype.killTween;
/** @type {?} */
fgui.ScrollPane.prototype.checkRefreshBar;
/** @type {?} */
fgui.ScrollPane.prototype.tweenUpdate;
/** @type {?} */
fgui.ScrollPane.prototype.runTween;

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.ScrollPane.prototype.setup = function(buffer) {};

/**
 * @return {void}
 */
fgui.ScrollPane.prototype.dispose = function() {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setPercX = function(value, ani) {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setPercY = function(value, ani) {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setPosX = function(value, ani) {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setPosY = function(value, ani) {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setCurrentPageX = function(value, ani) {};

/**
 * @param {number} value
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.setCurrentPageY = function(value, ani) {};

/**
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollTop = function(ani) {};

/**
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollBottom = function(ani) {};

/**
 * @param {number=} ratio
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollUp = function(ratio, ani) {};

/**
 * @param {number=} ratio
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollDown = function(ratio, ani) {};

/**
 * @param {number=} ratio
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollLeft = function(ratio, ani) {};

/**
 * @param {number=} ratio
 * @param {boolean=} ani
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollRight = function(ratio, ani) {};

/**
 * @param {(!Laya.Rectangle|!fairygui.GObject)} target
 * @param {boolean=} ani
 * @param {boolean=} setFirst
 * @return {void}
 */
fgui.ScrollPane.prototype.scrollToView = function(target, ani, setFirst) {};

/**
 * @param {!fairygui.GObject} obj
 * @return {boolean}
 */
fgui.ScrollPane.prototype.isChildInView = function(obj) {};

/**
 * @return {void}
 */
fgui.ScrollPane.prototype.cancelDragging = function() {};

/**
 * @param {number} size
 * @return {void}
 */
fgui.ScrollPane.prototype.lockHeader = function(size) {};

/**
 * @param {number} size
 * @return {void}
 */
fgui.ScrollPane.prototype.lockFooter = function(size) {};

/**
 * @return {void}
 */
fgui.ScrollPane.prototype.onOwnerSizeChanged = function() {};

/**
 * @param {!fairygui.Controller} c
 * @return {void}
 */
fgui.ScrollPane.prototype.handleControllerChanged = function(c) {};

/**
 * @return {void}
 */
fgui.ScrollPane.prototype.adjustMaskContainer = function() {};

/**
 * @param {number} aWidth
 * @param {number} aHeight
 * @return {void}
 */
fgui.ScrollPane.prototype.setSize = function(aWidth, aHeight) {};

/**
 * @param {number} aWidth
 * @param {number} aHeight
 * @return {void}
 */
fgui.ScrollPane.prototype.setContentSize = function(aWidth, aHeight) {};

/**
 * @param {number} deltaWidth
 * @param {number} deltaHeight
 * @param {number} deltaPosX
 * @param {number} deltaPosY
 * @return {void}
 */
fgui.ScrollPane.prototype.changeContentSizeOnScrolling = function(deltaWidth, deltaHeight, deltaPosX, deltaPosY) {};

/**
 * @return {void}
 */
fgui.ScrollPane.prototype.updateScrollBarVisible = function() {};

/**
 * @constructor
 * @struct
 * @param {!fairygui.GComponent} owner
 */
fgui.Transition = function(owner) {};
/** @type {string} */
fgui.Transition.prototype.name;
/** @type {?} */
fgui.Transition.prototype._owner;
/** @type {?} */
fgui.Transition.prototype._ownerBaseX;
/** @type {?} */
fgui.Transition.prototype._ownerBaseY;
/** @type {?} */
fgui.Transition.prototype._items;
/** @type {?} */
fgui.Transition.prototype._totalTimes;
/** @type {?} */
fgui.Transition.prototype._totalTasks;
/** @type {?} */
fgui.Transition.prototype._playing;
/** @type {?} */
fgui.Transition.prototype._paused;
/** @type {?} */
fgui.Transition.prototype._onComplete;
/** @type {?} */
fgui.Transition.prototype._options;
/** @type {?} */
fgui.Transition.prototype._reversed;
/** @type {?} */
fgui.Transition.prototype._totalDuration;
/** @type {?} */
fgui.Transition.prototype._autoPlay;
/** @type {?} */
fgui.Transition.prototype._autoPlayTimes;
/** @type {?} */
fgui.Transition.prototype._autoPlayDelay;
/** @type {?} */
fgui.Transition.prototype._timeScale;
/** @type {?} */
fgui.Transition.prototype._startTime;
/** @type {?} */
fgui.Transition.prototype._endTime;
/** @type {?} */
fgui.Transition.prototype._play;
/** @type {?} */
fgui.Transition.prototype.stopItem;
/** @type {boolean} */
fgui.Transition.prototype.playing;
/** @type {number} */
fgui.Transition.prototype.timeScale;
/** @type {?} */
fgui.Transition.prototype.onDelayedPlay;
/** @type {?} */
fgui.Transition.prototype.internalPlay;
/** @type {?} */
fgui.Transition.prototype.playItem;
/** @type {?} */
fgui.Transition.prototype.skipAnimations;
/** @type {?} */
fgui.Transition.prototype.onDelayedPlayItem;
/** @type {?} */
fgui.Transition.prototype.onTweenStart;
/** @type {?} */
fgui.Transition.prototype.onTweenUpdate;
/** @type {?} */
fgui.Transition.prototype.onTweenComplete;
/** @type {?} */
fgui.Transition.prototype.onPlayTransCompleted;
/** @type {?} */
fgui.Transition.prototype.callHook;
/** @type {?} */
fgui.Transition.prototype.checkAllComplete;
/** @type {?} */
fgui.Transition.prototype.applyValue;
/** @type {?} */
fgui.Transition.prototype.decodeValue;

/**
 * @param {!Handler=} onComplete
 * @param {number=} times
 * @param {number=} delay
 * @param {number=} startTime
 * @param {number=} endTime
 * @return {void}
 */
fgui.Transition.prototype.play = function(onComplete, times, delay, startTime, endTime) {};

/**
 * @param {!Handler=} onComplete
 * @param {number=} times
 * @param {number=} delay
 * @param {number=} startTime
 * @param {number=} endTime
 * @return {void}
 */
fgui.Transition.prototype.playReverse = function(onComplete, times, delay, startTime, endTime) {};

/**
 * @param {number} value
 * @return {void}
 */
fgui.Transition.prototype.changePlayTimes = function(value) {};

/**
 * @param {boolean} value
 * @param {number=} times
 * @param {number=} delay
 * @return {void}
 */
fgui.Transition.prototype.setAutoPlay = function(value, times, delay) {};

/**
 * @param {boolean=} setToComplete
 * @param {boolean=} processCallback
 * @return {void}
 */
fgui.Transition.prototype.stop = function(setToComplete, processCallback) {};

/**
 * @param {boolean} paused
 * @return {void}
 */
fgui.Transition.prototype.setPaused = function(paused) {};

/**
 * @return {void}
 */
fgui.Transition.prototype.dispose = function() {};

/**
 * @param {string} label
 * @param {...?} args
 * @return {void}
 */
fgui.Transition.prototype.setValue = function(label, args) {};

/**
 * @param {string} label
 * @param {!Handler} callback
 * @return {void}
 */
fgui.Transition.prototype.setHook = function(label, callback) {};

/**
 * @return {void}
 */
fgui.Transition.prototype.clearHooks = function() {};

/**
 * @param {string} label
 * @param {!fairygui.GObject} newTarget
 * @return {void}
 */
fgui.Transition.prototype.setTarget = function(label, newTarget) {};

/**
 * @param {string} label
 * @param {number} value
 * @return {void}
 */
fgui.Transition.prototype.setDuration = function(label, value) {};

/**
 * @param {string} label
 * @return {number}
 */
fgui.Transition.prototype.getLabelTime = function(label) {};

/**
 * @param {string} targetId
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.Transition.prototype.updateFromRelations = function(targetId, dx, dy) {};

/**
 * @return {void}
 */
fgui.Transition.prototype.onOwnerAddedToStage = function() {};

/**
 * @return {void}
 */
fgui.Transition.prototype.onOwnerRemovedFromStage = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.Transition.prototype.setup = function(buffer) {};

/**
 * @constructor
 * @struct
 */
fgui.TranslationHelper = function() {};
/** @type {!Object<string,!Object<string,string>>} */
fgui.TranslationHelper.strings;

/**
 * @param {string} source
 * @return {void}
 */
fgui.TranslationHelper.loadFromXML = function(source) {};

/**
 * @param {!fairygui.PackageItem} item
 * @return {void}
 */
fgui.TranslationHelper.translateComponent = function(item) {};

/**
 * @constructor
 * @struct
 */
fgui.UIConfig = function() {};
/** @type {string} */
fgui.UIConfig.defaultFont;
/** @type {string} */
fgui.UIConfig.windowModalWaiting;
/** @type {string} */
fgui.UIConfig.globalModalWaiting;
/** @type {string} */
fgui.UIConfig.modalLayerColor;
/** @type {string} */
fgui.UIConfig.buttonSound;
/** @type {number} */
fgui.UIConfig.buttonSoundVolumeScale;
/** @type {string} */
fgui.UIConfig.horizontalScrollBar;
/** @type {string} */
fgui.UIConfig.verticalScrollBar;
/** @type {number} */
fgui.UIConfig.defaultScrollStep;
/** @type {number} */
fgui.UIConfig.defaultScrollDecelerationRate;
/** @type {number} */
fgui.UIConfig.defaultScrollBarDisplay;
/** @type {boolean} */
fgui.UIConfig.defaultScrollTouchEffect;
/** @type {boolean} */
fgui.UIConfig.defaultScrollBounceEffect;
/** @type {number} */
fgui.UIConfig.defaultScrollSnappingThreshold;
/** @type {number} */
fgui.UIConfig.defaultScrollPagingThreshold;
/** @type {string} */
fgui.UIConfig.popupMenu;
/** @type {string} */
fgui.UIConfig.popupMenu_seperator;
/** @type {string} */
fgui.UIConfig.loaderErrorSign;
/** @type {string} */
fgui.UIConfig.tooltipsWin;
/** @type {number} */
fgui.UIConfig.defaultComboBoxVisibleItemCount;
/** @type {number} */
fgui.UIConfig.touchScrollSensitivity;
/** @type {number} */
fgui.UIConfig.touchDragSensitivity;
/** @type {number} */
fgui.UIConfig.clickDragSensitivity;
/** @type {boolean} */
fgui.UIConfig.bringWindowToFrontOnClick;
/** @type {number} */
fgui.UIConfig.frameTimeForAsyncUIConstruction;
/** @type {boolean} */
fgui.UIConfig.textureLinearSampling;
/** @type {string} */
fgui.UIConfig.packageFileExtension;

/**
 * @constructor
 * @struct
 */
fgui.UIObjectFactory = function() {};
/** @type {!Object<string,function(new:fairygui.GComponent)>} */
fgui.UIObjectFactory.extensions;
/** @type {function(new:fairygui.GLoader)} */
fgui.UIObjectFactory.loaderType;

/**
 * @param {string} url
 * @param {function(new:fairygui.GComponent)} type
 * @return {void}
 */
fgui.UIObjectFactory.setExtension = function(url, type) {};

/**
 * @param {string} url
 * @param {function(new:fairygui.GComponent)} type
 * @return {void}
 */
fgui.UIObjectFactory.setPackageItemExtension = function(url, type) {};

/**
 * @param {function(new:fairygui.GLoader)} type
 * @return {void}
 */
fgui.UIObjectFactory.setLoaderExtension = function(type) {};

/**
 * @param {!fairygui.PackageItem} pi
 * @return {void}
 */
fgui.UIObjectFactory.resolvePackageItemExtension = function(pi) {};

/**
 * @param {(number|!fairygui.PackageItem)} type
 * @param {function(new:fairygui.GObject)=} userClass
 * @return {!fairygui.GObject}
 */
fgui.UIObjectFactory.newObject = function(type, userClass) {};

/**
 * @constructor
 * @struct
 */
fgui.UIPackage = function() {};
/** @type {?} */
fgui.UIPackage.prototype._id;
/** @type {?} */
fgui.UIPackage.prototype._name;
/** @type {?} */
fgui.UIPackage.prototype._items;
/** @type {?} */
fgui.UIPackage.prototype._itemsById;
/** @type {?} */
fgui.UIPackage.prototype._itemsByName;
/** @type {?} */
fgui.UIPackage.prototype._resKey;
/** @type {?} */
fgui.UIPackage.prototype._customId;
/** @type {?} */
fgui.UIPackage.prototype._sprites;
/** @type {?} */
fgui.UIPackage.prototype._dependencies;
/** @type {?} */
fgui.UIPackage.prototype._branches;
/** @type {number} */
fgui.UIPackage.prototype._branchIndex;
/** @type {number} */
fgui.UIPackage._constructing;
/** @type {?} */
fgui.UIPackage._instById;
/** @type {?} */
fgui.UIPackage._instByName;
/** @type {?} */
fgui.UIPackage._branch;
/** @type {?} */
fgui.UIPackage._vars;
/** @type {string} */
fgui.UIPackage.branch;
/** @type {?} */
fgui.UIPackage.prototype.loadPackage;
/** @type {string} */
fgui.UIPackage.prototype.id;
/** @type {string} */
fgui.UIPackage.prototype.name;
/** @type {string} */
fgui.UIPackage.prototype.customId;
/** @type {?} */
fgui.UIPackage.prototype.loadMovieClip;
/** @type {?} */
fgui.UIPackage.prototype.loadFont;

/**
 * @param {string} key
 * @return {string}
 */
fgui.UIPackage.getVar = function(key) {};

/**
 * @param {string} key
 * @param {string} value
 * @return {void}
 */
fgui.UIPackage.setVar = function(key, value) {};

/**
 * @param {string} id
 * @return {!fairygui.UIPackage}
 */
fgui.UIPackage.getById = function(id) {};

/**
 * @param {string} name
 * @return {!fairygui.UIPackage}
 */
fgui.UIPackage.getByName = function(name) {};

/**
 * @param {string} resKey
 * @param {!ArrayBuffer=} descData
 * @return {!fairygui.UIPackage}
 */
fgui.UIPackage.addPackage = function(resKey, descData) {};

/**
 * @param {(string|!Array<string>)} resKey resKey 或 [resKey1,resKey2,resKey3....]
 * @param {!Handler} completeHandler
 * @param {!Handler=} progressHandler
 * @return {void}
 */
fgui.UIPackage.loadPackage = function(resKey, completeHandler, progressHandler) {};

/**
 * @param {string} packageIdOrName
 * @return {void}
 */
fgui.UIPackage.removePackage = function(packageIdOrName) {};

/**
 * @param {string} pkgName
 * @param {string} resName
 * @param {function(new:fairygui.GObject)=} userClass
 * @return {!fairygui.GObject}
 */
fgui.UIPackage.createObject = function(pkgName, resName, userClass) {};

/**
 * @param {string} url
 * @param {function(new:fairygui.GObject)=} userClass
 * @return {!fairygui.GObject}
 */
fgui.UIPackage.createObjectFromURL = function(url, userClass) {};

/**
 * @param {string} pkgName
 * @param {string} resName
 * @return {string}
 */
fgui.UIPackage.getItemURL = function(pkgName, resName) {};

/**
 * @param {string} url
 * @return {!fairygui.PackageItem}
 */
fgui.UIPackage.getItemByURL = function(url) {};

/**
 * @param {string} url
 * @return {!Object}
 */
fgui.UIPackage.getItemAssetByURL = function(url) {};

/**
 * @param {string} url
 * @return {string}
 */
fgui.UIPackage.normalizeURL = function(url) {};

/**
 * @param {string} source
 * @return {void}
 */
fgui.UIPackage.setStringsSource = function(source) {};

/**
 * @return {void}
 */
fgui.UIPackage.prototype.loadAllAssets = function() {};

/**
 * @return {void}
 */
fgui.UIPackage.prototype.unloadAssets = function() {};

/**
 * @return {void}
 */
fgui.UIPackage.prototype.dispose = function() {};

/**
 * @param {string} resName
 * @param {function(new:fairygui.GObject)=} userClass
 * @return {!fairygui.GObject}
 */
fgui.UIPackage.prototype.createObject = function(resName, userClass) {};

/**
 * @param {!fairygui.PackageItem} item
 * @param {function(new:fairygui.GObject)=} userClass
 * @return {!fairygui.GObject}
 */
fgui.UIPackage.prototype.internalCreateObject = function(item, userClass) {};

/**
 * @param {string} itemId
 * @return {!fairygui.PackageItem}
 */
fgui.UIPackage.prototype.getItemById = function(itemId) {};

/**
 * @param {string} resName
 * @return {!fairygui.PackageItem}
 */
fgui.UIPackage.prototype.getItemByName = function(resName) {};

/**
 * @param {string} resName
 * @return {!Object}
 */
fgui.UIPackage.prototype.getItemAssetByName = function(resName) {};

/**
 * @param {!fairygui.PackageItem} item
 * @return {!Object}
 */
fgui.UIPackage.prototype.getItemAsset = function(item) {};

/**
 * @param {!fairygui.PackageItem} item
 * @param {function(?, !fairygui.PackageItem): void=} onComplete
 * @return {void}
 */
fgui.UIPackage.prototype.getItemAssetAsync = function(item, onComplete) {};

/**
 * @extends {fairygui.GComponent}
 * @constructor
 * @struct
 */
fgui.Window = function() {};
/** @type {?} */
fgui.Window.prototype._contentPane;
/** @type {?} */
fgui.Window.prototype._modalWaitPane;
/** @type {?} */
fgui.Window.prototype._closeButton;
/** @type {?} */
fgui.Window.prototype._dragArea;
/** @type {?} */
fgui.Window.prototype._contentArea;
/** @type {?} */
fgui.Window.prototype._frame;
/** @type {?} */
fgui.Window.prototype._modal;
/** @type {?|undefined} */
fgui.Window.prototype._uiSources;
/** @type {?|undefined} */
fgui.Window.prototype._inited;
/** @type {?|undefined} */
fgui.Window.prototype._loading;
/** @type {number} */
fgui.Window.prototype._requestingCmd;
/** @type {boolean} */
fgui.Window.prototype.bringToFontOnClick;
/** @type {!fairygui.GComponent} */
fgui.Window.prototype.contentPane;
/** @type {!fairygui.GComponent} */
fgui.Window.prototype.frame;
/** @type {!fairygui.GObject} */
fgui.Window.prototype.closeButton;
/** @type {!fairygui.GObject} */
fgui.Window.prototype.dragArea;
/** @type {!fairygui.GObject} */
fgui.Window.prototype.contentArea;
/** @type {boolean} */
fgui.Window.prototype.isShowing;
/** @type {boolean} */
fgui.Window.prototype.isTop;
/** @type {boolean} */
fgui.Window.prototype.modal;
/** @type {boolean} */
fgui.Window.prototype.modalWaiting;
/** @type {?} */
fgui.Window.prototype.__uiLoadComplete;
/** @type {?} */
fgui.Window.prototype._init;
/** @type {?} */
fgui.Window.prototype.__onShown;
/** @type {?} */
fgui.Window.prototype.__onHidden;
/** @type {?} */
fgui.Window.prototype.__mouseDown;
/** @type {?} */
fgui.Window.prototype.__dragStart;

/**
 * @param {!fairygui.IUISource} source
 * @return {void}
 */
fgui.Window.prototype.addUISource = function(source) {};

/**
 * @return {void}
 */
fgui.Window.prototype.show = function() {};

/**
 * @param {!fairygui.GRoot} root
 * @return {void}
 */
fgui.Window.prototype.showOn = function(root) {};

/**
 * @return {void}
 */
fgui.Window.prototype.hide = function() {};

/**
 * @return {void}
 */
fgui.Window.prototype.hideImmediately = function() {};

/**
 * @param {!fairygui.GRoot} r
 * @param {boolean=} restraint
 * @return {void}
 */
fgui.Window.prototype.centerOn = function(r, restraint) {};

/**
 * @return {void}
 */
fgui.Window.prototype.toggleStatus = function() {};

/**
 * @return {void}
 */
fgui.Window.prototype.bringToFront = function() {};

/**
 * @param {number=} requestingCmd
 * @return {void}
 */
fgui.Window.prototype.showModalWait = function(requestingCmd) {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.layoutModalWaitPane = function() {};

/**
 * @param {number=} requestingCmd
 * @return {boolean}
 */
fgui.Window.prototype.closeModalWait = function(requestingCmd) {};

/**
 * @return {void}
 */
fgui.Window.prototype.init = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.onInit = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.onShown = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.onHide = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.doShowAnimation = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.doHideAnimation = function() {};

/**
 * @return {void}
 */
fgui.Window.prototype.dispose = function() {};

/**
 * @protected
 * @return {void}
 */
fgui.Window.prototype.closeEventHandler = function() {};

/**
 * @constructor
 * @struct
 */
fgui.ControllerAction = function() {};
/** @type {!Array<string>} */
fgui.ControllerAction.prototype.fromPage;
/** @type {!Array<string>} */
fgui.ControllerAction.prototype.toPage;

/**
 * @param {number} type
 * @return {!fairygui.ControllerAction}
 */
fgui.ControllerAction.createAction = function(type) {};

/**
 * @param {!fairygui.Controller} controller
 * @param {string} prevPage
 * @param {string} curPage
 * @return {void}
 */
fgui.ControllerAction.prototype.run = function(controller, prevPage, curPage) {};

/**
 * @protected
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.ControllerAction.prototype.enter = function(controller) {};

/**
 * @protected
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.ControllerAction.prototype.leave = function(controller) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.ControllerAction.prototype.setup = function(buffer) {};

/**
 * @extends {fairygui.ControllerAction}
 * @constructor
 * @struct
 */
fgui.ChangePageAction = function() {};
/** @type {string} */
fgui.ChangePageAction.prototype.objectId;
/** @type {string} */
fgui.ChangePageAction.prototype.controllerName;
/** @type {string} */
fgui.ChangePageAction.prototype.targetPage;

/**
 * @protected
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.ChangePageAction.prototype.enter = function(controller) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.ChangePageAction.prototype.setup = function(buffer) {};

/**
 * @extends {fairygui.ControllerAction}
 * @constructor
 * @struct
 */
fgui.PlayTransitionAction = function() {};
/** @type {string} */
fgui.PlayTransitionAction.prototype.transitionName;
/** @type {number} */
fgui.PlayTransitionAction.prototype.playTimes;
/** @type {number} */
fgui.PlayTransitionAction.prototype.delay;
/** @type {boolean} */
fgui.PlayTransitionAction.prototype.stopOnExit;
/** @type {?|undefined} */
fgui.PlayTransitionAction.prototype._currentTransition;

/**
 * @protected
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.PlayTransitionAction.prototype.enter = function(controller) {};

/**
 * @protected
 * @param {!fairygui.Controller} controller
 * @return {void}
 */
fgui.PlayTransitionAction.prototype.leave = function(controller) {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.PlayTransitionAction.prototype.setup = function(buffer) {};

/**
 * @constructor
 * @struct
 */
fgui.BitmapFont = function() {};
/** @type {string} */
fgui.BitmapFont.prototype.id;
/** @type {number} */
fgui.BitmapFont.prototype.size;
/** @type {boolean} */
fgui.BitmapFont.prototype.ttf;
/** @type {!Object<string,!fairygui.BMGlyph>} */
fgui.BitmapFont.prototype.glyphs;
/** @type {boolean} */
fgui.BitmapFont.prototype.resizable;
/** @type {boolean} */
fgui.BitmapFont.prototype.tint;
/**
 * @record
 * @struct
 */
fgui.BMGlyph = function() {};
/** @type {number} */
fgui.BMGlyph.prototype.x;
/** @type {number} */
fgui.BMGlyph.prototype.y;
/** @type {number} */
fgui.BMGlyph.prototype.width;
/** @type {number} */
fgui.BMGlyph.prototype.height;
/** @type {number} */
fgui.BMGlyph.prototype.advance;
/** @type {number} */
fgui.BMGlyph.prototype.lineHeight;
/** @type {number} */
fgui.BMGlyph.prototype.channel;
/** @type {!Laya.Texture} */
fgui.BMGlyph.prototype.texture;

/**
 * @param {number} w
 * @param {number} h
 * @param {number} method
 * @param {number} origin
 * @param {boolean} clockwise
 * @param {number} amount
 * @return {!Array<number>}
 */
fgui.fillImage = function(w, h, method, origin, clockwise, amount) {};

/**
 * @extends {Laya.Sprite}
 * @constructor
 * @struct
 */
fgui.Image = function() {};
/** @type {!Laya.Texture} */
fgui.Image.prototype._source;
/** @type {boolean} */
fgui.Image.prototype._scaleByTile;
/** @type {!Laya.Rectangle} */
fgui.Image.prototype._scale9Grid;
/** @type {?} */
fgui.Image.prototype._tileGridIndice;
/** @type {?} */
fgui.Image.prototype._sizeGrid;
/** @type {?} */
fgui.Image.prototype._needRebuild;
/** @type {?} */
fgui.Image.prototype._fillMethod;
/** @type {?} */
fgui.Image.prototype._fillOrigin;
/** @type {?} */
fgui.Image.prototype._fillAmount;
/** @type {?|undefined} */
fgui.Image.prototype._fillClockwise;
/** @type {?|undefined} */
fgui.Image.prototype._mask;
/** @type {?} */
fgui.Image.prototype._color;

/* TODO: GetAccessor: fgui.width */

/* TODO: GetAccessor: fgui.height */

/* TODO: GetAccessor: fgui.texture */
/** @type {!Laya.Rectangle} */
fgui.Image.prototype.scale9Grid;
/** @type {boolean} */
fgui.Image.prototype.scaleByTile;
/** @type {number} */
fgui.Image.prototype.tileGridIndice;
/** @type {number} */
fgui.Image.prototype.fillMethod;
/** @type {number} */
fgui.Image.prototype.fillOrigin;
/** @type {boolean} */
fgui.Image.prototype.fillClockwise;
/** @type {number} */
fgui.Image.prototype.fillAmount;
/** @type {string} */
fgui.Image.prototype.color;
/** @type {?} */
fgui.Image.prototype.markChanged;
/** @type {?} */
fgui.Image.prototype.doDraw;
/** @type {?} */
fgui.Image.prototype.doFill;

/**
 * @protected
 * @return {void}
 */
fgui.Image.prototype.rebuild = function() {};
/**
 * @record
 * @struct
 */
fgui.Frame = function() {};
/** @type {number} */
fgui.Frame.prototype.addDelay;
/** @type {!Laya.Texture} */
fgui.Frame.prototype.texture;

/**
 * @extends {fairygui.Image}
 * @constructor
 * @struct
 */
fgui.MovieClip = function() {};
/** @type {number} */
fgui.MovieClip.prototype.interval;
/** @type {boolean} */
fgui.MovieClip.prototype.swing;
/** @type {number} */
fgui.MovieClip.prototype.repeatDelay;
/** @type {number} */
fgui.MovieClip.prototype.timeScale;
/** @type {?} */
fgui.MovieClip.prototype._playing;
/** @type {?} */
fgui.MovieClip.prototype._frameCount;
/** @type {?} */
fgui.MovieClip.prototype._frames;
/** @type {?} */
fgui.MovieClip.prototype._frame;
/** @type {?} */
fgui.MovieClip.prototype._start;
/** @type {?} */
fgui.MovieClip.prototype._end;
/** @type {?} */
fgui.MovieClip.prototype._times;
/** @type {?} */
fgui.MovieClip.prototype._endAt;
/** @type {?} */
fgui.MovieClip.prototype._status;
/** @type {?|undefined} */
fgui.MovieClip.prototype._endHandler;
/** @type {?} */
fgui.MovieClip.prototype._frameElapsed;
/** @type {?} */
fgui.MovieClip.prototype._reversed;
/** @type {?} */
fgui.MovieClip.prototype._repeatedCount;
/** @type {!Array<!fairygui.Frame>} */
fgui.MovieClip.prototype.frames;
/** @type {number} */
fgui.MovieClip.prototype.frameCount;
/** @type {number} */
fgui.MovieClip.prototype.frame;
/** @type {boolean} */
fgui.MovieClip.prototype.playing;
/** @type {?} */
fgui.MovieClip.prototype.update;
/** @type {?} */
fgui.MovieClip.prototype.drawFrame;
/** @type {?} */
fgui.MovieClip.prototype.checkTimer;
/** @type {?} */
fgui.MovieClip.prototype.__addToStage;
/** @type {?} */
fgui.MovieClip.prototype.__removeFromStage;

/**
 * @return {void}
 */
fgui.MovieClip.prototype.rewind = function() {};

/**
 * @param {!fairygui.MovieClip} anotherMc
 * @return {void}
 */
fgui.MovieClip.prototype.syncStatus = function(anotherMc) {};

/**
 * @param {number} timeInMiniseconds
 * @return {void}
 */
fgui.MovieClip.prototype.advance = function(timeInMiniseconds) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @param {number=} times
 * @param {number=} endAt
 * @param {!Handler=} endHandler
 * @return {void}
 */
fgui.MovieClip.prototype.setPlaySettings = function(start, end, times, endAt, endHandler) {};

/**
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearBase = function(owner) {};
/** @type {boolean} */
fgui.GearBase.disableAllTweenEffect;
/** @type {!fairygui.GObject} */
fgui.GearBase.prototype._owner;
/** @type {!fairygui.Controller} */
fgui.GearBase.prototype._controller;
/** @type {!fairygui.GearTweenConfig} */
fgui.GearBase.prototype._tweenConfig;
/** @type {!fairygui.Controller} */
fgui.GearBase.prototype.controller;
/** @type {!fairygui.GearTweenConfig} */
fgui.GearBase.prototype.tweenConfig;

/**
 * @param {!fairygui.GObject} owner
 * @param {number} index
 * @return {!fairygui.GearBase}
 */
fgui.GearBase.create = function(owner, index) {};

/**
 * @return {void}
 */
fgui.GearBase.prototype.dispose = function() {};

/**
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearBase.prototype.setup = function(buffer) {};

/**
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.GearBase.prototype.updateFromRelations = function(dx, dy) {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearBase.prototype.addStatus = function(pageId, buffer) {};

/**
 * @protected
 * @return {void}
 */
fgui.GearBase.prototype.init = function() {};

/**
 * @return {void}
 */
fgui.GearBase.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearBase.prototype.updateState = function() {};

/**
 * @constructor
 * @struct
 */
fgui.GearTweenConfig = function() {};
/** @type {boolean} */
fgui.GearTweenConfig.prototype.tween;
/** @type {number} */
fgui.GearTweenConfig.prototype.easeType;
/** @type {number} */
fgui.GearTweenConfig.prototype.duration;
/** @type {number} */
fgui.GearTweenConfig.prototype.delay;
/** @type {number} */
fgui.GearTweenConfig.prototype._displayLockToken;
/** @type {!fairygui.GTweener} */
fgui.GearTweenConfig.prototype._tweener;

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearAnimation = function(owner) {};
/** @type {?} */
fgui.GearAnimation.prototype._storage;
/** @type {?} */
fgui.GearAnimation.prototype._default;

/**
 * @protected
 * @return {void}
 */
fgui.GearAnimation.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearAnimation.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearAnimation.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearAnimation.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearColor = function(owner) {};
/** @type {?} */
fgui.GearColor.prototype._storage;
/** @type {?} */
fgui.GearColor.prototype._default;

/**
 * @protected
 * @return {void}
 */
fgui.GearColor.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearColor.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearColor.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearColor.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearDisplay = function(owner) {};
/** @type {!Array<string>} */
fgui.GearDisplay.prototype.pages;
/** @type {?} */
fgui.GearDisplay.prototype._visible;
/** @type {?} */
fgui.GearDisplay.prototype._displayLockToken;
/** @type {boolean} */
fgui.GearDisplay.prototype.connected;

/**
 * @protected
 * @return {void}
 */
fgui.GearDisplay.prototype.init = function() {};

/**
 * @return {void}
 */
fgui.GearDisplay.prototype.apply = function() {};

/**
 * @return {number}
 */
fgui.GearDisplay.prototype.addLock = function() {};

/**
 * @param {number} token
 * @return {void}
 */
fgui.GearDisplay.prototype.releaseLock = function(token) {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearDisplay2 = function(owner) {};
/** @type {!Array<string>} */
fgui.GearDisplay2.prototype.pages;
/** @type {number} */
fgui.GearDisplay2.prototype.condition;
/** @type {?} */
fgui.GearDisplay2.prototype._visible;

/**
 * @protected
 * @return {void}
 */
fgui.GearDisplay2.prototype.init = function() {};

/**
 * @return {void}
 */
fgui.GearDisplay2.prototype.apply = function() {};

/**
 * @param {boolean} connected
 * @return {boolean}
 */
fgui.GearDisplay2.prototype.evaluate = function(connected) {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearFontSize = function(owner) {};
/** @type {?} */
fgui.GearFontSize.prototype._storage;
/** @type {?} */
fgui.GearFontSize.prototype._default;

/**
 * @protected
 * @return {void}
 */
fgui.GearFontSize.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearFontSize.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearFontSize.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearFontSize.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearIcon = function(owner) {};
/** @type {?} */
fgui.GearIcon.prototype._storage;
/** @type {?} */
fgui.GearIcon.prototype._default;

/**
 * @protected
 * @return {void}
 */
fgui.GearIcon.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearIcon.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearIcon.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearIcon.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearLook = function(owner) {};
/** @type {?} */
fgui.GearLook.prototype._storage;
/** @type {?} */
fgui.GearLook.prototype._default;
/** @type {?} */
fgui.GearLook.prototype.__tweenUpdate;
/** @type {?} */
fgui.GearLook.prototype.__tweenComplete;

/**
 * @protected
 * @return {void}
 */
fgui.GearLook.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearLook.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearLook.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearLook.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearSize = function(owner) {};
/** @type {?} */
fgui.GearSize.prototype._storage;
/** @type {?} */
fgui.GearSize.prototype._default;
/** @type {?} */
fgui.GearSize.prototype.__tweenUpdate;
/** @type {?} */
fgui.GearSize.prototype.__tweenComplete;

/**
 * @protected
 * @return {void}
 */
fgui.GearSize.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearSize.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearSize.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearSize.prototype.updateState = function() {};

/**
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.GearSize.prototype.updateFromRelations = function(dx, dy) {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearText = function(owner) {};
/** @type {?} */
fgui.GearText.prototype._storage;
/** @type {?} */
fgui.GearText.prototype._default;

/**
 * @protected
 * @return {void}
 */
fgui.GearText.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearText.prototype.addStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearText.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearText.prototype.updateState = function() {};

/**
 * @extends {fairygui.GearBase}
 * @constructor
 * @struct
 * @param {!fairygui.GObject} owner
 */
fgui.GearXY = function(owner) {};
/** @type {boolean} */
fgui.GearXY.prototype.positionsInPercent;
/** @type {?} */
fgui.GearXY.prototype._storage;
/** @type {?} */
fgui.GearXY.prototype._default;
/** @type {?} */
fgui.GearXY.prototype.__tweenUpdate;
/** @type {?} */
fgui.GearXY.prototype.__tweenComplete;

/**
 * @protected
 * @return {void}
 */
fgui.GearXY.prototype.init = function() {};

/**
 * @protected
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearXY.prototype.addStatus = function(pageId, buffer) {};

/**
 * @param {string} pageId
 * @param {!fairygui.ByteBuffer} buffer
 * @return {void}
 */
fgui.GearXY.prototype.addExtStatus = function(pageId, buffer) {};

/**
 * @return {void}
 */
fgui.GearXY.prototype.apply = function() {};

/**
 * @return {void}
 */
fgui.GearXY.prototype.updateState = function() {};

/**
 * @param {number} dx
 * @param {number} dy
 * @return {void}
 */
fgui.GearXY.prototype.updateFromRelations = function(dx, dy) {};

/**
 * @param {number} easeType
 * @param {number} time
 * @param {number} duration
 * @param {number} overshootOrAmplitude
 * @param {number} period
 * @return {number}
 */
fgui.evaluateEase = function(easeType, time, duration, overshootOrAmplitude, period) {};
/**
 * @constructor
 * @struct
 */
fgui.EaseType = function() {};
/** @type {number} */
fgui.EaseType.Linear;
/** @type {number} */
fgui.EaseType.SineIn;
/** @type {number} */
fgui.EaseType.SineOut;
/** @type {number} */
fgui.EaseType.SineInOut;
/** @type {number} */
fgui.EaseType.QuadIn;
/** @type {number} */
fgui.EaseType.QuadOut;
/** @type {number} */
fgui.EaseType.QuadInOut;
/** @type {number} */
fgui.EaseType.CubicIn;
/** @type {number} */
fgui.EaseType.CubicOut;
/** @type {number} */
fgui.EaseType.CubicInOut;
/** @type {number} */
fgui.EaseType.QuartIn;
/** @type {number} */
fgui.EaseType.QuartOut;
/** @type {number} */
fgui.EaseType.QuartInOut;
/** @type {number} */
fgui.EaseType.QuintIn;
/** @type {number} */
fgui.EaseType.QuintOut;
/** @type {number} */
fgui.EaseType.QuintInOut;
/** @type {number} */
fgui.EaseType.ExpoIn;
/** @type {number} */
fgui.EaseType.ExpoOut;
/** @type {number} */
fgui.EaseType.ExpoInOut;
/** @type {number} */
fgui.EaseType.CircIn;
/** @type {number} */
fgui.EaseType.CircOut;
/** @type {number} */
fgui.EaseType.CircInOut;
/** @type {number} */
fgui.EaseType.ElasticIn;
/** @type {number} */
fgui.EaseType.ElasticOut;
/** @type {number} */
fgui.EaseType.ElasticInOut;
/** @type {number} */
fgui.EaseType.BackIn;
/** @type {number} */
fgui.EaseType.BackOut;
/** @type {number} */
fgui.EaseType.BackInOut;
/** @type {number} */
fgui.EaseType.BounceIn;
/** @type {number} */
fgui.EaseType.BounceOut;
/** @type {number} */
fgui.EaseType.BounceInOut;
/** @type {number} */
fgui.EaseType.Custom;

/**
 * @constructor
 * @struct
 */
fgui.GPath = function() {};
/** @type {?} */
fgui.GPath.prototype._segments;
/** @type {?} */
fgui.GPath.prototype._points;
/** @type {?} */
fgui.GPath.prototype._fullLength;
/** @type {number} */
fgui.GPath.prototype.length;
/** @type {?} */
fgui.GPath.prototype.createSplineSegment;
/** @type {number} */
fgui.GPath.prototype.segmentCount;
/** @type {?} */
fgui.GPath.prototype.onCRSplineCurve;
/** @type {?} */
fgui.GPath.prototype.onBezierCurve;

/**
 * @param {(!fairygui.GPathPoint|!Array<!fairygui.GPathPoint>)} pt1
 * @param {!fairygui.GPathPoint=} pt2
 * @param {!fairygui.GPathPoint=} pt3
 * @param {!fairygui.GPathPoint=} pt4
 * @return {void}
 */
fgui.GPath.prototype.create = function(pt1, pt2, pt3, pt4) {};

/**
 * @return {void}
 */
fgui.GPath.prototype.clear = function() {};

/**
 * @param {number} t
 * @param {!Laya.Point=} result
 * @return {!Laya.Point}
 */
fgui.GPath.prototype.getPointAt = function(t, result) {};

/**
 * @param {number} segmentIndex
 * @param {!Array<!Laya.Point>=} points
 * @return {!Array<!Laya.Point>}
 */
fgui.GPath.prototype.getAnchorsInSegment = function(segmentIndex, points) {};

/**
 * @param {number} segmentIndex
 * @param {number} t0
 * @param {number} t1
 * @param {!Array<!Laya.Point>=} points
 * @param {!Array<number>=} ts
 * @param {number=} pointDensity
 * @return {!Array<!Laya.Point>}
 */
fgui.GPath.prototype.getPointsInSegment = function(segmentIndex, t0, t1, points, ts, pointDensity) {};

/**
 * @param {!Array<!Laya.Point>=} points
 * @param {!Array<number>=} ts
 * @param {number=} pointDensity
 * @return {!Array<!Laya.Point>}
 */
fgui.GPath.prototype.getAllPoints = function(points, ts, pointDensity) {};

/** @enum {number} */
fgui.CurveType = {
  CRSpline: 1,
  Bezier: 1,
  CubicBezier: 1,
  Straight: 1,
};

/**
 * @constructor
 * @struct
 */
fgui.GPathPoint = function() {};
/** @type {number} */
fgui.GPathPoint.prototype.x;
/** @type {number} */
fgui.GPathPoint.prototype.y;
/** @type {number} */
fgui.GPathPoint.prototype.control1_x;
/** @type {number} */
fgui.GPathPoint.prototype.control1_y;
/** @type {number} */
fgui.GPathPoint.prototype.control2_x;
/** @type {number} */
fgui.GPathPoint.prototype.control2_y;
/** @type {number} */
fgui.GPathPoint.prototype.curveType;

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} curveType
 * @return {!fairygui.GPathPoint}
 */
fgui.GPathPoint.newPoint = function(x, y, curveType) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} control1_x
 * @param {number=} control1_y
 * @return {!fairygui.GPathPoint}
 */
fgui.GPathPoint.newBezierPoint = function(x, y, control1_x, control1_y) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} control1_x
 * @param {number=} control1_y
 * @param {number=} control2_x
 * @param {number=} control2_y
 * @return {!fairygui.GPathPoint}
 */
fgui.GPathPoint.newCubicBezierPoint = function(x, y, control1_x, control1_y, control2_x, control2_y) {};

/**
 * @return {!fairygui.GPathPoint}
 */
fgui.GPathPoint.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
fgui.GTween = function() {};
/** @type {boolean} */
fgui.GTween.catchCallbackExceptions;

/**
 * @param {number} start
 * @param {number} end
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.to = function(start, end, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} end
 * @param {number} end2
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.to2 = function(start, start2, end, end2, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} start3
 * @param {number} end
 * @param {number} end2
 * @param {number} end3
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.to3 = function(start, start2, start3, end, end2, end3, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} start3
 * @param {number} start4
 * @param {number} end
 * @param {number} end2
 * @param {number} end3
 * @param {number} end4
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.to4 = function(start, start2, start3, start4, end, end2, end3, end4, duration) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.toColor = function(start, end, duration) {};

/**
 * @param {number} delay
 * @return {!fairygui.GTweener}
 */
fgui.GTween.delayedCall = function(delay) {};

/**
 * @param {number} startX
 * @param {number} startY
 * @param {number} amplitude
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTween.shake = function(startX, startY, amplitude, duration) {};

/**
 * @param {?} target
 * @param {?=} propType
 * @return {!Boolean}
 */
fgui.GTween.isTweening = function(target, propType) {};

/**
 * @param {?} target
 * @param {boolean=} complete
 * @param {?=} propType
 * @return {void}
 */
fgui.GTween.kill = function(target, complete, propType) {};

/**
 * @param {?} target
 * @param {?=} propType
 * @return {!fairygui.GTweener}
 */
fgui.GTween.getTween = function(target, propType) {};

/**
 * @constructor
 * @struct
 */
fgui.GTweener = function() {};
/** @type {?} */
fgui.GTweener.prototype._target;
/** @type {?} */
fgui.GTweener.prototype._propType;
/** @type {boolean} */
fgui.GTweener.prototype._killed;
/** @type {boolean} */
fgui.GTweener.prototype._paused;
/** @type {?} */
fgui.GTweener.prototype._delay;
/** @type {?} */
fgui.GTweener.prototype._duration;
/** @type {?} */
fgui.GTweener.prototype._breakpoint;
/** @type {?} */
fgui.GTweener.prototype._easeType;
/** @type {?} */
fgui.GTweener.prototype._easeOvershootOrAmplitude;
/** @type {?} */
fgui.GTweener.prototype._easePeriod;
/** @type {?} */
fgui.GTweener.prototype._repeat;
/** @type {?} */
fgui.GTweener.prototype._yoyo;
/** @type {?} */
fgui.GTweener.prototype._timeScale;
/** @type {?} */
fgui.GTweener.prototype._snapping;
/** @type {?} */
fgui.GTweener.prototype._userData;
/** @type {?} */
fgui.GTweener.prototype._path;
/** @type {?} */
fgui.GTweener.prototype._onUpdate;
/** @type {?} */
fgui.GTweener.prototype._onStart;
/** @type {?} */
fgui.GTweener.prototype._onComplete;
/** @type {?} */
fgui.GTweener.prototype._onUpdateCaller;
/** @type {?} */
fgui.GTweener.prototype._onStartCaller;
/** @type {?} */
fgui.GTweener.prototype._onCompleteCaller;
/** @type {?} */
fgui.GTweener.prototype._startValue;
/** @type {?} */
fgui.GTweener.prototype._endValue;
/** @type {?} */
fgui.GTweener.prototype._value;
/** @type {?} */
fgui.GTweener.prototype._deltaValue;
/** @type {?} */
fgui.GTweener.prototype._valueSize;
/** @type {?} */
fgui.GTweener.prototype._started;
/** @type {?} */
fgui.GTweener.prototype._ended;
/** @type {?} */
fgui.GTweener.prototype._elapsedTime;
/** @type {?} */
fgui.GTweener.prototype._normalizedTime;
/** @type {number} */
fgui.GTweener.prototype.delay;
/** @type {number} */
fgui.GTweener.prototype.duration;
/** @type {number} */
fgui.GTweener.prototype.repeat;
/** @type {?} */
fgui.GTweener.prototype.target;
/** @type {?} */
fgui.GTweener.prototype.userData;
/** @type {!fairygui.TweenValue} */
fgui.GTweener.prototype.startValue;
/** @type {!fairygui.TweenValue} */
fgui.GTweener.prototype.endValue;
/** @type {!fairygui.TweenValue} */
fgui.GTweener.prototype.value;
/** @type {!fairygui.TweenValue} */
fgui.GTweener.prototype.deltaValue;
/** @type {number} */
fgui.GTweener.prototype.normalizedTime;
/** @type {boolean} */
fgui.GTweener.prototype.completed;
/** @type {boolean} */
fgui.GTweener.prototype.allCompleted;
/** @type {?} */
fgui.GTweener.prototype.update;
/** @type {?} */
fgui.GTweener.prototype.callStartCallback;
/** @type {?} */
fgui.GTweener.prototype.callUpdateCallback;
/** @type {?} */
fgui.GTweener.prototype.callCompleteCallback;

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setDelay = function(value) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setDuration = function(value) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setBreakpoint = function(value) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setEase = function(value) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setEasePeriod = function(value) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setEaseOvershootOrAmplitude = function(value) {};

/**
 * @param {number} repeat
 * @param {boolean=} yoyo
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setRepeat = function(repeat, yoyo) {};

/**
 * @param {number} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setTimeScale = function(value) {};

/**
 * @param {boolean} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setSnapping = function(value) {};

/**
 * @param {?} value
 * @param {?=} propType
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setTarget = function(value, propType) {};

/**
 * @param {!fairygui.GPath} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setPath = function(value) {};

/**
 * @param {?} value
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setUserData = function(value) {};

/**
 * @param {!Function} callback
 * @param {?=} caller
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.onUpdate = function(callback, caller) {};

/**
 * @param {!Function} callback
 * @param {?=} caller
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.onStart = function(callback, caller) {};

/**
 * @param {!Function} callback
 * @param {?=} caller
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.onComplete = function(callback, caller) {};

/**
 * @param {boolean} paused
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype.setPaused = function(paused) {};

/**
 * seek position of the tween, in seconds.
 * @param {number} time
 * @return {void}
 */
fgui.GTweener.prototype.seek = function(time) {};

/**
 * @param {boolean=} complete
 * @return {void}
 */
fgui.GTweener.prototype.kill = function(complete) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._to = function(start, end, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} end
 * @param {number} end2
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._to2 = function(start, start2, end, end2, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} start3
 * @param {number} end
 * @param {number} end2
 * @param {number} end3
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._to3 = function(start, start2, start3, end, end2, end3, duration) {};

/**
 * @param {number} start
 * @param {number} start2
 * @param {number} start3
 * @param {number} start4
 * @param {number} end
 * @param {number} end2
 * @param {number} end3
 * @param {number} end4
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._to4 = function(start, start2, start3, start4, end, end2, end3, end4, duration) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._toColor = function(start, end, duration) {};

/**
 * @param {number} startX
 * @param {number} startY
 * @param {number} amplitude
 * @param {number} duration
 * @return {!fairygui.GTweener}
 */
fgui.GTweener.prototype._shake = function(startX, startY, amplitude, duration) {};

/**
 * @return {void}
 */
fgui.GTweener.prototype._init = function() {};

/**
 * @return {void}
 */
fgui.GTweener.prototype._reset = function() {};

/**
 * @param {number} dt
 * @return {void}
 */
fgui.GTweener.prototype._update = function(dt) {};
/**
 * @constructor
 * @struct
 */
fgui.TweenManager = function() {};

/**
 * @return {!fairygui.GTweener}
 */
fgui.TweenManager.createTween = function() {};

/**
 * @param {?} target
 * @param {?} propType
 * @return {boolean}
 */
fgui.TweenManager.isTweening = function(target, propType) {};

/**
 * @param {?} target
 * @param {boolean} completed
 * @param {?} propType
 * @return {boolean}
 */
fgui.TweenManager.killTweens = function(target, completed, propType) {};

/**
 * @param {?} target
 * @param {?} propType
 * @return {!fairygui.GTweener}
 */
fgui.TweenManager.getTween = function(target, propType) {};

/**
 * @return {void}
 */
fgui.TweenManager.update = function() {};

/**
 * @constructor
 * @struct
 */
fgui.TweenValue = function() {};
/** @type {number} */
fgui.TweenValue.prototype.x;
/** @type {number} */
fgui.TweenValue.prototype.y;
/** @type {number} */
fgui.TweenValue.prototype.z;
/** @type {number} */
fgui.TweenValue.prototype.w;
/** @type {number} */
fgui.TweenValue.prototype.color;

/**
 * @param {number} index
 * @return {number}
 */
fgui.TweenValue.prototype.getField = function(index) {};

/**
 * @param {number} index
 * @param {number} value
 * @return {void}
 */
fgui.TweenValue.prototype.setField = function(index, value) {};

/**
 * @return {void}
 */
fgui.TweenValue.prototype.setZero = function() {};

/**
 * @extends {Laya.Byte}
 * @constructor
 * @struct
 * @param {?} data
 * @param {number=} offset
 * @param {number=} length
 */
fgui.ByteBuffer = function(data, offset, length) {};
/** @type {!Array<string>} */
fgui.ByteBuffer.prototype.stringTable;
/** @type {number} */
fgui.ByteBuffer.prototype.version;

/**
 * @param {number} count
 * @return {void}
 */
fgui.ByteBuffer.prototype.skip = function(count) {};

/**
 * @return {boolean}
 */
fgui.ByteBuffer.prototype.readBool = function() {};

/**
 * @return {string}
 */
fgui.ByteBuffer.prototype.readS = function() {};

/**
 * @param {number} cnt
 * @return {!Array<string>}
 */
fgui.ByteBuffer.prototype.readSArray = function(cnt) {};

/**
 * @param {string} value
 * @return {void}
 */
fgui.ByteBuffer.prototype.writeS = function(value) {};

/**
 * @param {boolean=} hasAlpha
 * @return {number}
 */
fgui.ByteBuffer.prototype.readColor = function(hasAlpha) {};

/**
 * @param {boolean=} hasAlpha
 * @return {string}
 */
fgui.ByteBuffer.prototype.readColorS = function(hasAlpha) {};

/**
 * @return {string}
 */
fgui.ByteBuffer.prototype.readChar = function() {};

/**
 * @return {!fairygui.ByteBuffer}
 */
fgui.ByteBuffer.prototype.readBuffer = function() {};

/**
 * @param {number} indexTablePos
 * @param {number} blockIndex
 * @return {boolean}
 */
fgui.ByteBuffer.prototype.seek = function(indexTablePos, blockIndex) {};

/**
 * @extends {Laya.HitArea}
 * @constructor
 * @struct
 * @param {!Laya.Sprite} child
 * @param {boolean=} reversed
 */
fgui.ChildHitArea = function(child, reversed) {};
/** @type {?} */
fgui.ChildHitArea.prototype._child;
/** @type {?} */
fgui.ChildHitArea.prototype._reversed;

/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
fgui.ChildHitArea.prototype.contains = function(x, y) {};

/**
 * @constructor
 * @struct
 * @param {number=} p_brightness
 * @param {number=} p_contrast
 * @param {number=} p_saturation
 * @param {number=} p_hue
 */
fgui.ColorMatrix = function(p_brightness, p_contrast, p_saturation, p_hue) {};
/** @type {!Array<number>} */
fgui.ColorMatrix.prototype.matrix;

/**
 * @return {void}
 */
fgui.ColorMatrix.prototype.reset = function() {};

/**
 * @return {void}
 */
fgui.ColorMatrix.prototype.invert = function() {};

/**
 * @param {number} p_brightness
 * @param {number} p_contrast
 * @param {number} p_saturation
 * @param {number} p_hue
 * @return {void}
 */
fgui.ColorMatrix.prototype.adjustColor = function(p_brightness, p_contrast, p_saturation, p_hue) {};

/**
 * @param {number} p_val
 * @return {void}
 */
fgui.ColorMatrix.prototype.adjustBrightness = function(p_val) {};

/**
 * @param {number} p_val
 * @return {void}
 */
fgui.ColorMatrix.prototype.adjustContrast = function(p_val) {};

/**
 * @param {number} p_val
 * @return {void}
 */
fgui.ColorMatrix.prototype.adjustSaturation = function(p_val) {};

/**
 * @param {number} p_val
 * @return {void}
 */
fgui.ColorMatrix.prototype.adjustHue = function(p_val) {};

/**
 * @param {!Array<number>} p_matrix
 * @return {void}
 */
fgui.ColorMatrix.prototype.concat = function(p_matrix) {};

/**
 * @return {!fairygui.ColorMatrix}
 */
fgui.ColorMatrix.prototype.clone = function() {};

/**
 * @protected
 * @param {!Array<number>} p_matrix
 * @return {void}
 */
fgui.ColorMatrix.prototype.copyMatrix = function(p_matrix) {};

/**
 * @protected
 * @param {!Array<number>} p_matrix
 * @return {void}
 */
fgui.ColorMatrix.prototype.multiplyMatrix = function(p_matrix) {};

/**
 * @protected
 * @param {number} p_val
 * @param {number} p_limit
 * @return {number}
 */
fgui.ColorMatrix.prototype.cleanValue = function(p_val, p_limit) {};

/**
 * @extends {Laya.HitArea}
 * @constructor
 * @struct
 * @param {!fairygui.PixelHitTestData} data
 * @param {number} offsetX
 * @param {number} offsetY
 */
fgui.PixelHitTest = function(data, offsetX, offsetY) {};
/** @type {?} */
fgui.PixelHitTest.prototype._data;
/** @type {number} */
fgui.PixelHitTest.prototype.offsetX;
/** @type {number} */
fgui.PixelHitTest.prototype.offsetY;
/** @type {number} */
fgui.PixelHitTest.prototype.scaleX;
/** @type {number} */
fgui.PixelHitTest.prototype.scaleY;

/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
fgui.PixelHitTest.prototype.contains = function(x, y) {};

/**
 * @constructor
 * @struct
 */
fgui.PixelHitTestData = function() {};
/** @type {number} */
fgui.PixelHitTestData.prototype.pixelWidth;
/** @type {number} */
fgui.PixelHitTestData.prototype.scale;
/** @type {!Array<number>} */
fgui.PixelHitTestData.prototype.pixels;

/**
 * @param {!Laya.Byte} ba
 * @return {void}
 */
fgui.PixelHitTestData.prototype.load = function(ba) {};

/**
 * @constructor
 * @struct
 */
fgui.UBBParser = function() {};
/** @type {?} */
fgui.UBBParser.prototype._text;
/** @type {?} */
fgui.UBBParser.prototype._readPos;
/** @type {!Object<string,function(string, boolean, string): string>} */
fgui.UBBParser.prototype._handlers;
/** @type {number} */
fgui.UBBParser.prototype.defaultImgWidth;
/** @type {number} */
fgui.UBBParser.prototype.defaultImgHeight;
/** @type {string} */
fgui.UBBParser.prototype.lastColor;
/** @type {string} */
fgui.UBBParser.prototype.lastSize;
/** @type {!fairygui.UBBParser} */
fgui.UBBParser.inst;

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_URL = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_IMG = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_B = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_I = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_U = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_Simple = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_COLOR = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_FONT = function(tagName, end, attr) {};

/**
 * @protected
 * @param {string} tagName
 * @param {boolean} end
 * @param {string} attr
 * @return {string}
 */
fgui.UBBParser.prototype.onTag_SIZE = function(tagName, end, attr) {};

/**
 * @protected
 * @param {boolean=} remove
 * @return {string}
 */
fgui.UBBParser.prototype.getTagText = function(remove) {};

/**
 * @param {string} text
 * @param {boolean=} remove
 * @return {string}
 */
fgui.UBBParser.prototype.parse = function(text, remove) {};
/**
 * @constructor
 * @struct
 */
fgui.ToolSet = function() {};

/**
 * @param {string} source
 * @param {string} str
 * @param {boolean=} ignoreCase
 * @return {boolean}
 */
fgui.ToolSet.startsWith = function(source, str, ignoreCase) {};

/**
 * @param {string} source
 * @param {string} str
 * @param {boolean=} ignoreCase
 * @return {boolean}
 */
fgui.ToolSet.endsWith = function(source, str, ignoreCase) {};

/**
 * @param {string} targetString
 * @return {string}
 */
fgui.ToolSet.trimRight = function(targetString) {};

/**
 * @param {number} argb
 * @param {boolean=} hasAlpha
 * @return {string}
 */
fgui.ToolSet.convertToHtmlColor = function(argb, hasAlpha) {};

/**
 * @param {string} str
 * @param {boolean=} hasAlpha
 * @return {number}
 */
fgui.ToolSet.convertFromHtmlColor = function(str, hasAlpha) {};

/**
 * @param {!Laya.Node} obj
 * @return {!fairygui.GObject}
 */
fgui.ToolSet.displayObjectToGObject = function(obj) {};

/**
 * @param {string} str
 * @return {string}
 */
fgui.ToolSet.encodeHTML = function(str) {};

/**
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
fgui.ToolSet.clamp = function(value, min, max) {};

/**
 * @param {number} value
 * @return {number}
 */
fgui.ToolSet.clamp01 = function(value) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {number} percent
 * @return {number}
 */
fgui.ToolSet.lerp = function(start, end, percent) {};

/**
 * @param {number} t
 * @param {number} length
 * @return {number}
 */
fgui.ToolSet.repeat = function(t, length) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
fgui.ToolSet.distance = function(x1, y1, x2, y2) {};

/**
 * @param {!Laya.Sprite} obj
 * @param {(string|boolean|!Array<number>)=} color
 * @return {void}
 */
fgui.ToolSet.setColorFilter = function(obj, color) {};
/** @const */
var fairygui = fgui;
// Generated from: C:/workspace/ClosureCompilerJS/libs/glsl.d.ts
// Derived from: declare module "*.glsl"
/** @const */
var libs$_$glsl = {};
/** @type {string} */
libs$_$glsl.value;
// Derived from: declare module "*.vs"
/** @const */
var libs$_$vs = {};
/** @type {string} */
libs$_$vs.value;
// Derived from: declare module "*.fs"
/** @const */
var libs$_$fs = {};
/** @type {string} */
libs$_$fs.value;
// Generated from: C:/workspace/ClosureCompilerJS/libs/hbs.d.ts
/**
 * @record
 * @struct
 */
function CanvasContext() {}
/** @type {function(): void} */
CanvasContext.prototype.addColorStop;
/** @type {function(): void} */
CanvasContext.prototype.arc;
/** @type {function(): void} */
CanvasContext.prototype.beginPath;
/** @type {function(): void} */
CanvasContext.prototype.bezierCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.clearActions;
/** @type {function(): void} */
CanvasContext.prototype.clearRect;
/** @type {function(): void} */
CanvasContext.prototype.clip;
/** @type {function(): void} */
CanvasContext.prototype.closePath;
/** @type {function(): void} */
CanvasContext.prototype.createCircularGradient;
/** @type {function(): void} */
CanvasContext.prototype.createLinearGradient;
/** @type {function(): void} */
CanvasContext.prototype.draw;
/** @type {function(): void} */
CanvasContext.prototype.drawImage;
/** @type {function(): void} */
CanvasContext.prototype.fill;
/** @type {function(): void} */
CanvasContext.prototype.fillRect;
/** @type {function(): void} */
CanvasContext.prototype.fillText;
/** @type {function(): void} */
CanvasContext.prototype.lineTo;
/** @type {function(): void} */
CanvasContext.prototype.moveTo;
/** @type {function(): void} */
CanvasContext.prototype.quadraticCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.rect;
/** @type {function(): void} */
CanvasContext.prototype.rotate;
/** @type {function(): void} */
CanvasContext.prototype.save;
/** @type {function(): void} */
CanvasContext.prototype.scale;
/** @type {function(): void} */
CanvasContext.prototype.setFillStyle;
/** @type {function(): void} */
CanvasContext.prototype.setFontSize;
/** @type {function(): void} */
CanvasContext.prototype.setGlobalAlpha;
/** @type {function(): void} */
CanvasContext.prototype.setLineCap;
/** @type {function(): void} */
CanvasContext.prototype.setLineDash;
/** @type {function(): void} */
CanvasContext.prototype.setLineJoin;
/** @type {function(): void} */
CanvasContext.prototype.setLineWidth;
/** @type {function(): void} */
CanvasContext.prototype.setMiterLimit;
/** @type {function(): void} */
CanvasContext.prototype.setShadow;
/** @type {function(): void} */
CanvasContext.prototype.setStrokeStyle;
/** @type {function(): void} */
CanvasContext.prototype.setTextAlign;
/** @type {function(): void} */
CanvasContext.prototype.setTextBaseline;
/** @type {function(): void} */
CanvasContext.prototype.stroke;
/** @type {function(): void} */
CanvasContext.prototype.strokeRect;
/** @type {function(): void} */
CanvasContext.prototype.translate;
/**
 * @record
 * @struct
 */
function _writeBLECharacteristicValueObject() {}
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.characteristicId;
/** @type {?} */
_writeBLECharacteristicValueObject.prototype.value;
/** @type {function(!_writeBLECharacteristicValueSuccessObject): void} */
_writeBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _writeBLECharacteristicValueSuccessObject() {}
/** @type {string} */
_writeBLECharacteristicValueSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _vibrateShortObject() {}
/** @type {function(): void} */
_vibrateShortObject.prototype.success;
/** @type {function(): void} */
_vibrateShortObject.prototype.fail;
/** @type {function(): void} */
_vibrateShortObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _vibrateLongObject() {}
/** @type {function(): void} */
_vibrateLongObject.prototype.success;
/** @type {function(): void} */
_vibrateLongObject.prototype.fail;
/** @type {function(): void} */
_vibrateLongObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _uploadFileObject() {}
/** @type {string} */
_uploadFileObject.prototype.url;
/** @type {string} */
_uploadFileObject.prototype.filePath;
/** @type {string} */
_uploadFileObject.prototype.name;
/** @type {!Object} */
_uploadFileObject.prototype.header;
/** @type {!Object} */
_uploadFileObject.prototype.formData;
/** @type {function(!_uploadFileSuccessObject): void} */
_uploadFileObject.prototype.success;
/** @type {function(): void} */
_uploadFileObject.prototype.fail;
/** @type {function(): void} */
_uploadFileObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _uploadFileSuccessObject() {}
/** @type {string} */
_uploadFileSuccessObject.prototype.data;
/** @type {number} */
_uploadFileSuccessObject.prototype.statusCode;
/**
 * @record
 * @struct
 */
function _updateShareMenuObject() {}
/** @type {boolean} */
_updateShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_updateShareMenuObject.prototype.success;
/** @type {function(): void} */
_updateShareMenuObject.prototype.fail;
/** @type {function(): void} */
_updateShareMenuObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _switchTabObject() {}
/** @type {string} */
_switchTabObject.prototype.url;
/** @type {function(): void} */
_switchTabObject.prototype.success;
/** @type {function(): void} */
_switchTabObject.prototype.fail;
/** @type {function(): void} */
_switchTabObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopWifiObject() {}
/** @type {function(): void} */
_stopWifiObject.prototype.success;
/** @type {function(): void} */
_stopWifiObject.prototype.fail;
/** @type {function(): void} */
_stopWifiObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopHCEObject() {}
/** @type {function(!_stopHCESuccessObject): void} */
_stopHCEObject.prototype.success;
/** @type {function(): void} */
_stopHCEObject.prototype.fail;
/** @type {function(): void} */
_stopHCEObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopHCESuccessObject() {}
/** @type {string} */
_stopHCESuccessObject.prototype.errMsg;
/** @type {number} */
_stopHCESuccessObject.prototype.errCode;
/**
 * @record
 * @struct
 */
function _stopCompassObject() {}
/** @type {function(): void} */
_stopCompassObject.prototype.success;
/** @type {function(): void} */
_stopCompassObject.prototype.fail;
/** @type {function(): void} */
_stopCompassObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopBluetoothDevicesDiscoveryObject() {}
/** @type {function(!_stopBluetoothDevicesDiscoverySuccessObject): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopBluetoothDevicesDiscoverySuccessObject() {}
/** @type {string} */
_stopBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _stopBeaconDiscoveryObject() {}
/** @type {function(!_stopBeaconDiscoverySuccessObject): void} */
_stopBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _stopBeaconDiscoverySuccessObject() {}
/** @type {string} */
_stopBeaconDiscoverySuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _stopAccelerometerObject() {}
/** @type {function(): void} */
_stopAccelerometerObject.prototype.success;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startWifiObject() {}
/** @type {function(): void} */
_startWifiObject.prototype.success;
/** @type {function(): void} */
_startWifiObject.prototype.fail;
/** @type {function(): void} */
_startWifiObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startSoterAuthenticationObject() {}
/** @type {?} */
_startSoterAuthenticationObject.prototype.requestAuthModes;
/** @type {string} */
_startSoterAuthenticationObject.prototype.challenge;
/** @type {string} */
_startSoterAuthenticationObject.prototype.authContent;
/** @type {function(!_startSoterAuthenticationSuccessObject): void} */
_startSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startSoterAuthenticationSuccessObject() {}
/** @type {number} */
_startSoterAuthenticationSuccessObject.prototype.errCode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.authMode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSON;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSONSignature;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _startRecordObject() {}
/** @type {function(!_startRecordSuccessObject): void} */
_startRecordObject.prototype.success;
/** @type {function(): void} */
_startRecordObject.prototype.fail;
/** @type {function(): void} */
_startRecordObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startRecordSuccessObject() {}
/** @type {?} */
_startRecordSuccessObject.prototype.tempFilePath;
/**
 * @record
 * @struct
 */
function _startPullDownRefreshObject() {}
/** @type {function(!_startPullDownRefreshSuccessObject): void} */
_startPullDownRefreshObject.prototype.success;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.fail;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startPullDownRefreshSuccessObject() {}
/** @type {string} */
_startPullDownRefreshSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _startHCEObject() {}
/** @type {?} */
_startHCEObject.prototype.aid_list;
/** @type {function(!_startHCESuccessObject): void} */
_startHCEObject.prototype.success;
/** @type {function(): void} */
_startHCEObject.prototype.fail;
/** @type {function(): void} */
_startHCEObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startHCESuccessObject() {}
/** @type {string} */
_startHCESuccessObject.prototype.errMsg;
/** @type {number} */
_startHCESuccessObject.prototype.errCode;
/**
 * @record
 * @struct
 */
function _startCompassObject() {}
/** @type {function(): void} */
_startCompassObject.prototype.success;
/** @type {function(): void} */
_startCompassObject.prototype.fail;
/** @type {function(): void} */
_startCompassObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startBluetoothDevicesDiscoveryObject() {}
/** @type {?} */
_startBluetoothDevicesDiscoveryObject.prototype.services;
/** @type {boolean} */
_startBluetoothDevicesDiscoveryObject.prototype.allowDuplicatesKey;
/** @type {number} */
_startBluetoothDevicesDiscoveryObject.prototype.interval;
/** @type {function(!_startBluetoothDevicesDiscoverySuccessObject): void} */
_startBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startBluetoothDevicesDiscoverySuccessObject() {}
/** @type {string} */
_startBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _startBeaconDiscoveryObject() {}
/** @type {?} */
_startBeaconDiscoveryObject.prototype.uuids;
/** @type {function(!_startBeaconDiscoverySuccessObject): void} */
_startBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _startBeaconDiscoverySuccessObject() {}
/** @type {string} */
_startBeaconDiscoverySuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _startAccelerometerObject() {}
/** @type {function(): void} */
_startAccelerometerObject.prototype.success;
/** @type {function(): void} */
_startAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_startAccelerometerObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showToastObject() {}
/** @type {string} */
_showToastObject.prototype.title;
/** @type {string} */
_showToastObject.prototype.icon;
/** @type {string} */
_showToastObject.prototype.image;
/** @type {number} */
_showToastObject.prototype.duration;
/** @type {boolean} */
_showToastObject.prototype.mask;
/** @type {function(): void} */
_showToastObject.prototype.success;
/** @type {function(): void} */
_showToastObject.prototype.fail;
/** @type {function(): void} */
_showToastObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showTabBarRedDotObject() {}
/** @type {number} */
_showTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showTabBarObject() {}
/** @type {boolean} */
_showTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_showTabBarObject.prototype.success;
/** @type {function(): void} */
_showTabBarObject.prototype.fail;
/** @type {function(): void} */
_showTabBarObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showShareMenuObject() {}
/** @type {boolean} */
_showShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_showShareMenuObject.prototype.success;
/** @type {function(): void} */
_showShareMenuObject.prototype.fail;
/** @type {function(): void} */
_showShareMenuObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showModalObject() {}
/** @type {string} */
_showModalObject.prototype.title;
/** @type {string} */
_showModalObject.prototype.content;
/** @type {boolean} */
_showModalObject.prototype.showCancel;
/** @type {string} */
_showModalObject.prototype.cancelText;
/** @type {?} */
_showModalObject.prototype.cancelColor;
/** @type {string} */
_showModalObject.prototype.confirmText;
/** @type {?} */
_showModalObject.prototype.confirmColor;
/** @type {function(!_showModalSuccessObject): void} */
_showModalObject.prototype.success;
/** @type {function(): void} */
_showModalObject.prototype.fail;
/** @type {function(): void} */
_showModalObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showModalSuccessObject() {}
/** @type {boolean} */
_showModalSuccessObject.prototype.confirm;
/** @type {boolean} */
_showModalSuccessObject.prototype.cancel;
/**
 * @record
 * @struct
 */
function _showLoadingObject() {}
/** @type {string} */
_showLoadingObject.prototype.title;
/** @type {boolean} */
_showLoadingObject.prototype.mask;
/** @type {function(): void} */
_showLoadingObject.prototype.success;
/** @type {function(): void} */
_showLoadingObject.prototype.fail;
/** @type {function(): void} */
_showLoadingObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showActionSheetObject() {}
/** @type {?} */
_showActionSheetObject.prototype.itemList;
/** @type {?} */
_showActionSheetObject.prototype.itemColor;
/** @type {function(!_showActionSheetSuccessObject): void} */
_showActionSheetObject.prototype.success;
/** @type {function(): void} */
_showActionSheetObject.prototype.fail;
/** @type {function(): void} */
_showActionSheetObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _showActionSheetSuccessObject() {}
/** @type {number} */
_showActionSheetSuccessObject.prototype.tapIndex;
/**
 * @record
 * @struct
 */
function _setWifiListObject() {}
/** @type {?} */
_setWifiListObject.prototype.wifiList;
/** @type {function(): void} */
_setWifiListObject.prototype.success;
/** @type {function(): void} */
_setWifiListObject.prototype.fail;
/** @type {function(): void} */
_setWifiListObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setTopBarTextObject() {}
/** @type {string} */
_setTopBarTextObject.prototype.text;
/** @type {function(): void} */
_setTopBarTextObject.prototype.success;
/** @type {function(): void} */
_setTopBarTextObject.prototype.fail;
/** @type {function(): void} */
_setTopBarTextObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setTabBarStyleObject() {}
/** @type {?} */
_setTabBarStyleObject.prototype.color;
/** @type {?} */
_setTabBarStyleObject.prototype.selectedColor;
/** @type {?} */
_setTabBarStyleObject.prototype.backgroundColor;
/** @type {string} */
_setTabBarStyleObject.prototype.borderStyle;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.success;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.fail;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setTabBarItemObject() {}
/** @type {number} */
_setTabBarItemObject.prototype.index;
/** @type {string} */
_setTabBarItemObject.prototype.text;
/** @type {string} */
_setTabBarItemObject.prototype.iconPath;
/** @type {string} */
_setTabBarItemObject.prototype.selectedIconPath;
/** @type {function(): void} */
_setTabBarItemObject.prototype.success;
/** @type {function(): void} */
_setTabBarItemObject.prototype.fail;
/** @type {function(): void} */
_setTabBarItemObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setTabBarBadgeObject() {}
/** @type {number} */
_setTabBarBadgeObject.prototype.index;
/** @type {string} */
_setTabBarBadgeObject.prototype.text;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setStorageObject() {}
/** @type {string} */
_setStorageObject.prototype.key;
/** @type {?} */
_setStorageObject.prototype.data;
/** @type {function(): void} */
_setStorageObject.prototype.success;
/** @type {function(): void} */
_setStorageObject.prototype.fail;
/** @type {function(): void} */
_setStorageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setScreenBrightnessObject() {}
/** @type {number} */
_setScreenBrightnessObject.prototype.value;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setNavigationBarTitleObject() {}
/** @type {string} */
_setNavigationBarTitleObject.prototype.title;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setNavigationBarColorObject() {}
/** @type {string} */
_setNavigationBarColorObject.prototype.frontColor;
/** @type {string} */
_setNavigationBarColorObject.prototype.backgroundColor;
/** @type {!Object} */
_setNavigationBarColorObject.prototype.animation;
/** @type {function(!_setNavigationBarColorSuccessObject): void} */
_setNavigationBarColorObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setNavigationBarColorSuccessObject() {}
/** @type {string} */
_setNavigationBarColorSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _setKeepScreenOnObject() {}
/** @type {boolean} */
_setKeepScreenOnObject.prototype.keepScreenOn;
/** @type {function(!_setKeepScreenOnSuccessObject): void} */
_setKeepScreenOnObject.prototype.success;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.fail;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setKeepScreenOnSuccessObject() {}
/** @type {string} */
_setKeepScreenOnSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _setEnableDebugObject() {}
/** @type {boolean} */
_setEnableDebugObject.prototype.enableDebug;
/** @type {function(!_setEnableDebugSuccessObject): void} */
_setEnableDebugObject.prototype.success;
/** @type {function(): void} */
_setEnableDebugObject.prototype.fail;
/** @type {function(): void} */
_setEnableDebugObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _setEnableDebugSuccessObject() {}
/** @type {string} */
_setEnableDebugSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _setClipboardDataObject() {}
/** @type {string} */
_setClipboardDataObject.prototype.data;
/** @type {function(): void} */
_setClipboardDataObject.prototype.success;
/** @type {function(): void} */
_setClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_setClipboardDataObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _sendSocketMessageObject() {}
/** @type {?} */
_sendSocketMessageObject.prototype.data;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.success;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.fail;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _sendHCEMessageObject() {}
/** @type {?} */
_sendHCEMessageObject.prototype.data;
/** @type {function(!_sendHCEMessageSuccessObject): void} */
_sendHCEMessageObject.prototype.success;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.fail;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _sendHCEMessageSuccessObject() {}
/** @type {string} */
_sendHCEMessageSuccessObject.prototype.errMsg;
/** @type {number} */
_sendHCEMessageSuccessObject.prototype.errCode;
/**
 * @record
 * @struct
 */
function _seekBackgroundAudioObject() {}
/** @type {number} */
_seekBackgroundAudioObject.prototype.position;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _scanCodeObject() {}
/** @type {boolean} */
_scanCodeObject.prototype.onlyFromCamera;
/** @type {?} */
_scanCodeObject.prototype.scanType;
/** @type {function(!_scanCodeSuccessObject): void} */
_scanCodeObject.prototype.success;
/** @type {function(): void} */
_scanCodeObject.prototype.fail;
/** @type {function(): void} */
_scanCodeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _scanCodeSuccessObject() {}
/** @type {?} */
_scanCodeSuccessObject.prototype.result;
/** @type {?} */
_scanCodeSuccessObject.prototype.scanType;
/** @type {?} */
_scanCodeSuccessObject.prototype.charSet;
/** @type {?} */
_scanCodeSuccessObject.prototype.path;
/**
 * @record
 * @struct
 */
function _saveVideoToPhotosAlbumObject() {}
/** @type {string} */
_saveVideoToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveVideoToPhotosAlbumSuccessObject): void} */
_saveVideoToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _saveVideoToPhotosAlbumSuccessObject() {}
/** @type {string} */
_saveVideoToPhotosAlbumSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _saveImageToPhotosAlbumObject() {}
/** @type {string} */
_saveImageToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveImageToPhotosAlbumSuccessObject): void} */
_saveImageToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _saveImageToPhotosAlbumSuccessObject() {}
/** @type {string} */
_saveImageToPhotosAlbumSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _saveFileObject() {}
/** @type {string} */
_saveFileObject.prototype.tempFilePath;
/** @type {function(!_saveFileSuccessObject): void} */
_saveFileObject.prototype.success;
/** @type {function(): void} */
_saveFileObject.prototype.fail;
/** @type {function(): void} */
_saveFileObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _saveFileSuccessObject() {}
/** @type {?} */
_saveFileSuccessObject.prototype.savedFilePath;
/**
 * @record
 * @struct
 */
function _requestPaymentObject() {}
/** @type {string} */
_requestPaymentObject.prototype.timeStamp;
/** @type {string} */
_requestPaymentObject.prototype.nonceStr;
/** @type {string} */
_requestPaymentObject.prototype.package;
/** @type {string} */
_requestPaymentObject.prototype.signType;
/** @type {string} */
_requestPaymentObject.prototype.paySign;
/** @type {function(): void} */
_requestPaymentObject.prototype.success;
/** @type {function(): void} */
_requestPaymentObject.prototype.fail;
/** @type {function(): void} */
_requestPaymentObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _requestObject() {}
/** @type {string} */
_requestObject.prototype.url;
/** @type {?} */
_requestObject.prototype.data;
/** @type {!Object} */
_requestObject.prototype.header;
/** @type {string} */
_requestObject.prototype.method;
/** @type {string} */
_requestObject.prototype.dataType;
/** @type {string} */
_requestObject.prototype.responseType;
/** @type {function(!_requestSuccessObject): void} */
_requestObject.prototype.success;
/** @type {function(): void} */
_requestObject.prototype.fail;
/** @type {function(): void} */
_requestObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _requestSuccessObject() {}
/** @type {?} */
_requestSuccessObject.prototype.data;
/** @type {number} */
_requestSuccessObject.prototype.statusCode;
/** @type {!Object} */
_requestSuccessObject.prototype.header;
/**
 * @record
 * @struct
 */
function _removeTabBarBadgeObject() {}
/** @type {number} */
_removeTabBarBadgeObject.prototype.index;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _removeStorageObject() {}
/** @type {string} */
_removeStorageObject.prototype.key;
/** @type {function(): void} */
_removeStorageObject.prototype.success;
/** @type {function(): void} */
_removeStorageObject.prototype.fail;
/** @type {function(): void} */
_removeStorageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _removeSavedFileObject() {}
/** @type {string} */
_removeSavedFileObject.prototype.filePath;
/** @type {function(): void} */
_removeSavedFileObject.prototype.success;
/** @type {function(): void} */
_removeSavedFileObject.prototype.fail;
/** @type {function(): void} */
_removeSavedFileObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _redirectToObject() {}
/** @type {string} */
_redirectToObject.prototype.url;
/** @type {function(): void} */
_redirectToObject.prototype.success;
/** @type {function(): void} */
_redirectToObject.prototype.fail;
/** @type {function(): void} */
_redirectToObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _readBLECharacteristicValueObject() {}
/** @type {string} */
_readBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.characteristicId;
/** @type {function(!_readBLECharacteristicValueSuccessObject): void} */
_readBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _readBLECharacteristicValueSuccessObject() {}
/** @type {number} */
_readBLECharacteristicValueSuccessObject.prototype.errCode;
/** @type {string} */
_readBLECharacteristicValueSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _reLaunchObject() {}
/** @type {string} */
_reLaunchObject.prototype.url;
/** @type {function(): void} */
_reLaunchObject.prototype.success;
/** @type {function(): void} */
_reLaunchObject.prototype.fail;
/** @type {function(): void} */
_reLaunchObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _previewImageObject() {}
/** @type {string} */
_previewImageObject.prototype.current;
/** @type {?} */
_previewImageObject.prototype.urls;
/** @type {function(): void} */
_previewImageObject.prototype.success;
/** @type {function(): void} */
_previewImageObject.prototype.fail;
/** @type {function(): void} */
_previewImageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _playVoiceObject() {}
/** @type {string} */
_playVoiceObject.prototype.filePath;
/** @type {number} */
_playVoiceObject.prototype.duration;
/** @type {function(): void} */
_playVoiceObject.prototype.success;
/** @type {function(): void} */
_playVoiceObject.prototype.fail;
/** @type {function(): void} */
_playVoiceObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _playBackgroundAudioObject() {}
/** @type {string} */
_playBackgroundAudioObject.prototype.dataUrl;
/** @type {string} */
_playBackgroundAudioObject.prototype.title;
/** @type {string} */
_playBackgroundAudioObject.prototype.coverImgUrl;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _pageScrollToObject() {}
/** @type {number} */
_pageScrollToObject.prototype.scrollTop;
/** @type {number} */
_pageScrollToObject.prototype.duration;
/**
 * @record
 * @struct
 */
function _openSettingObject() {}
/** @type {function(!_openSettingSuccessObject): void} */
_openSettingObject.prototype.success;
/** @type {function(): void} */
_openSettingObject.prototype.fail;
/** @type {function(): void} */
_openSettingObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _openSettingSuccessObject() {}
/** @type {!Object} */
_openSettingSuccessObject.prototype.authSetting;
/**
 * @record
 * @struct
 */
function _openLocationObject() {}
/** @type {?} */
_openLocationObject.prototype.latitude;
/** @type {?} */
_openLocationObject.prototype.longitude;
/** @type {?} */
_openLocationObject.prototype.scale;
/** @type {string} */
_openLocationObject.prototype.name;
/** @type {string} */
_openLocationObject.prototype.address;
/** @type {function(): void} */
_openLocationObject.prototype.success;
/** @type {function(): void} */
_openLocationObject.prototype.fail;
/** @type {function(): void} */
_openLocationObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _openDocumentObject() {}
/** @type {?} */
_openDocumentObject.prototype.filePath;
/** @type {?} */
_openDocumentObject.prototype.fileType;
/** @type {?} */
_openDocumentObject.prototype.success;
/** @type {?} */
_openDocumentObject.prototype.fail;
/** @type {?} */
_openDocumentObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _openCardObject() {}
/** @type {?} */
_openCardObject.prototype.cardList;
/** @type {function(): void} */
_openCardObject.prototype.success;
/** @type {function(): void} */
_openCardObject.prototype.fail;
/** @type {function(): void} */
_openCardObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _openBluetoothAdapterObject() {}
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _onWifiConnectedCallbackResult() {}
/** @type {!Object} */
_onWifiConnectedCallbackResult.prototype.wifi;
/**
 * @record
 * @struct
 */
function _onUserCaptureScreenCallbackResult() {}
/**
 * @record
 * @struct
 */
function _onSocketMessageCallbackResult() {}
/** @type {?} */
_onSocketMessageCallbackResult.prototype.data;
/**
 * @record
 * @struct
 */
function _onNetworkStatusChangeCallbackResult() {}
/** @type {boolean} */
_onNetworkStatusChangeCallbackResult.prototype.isConnected;
/** @type {string} */
_onNetworkStatusChangeCallbackResult.prototype.networkType;
/**
 * @record
 * @struct
 */
function _onHCEMessageCallbackResult() {}
/** @type {number} */
_onHCEMessageCallbackResult.prototype.messageType;
/** @type {?} */
_onHCEMessageCallbackResult.prototype.data;
/** @type {number} */
_onHCEMessageCallbackResult.prototype.reason;
/**
 * @record
 * @struct
 */
function _onGetWifiListCallbackResult() {}
/** @type {?} */
_onGetWifiListCallbackResult.prototype.wifiList;
/**
 * @record
 * @struct
 */
function _onEvaluateWifiCallbackResult() {}
/** @type {!Object} */
_onEvaluateWifiCallbackResult.prototype.wifi;
/**
 * @record
 * @struct
 */
function _onCompassChangeCallbackResult() {}
/** @type {number} */
_onCompassChangeCallbackResult.prototype.direction;
/**
 * @record
 * @struct
 */
function _onBluetoothDeviceFoundCallbackResult() {}
/** @type {?} */
_onBluetoothDeviceFoundCallbackResult.prototype.devices;
/**
 * @record
 * @struct
 */
function _onBluetoothAdapterStateChangeCallbackResult() {}
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.discovering;
/**
 * @record
 * @struct
 */
function _onBeaconUpdateCallbackResult() {}
/** @type {?} */
_onBeaconUpdateCallbackResult.prototype.beacons;
/**
 * @record
 * @struct
 */
function _onBeaconServiceChangeCallbackResult() {}
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.discovering;
/**
 * @record
 * @struct
 */
function _onBLEConnectionStateChangeCallbackResult() {}
/** @type {string} */
_onBLEConnectionStateChangeCallbackResult.prototype.deviceId;
/** @type {boolean} */
_onBLEConnectionStateChangeCallbackResult.prototype.connected;
/**
 * @record
 * @struct
 */
function _onBLECharacteristicValueChangeCallbackResult() {}
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.deviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.serviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.characteristicId;
/** @type {?} */
_onBLECharacteristicValueChangeCallbackResult.prototype.value;
/**
 * @record
 * @struct
 */
function _onAccelerometerChangeCallbackResult() {}
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.x;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.y;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.z;
/**
 * @record
 * @struct
 */
function _notifyBLECharacteristicValueChangeObject() {}
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.deviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.serviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.characteristicId;
/** @type {boolean} */
_notifyBLECharacteristicValueChangeObject.prototype.state;
/** @type {function(!_notifyBLECharacteristicValueChangeSuccessObject): void} */
_notifyBLECharacteristicValueChangeObject.prototype.success;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.fail;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _notifyBLECharacteristicValueChangeSuccessObject() {}
/** @type {string} */
_notifyBLECharacteristicValueChangeSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _navigateToMiniProgramObject() {}
/** @type {string} */
_navigateToMiniProgramObject.prototype.appId;
/** @type {string} */
_navigateToMiniProgramObject.prototype.path;
/** @type {!Object} */
_navigateToMiniProgramObject.prototype.extraData;
/** @type {string} */
_navigateToMiniProgramObject.prototype.envVersion;
/** @type {function(!_navigateToMiniProgramSuccessObject): void} */
_navigateToMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _navigateToMiniProgramSuccessObject() {}
/** @type {string} */
_navigateToMiniProgramSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _navigateToObject() {}
/** @type {string} */
_navigateToObject.prototype.url;
/** @type {function(): void} */
_navigateToObject.prototype.success;
/** @type {function(): void} */
_navigateToObject.prototype.fail;
/** @type {function(): void} */
_navigateToObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _navigateBackMiniProgramObject() {}
/** @type {!Object} */
_navigateBackMiniProgramObject.prototype.extraData;
/** @type {function(!_navigateBackMiniProgramSuccessObject): void} */
_navigateBackMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _navigateBackMiniProgramSuccessObject() {}
/** @type {string} */
_navigateBackMiniProgramSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _navigateBackObject() {}
/** @type {number} */
_navigateBackObject.prototype.delta;
/**
 * @record
 * @struct
 */
function _makeVoIPCallObject() {}
/** @type {boolean} */
_makeVoIPCallObject.prototype.allowBackCamera;
/** @type {boolean} */
_makeVoIPCallObject.prototype.showOther;
/** @type {string} */
_makeVoIPCallObject.prototype.avatarUrl;
/** @type {string} */
_makeVoIPCallObject.prototype.context;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.success;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.fail;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _makePhoneCallObject() {}
/** @type {string} */
_makePhoneCallObject.prototype.phoneNumber;
/** @type {function(): void} */
_makePhoneCallObject.prototype.success;
/** @type {function(): void} */
_makePhoneCallObject.prototype.fail;
/** @type {function(): void} */
_makePhoneCallObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _loginObject() {}
/** @type {function(!_loginSuccessObject): void} */
_loginObject.prototype.success;
/** @type {function(): void} */
_loginObject.prototype.fail;
/** @type {function(): void} */
_loginObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _loginSuccessObject() {}
/** @type {string} */
_loginSuccessObject.prototype.errMsg;
/** @type {string} */
_loginSuccessObject.prototype.code;
/**
 * @record
 * @struct
 */
function _hideTabBarRedDotObject() {}
/** @type {number} */
_hideTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _hideTabBarObject() {}
/** @type {boolean} */
_hideTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_hideTabBarObject.prototype.success;
/** @type {function(): void} */
_hideTabBarObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _hideShareMenuObject() {}
/** @type {function(): void} */
_hideShareMenuObject.prototype.success;
/** @type {function(): void} */
_hideShareMenuObject.prototype.fail;
/** @type {function(): void} */
_hideShareMenuObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getWifiListObject() {}
/** @type {function(): void} */
_getWifiListObject.prototype.success;
/** @type {function(): void} */
_getWifiListObject.prototype.fail;
/** @type {function(): void} */
_getWifiListObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getWeRunDataObject() {}
/** @type {function(!_getWeRunDataSuccessObject): void} */
_getWeRunDataObject.prototype.success;
/** @type {function(): void} */
_getWeRunDataObject.prototype.fail;
/** @type {function(): void} */
_getWeRunDataObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getWeRunDataSuccessObject() {}
/** @type {string} */
_getWeRunDataSuccessObject.prototype.errMsg;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.encryptedData;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.iv;
/**
 * @record
 * @struct
 */
function _getUserInfoObject() {}
/** @type {boolean} */
_getUserInfoObject.prototype.withCredentials;
/** @type {string} */
_getUserInfoObject.prototype.lang;
/** @type {function(!_getUserInfoSuccessObject): void} */
_getUserInfoObject.prototype.success;
/** @type {function(): void} */
_getUserInfoObject.prototype.fail;
/** @type {function(): void} */
_getUserInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getUserInfoSuccessObject() {}
/** @type {!Object} */
_getUserInfoSuccessObject.prototype.userInfo;
/** @type {string} */
_getUserInfoSuccessObject.prototype.rawData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.signature;
/** @type {string} */
_getUserInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.iv;
/**
 * @record
 * @struct
 */
function _getSystemInfoSyncReturnValue() {}
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.brand;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.model;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.language;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.version;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.system;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.platform;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.SDKVersion;
/**
 * @record
 * @struct
 */
function _getSystemInfoObject() {}
/** @type {function(!_getSystemInfoSuccessObject): void} */
_getSystemInfoObject.prototype.success;
/** @type {function(): void} */
_getSystemInfoObject.prototype.fail;
/** @type {function(): void} */
_getSystemInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getSystemInfoSuccessObject() {}
/** @type {?} */
_getSystemInfoSuccessObject.prototype.brand;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.model;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.language;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.version;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.system;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.platform;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.SDKVersion;
/**
 * @record
 * @struct
 */
function _getStorageInfoObject() {}
/** @type {function(!_getStorageInfoSuccessObject): void} */
_getStorageInfoObject.prototype.success;
/** @type {function(): void} */
_getStorageInfoObject.prototype.fail;
/** @type {function(): void} */
_getStorageInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getStorageInfoSuccessObject() {}
/** @type {?} */
_getStorageInfoSuccessObject.prototype.keys;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.currentSize;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.limitSize;
/**
 * @record
 * @struct
 */
function _getStorageObject() {}
/** @type {string} */
_getStorageObject.prototype.key;
/** @type {function(!_getStorageSuccessObject): void} */
_getStorageObject.prototype.success;
/** @type {function(): void} */
_getStorageObject.prototype.fail;
/** @type {function(): void} */
_getStorageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getStorageSuccessObject() {}
/** @type {string} */
_getStorageSuccessObject.prototype.data;
/**
 * @record
 * @struct
 */
function _getShareInfoObject() {}
/** @type {string} */
_getShareInfoObject.prototype.shareTicket;
/** @type {function(!_getShareInfoSuccessObject): void} */
_getShareInfoObject.prototype.success;
/** @type {function(): void} */
_getShareInfoObject.prototype.fail;
/** @type {function(): void} */
_getShareInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getShareInfoSuccessObject() {}
/** @type {string} */
_getShareInfoSuccessObject.prototype.errMsg;
/** @type {string} */
_getShareInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getShareInfoSuccessObject.prototype.iv;
/**
 * @record
 * @struct
 */
function _getSettingObject() {}
/** @type {function(!_getSettingSuccessObject): void} */
_getSettingObject.prototype.success;
/** @type {function(): void} */
_getSettingObject.prototype.fail;
/** @type {function(): void} */
_getSettingObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getSettingSuccessObject() {}
/** @type {!Object} */
_getSettingSuccessObject.prototype.authSetting;
/**
 * @record
 * @struct
 */
function _getScreenBrightnessObject() {}
/** @type {function(!_getScreenBrightnessSuccessObject): void} */
_getScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getScreenBrightnessSuccessObject() {}
/** @type {number} */
_getScreenBrightnessSuccessObject.prototype.value;
/**
 * @record
 * @struct
 */
function _getSavedFileListObject() {}
/** @type {function(!_getSavedFileListSuccessObject): void} */
_getSavedFileListObject.prototype.success;
/** @type {function(): void} */
_getSavedFileListObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileListObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getSavedFileListSuccessObject() {}
/** @type {string} */
_getSavedFileListSuccessObject.prototype.errMsg;
/** @type {?} */
_getSavedFileListSuccessObject.prototype.fileList;
/**
 * @record
 * @struct
 */
function _getSavedFileInfoObject() {}
/** @type {string} */
_getSavedFileInfoObject.prototype.filePath;
/** @type {function(!_getSavedFileInfoSuccessObject): void} */
_getSavedFileInfoObject.prototype.success;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getSavedFileInfoSuccessObject() {}
/** @type {string} */
_getSavedFileInfoSuccessObject.prototype.errMsg;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.size;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.createTime;
/**
 * @record
 * @struct
 */
function _getOpenDeviceIdObject() {}
/** @type {function(!_getOpenDeviceIdSuccessObject): void} */
_getOpenDeviceIdObject.prototype.success;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.fail;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getOpenDeviceIdSuccessObject() {}
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.errMsg;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.encryptedData;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.iv;
/**
 * @record
 * @struct
 */
function _getNetworkTypeObject() {}
/** @type {function(!_getNetworkTypeSuccessObject): void} */
_getNetworkTypeObject.prototype.success;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.fail;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getNetworkTypeSuccessObject() {}
/** @type {?} */
_getNetworkTypeSuccessObject.prototype.networkType;
/**
 * @record
 * @struct
 */
function _getLocationObject() {}
/** @type {string} */
_getLocationObject.prototype.type;
/** @type {boolean} */
_getLocationObject.prototype.altitude;
/** @type {function(!_getLocationSuccessObject): void} */
_getLocationObject.prototype.success;
/** @type {function(): void} */
_getLocationObject.prototype.fail;
/** @type {function(): void} */
_getLocationObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getLocationSuccessObject() {}
/** @type {?} */
_getLocationSuccessObject.prototype.latitude;
/** @type {?} */
_getLocationSuccessObject.prototype.longitude;
/** @type {?} */
_getLocationSuccessObject.prototype.speed;
/** @type {?} */
_getLocationSuccessObject.prototype.accuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.altitude;
/** @type {?} */
_getLocationSuccessObject.prototype.verticalAccuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.horizontalAccuracy;
/**
 * @record
 * @struct
 */
function _getImageInfoObject() {}
/** @type {string} */
_getImageInfoObject.prototype.src;
/** @type {function(!_getImageInfoSuccessObject): void} */
_getImageInfoObject.prototype.success;
/** @type {function(): void} */
_getImageInfoObject.prototype.fail;
/** @type {function(): void} */
_getImageInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getImageInfoSuccessObject() {}
/** @type {number} */
_getImageInfoSuccessObject.prototype.width;
/** @type {number} */
_getImageInfoSuccessObject.prototype.height;
/** @type {string} */
_getImageInfoSuccessObject.prototype.path;
/**
 * @record
 * @struct
 */
function _getHCEStateObject() {}
/** @type {function(!_getHCEStateSuccessObject): void} */
_getHCEStateObject.prototype.success;
/** @type {function(): void} */
_getHCEStateObject.prototype.fail;
/** @type {function(): void} */
_getHCEStateObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getHCEStateSuccessObject() {}
/** @type {string} */
_getHCEStateSuccessObject.prototype.errMsg;
/** @type {number} */
_getHCEStateSuccessObject.prototype.errCode;
/**
 * @record
 * @struct
 */
function _getFileInfoObject() {}
/** @type {string} */
_getFileInfoObject.prototype.filePath;
/** @type {string} */
_getFileInfoObject.prototype.digestAlgorithm;
/** @type {function(!_getFileInfoSuccessObject): void} */
_getFileInfoObject.prototype.success;
/** @type {function(): void} */
_getFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getFileInfoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getFileInfoSuccessObject() {}
/** @type {number} */
_getFileInfoSuccessObject.prototype.size;
/** @type {string} */
_getFileInfoSuccessObject.prototype.digest;
/** @type {string} */
_getFileInfoSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getExtConfigSyncReturnValue() {}
/** @type {!Object} */
_getExtConfigSyncReturnValue.prototype.extConfig;
/**
 * @record
 * @struct
 */
function _getExtConfigObject() {}
/** @type {function(!_getExtConfigSuccessObject): void} */
_getExtConfigObject.prototype.success;
/** @type {function(): void} */
_getExtConfigObject.prototype.fail;
/** @type {function(): void} */
_getExtConfigObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getExtConfigSuccessObject() {}
/** @type {string} */
_getExtConfigSuccessObject.prototype.errMsg;
/** @type {!Object} */
_getExtConfigSuccessObject.prototype.extConfig;
/**
 * @record
 * @struct
 */
function _getConnectedWifiObject() {}
/** @type {function(!_getConnectedWifiSuccessObject): void} */
_getConnectedWifiObject.prototype.success;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.fail;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getConnectedWifiSuccessObject() {}
/** @type {!Object} */
_getConnectedWifiSuccessObject.prototype.wifi;
/**
 * @record
 * @struct
 */
function _getConnectedBluetoothDevicesObject() {}
/** @type {?} */
_getConnectedBluetoothDevicesObject.prototype.services;
/** @type {function(!_getConnectedBluetoothDevicesSuccessObject): void} */
_getConnectedBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getConnectedBluetoothDevicesSuccessObject() {}
/** @type {?} */
_getConnectedBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getConnectedBluetoothDevicesSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getClipboardDataObject() {}
/** @type {function(!_getClipboardDataSuccessObject): void} */
_getClipboardDataObject.prototype.success;
/** @type {function(): void} */
_getClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_getClipboardDataObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getClipboardDataSuccessObject() {}
/** @type {string} */
_getClipboardDataSuccessObject.prototype.data;
/**
 * @record
 * @struct
 */
function _getBluetoothDevicesObject() {}
/** @type {function(!_getBluetoothDevicesSuccessObject): void} */
_getBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBluetoothDevicesSuccessObject() {}
/** @type {?} */
_getBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getBluetoothDevicesSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getBluetoothAdapterStateObject() {}
/** @type {function(!_getBluetoothAdapterStateSuccessObject): void} */
_getBluetoothAdapterStateObject.prototype.success;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBluetoothAdapterStateSuccessObject() {}
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.discovering;
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.available;
/** @type {string} */
_getBluetoothAdapterStateSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getBeaconsObject() {}
/** @type {function(!_getBeaconsSuccessObject): void} */
_getBeaconsObject.prototype.success;
/** @type {function(): void} */
_getBeaconsObject.prototype.fail;
/** @type {function(): void} */
_getBeaconsObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBeaconsSuccessObject() {}
/** @type {?} */
_getBeaconsSuccessObject.prototype.beacons;
/** @type {string} */
_getBeaconsSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getBackgroundAudioPlayerStateObject() {}
/** @type {function(!_getBackgroundAudioPlayerStateSuccessObject): void} */
_getBackgroundAudioPlayerStateObject.prototype.success;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.fail;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBackgroundAudioPlayerStateSuccessObject() {}
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.duration;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.currentPosition;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.status;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.downloadPercent;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.dataUrl;
/**
 * @record
 * @struct
 */
function _getBackgroundAudioManagerReturnValue() {}
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.duration;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.currentTime;
/** @type {boolean} */
_getBackgroundAudioManagerReturnValue.prototype.paused;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.src;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.startTime;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.buffered;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.title;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.epname;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.singer;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.coverImgUrl;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.webUrl;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.play;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.pause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.stop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.seek;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPageNotFound;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onCanplay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPlay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onStop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onEnded;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onTimeUpdate;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPrev;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onNext;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onError;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onWaiting;
/**
 * @record
 * @struct
 */
function _getBLEDeviceServicesObject() {}
/** @type {string} */
_getBLEDeviceServicesObject.prototype.deviceId;
/** @type {function(!_getBLEDeviceServicesSuccessObject): void} */
_getBLEDeviceServicesObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBLEDeviceServicesSuccessObject() {}
/** @type {?} */
_getBLEDeviceServicesSuccessObject.prototype.services;
/** @type {string} */
_getBLEDeviceServicesSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _getBLEDeviceCharacteristicsObject() {}
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.deviceId;
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.serviceId;
/** @type {function(!_getBLEDeviceCharacteristicsSuccessObject): void} */
_getBLEDeviceCharacteristicsObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _getBLEDeviceCharacteristicsSuccessObject() {}
/** @type {?} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.characteristics;
/** @type {string} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _downloadFileObject() {}
/** @type {string} */
_downloadFileObject.prototype.url;
/** @type {!Object} */
_downloadFileObject.prototype.header;
/** @type {function(!_downloadFileSuccessObject): void} */
_downloadFileObject.prototype.success;
/** @type {function(): void} */
_downloadFileObject.prototype.fail;
/** @type {function(): void} */
_downloadFileObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _downloadFileSuccessObject() {}
/** @type {string} */
_downloadFileSuccessObject.prototype.tempFilePath;
/** @type {number} */
_downloadFileSuccessObject.prototype.statusCode;
/**
 * @record
 * @struct
 */
function _createBLEConnectionObject() {}
/** @type {string} */
_createBLEConnectionObject.prototype.deviceId;
/** @type {function(!_createBLEConnectionSuccessObject): void} */
_createBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _createBLEConnectionSuccessObject() {}
/** @type {string} */
_createBLEConnectionSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _createAnimationObject() {}
/** @type {?} */
_createAnimationObject.prototype.duration;
/** @type {string} */
_createAnimationObject.prototype.timingFunction;
/** @type {?} */
_createAnimationObject.prototype.delay;
/** @type {string} */
_createAnimationObject.prototype.transformOrigin;
/**
 * @record
 * @struct
 */
function _connectWifiObject() {}
/** @type {string} */
_connectWifiObject.prototype.SSID;
/** @type {string} */
_connectWifiObject.prototype.BSSID;
/** @type {string} */
_connectWifiObject.prototype.password;
/** @type {function(): void} */
_connectWifiObject.prototype.success;
/** @type {function(): void} */
_connectWifiObject.prototype.fail;
/** @type {function(): void} */
_connectWifiObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _connectSocketObject() {}
/** @type {string} */
_connectSocketObject.prototype.url;
/** @type {!Object} */
_connectSocketObject.prototype.header;
/** @type {string} */
_connectSocketObject.prototype.method;
/** @type {?} */
_connectSocketObject.prototype.protocols;
/** @type {function(): void} */
_connectSocketObject.prototype.success;
/** @type {function(): void} */
_connectSocketObject.prototype.fail;
/** @type {function(): void} */
_connectSocketObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _closeSocketObject() {}
/** @type {number} */
_closeSocketObject.prototype.code;
/** @type {string} */
_closeSocketObject.prototype.reason;
/** @type {function(): void} */
_closeSocketObject.prototype.success;
/** @type {function(): void} */
_closeSocketObject.prototype.fail;
/** @type {function(): void} */
_closeSocketObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _closeBluetoothAdapterObject() {}
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _closeBLEConnectionObject() {}
/** @type {string} */
_closeBLEConnectionObject.prototype.deviceId;
/** @type {function(!_closeBLEConnectionSuccessObject): void} */
_closeBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _closeBLEConnectionSuccessObject() {}
/** @type {string} */
_closeBLEConnectionSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _chooseVideoObject() {}
/** @type {?} */
_chooseVideoObject.prototype.sourceType;
/** @type {?} */
_chooseVideoObject.prototype.compressed;
/** @type {number} */
_chooseVideoObject.prototype.maxDuration;
/** @type {function(!_chooseVideoSuccessObject): void} */
_chooseVideoObject.prototype.success;
/** @type {function(): void} */
_chooseVideoObject.prototype.fail;
/** @type {function(): void} */
_chooseVideoObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseVideoSuccessObject() {}
/** @type {?} */
_chooseVideoSuccessObject.prototype.tempFilePath;
/** @type {?} */
_chooseVideoSuccessObject.prototype.duration;
/** @type {?} */
_chooseVideoSuccessObject.prototype.size;
/** @type {?} */
_chooseVideoSuccessObject.prototype.height;
/** @type {?} */
_chooseVideoSuccessObject.prototype.width;
/**
 * @record
 * @struct
 */
function _chooseLocationObject() {}
/** @type {function(!_chooseLocationSuccessObject): void} */
_chooseLocationObject.prototype.success;
/** @type {function(): void} */
_chooseLocationObject.prototype.fail;
/** @type {function(): void} */
_chooseLocationObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseLocationSuccessObject() {}
/** @type {?} */
_chooseLocationSuccessObject.prototype.name;
/** @type {?} */
_chooseLocationSuccessObject.prototype.address;
/** @type {?} */
_chooseLocationSuccessObject.prototype.latitude;
/** @type {?} */
_chooseLocationSuccessObject.prototype.longitude;
/**
 * @record
 * @struct
 */
function _chooseInvoiceTitleObject() {}
/** @type {function(!_chooseInvoiceTitleSuccessObject): void} */
_chooseInvoiceTitleObject.prototype.success;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.fail;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseInvoiceTitleSuccessObject() {}
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.type;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.title;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.taxNumber;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.companyAddress;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.telephone;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankName;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankAccount;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _chooseImageObject() {}
/** @type {number} */
_chooseImageObject.prototype.count;
/** @type {?} */
_chooseImageObject.prototype.sizeType;
/** @type {?} */
_chooseImageObject.prototype.sourceType;
/** @type {function(!_chooseImageSuccessObject): void} */
_chooseImageObject.prototype.success;
/** @type {function(): void} */
_chooseImageObject.prototype.fail;
/** @type {function(): void} */
_chooseImageObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseImageSuccessObject() {}
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFilePaths;
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFiles;
/**
 * @record
 * @struct
 */
function _chooseContactObject() {}
/** @type {function(!_chooseContactSuccessObject): void} */
_chooseContactObject.prototype.success;
/** @type {function(): void} */
_chooseContactObject.prototype.fail;
/** @type {function(): void} */
_chooseContactObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseContactSuccessObject() {}
/** @type {?} */
_chooseContactSuccessObject.prototype.phoneNumber;
/** @type {?} */
_chooseContactSuccessObject.prototype.displayName;
/**
 * @record
 * @struct
 */
function _chooseAddressObject() {}
/** @type {function(!_chooseAddressSuccessObject): void} */
_chooseAddressObject.prototype.success;
/** @type {function(): void} */
_chooseAddressObject.prototype.fail;
/** @type {function(): void} */
_chooseAddressObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _chooseAddressSuccessObject() {}
/** @type {string} */
_chooseAddressSuccessObject.prototype.errMsg;
/** @type {string} */
_chooseAddressSuccessObject.prototype.userName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.postalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.provinceName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.cityName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.countyName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.detailInfo;
/** @type {string} */
_chooseAddressSuccessObject.prototype.nationalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.telNumber;
/**
 * @record
 * @struct
 */
function _checkSessionObject() {}
/** @type {function(): void} */
_checkSessionObject.prototype.success;
/** @type {function(): void} */
_checkSessionObject.prototype.fail;
/** @type {function(): void} */
_checkSessionObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _checkIsSupportSoterAuthenticationObject() {}
/** @type {function(!_checkIsSupportSoterAuthenticationSuccessObject): void} */
_checkIsSupportSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _checkIsSupportSoterAuthenticationSuccessObject() {}
/** @type {?} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.supportMode;
/** @type {string} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _checkIsSoterEnrolledInDeviceObject() {}
/** @type {string} */
_checkIsSoterEnrolledInDeviceObject.prototype.checkAuthMode;
/** @type {function(!_checkIsSoterEnrolledInDeviceSuccessObject): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.success;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.fail;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _checkIsSoterEnrolledInDeviceSuccessObject() {}
/** @type {boolean} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.isEnrolled;
/** @type {string} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _canvasToTempFilePathObject() {}
/** @type {number} */
_canvasToTempFilePathObject.prototype.x;
/** @type {number} */
_canvasToTempFilePathObject.prototype.y;
/** @type {number} */
_canvasToTempFilePathObject.prototype.width;
/** @type {number} */
_canvasToTempFilePathObject.prototype.height;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destWidth;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destHeight;
/** @type {string} */
_canvasToTempFilePathObject.prototype.canvasId;
/** @type {string} */
_canvasToTempFilePathObject.prototype.fileType;
/** @type {number} */
_canvasToTempFilePathObject.prototype.quality;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.success;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.fail;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _canvasPutImageDataObject() {}
/** @type {string} */
_canvasPutImageDataObject.prototype.canvasId;
/** @type {?} */
_canvasPutImageDataObject.prototype.data;
/** @type {number} */
_canvasPutImageDataObject.prototype.x;
/** @type {number} */
_canvasPutImageDataObject.prototype.y;
/** @type {number} */
_canvasPutImageDataObject.prototype.width;
/** @type {number} */
_canvasPutImageDataObject.prototype.height;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _canvasGetImageDataObject() {}
/** @type {string} */
_canvasGetImageDataObject.prototype.canvasId;
/** @type {number} */
_canvasGetImageDataObject.prototype.x;
/** @type {number} */
_canvasGetImageDataObject.prototype.y;
/** @type {number} */
_canvasGetImageDataObject.prototype.width;
/** @type {number} */
_canvasGetImageDataObject.prototype.height;
/** @type {function(!_canvasGetImageDataSuccessObject): void} */
_canvasGetImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _canvasGetImageDataSuccessObject() {}
/** @type {string} */
_canvasGetImageDataSuccessObject.prototype.errMsg;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.width;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.height;
/** @type {?} */
_canvasGetImageDataSuccessObject.prototype.data;
/**
 * @record
 * @struct
 */
function _authorizeObject() {}
/** @type {string} */
_authorizeObject.prototype.scope;
/** @type {function(!_authorizeSuccessObject): void} */
_authorizeObject.prototype.success;
/** @type {function(): void} */
_authorizeObject.prototype.fail;
/** @type {function(): void} */
_authorizeObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _authorizeSuccessObject() {}
/** @type {string} */
_authorizeSuccessObject.prototype.errMsg;
/**
 * @record
 * @struct
 */
function _addPhoneContactObject() {}
/** @type {string} */
_addPhoneContactObject.prototype.photoFilePath;
/** @type {string} */
_addPhoneContactObject.prototype.nickName;
/** @type {string} */
_addPhoneContactObject.prototype.lastName;
/** @type {string} */
_addPhoneContactObject.prototype.middleName;
/** @type {string} */
_addPhoneContactObject.prototype.firstName;
/** @type {string} */
_addPhoneContactObject.prototype.remark;
/** @type {string} */
_addPhoneContactObject.prototype.mobilePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.weChatNumber;
/** @type {string} */
_addPhoneContactObject.prototype.addressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.addressState;
/** @type {string} */
_addPhoneContactObject.prototype.addressCity;
/** @type {string} */
_addPhoneContactObject.prototype.addressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.addressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.organization;
/** @type {string} */
_addPhoneContactObject.prototype.title;
/** @type {string} */
_addPhoneContactObject.prototype.workFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.workPhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.hostNumber;
/** @type {string} */
_addPhoneContactObject.prototype.email;
/** @type {string} */
_addPhoneContactObject.prototype.url;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.homeFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressPostalCode;
/** @type {function(): void} */
_addPhoneContactObject.prototype.success;
/** @type {function(): void} */
_addPhoneContactObject.prototype.fail;
/** @type {function(): void} */
_addPhoneContactObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _addCardObject() {}
/** @type {?} */
_addCardObject.prototype.cardList;
/** @type {function(!_addCardSuccessObject): void} */
_addCardObject.prototype.success;
/** @type {function(): void} */
_addCardObject.prototype.fail;
/** @type {function(): void} */
_addCardObject.prototype.complete;
/**
 * @record
 * @struct
 */
function _addCardSuccessObject() {}
/** @type {?} */
_addCardSuccessObject.prototype.cardList;
/**
 * @record
 * @struct
 */
function _ShareAppMessageReturnObject() {}
/** @type {string} */
_ShareAppMessageReturnObject.prototype.title;
/** @type {string} */
_ShareAppMessageReturnObject.prototype.path;
/**
 * @record
 * @struct
 */
function _AppShowOptions() {}
/** @type {string} */
_AppShowOptions.prototype.path;
/** @type {!Object} */
_AppShowOptions.prototype.query;
/** @type {number} */
_AppShowOptions.prototype.scene;
/** @type {string} */
_AppShowOptions.prototype.shareTicket;
/**
 * @record
 * @struct
 */
function _AppOptions() {}
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onLaunch;
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onShow;
/** @type {function(): void} */
_AppOptions.prototype.onHide;
/** @type {function(string): void} */
_AppOptions.prototype.onError;

/**
 * @param {!_AppOptions} options
 * @return {void}
 */
function App(options) {}

/**
 * 获取到小程序实例
 * @return {!Object}
 */
function getApp() {}
/**
 * @record
 * @struct
 */
function PageOptions() {}
/** @type {?|undefined} */
PageOptions.prototype.data;
/** @type {function(!Object=): void} */
PageOptions.prototype.onLoad;
/** @type {function(): void} */
PageOptions.prototype.onReady;
/** @type {function(): void} */
PageOptions.prototype.onShow;
/** @type {function(): void} */
PageOptions.prototype.onHide;
/** @type {function(): void} */
PageOptions.prototype.onUnload;
/** @type {function(): void} */
PageOptions.prototype.onPullDownRefresh;
/** @type {function(): void} */
PageOptions.prototype.onReachBottom;
/** @type {function(): !_ShareAppMessageReturnObject} */
PageOptions.prototype.onShareAppMessage;

/**
 * @param {!PageOptions} page
 * @return {void}
 */
function Page(page) {}

/**
 * @return {!Array<!Object>}
 */
function getCurrentPages() {}
/** @const */
var hbs = {};

/**
 * 游戏登陆
 * @param {!Object} object
 * @return {void}
 */
hbs.gameLogin = function(object) {};

/**
 * 根据国家要求对未成年人的游戏时间进行防沉迷监控。调用此接口实现游戏登录即可接入防沉迷的能力。
 * @param {!Object} object
 * @return {?}
 */
hbs.gameLoginWithReal = function(object) {};

/**
 * 当用户完成选择区服信息进入游戏后，或者用户的等级发生变化时，游戏可以调用此接口存储用户的角色信息。如果游戏本身不具有游戏等级、角色名称、游戏区服或者游戏公会这些信息则可以不接入此接口。
 * @param {!Object} object
 * @return {?}
 */
hbs.savePlayerInfo = function(object) {};

/**
 * 存储用户角色信息
 * @param {!Object} object
 * @return {?}
 */
hbs.savePlayerInfoWithReal = function(object) {};

/**
 * 获取玩家帐户ID
 * @param {!Object} object
 * @return {?}
 */
hbs.getCachePlayerId = function(object) {};

/**
 * 获取玩家的额外信息（仅支持中国大陆地区游戏）。
 * @param {!Object} object
 * @return {?}
 */
hbs.getPlayerExtraInfo = function(object) {};

/**
 * 上报进入和退出游戏的事件
 * @param {!Object} object
 * @return {?}
 */
hbs.submitPlayerEvent = function(object) {};

/**
 * 非托管商品的支付，即开发者在接口中自行设置商品价格，而不是从华为开发者平台获取价格
 * @param {!Object} object
 * @return {?}
 */
hbs.hwPay = function(object) {};

/**
 * 用于从华为PMS系统获取商品详情
 * @param {!Object} object
 * @return {?}
 */
hbs.hwGetProductDetails = function(object) {};

/**
 * 托管商品的支付，托管商品是指在华为AppGallery Connect中维护的商品
 * @param {!Object} object
 * @return {?}
 */
hbs.hwProductPay = function(object) {};

/**
 * 查询订单详情，所有调用pay接口的订单均可查询，用于在丢单的情况下复核订单
 * @param {!Object} object
 * @return {?}
 */
hbs.hwGetOrderDetail = function(object) {};

/**
 * 订阅push服务，后续可以收到push消息
 * @param {!Object} object
 * @return {?}
 */
hbs.pushSubscribe = function(object) {};

/**
 * 查询当前用户已订购的非消耗商品订单信息
 * @param {!Object} object
 * @return {?}
 */
hbs.hwGetPurchaseInfo = function(object) {};

/**
 * 取消订阅
 * @param {!Object} object
 * @return {?}
 */
hbs.pushUnsubscribe = function(object) {};

/**
 * 添加push事件回调
 * @param {!Function} callback
 * @return {?}
 */
hbs.pushOn = function(callback) {};

/**
 * 移除push事件回调，push.on中的callback将不会再收到透传内容
 * @param {!Function} callback
 * @return {?}
 */
hbs.pushOff = function(callback) {};

/**
 * 通过系统分享，分享数据到其他app
 * @param {!Object} object
 * @return {?}
 */
hbs.systemShare = function(object) {};

/**
 * 第三方分享
 * @param {!Object} object
 * @return {?}
 */
hbs.serviceShare = function(object) {};

/**
 * 向用户发起授权请求 / 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。
 * @param {!Object|!_authorizeObject} object
 * @return {?|void}
 */
hbs.authorize = function(object) {};

/**
 * 获取用户信息 / 获取用户信息，withCredentials 为 true 时需要先调用 [hbs.login](./api-login.md#hbsloginobject) 接口。
 * @param {!Object|!_getUserInfoObject} object
 * @return {?|void}
 */
hbs.getUserInfo = function(object) {};

/**
 * 该接口用于校验应用是否有通过authorize接口完成过登录授权，及应用登录后，帐号是否有退出登录的场景。
 * @param {!Object} object
 * @return {?}
 */
hbs.checkUserSession = function(object) {};

/**
 * 创建 native 广告组件，如果已经创建过 native 广告组件，则返回已创建的广告组件
 * @param {!Object} object
 * @return {?}
 */
hbs.createNativeAd = function(object) {};

/**
 * 创建激励视频广告，同一个 adUnitId，如果已经创建，会复用之前的对象，创建后会加载广告素材，该方法返回的是一个单例，该实例仅对当前页面有效，不允许跨页面使用
 * @param {!Object} object
 * @return {?}
 */
hbs.createRewardedVideoAd = function(object) {};

/**
 * 拉取广告数据，成功回调 onLoad，失败回调 onError。
 * @param {!Object} object
 * @return {?}
 */
hbs.load = function(object) {};

/**
 * 上报广告曝光，一个广告只有一次上报有效，adId 为 load 方法获取的广告数据的 adId 字段
 * @param {!Object} object
 * @return {?}
 */
hbs.reportAdShow = function(object) {};

/**
 * 上报广告点击，一个广告只有一次上报有效，adId 为 load 方法获取的广告数据的 adId 字段。
 * @param {!Object} object
 * @return {?}
 */
hbs.reportAdClick = function(object) {};

/**
 * 获取用户的当前设置，返回值中只会出现已经请求过的权限。 / 获取用户的当前设置。
 * @param {!Object|!_getSettingObject} object
 * @return {?|void}
 */
hbs.getSetting = function(object) {};

/**
 * 调起客户端小游戏设置界面，返回用户设置的操作结果，设置界面只会出现已经请求过的权限。 / 调起客户端小程序设置界面，返回用户设置的操作结果。
 * @param {!Object|!_openSettingObject} object
 * @return {?|void}
 */
hbs.openSetting = function(object) {};

/**
 * 下载分包，返回LoadSubpackageTask对象
 * @param {!Object} object
 * @return {?}
 */
hbs.loadSubpackage = function(object) {};

/**
 * 获取性能管理器对象Performance。Performance对象仅支持一个now()方法，Performance.now() 获取当前时间以微秒为单位的时间戳。
 * @param {!Object} object
 * @return {?}
 */
hbs.getPerformance = function(object) {};

/**
 * 加快触发JS GC，但不保证一定能立即触发JS GC。
 * @param {!Object} object
 * @return {?}
 */
hbs.triggerGC = function(object) {};

/**
 * 获取当前的地理位置、速度。 / 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。
 * @param {!Object|!_getLocationObject} object
 * @return {?|void}
 */
hbs.getLocation = function(object) {};

/**
 * 异步将二进制图像数据保存为本地临时图片文件。
 * @param {!Object} object
 * @return {?}
 */
hbs.saveImageTemp = function(object) {};

/**
 * 同步将二进制图像数据保存为本地临时图片文件，保存完成后，返回本地临时文件路径。
 * @param {!Object} object
 * @return {?}
 */
hbs.saveImageTempSync = function(object) {};

/**
 * 获取全局唯一的文件管理器，返回FileSystemManager对象。
 * @param {!Object} object
 * @return {?}
 */
hbs.getFileSystemManager = function(object) {};

/**
 * 监听加速度数据。
 * @param {!Object} object
 * @return {?}
 */
hbs.getTextLineHeight = function(object) {};

/**
 * 开始监听加速度数据。
 * @param {!Object|!_startAccelerometerObject} object
 * @return {?|void}
 */
hbs.startAccelerometer = function(object) {};

/**
 * 停止监听加速度数据。
 * @param {!Object|!_stopAccelerometerObject} object
 * @return {?|void}
 */
hbs.stopAccelerometer = function(object) {};

/**
 * 获取设备电量。
 * @param {!Object} object
 * @return {?}
 */
hbs.getBatteryInfo = function(object) {};

/**
 * 获取系统剪切板内容。 / 获取系统剪贴板内容
 * @param {!Object|!_getClipboardDataObject} object
 * @return {?|void}
 */
hbs.getClipboardData = function(object) {};

/**
 * 设置系统剪切板内容 / 设置系统剪贴板的内容
 * @param {!Object|!_setClipboardDataObject} object
 * @return {?|void}
 */
hbs.setClipboardData = function(object) {};

/**
 * 监听罗盘数据，频率：5 次/秒，接口调用后会自动开始监听。 / 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用`hbs.stopCompass`停止监听。
 * @param {!Object|function(!_onCompassChangeCallbackResult): void} object_or_callback
 * @return {?|void}
 */
hbs.onCompassChange = function(object_or_callback) {};

/**
 * 开始监听罗盘数据 / 开始监听罗盘数据。
 * @param {!Object|!_startCompassObject} object
 * @return {?|void}
 */
hbs.startCompass = function(object) {};

/**
 * 停止监听罗盘数据 / 停止监听罗盘数据。
 * @param {!Object|!_stopCompassObject} object
 * @return {?|void}
 */
hbs.stopCompass = function(object) {};

/**
 *  获取网络类型 / 获取网络类型。
 * @param {!Object|!_getNetworkTypeObject} object
 * @return {?|void}
 */
hbs.getNetworkType = function(object) {};

/**
 * 监听网络状态变化事件 / 监听网络状态变化。
 * @param {!Object|function(!_onNetworkStatusChangeCallbackResult): void} object_or_callback
 * @return {?|void}
 */
hbs.onNetworkStatusChange = function(object_or_callback) {};

/**
 * 取消监听网络状态变化事件
 * @param {!Object} object
 * @return {?}
 */
hbs.offNetworkStatusChange = function(object) {};

/**
 * 获取屏幕亮度 / 获取屏幕亮度。
 * @param {!Object|!_getScreenBrightnessObject} object
 * @return {?|void}
 */
hbs.getScreenBrightness = function(object) {};

/**
 * 设置是否保持常亮状态。 / 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
 * @param {!Object|!_setKeepScreenOnObject} object
 * @return {?|void}
 */
hbs.setKeepScreenOn = function(object) {};

/**
 * 设置屏幕亮度。
 * @param {!Object|!_setScreenBrightnessObject} object
 * @return {?|void}
 */
hbs.setScreenBrightness = function(object) {};

/**
 * 使手机振动较短时间。 / 使手机发生较短时间的振动（15ms）
 * @param {!Object|!_vibrateShortObject} object
 * @return {?|void}
 */
hbs.vibrateShort = function(object) {};

/**
 * 使手机振动较长时间。 / 使手机发生较长时间的振动（400ms）
 * @param {!Object|!_vibrateLongObject} object
 * @return {?|void}
 */
hbs.vibrateLong = function(object) {};

/**
 * 隐藏软键盘
 * @param {!Object} object
 * @return {?}
 */
hbs.hideKeyboard = function(object) {};

/**
 * 显示软键盘
 * @param {!Object} object
 * @return {?}
 */
hbs.showKeyboard = function(object) {};

/**
 * 监听键盘输入事件
 * @param {!Object} object
 * @return {?}
 */
hbs.onKeyboardInput = function(object) {};

/**
 * 取消监听键盘输入事件
 * @param {!Object} object
 * @return {?}
 */
hbs.offKeyboardInput = function(object) {};

/**
 * 监听用户点击键盘 confirm 按钮时的事件。
 * @param {!Object} object
 * @return {?}
 */
hbs.onKeyboardConfirm = function(object) {};

/**
 * 取消监听用户点击键盘 confirm 按钮时的事件
 * @param {!Object} object
 * @return {?}
 */
hbs.offKeyboardConfirm = function(object) {};

/**
 * 监听键盘收起的事件
 * @param {!Object} object
 * @return {?}
 */
hbs.onKeyboardComplete = function(object) {};

/**
 * 取消监听键盘收起的事件
 * @param {!Object} object
 * @return {?}
 */
hbs.offKeyboardComplete = function(object) {};

/**
 * 批量添加卡券。
 * @param {!_addCardObject} object
 * @return {void}
 */
hbs.addCard = function(object) {};

/**
 * 调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式，写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。
 * @param {!_addPhoneContactObject} object
 * @return {void}
 */
hbs.addPhoneContact = function(object) {};

/**
 * 将 ArrayBuffer 数据转成 Base64 字符串
 * @return {void}
 */
hbs.arrayBufferToBase64 = function() {};

/**
 * 将 Base64 字符串转成 ArrayBuffer 数据
 * @param {string} base64
 * @return {void}
 */
hbs.base64ToArrayBuffer = function(base64) {};

/**
 * 判断小程序的API，回调，参数，组件等是否在当前版本可用。
 * @param {string} string
 * @return {void}
 */
hbs.canIUse = function(string) {};

/**
 * 返回一个数组，用来描述 canvas 区域隐含的像素数据
 * @param {!_canvasGetImageDataObject} object
 * @return {void}
 */
hbs.canvasGetImageData = function(object) {};

/**
 * 将像素数据绘制到画布的方法
 * @param {!_canvasPutImageDataObject} object
 * @return {void}
 */
hbs.canvasPutImageData = function(object) {};

/**
 * 把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。
 * @this {string}
 * @param {!_canvasToTempFilePathObject} object
 * @return {void}
 */
hbs.canvasToTempFilePath = function(object) {};

/**
 * 获取设备内是否录入如指纹等生物信息的接口
 * @param {!_checkIsSoterEnrolledInDeviceObject} object
 * @return {void}
 */
hbs.checkIsSoterEnrolledInDevice = function(object) {};

/**
 * 获取本机支持的 SOTER 生物认证方式
 * @param {!_checkIsSupportSoterAuthenticationObject} object
 * @return {void}
 */
hbs.checkIsSupportSoterAuthentication = function(object) {};

/**
 * 通过上述接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由维护，对开发者透明。开发者只需要调用hbs.checkSession接口**检测当前用户登录态是否有效**。登录态过期后开发者可以再调用hbs.login获取新的用户登录态。
 * @param {!_checkSessionObject} object
 * @return {void}
 */
hbs.checkSession = function(object) {};

/**
 * 调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。
 * @param {!_chooseAddressObject} object
 * @return {void}
 */
hbs.chooseAddress = function(object) {};

/**
 * 调起选择手机通讯录联系人界面，返回用户选择的联系人信息。
 * @param {!_chooseContactObject} object
 * @return {void}
 */
hbs.chooseContact = function(object) {};

/**
 * 从本地相册选择图片或使用相机拍照。
 * @param {!_chooseImageObject} object
 * @return {void}
 */
hbs.chooseImage = function(object) {};

/**
 * 选择用户的发票抬头。
 * @param {!_chooseInvoiceTitleObject} object
 * @return {void}
 */
hbs.chooseInvoiceTitle = function(object) {};

/**
 * 打开地图选择位置。
 * @param {!_chooseLocationObject} object
 * @return {void}
 */
hbs.chooseLocation = function(object) {};

/**
 * 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。
 * @param {!_chooseVideoObject} object
 * @return {void}
 */
hbs.chooseVideo = function(object) {};

/**
 * 清理本地数据缓存。
 * @return {void}
 */
hbs.clearStorage = function() {};

/**
 * 同步清理本地数据缓存
 * @return {void}
 */
hbs.clearStorageSync = function() {};

/**
 * 断开与低功耗蓝牙设备的连接
 * @param {!_closeBLEConnectionObject} object
 * @return {void}
 */
hbs.closeBLEConnection = function(object) {};

/**
 * 关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源。建议在使用小程序蓝牙流程后调用，与`hbs.openBluetoothAdapter`成对调用。
 * @param {!_closeBluetoothAdapterObject} object
 * @return {void}
 */
hbs.closeBluetoothAdapter = function(object) {};

/**
 * 关闭 WebSocket 连接。
 * @param {!_closeSocketObject} object
 * @return {void}
 */
hbs.closeSocket = function(object) {};

/**
 * 创建一个 [WebSocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket) 连接。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_connectSocketObject} object
 * @return {void}
 */
hbs.connectSocket = function(object) {};

/**
 * 连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。
 * @param {!_connectWifiObject} object
 * @return {void}
 */
hbs.connectWifi = function(object) {};

/**
 * 创建一个动画实例[animation](#animation)。调用实例的方法来描述动画。最后通过动画实例的`export`方法导出动画数据传递给组件的`animation`属性。
 * @param {!_createAnimationObject} object
 * @return {void}
 */
hbs.createAnimation = function(object) {};

/**
 * 创建并返回 audio 上下文 `audioContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<audio/>` 组件
 * @this {string}
 * @param {string} audioid
 * @return {void}
 */
hbs.createAudioContext = function(audioid) {};

/**
 * 连接低功耗蓝牙设备。
 * @param {!_createBLEConnectionObject} object
 * @return {void}
 */
hbs.createBLEConnection = function(object) {};

/**
 * 创建并返回 camera 上下文 `cameraContext` 对象，`cameraContext` 与页面的 `camera` 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 `<camera/>` 组件。
 * @this {string}
 * @return {void}
 */
hbs.createCameraContext = function() {};

/**
 * 创建 canvas 绘图上下文（指定 canvasId）。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<canvas/>` 组件
 * @this {string}
 * @param {string} canvasid
 * @return {!CanvasContext}
 */
hbs.createCanvasContext = function(canvasid) {};

/**
 * 创建并返回绘图上下文。
 * @return {!CanvasContext}
 */
hbs.createContext = function() {};

/**
 * 创建并返回内部 audio 上下文 `innerAudioContext` 对象。*本接口是 `hbs.createAudioContext` 升级版。*
 * @return {void}
 */
hbs.createInnerAudioContext = function() {};

/**
 * 操作对应的 `<live-player/>` 组件。
 * @this {string}
 * @param {string} domid
 * @return {void}
 */
hbs.createLivePlayerContext = function(domid) {};

/**
 * 创建并返回 `live-pusher` 上下文 `LivePusherContext` 对象，`LivePusherContext` 与页面的 `<live-pusher />` 组件绑定，一个页面只能有一个 `live-pusher`，通过它可以操作对应的 `<live-pusher/>` 组件。
 * @return {void}
 */
hbs.createLivePusherContext = function() {};

/**
 * 创建并返回 map 上下文 `mapContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<map/>` 组件
 * @this {string}
 * @param {string} mapid
 * @return {void}
 */
hbs.createMapContext = function(mapid) {};

/**
 * undefined
 * @return {void}
 */
hbs.createSelectorQuery = function() {};

/**
 * 创建并返回 video 上下文 `videoContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<video/>` 组件
 * @this {string}
 * @param {string} videoid
 * @return {void}
 */
hbs.createVideoContext = function(videoid) {};

/**
 * 下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地临时路径。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_downloadFileObject} object
 * @return {void}
 */
hbs.downloadFile = function(object) {};

/**
 * 蓝牙设备characteristic(特征值)信息
 * @param {!_getBLEDeviceCharacteristicsObject} object
 * @return {void}
 */
hbs.getBLEDeviceCharacteristics = function(object) {};

/**
 * 获取蓝牙设备所有 service（服务）
 * @param {!_getBLEDeviceServicesObject} object
 * @return {void}
 */
hbs.getBLEDeviceServices = function(object) {};

/**
 * 获取**全局唯一**的背景音频管理器 `backgroundAudioManager`。
 * @return {!_getBackgroundAudioManagerReturnValue}
 */
hbs.getBackgroundAudioManager = function() {};

/**
 * 获取后台音乐播放状态。
 * @param {!_getBackgroundAudioPlayerStateObject} object
 * @return {void}
 */
hbs.getBackgroundAudioPlayerState = function(object) {};

/**
 * 获取所有已搜索到的`iBeacon`设备
 * @param {!_getBeaconsObject} object
 * @return {void}
 */
hbs.getBeacons = function(object) {};

/**
 * 获取本机蓝牙适配器状态
 * @param {!_getBluetoothAdapterStateObject} object
 * @return {void}
 */
hbs.getBluetoothAdapterState = function(object) {};

/**
 * 获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。
 * @param {!_getBluetoothDevicesObject} object
 * @return {void}
 */
hbs.getBluetoothDevices = function(object) {};

/**
 * 根据 uuid 获取处于已连接状态的设备
 * @param {!_getConnectedBluetoothDevicesObject} object
 * @return {void}
 */
hbs.getConnectedBluetoothDevices = function(object) {};

/**
 * 获取已连接中的 Wi-Fi 信息
 * @param {!_getConnectedWifiObject} object
 * @return {void}
 */
hbs.getConnectedWifi = function(object) {};

/**
 * 获取第三方平台自定义的数据字段。
 * @param {!_getExtConfigObject} object
 * @return {void}
 */
hbs.getExtConfig = function(object) {};

/**
 * 获取第三方平台自定义的数据字段的同步接口。
 * @return {!_getExtConfigSyncReturnValue}
 */
hbs.getExtConfigSync = function() {};

/**
 * 获取文件信息
 * @param {!_getFileInfoObject} object
 * @return {void}
 */
hbs.getFileInfo = function(object) {};

/**
 * 判断当前设备是否支持 HCE 能力。
 * @param {!_getHCEStateObject} object
 * @return {void}
 */
hbs.getHCEState = function(object) {};

/**
 * 获取图片信息
 * @param {!_getImageInfoObject} object
 * @return {void}
 */
hbs.getImageInfo = function(object) {};

/**
 * 获取替设备生成的唯一标识，用于判断设备是否更换。获取的数据为AES加密数据，需要自行解密。
 * @param {!_getOpenDeviceIdObject} object
 * @return {void}
 */
hbs.getOpenDeviceId = function(object) {};

/**
 * 获取**全局唯一**的录音管理器 `recorderManager`。
 * @return {void}
 */
hbs.getRecorderManager = function() {};

/**
 * 获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 [hbs.getFileInfo](./getFileInfo.md) 接口。
 * @param {!_getSavedFileInfoObject} object
 * @return {void}
 */
hbs.getSavedFileInfo = function(object) {};

/**
 * 获取本地已保存的文件列表
 * @param {!_getSavedFileListObject} object
 * @return {void}
 */
hbs.getSavedFileList = function(object) {};

/**
 * 获取转发详细信息
 * @param {!_getShareInfoObject} object
 * @return {void}
 */
hbs.getShareInfo = function(object) {};

/**
 * 从本地缓存中异步获取指定 key 对应的内容。
 * @param {!_getStorageObject} object
 * @return {void}
 */
hbs.getStorage = function(object) {};

/**
 * 异步获取当前storage的相关信息
 * @param {!_getStorageInfoObject} object
 * @return {void}
 */
hbs.getStorageInfo = function(object) {};

/**
 * 同步获取当前storage的相关信息
 * @return {void}
 */
hbs.getStorageInfoSync = function() {};

/**
 * 从本地缓存中同步获取指定 key 对应的内容。
 * @param {string} key
 * @return {void}
 */
hbs.getStorageSync = function(key) {};

/**
 * 获取系统信息。
 * @param {!_getSystemInfoObject} object
 * @return {void}
 */
hbs.getSystemInfo = function(object) {};

/**
 * 获取系统信息同步接口
 * @return {!_getSystemInfoSyncReturnValue}
 */
hbs.getSystemInfoSync = function() {};

/**
 * 获取快应用启动时的参数。与App定义的回调参数一致。
 * @param {!Object} Object
 * @return {void}
 */
hbs.getLaunchOptionsSync = function(Object) {};

/**
 * 获取用户过去三十天运动步数，需要先调用 [hbs.login](./api-login.md#hbsloginobject) 接口。
 * @param {!_getWeRunDataObject} object
 * @return {void}
 */
hbs.getWeRunData = function(object) {};

/**
 * 请求获取 Wi-Fi 列表，在 `onGetWifiList` 注册的回调中返回 wifiList 数据。iOS 将跳转到系统的 Wi-Fi 界面，Android 不会跳转。
 * @param {!_getWifiListObject} object
 * @return {void}
 */
hbs.getWifiList = function(object) {};

/**
 * 隐藏 loading 提示框
 * @return {void}
 */
hbs.hideLoading = function() {};

/**
 * 隐藏导航条加载动画。
 * @return {void}
 */
hbs.hideNavigationBarLoading = function() {};

/**
 * 隐藏转发按钮
 * @param {!_hideShareMenuObject} object
 * @return {void}
 */
hbs.hideShareMenu = function(object) {};

/**
 * 隐藏 tabBar
 * @param {!_hideTabBarObject} object
 * @return {void}
 */
hbs.hideTabBar = function(object) {};

/**
 * 隐藏 tabBar 某一项的右上角的红点
 * @param {!_hideTabBarRedDotObject} object
 * @return {void}
 */
hbs.hideTabBarRedDot = function(object) {};

/**
 * 隐藏消息提示框
 * @return {void}
 */
hbs.hideToast = function() {};

/**
 * 调用接口获取**登录凭证（code）**进而换取用户登录态信息，包括用户的**唯一标识（openid）** 及本次登录的 **会话密钥（session_key）**等。**用户数据的加解密通讯**需要依赖会话密钥完成。
 * @param {!_loginObject} object
 * @return {void}
 */
hbs.login = function(object) {};

/**
 * hbs.makePhoneCall({
 * @param {!_makePhoneCallObject} object
 * @return {void}
 */
hbs.makePhoneCall = function(object) {};

/**
 * 调起 VoIP 音视频通话界面。
 * @param {!_makeVoIPCallObject} object
 * @return {void}
 */
hbs.makeVoIPCall = function(object) {};

/**
 * 关闭当前页面，返回上一页面或多级页面。可通过 [`getCurrentPages()`](../framework/app-service/page.md#getCurrentPages()) 获取当前的页面栈，决定需要返回几层。
 * @param {!_navigateBackObject} object
 * @return {void}
 */
hbs.navigateBack = function(object) {};

/**
 * 返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功
 * @param {!_navigateBackMiniProgramObject} object
 * @return {void}
 */
hbs.navigateBackMiniProgram = function(object) {};

/**
 * 保留当前页面，跳转到应用内的某个页面，使用`hbs.navigateBack`可以返回到原页面。
 * @param {!_navigateToObject} object
 * @return {void}
 */
hbs.navigateTo = function(object) {};

/**
 * 打开同一公众号下关联的另一个小程序。**（注：必须是同一公众号下，而非同个 open 账号下）**
 * @param {!_navigateToMiniProgramObject} object
 * @return {void}
 */
hbs.navigateToMiniProgram = function(object) {};

/**
 * 启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持`notify`或者`indicate`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_notifyBLECharacteristicValueChangeObject} object
 * @return {void}
 */
hbs.notifyBLECharacteristicValueChange = function(object) {};

/**
 * 监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 `hbs.stopAccelerometer` 停止监听。
 * @param {function(!_onAccelerometerChangeCallbackResult): void} callback
 * @return {void}
 */
hbs.onAccelerometerChange = function(callback) {};

/**
 * 监听低功耗蓝牙设备的特征值变化。必须先启用`notify`接口才能接收到设备推送的notification。
 * @param {function(!_onBLECharacteristicValueChangeCallbackResult): void} callback
 * @return {void}
 */
hbs.onBLECharacteristicValueChange = function(callback) {};

/**
 * 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。
 * @param {function(!_onBLEConnectionStateChangeCallbackResult): void} callback
 * @return {void}
 */
hbs.onBLEConnectionStateChange = function(callback) {};

/**
 * 监听音乐暂停。
 * @param {string} callback
 * @return {void}
 */
hbs.onBackgroundAudioPause = function(callback) {};

/**
 * 监听音乐播放。
 * @param {string} callback
 * @return {void}
 */
hbs.onBackgroundAudioPlay = function(callback) {};

/**
 * 监听音乐停止。
 * @param {string} callback
 * @return {void}
 */
hbs.onBackgroundAudioStop = function(callback) {};

/**
 * 监听 `iBeacon` 服务的状态变化
 * @param {function(!_onBeaconServiceChangeCallbackResult): void} callback
 * @return {void}
 */
hbs.onBeaconServiceChange = function(callback) {};

/**
 * 监听 `iBeacon` 设备的更新事件
 * @param {function(!_onBeaconUpdateCallbackResult): void} callback
 * @return {void}
 */
hbs.onBeaconUpdate = function(callback) {};

/**
 * 监听蓝牙适配器状态变化事件
 * @param {function(!_onBluetoothAdapterStateChangeCallbackResult): void} callback
 * @return {void}
 */
hbs.onBluetoothAdapterStateChange = function(callback) {};

/**
 * 监听寻找到新设备的事件
 * @param {function(!_onBluetoothDeviceFoundCallbackResult): void} callback
 * @return {void}
 */
hbs.onBluetoothDeviceFound = function(callback) {};

/**
 * 监听需要评估连上的 Wi-Fi 的请求，在回调里必须返回 `confidence` 字段
 * @param {function(!_onEvaluateWifiCallbackResult): void} callback
 * @return {void}
 */
hbs.onEvaluateWifi = function(callback) {};

/**
 * 监听在获取到 Wi-Fi 列表数据时的事件，在回调中将返回 wifiList。
 * @param {function(!_onGetWifiListCallbackResult): void} callback
 * @return {void}
 */
hbs.onGetWifiList = function(callback) {};

/**
 * 监听 NFC 设备的消息回调，并在回调中处理。返回参数中 `messageType` 表示消息类型，目前有如下值：
 * @param {function(!_onHCEMessageCallbackResult): void} callback
 * @return {void}
 */
hbs.onHCEMessage = function(callback) {};

/**
 * 监听WebSocket关闭。
 * @param {string} callback
 * @return {void}
 */
hbs.onSocketClose = function(callback) {};

/**
 * 监听WebSocket错误。
 * @param {string} callback
 * @return {void}
 */
hbs.onSocketError = function(callback) {};

/**
 * 监听WebSocket接受到服务器的消息事件。
 * @param {function(!_onSocketMessageCallbackResult): void} callback
 * @return {void}
 */
hbs.onSocketMessage = function(callback) {};

/**
 * 监听WebSocket连接打开事件。
 * @param {string} callback
 * @return {void}
 */
hbs.onSocketOpen = function(callback) {};

/**
 * 监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件
 * @param {function(!_onUserCaptureScreenCallbackResult): void} callback
 * @return {void}
 */
hbs.onUserCaptureScreen = function(callback) {};

/**
 * 监听连接上 Wi-Fi 的事件。
 * @param {function(!_onWifiConnectedCallbackResult): void} callback
 * @return {void}
 */
hbs.onWifiConnected = function(callback) {};

/**
 * 初始化小程序蓝牙模块，生效周期为调用`hbs.openBluetoothAdapter`至调用`hbs.closeBluetoothAdapter`或小程序被销毁为止。
 * @param {!_openBluetoothAdapterObject} object
 * @return {void}
 */
hbs.openBluetoothAdapter = function(object) {};

/**
 * 查看卡包中的卡券。
 * @param {!_openCardObject} object
 * @return {void}
 */
hbs.openCard = function(object) {};

/**
 * 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx
 * @param {!_openDocumentObject} object
 * @return {void}
 */
hbs.openDocument = function(object) {};

/**
 * ​使用内置地图查看位置。
 * @param {!_openLocationObject} object
 * @return {void}
 */
hbs.openLocation = function(object) {};

/**
 * 将页面滚动到目标位置。
 * @param {!_pageScrollToObject} object
 * @return {void}
 */
hbs.pageScrollTo = function(object) {};

/**
 * 暂停播放音乐。
 * @return {void}
 */
hbs.pauseBackgroundAudio = function() {};

/**
 * 暂停正在播放的语音。再次调用hbs.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 hbs.stopVoice。
 * @return {void}
 */
hbs.pauseVoice = function() {};

/**
 * 使用后台播放器播放音乐，对于客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。
 * @param {!_playBackgroundAudioObject} object
 * @return {void}
 */
hbs.playBackgroundAudio = function(object) {};

/**
 * 开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。
 * @param {!_playVoiceObject} object
 * @return {void}
 */
hbs.playVoice = function(object) {};

/**
 * 预览图片。
 * @param {!_previewImageObject} object
 * @return {void}
 */
hbs.previewImage = function(object) {};

/**
 * 关闭所有页面，打开到应用内的某个页面。
 * @param {!_reLaunchObject} object
 * @return {void}
 */
hbs.reLaunch = function(object) {};

/**
 * 读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持`read`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_readBLECharacteristicValueObject} object
 * @return {void}
 */
hbs.readBLECharacteristicValue = function(object) {};

/**
 * 关闭当前页面，跳转到应用内的某个页面。
 * @param {!_redirectToObject} object
 * @return {void}
 */
hbs.redirectTo = function(object) {};

/**
 * 删除本地存储的文件
 * @param {!_removeSavedFileObject} object
 * @return {void}
 */
hbs.removeSavedFile = function(object) {};

/**
 * 从本地缓存中异步移除指定 key 。
 * @param {!_removeStorageObject} object
 * @return {void}
 */
hbs.removeStorage = function(object) {};

/**
 * 从本地缓存中同步移除指定 key 。
 * @param {string} key
 * @return {void}
 */
hbs.removeStorageSync = function(key) {};

/**
 * 移除 tabBar 某一项右上角的文本
 * @param {!_removeTabBarBadgeObject} object
 * @return {void}
 */
hbs.removeTabBarBadge = function(object) {};

/**
 * 自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。
 * @param {string} eventname
 * @param {string} data
 * @return {void}
 */
hbs.reportAnalytics = function(eventname, data) {};

/**
 * 发起网络请求。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_requestObject} object
 * @return {void}
 */
hbs.request = function(object) {};

/**
 * 发起支付。
 * @param {!_requestPaymentObject} object
 * @return {void}
 */
hbs.requestPayment = function(object) {};

/**
 * 保存文件到本地。**注意：saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用**
 * @param {!_saveFileObject} object
 * @return {void}
 */
hbs.saveFile = function(object) {};

/**
 * 保存图片到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveImageToPhotosAlbumObject} object
 * @return {void}
 */
hbs.saveImageToPhotosAlbum = function(object) {};

/**
 * 保存视频到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveVideoToPhotosAlbumObject} object
 * @return {void}
 */
hbs.saveVideoToPhotosAlbum = function(object) {};

/**
 * 调起客户端扫码界面，扫码成功后返回对应的结果
 * @param {!_scanCodeObject} object
 * @return {void}
 */
hbs.scanCode = function(object) {};

/**
 * 控制音乐播放进度。
 * @param {!_seekBackgroundAudioObject} object
 * @return {void}
 */
hbs.seekBackgroundAudio = function(object) {};

/**
 * 发送 NFC 消息。仅在安卓系统下有效。
 * @param {!_sendHCEMessageObject} object
 * @return {void}
 */
hbs.sendHCEMessage = function(object) {};

/**
 * 通过 WebSocket 连接发送数据，需要先 [hbs.connectSocket](#hbsconnectsocketobject)，并在 [hbs.onSocketOpen](#hbsonsocketopencallback) 回调之后才能发送。
 * @param {!_sendSocketMessageObject} object
 * @return {void}
 */
hbs.sendSocketMessage = function(object) {};

/**
 * 设置是否打开调试开关，此开关对正式版也能生效。
 * @param {!_setEnableDebugObject} object
 * @return {void}
 */
hbs.setEnableDebug = function(object) {};

/**
 * hbs.setNavigationBarColor({
 * @param {!_setNavigationBarColorObject} object
 * @return {void}
 */
hbs.setNavigationBarColor = function(object) {};

/**
 * 动态设置当前页面的标题。
 * @param {!_setNavigationBarTitleObject} object
 * @return {void}
 */
hbs.setNavigationBarTitle = function(object) {};

/**
 * 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。
 * @param {!_setStorageObject} object
 * @return {void}
 */
hbs.setStorage = function(object) {};

/**
 * 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。
 * @param {string} key
 * @return {void}
 */
hbs.setStorageSync = function(key) {};

/**
 * 为 tabBar 某一项的右上角添加文本
 * @param {!_setTabBarBadgeObject} object
 * @return {void}
 */
hbs.setTabBarBadge = function(object) {};

/**
 * 动态设置 tabBar 某一项的内容
 * @param {!_setTabBarItemObject} object
 * @return {void}
 */
hbs.setTabBarItem = function(object) {};

/**
 * 动态设置 tabBar 的整体样式
 * @param {!_setTabBarStyleObject} object
 * @return {void}
 */
hbs.setTabBarStyle = function(object) {};

/**
 * 动态设置置顶栏文字内容，只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容。**注意：调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg："setTopBarText: fail invoke too frequently"**
 * @param {!_setTopBarTextObject} object
 * @return {void}
 */
hbs.setTopBarText = function(object) {};

/**
 * 在 `onGetWifiList` 回调后，利用接口设置 wifiList 中 AP 的相关信息。
 * @param {!_setWifiListObject} object
 * @return {void}
 */
hbs.setWifiList = function(object) {};

/**
 * ​显示操作菜单
 * @param {!_showActionSheetObject} object
 * @return {void}
 */
hbs.showActionSheet = function(object) {};

/**
 * 显示 loading 提示框, 需主动调用 [hbs.hideLoading](#hbshideloading) 才能关闭提示框
 * @param {!_showLoadingObject} object
 * @return {void}
 */
hbs.showLoading = function(object) {};

/**
 * ​显示模态弹窗
 * @param {!_showModalObject} object
 * @return {void}
 */
hbs.showModal = function(object) {};

/**
 * 在当前页面显示导航条加载动画。
 * @return {void}
 */
hbs.showNavigationBarLoading = function() {};

/**
 * 显示当前页面的转发按钮
 * @param {!_showShareMenuObject} object
 * @return {void}
 */
hbs.showShareMenu = function(object) {};

/**
 * 显示 tabBar
 * @param {!_showTabBarObject} object
 * @return {void}
 */
hbs.showTabBar = function(object) {};

/**
 * 显示 tabBar 某一项的右上角的红点
 * @param {!_showTabBarRedDotObject} object
 * @return {void}
 */
hbs.showTabBarRedDot = function(object) {};

/**
 * 显示消息提示框
 * @param {!_showToastObject} object
 * @return {void}
 */
hbs.showToast = function(object) {};

/**
 * 开始搜索附近的`iBeacon`设备
 * @param {!_startBeaconDiscoveryObject} object
 * @return {void}
 */
hbs.startBeaconDiscovery = function(object) {};

/**
 * 开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。
 * @param {!_startBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
hbs.startBluetoothDevicesDiscovery = function(object) {};

/**
 * 初始化 NFC 模块。
 * @param {!_startHCEObject} object
 * @return {void}
 */
hbs.startHCE = function(object) {};

/**
 * 开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致
 * @param {!_startPullDownRefreshObject} object
 * @return {void}
 */
hbs.startPullDownRefresh = function(object) {};

/**
 * 开始录音。当主动调用`hbs.stopRecord`，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。
 * @param {!_startRecordObject} object
 * @return {void}
 */
hbs.startRecord = function(object) {};

/**
 * 开始 SOTER 生物认证
 * @param {!_startSoterAuthenticationObject} object
 * @return {void}
 */
hbs.startSoterAuthentication = function(object) {};

/**
 * 初始化 Wi-Fi 模块。
 * @param {!_startWifiObject} object
 * @return {void}
 */
hbs.startWifi = function(object) {};

/**
 * 停止播放音乐。
 * @return {void}
 */
hbs.stopBackgroundAudio = function() {};

/**
 * 停止搜索附近的`iBeacon`设备
 * @param {!_stopBeaconDiscoveryObject} object
 * @return {void}
 */
hbs.stopBeaconDiscovery = function(object) {};

/**
 * 停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。
 * @param {!_stopBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
hbs.stopBluetoothDevicesDiscovery = function(object) {};

/**
 * 关闭 NFC 模块。仅在安卓系统下有效。
 * @param {!_stopHCEObject} object
 * @return {void}
 */
hbs.stopHCE = function(object) {};

/**
 * 停止当前页面下拉刷新。
 * @return {void}
 */
hbs.stopPullDownRefresh = function() {};

/**
 * ​主动调用停止录音。
 * @return {void}
 */
hbs.stopRecord = function() {};

/**
 * 结束播放语音。
 * @return {void}
 */
hbs.stopVoice = function() {};

/**
 * 关闭 Wi-Fi 模块。
 * @param {!_stopWifiObject} object
 * @return {void}
 */
hbs.stopWifi = function(object) {};

/**
 * 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
 * @param {!_switchTabObject} object
 * @return {void}
 */
hbs.switchTab = function(object) {};

/**
 * 更新转发属性
 * @param {!_updateShareMenuObject} object
 * @return {void}
 */
hbs.updateShareMenu = function(object) {};

/**
 * 将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 `content-type` 为 `multipart/form-data` 。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_uploadFileObject} object
 * @return {void}
 */
hbs.uploadFile = function(object) {};

/**
 * 
 * 监听主域发送的消息
 * @param {!Function} callback
 * @return {void}
 */
hbs.onMessage = function(callback) {};

/**
 * 拉取当前用户所有同玩好友的托管数据。该接口只可在开放数据域下使用
 * @param {?} object
 * @return {void}
 */
hbs.getFriendCloudStorage = function(object) {};

/**
 * 对用户托管数据进行写数据操作。允许同时写多组 KV 数据。
 * @param {?} object
 * @return {void}
 */
hbs.setUserCloudStorage = function(object) {};

/**
 * 向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持`write`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_writeBLECharacteristicValueObject} object
 * @return {void}
 */
hbs.writeBLECharacteristicValue = function(object) {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/jszip.d.ts
/**
 * @record
 * @struct
 */
function JSZip() {}

/**
 * Get a file from the archive
 *  / Get files matching a RegExp from archive
 *  / Add a file to the archive
 * 
 * @param {string|!RegExp} path RegExp to match / Relative path to file
 * @param {?=} data
 * @param {!JSZipFileOptions=} options Optional information about the file
 * @return {!JSZipObject|!Array<!JSZipObject>|?} File matching path, null if no file found / Return all matching files or an empty array / JSZip object
 */
JSZip.prototype.file = function(path, data, options) {};

/**
 * Return an new JSZip instance with the given folder as root
 *  / Returns new JSZip instances with the matching folders as root
 * 
 * @param {string|!RegExp} name Name of the folder / RegExp to match
 * @return {?|!Array<!JSZipObject>} New JSZip object with the given folder as root or null / New array of JSZipFile objects which match the RegExp
 */
JSZip.prototype.folder = function(name) {};

/**
 * Iterate over all files
 * 
 * @param {function(string, !JSZipObject): void} callback
 * @return {void} Array of matched elements
 */
JSZip.prototype.forEach = function(callback) {};

/**
 * Get all files which match the given filter function
 * 
 * @param {function(string, !JSZipObject): boolean} predicate Filter function
 * @return {!Array<!JSZipObject>} Array of matched elements
 */
JSZip.prototype.filter = function(predicate) {};

/**
 * Removes the file or folder from the archive
 * 
 * @param {string} path Relative path of file or folder
 * @return {?} Returns the JSZip instance
 */
JSZip.prototype.remove = function(path) {};

/**
 * Generates a new archive
 * 
 * @param {!JSZipGeneratorOptions} options Options for the generator
 * @param {!JSZipMetaUpdateCallback=} onUpdate
 * @return {!Promise<?>} Returns a Promise of the generated zip file.
 */
JSZip.prototype.generateAsync = function(options, onUpdate) {};

/**
 * Generates the complete zip file as a nodejs stream.
 * 
 * @param {!JSZipGeneratorOptions} options Options for the generator
 * @param {!JSZipMetaUpdateCallback=} onUpdate
 * @return {?} Returns a readable stream
 */
JSZip.prototype.generateNodeStream = function(options, onUpdate) {};

/**
 * Generates the complete zip file with the internal stream implementation.
 * 
 * @param {!JSZipGeneratorOptions} options Options for the generator
 * @return {!JSZipStreamHelper}
 */
JSZip.prototype.generateInternalStream = function(options) {};

/**
 * Deserialize zip file
 * 
 * @param {?} data Serialized zip file
 * @param {!JSZipLoadOptions} options Options for deserializing
 * @return {!Promise<!JSZipObject>} Returns the JSZip instance
 */
JSZip.prototype.loadAsync = function(data, options) {};
/**
 * @record
 * @struct
 */
function JSZipObject() {}
/** @type {string} */
JSZipObject.prototype.name;
/** @type {boolean} */
JSZipObject.prototype.dir;
/** @type {!Date} */
JSZipObject.prototype.date;
/** @type {string} */
JSZipObject.prototype.comment;
/** @type {number} */
JSZipObject.prototype.unixPermissions;
/** @type {number} */
JSZipObject.prototype.dosPermissions;
/** @type {{compression: string}} */
JSZipObject.prototype.options;

/**
 * @param {string} type
 * @param {!JSZipMetaUpdateCallback=} onUpdate
 * @return {!Promise<?>}
 */
JSZipObject.prototype.async = function(type, onUpdate) {};

/**
 * @param {string} type
 * @param {!JSZipMetaUpdateCallback=} onUpdate
 * @return {?}
 */
JSZipObject.prototype.nodeStream = function(type, onUpdate) {};

/**
 * @param {string} type
 * @return {!JSZipStreamHelper}
 */
JSZipObject.prototype.internalStream = function(type) {};
/**
 * @record
 * @struct
 */
function JSZipFileOptions() {}
/** @type {boolean} */
JSZipFileOptions.prototype.base64;
/** @type {boolean} */
JSZipFileOptions.prototype.binary;
/** @type {!Date} */
JSZipFileOptions.prototype.date;
/** @type {string} */
JSZipFileOptions.prototype.compression;
/** @type {!JSZipCompressionOptions} */
JSZipFileOptions.prototype.compressionOptions;
/** @type {string} */
JSZipFileOptions.prototype.comment;
/** @type {boolean} */
JSZipFileOptions.prototype.optimizedBinaryString;
/** @type {boolean} */
JSZipFileOptions.prototype.createFolders;
/** @type {boolean} */
JSZipFileOptions.prototype.unixPermissions;
/** @type {boolean} */
JSZipFileOptions.prototype.dosPermissions;
/** @type {boolean} */
JSZipFileOptions.prototype.dir;
/**
 * @record
 * @struct
 */
function JSZipGeneratorOptions() {}
/** @type {string} */
JSZipGeneratorOptions.prototype.compression;
/** @type {!JSZipCompressionOptions} */
JSZipGeneratorOptions.prototype.compressionOptions;
/** @type {string} */
JSZipGeneratorOptions.prototype.type;
/** @type {string} */
JSZipGeneratorOptions.prototype.comment;
/** @type {string} */
JSZipGeneratorOptions.prototype.mimeType;
/** @type {string} */
JSZipGeneratorOptions.prototype.platform;
/** @type {function(?): string} */
JSZipGeneratorOptions.prototype.encodeFileName;
/** @type {boolean} */
JSZipGeneratorOptions.prototype.streamFiles;
/**
 * @record
 * @struct
 */
function JSZipLoadOptions() {}
/** @type {boolean} */
JSZipLoadOptions.prototype.base64;
/** @type {boolean} */
JSZipLoadOptions.prototype.checkCRC32;
/** @type {boolean} */
JSZipLoadOptions.prototype.optimizedBinaryString;
/** @type {boolean} */
JSZipLoadOptions.prototype.createFolders;
/** @type {function(?): string} */
JSZipLoadOptions.prototype.decodeFileName;
/**
 * @record
 * @struct
 */
function JSZipCompressionOptions() {}
/** @type {number} */
JSZipCompressionOptions.prototype.level;
/**
 * @record
 * @struct
 */
function JSZipStreamHelper() {}

/**
 * @template THIS
 * @this {THIS}
 * @param {string} event
 * @param {function(?, !JSZipMetadata): void|function(!Error): void|function(): void|!Function} callback
 * @return {THIS}
 */
JSZipStreamHelper.prototype.on = function(event, callback) {};

/**
 * @param {function(?, ?): void} callback
 * @param {function(!JSZipMetadata): void=} updateCallback
 * @return {void}
 */
JSZipStreamHelper.prototype.accumulate = function(callback, updateCallback) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
JSZipStreamHelper.prototype.resume = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
JSZipStreamHelper.prototype.pause = function() {};
/**
 * @record
 * @struct
 */
function JSZipSupport() {}
/** @type {boolean} */
JSZipSupport.prototype.arraybuffer;
/** @type {boolean} */
JSZipSupport.prototype.uint8array;
/** @type {boolean} */
JSZipSupport.prototype.blob;
/** @type {boolean} */
JSZipSupport.prototype.nodebuffer;
/** @type {boolean} */
JSZipSupport.prototype.nodestream;
/**
 * @record
 * @struct
 */
function JSZipMetadata() {}
/** @type {number} */
JSZipMetadata.prototype.percent;
/** @type {string} */
JSZipMetadata.prototype.currentFile;
/**
 * @record
 * @struct
 */
function JSZipMetaUpdateCallback() {}

/* TODO: CallSignature:  */
/** @type {function(new:?)} */
var JSZip;
// Derived from: declare module "jszip"
/** @const */
var libs$jszip = {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/laya-zip.d.ts
/** @type {{Init: function(): void, DeBug: boolean, ZIP: string, BasePathMode: number, LazyMode: boolean, LazyFliter: !Array<string>, Version: string, CacheZIPFile: boolean, AutoSkipZip: boolean, clearCacheZip: function((string|void)): void}} */
var LayaZip;
// Generated from: C:/workspace/ClosureCompilerJS/libs/layaAir.minigame.d.ts
/** @const */
var Handler = Laya.Handler;
/** @const */
var laya = {};
/** @const */
laya.wx = {};
/** @const */
laya.wx.mini = {};
/**
 * @constructor
 * @struct
 */
laya.wx.mini.MiniAdpter = function() {};
/** @type {?} */
laya.wx.mini.MiniAdpter.EnvConfig;
/** @type {?} */
laya.wx.mini.MiniAdpter.window;
/** @type {?} */
laya.wx.mini.MiniAdpter.systemInfo;
/** @type {boolean} */
laya.wx.mini.MiniAdpter.isZiYu;
/** @type {boolean} */
laya.wx.mini.MiniAdpter.isPosMsgYu;
/** @type {boolean} */
laya.wx.mini.MiniAdpter.autoCacheFile;
/** @type {number} */
laya.wx.mini.MiniAdpter.minClearSize;
/** @type {!Array<?>} */
laya.wx.mini.MiniAdpter.nativefiles;
/** @type {?} */
laya.wx.mini.MiniAdpter.subNativeFiles;
/** @type {!Array<?>} */
laya.wx.mini.MiniAdpter.subNativeheads;
/** @type {!Array<?>} */
laya.wx.mini.MiniAdpter.subMaps;
/** @type {boolean} */
laya.wx.mini.MiniAdpter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.wx.mini.MiniAdpter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.wx.mini.MiniAdpter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.wx.mini.MiniAdpter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.wx.mini.MiniAdpter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.wx.mini.MiniAdpter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.wx.mini.MiniAdpter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.wx.mini.MiniAdpter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.wx.mini.MiniAdpter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.wx.mini.MiniAdpter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.wx.mini.MiniAdpter.getFileList = function() {};

/**
 * @return {void}
 */
laya.wx.mini.MiniAdpter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.wx.mini.MiniAdpter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.wx.mini.MiniAdpter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.wx.mini.MiniAdpter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.wx.mini.MiniAdpter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.wx.mini.MiniAdpter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.wx.mini.MiniAdpter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.hw = {};
/** @const */
laya.hw.mini = {};
/**
 * @constructor
 * @struct
 */
laya.hw.mini.HWMiniAdapter = function() {};
/** @type {?} */
laya.hw.mini.HWMiniAdapter.EnvConfig;
/** @type {?} */
laya.hw.mini.HWMiniAdapter.window;
/** @type {?} */
laya.hw.mini.HWMiniAdapter.systemInfo;
/** @type {boolean} */
laya.hw.mini.HWMiniAdapter.autoCacheFile;
/** @type {number} */
laya.hw.mini.HWMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.hw.mini.HWMiniAdapter.nativefiles;
/** @type {?} */
laya.hw.mini.HWMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.hw.mini.HWMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.hw.mini.HWMiniAdapter.subMaps;
/** @type {boolean} */
laya.hw.mini.HWMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.hw.mini.HWMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.hw.mini.HWMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.hw.mini.HWMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.hw.mini.HWMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.hw.mini.HWMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.hw.mini.HWMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.hw.mini.HWMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.hw.mini.HWMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.hw.mini.HWMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.bili = {};
/** @const */
laya.bili.mini = {};
/**
 * @constructor
 * @struct
 */
laya.bili.mini.BLMiniAdapter = function() {};
/** @type {?} */
laya.bili.mini.BLMiniAdapter.EnvConfig;
/** @type {?} */
laya.bili.mini.BLMiniAdapter.window;
/** @type {?} */
laya.bili.mini.BLMiniAdapter.systemInfo;
/** @type {boolean} */
laya.bili.mini.BLMiniAdapter.isZiYu;
/** @type {boolean} */
laya.bili.mini.BLMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.bili.mini.BLMiniAdapter.autoCacheFile;
/** @type {number} */
laya.bili.mini.BLMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.bili.mini.BLMiniAdapter.nativefiles;
/** @type {?} */
laya.bili.mini.BLMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.bili.mini.BLMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.bili.mini.BLMiniAdapter.subMaps;
/** @type {boolean} */
laya.bili.mini.BLMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.bili.mini.BLMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.bili.mini.BLMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.bili.mini.BLMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.bili.mini.BLMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.bili.mini.BLMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.bili.mini.BLMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.bili.mini.BLMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.bili.mini.BLMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.bili.mini.BLMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.qq = {};
/** @const */
laya.qq.mini = {};
/**
 * @constructor
 * @struct
 */
laya.qq.mini.QQMiniAdapter = function() {};
/** @type {?} */
laya.qq.mini.QQMiniAdapter.EnvConfig;
/** @type {?} */
laya.qq.mini.QQMiniAdapter.window;
/** @type {?} */
laya.qq.mini.QQMiniAdapter.systemInfo;
/** @type {boolean} */
laya.qq.mini.QQMiniAdapter.isZiYu;
/** @type {boolean} */
laya.qq.mini.QQMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.qq.mini.QQMiniAdapter.autoCacheFile;
/** @type {number} */
laya.qq.mini.QQMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.qq.mini.QQMiniAdapter.nativefiles;
/** @type {?} */
laya.qq.mini.QQMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.qq.mini.QQMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.qq.mini.QQMiniAdapter.subMaps;
/** @type {boolean} */
laya.qq.mini.QQMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.qq.mini.QQMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.qq.mini.QQMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.qq.mini.QQMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.qq.mini.QQMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.qq.mini.QQMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.qq.mini.QQMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.qq.mini.QQMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.qq.mini.QQMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.qq.mini.QQMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.ali = {};
/** @const */
laya.ali.mini = {};
/**
 * @constructor
 * @struct
 */
laya.ali.mini.ALIMiniAdapter = function() {};
/** @type {?} */
laya.ali.mini.ALIMiniAdapter.EnvConfig;
/** @type {?} */
laya.ali.mini.ALIMiniAdapter.window;
/** @type {?} */
laya.ali.mini.ALIMiniAdapter.systemInfo;
/** @type {boolean} */
laya.ali.mini.ALIMiniAdapter.isZiYu;
/** @type {boolean} */
laya.ali.mini.ALIMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.ali.mini.ALIMiniAdapter.autoCacheFile;
/** @type {number} */
laya.ali.mini.ALIMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.ali.mini.ALIMiniAdapter.nativefiles;
/** @type {?} */
laya.ali.mini.ALIMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.ali.mini.ALIMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.ali.mini.ALIMiniAdapter.subMaps;
/** @type {boolean} */
laya.ali.mini.ALIMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.ali.mini.ALIMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.ali.mini.ALIMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.ali.mini.ALIMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.ali.mini.ALIMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.ali.mini.ALIMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.ali.mini.ALIMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.ali.mini.ALIMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.ali.mini.ALIMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.ali.mini.ALIMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.tt = {};
/** @const */
laya.tt.mini = {};
/**
 * @constructor
 * @struct
 */
laya.tt.mini.TTMiniAdapter = function() {};
/** @type {?} */
laya.tt.mini.TTMiniAdapter.EnvConfig;
/** @type {?} */
laya.tt.mini.TTMiniAdapter.window;
/** @type {?} */
laya.tt.mini.TTMiniAdapter.systemInfo;
/** @type {boolean} */
laya.tt.mini.TTMiniAdapter.isZiYu;
/** @type {boolean} */
laya.tt.mini.TTMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.tt.mini.TTMiniAdapter.autoCacheFile;
/** @type {number} */
laya.tt.mini.TTMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.tt.mini.TTMiniAdapter.nativefiles;
/** @type {?} */
laya.tt.mini.TTMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.tt.mini.TTMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.tt.mini.TTMiniAdapter.subMaps;
/** @type {boolean} */
laya.tt.mini.TTMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.tt.mini.TTMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.tt.mini.TTMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.tt.mini.TTMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.tt.mini.TTMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.tt.mini.TTMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.tt.mini.TTMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.tt.mini.TTMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.tt.mini.TTMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.tt.mini.TTMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.bd = {};
/** @const */
laya.bd.mini = {};
/**
 * @constructor
 * @struct
 */
laya.bd.mini.BMiniAdapter = function() {};
/** @type {?} */
laya.bd.mini.BMiniAdapter.EnvConfig;
/** @type {?} */
laya.bd.mini.BMiniAdapter.window;
/** @type {?} */
laya.bd.mini.BMiniAdapter.systemInfo;
/** @type {boolean} */
laya.bd.mini.BMiniAdapter.isZiYu;
/** @type {boolean} */
laya.bd.mini.BMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.bd.mini.BMiniAdapter.autoCacheFile;
/** @type {number} */
laya.bd.mini.BMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.bd.mini.BMiniAdapter.nativefiles;
/** @type {?} */
laya.bd.mini.BMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.bd.mini.BMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.bd.mini.BMiniAdapter.subMaps;
/** @type {boolean} */
laya.bd.mini.BMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.bd.mini.BMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.bd.mini.BMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.bd.mini.BMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.bd.mini.BMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.bd.mini.BMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.bd.mini.BMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.bd.mini.BMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.bd.mini.BMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.bd.mini.BMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.mi = {};
/** @const */
laya.mi.mini = {};
/**
 * @constructor
 * @struct
 */
laya.mi.mini.KGMiniAdapter = function() {};
/** @type {?} */
laya.mi.mini.KGMiniAdapter.EnvConfig;
/** @type {?} */
laya.mi.mini.KGMiniAdapter.window;
/** @type {?} */
laya.mi.mini.KGMiniAdapter.systemInfo;
/** @type {boolean} */
laya.mi.mini.KGMiniAdapter.isZiYu;
/** @type {boolean} */
laya.mi.mini.KGMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.mi.mini.KGMiniAdapter.autoCacheFile;
/** @type {number} */
laya.mi.mini.KGMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.mi.mini.KGMiniAdapter.nativefiles;
/** @type {?} */
laya.mi.mini.KGMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.mi.mini.KGMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.mi.mini.KGMiniAdapter.subMaps;
/** @type {boolean} */
laya.mi.mini.KGMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.mi.mini.KGMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.mi.mini.KGMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.mi.mini.KGMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.mi.mini.KGMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.mi.mini.KGMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.mi.mini.KGMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.mi.mini.KGMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.mi.mini.KGMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.mi.mini.KGMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.qg = {};
/** @const */
laya.qg.mini = {};
/**
 * @constructor
 * @struct
 */
laya.qg.mini.QGMiniAdapter = function() {};
/** @type {?} */
laya.qg.mini.QGMiniAdapter.EnvConfig;
/** @type {?} */
laya.qg.mini.QGMiniAdapter.window;
/** @type {?} */
laya.qg.mini.QGMiniAdapter.systemInfo;
/** @type {boolean} */
laya.qg.mini.QGMiniAdapter.isZiYu;
/** @type {boolean} */
laya.qg.mini.QGMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.qg.mini.QGMiniAdapter.autoCacheFile;
/** @type {number} */
laya.qg.mini.QGMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.qg.mini.QGMiniAdapter.nativefiles;
/** @type {?} */
laya.qg.mini.QGMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.qg.mini.QGMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.qg.mini.QGMiniAdapter.subMaps;
/** @type {boolean} */
laya.qg.mini.QGMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.qg.mini.QGMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.qg.mini.QGMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.qg.mini.QGMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.qg.mini.QGMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.qg.mini.QGMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.qg.mini.QGMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.qg.mini.QGMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.qg.mini.QGMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.qg.mini.QGMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.vv = {};
/** @const */
laya.vv.mini = {};
/**
 * @constructor
 * @struct
 */
laya.vv.mini.VVMiniAdapter = function() {};
/** @type {?} */
laya.vv.mini.VVMiniAdapter.EnvConfig;
/** @type {?} */
laya.vv.mini.VVMiniAdapter.window;
/** @type {?} */
laya.vv.mini.VVMiniAdapter.systemInfo;
/** @type {boolean} */
laya.vv.mini.VVMiniAdapter.isZiYu;
/** @type {boolean} */
laya.vv.mini.VVMiniAdapter.isPosMsgYu;
/** @type {boolean} */
laya.vv.mini.VVMiniAdapter.autoCacheFile;
/** @type {number} */
laya.vv.mini.VVMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.vv.mini.VVMiniAdapter.nativefiles;
/** @type {?} */
laya.vv.mini.VVMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.vv.mini.VVMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.vv.mini.VVMiniAdapter.subMaps;
/** @type {boolean} */
laya.vv.mini.VVMiniAdapter.AutoCacheDownFile;

/**
 * @param {string} data
 * @return {?}
 */
laya.vv.mini.VVMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.vv.mini.VVMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.vv.mini.VVMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.vv.mini.VVMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.vv.mini.VVMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.vv.mini.VVMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.vv.mini.VVMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.vv.mini.VVMiniAdapter.createShaderCondition = function(conditionScript) {};

/**
 * 传递图集url地址到
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.sendAtlasToOpenDataContext = function(url) {};

/**
 * 发送单张图片到开放数据域
 * @param {string} url
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.sendSinglePicToOpenDataContext = function(url) {};

/**
 * 传递json配置数据到开放数据域
 * @param {string} url 为绝对地址
 * @return {void}
 */
laya.vv.mini.VVMiniAdapter.sendJsonDataToDataContext = function(url) {};
/** @const */
laya.tb = {};
/** @const */
laya.tb.mini = {};
/**
 * @constructor
 * @struct
 */
laya.tb.mini.TBMiniAdapter = function() {};
/** @type {?} */
laya.tb.mini.TBMiniAdapter.EnvConfig;
/** @type {?} */
laya.tb.mini.TBMiniAdapter.window;
/** @type {?} */
laya.tb.mini.TBMiniAdapter.systemInfo;
/** @type {boolean} */
laya.tb.mini.TBMiniAdapter.autoCacheFile;
/** @type {number} */
laya.tb.mini.TBMiniAdapter.minClearSize;
/** @type {!Array<?>} */
laya.tb.mini.TBMiniAdapter.nativefiles;
/** @type {?} */
laya.tb.mini.TBMiniAdapter.subNativeFiles;
/** @type {!Array<?>} */
laya.tb.mini.TBMiniAdapter.subNativeheads;
/** @type {!Array<?>} */
laya.tb.mini.TBMiniAdapter.subMaps;
/** @type {boolean} */
laya.tb.mini.TBMiniAdapter.AutoCacheDownFile;
/** @type {string} */
laya.tb.mini.TBMiniAdapter.baseDir;

/**
 * @param {string} data
 * @return {?}
 */
laya.tb.mini.TBMiniAdapter.getJson = function(data) {};

/**
 * 激活微信小游戏适配器
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.enable = function() {};

/**
 * 初始化回调
 * @param {boolean=} isPosMsg 是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false
 * @param {boolean=} isSon 是否是子域，默认为false
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.init = function(isPosMsg, isSon) {};

/**
 * 获取url对应的encoding值
 * @param {string} url 文件路径
 * @param {string} type 文件类型
 * @return {string}
 */
laya.tb.mini.TBMiniAdapter.getUrlEncode = function(url, type) {};

/**
 * 下载文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {string=} fileType 文件类型(image、text、json、xml、arraybuffer、sound、atlas、font)
 * @param {!Handler=} callBack 文件加载回调,回调内容[errorCode码(0成功,1失败,2加载进度)
 * @param {string=} encoding 文件编码默认utf8，非图片文件加载需要设置相应的编码，二进制编码为空字符串
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.downLoadFile = function(fileUrl, fileType, callBack, encoding) {};

/**
 * 从本地删除文件
 * @param {string} fileUrl 文件地址(全路径)
 * @param {!Handler=} callBack 回调处理，在存储图片时用到
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.remove = function(fileUrl, callBack) {};

/**
 * 清空缓存空间文件内容
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.removeAll = function() {};

/**
 * 判断是否是4M包文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {boolean}
 */
laya.tb.mini.TBMiniAdapter.hasNativeFile = function(fileUrl) {};

/**
 * 判断缓存里是否存在文件
 * @param {string} fileUrl 文件地址(全路径)
 * @return {?}
 */
laya.tb.mini.TBMiniAdapter.getFileInfo = function(fileUrl) {};

/**
 * 获取缓存文件列表
 * @return {?}
 */
laya.tb.mini.TBMiniAdapter.getFileList = function() {};

/**
 * @return {void}
 */
laya.tb.mini.TBMiniAdapter.exitMiniProgram = function() {};

/**
 * @return {number}
 */
laya.tb.mini.TBMiniAdapter.pixelRatio = function() {};

/**
 * @param {string} type
 * @return {?}
 */
laya.tb.mini.TBMiniAdapter.createElement = function(type) {};

/**
 * @param {string} conditionScript
 * @return {!Function}
 */
laya.tb.mini.TBMiniAdapter.createShaderCondition = function(conditionScript) {};
/**
 * @extends {laya.wx.mini.MiniAdpter}
 * @constructor
 * @struct
 */
Laya.MiniAdpter = function() {};
/**
 * @extends {laya.bd.mini.BMiniAdapter}
 * @constructor
 * @struct
 */
Laya.BMiniAdapter = function() {};
/**
 * @extends {laya.mi.mini.KGMiniAdapter}
 * @constructor
 * @struct
 */
Laya.KGMiniAdapter = function() {};
/**
 * @extends {laya.qg.mini.QGMiniAdapter}
 * @constructor
 * @struct
 */
Laya.QGMiniAdapter = function() {};
/**
 * @extends {laya.vv.mini.VVMiniAdapter}
 * @constructor
 * @struct
 */
Laya.VVMiniAdapter = function() {};
/**
 * @extends {laya.tt.mini.TTMiniAdapter}
 * @constructor
 * @struct
 */
Laya.TTMiniAdapter = function() {};
/**
 * @extends {laya.hw.mini.HWMiniAdapter}
 * @constructor
 * @struct
 */
Laya.HWMiniAdapter = function() {};
/**
 * @extends {laya.ali.mini.ALIMiniAdapter}
 * @constructor
 * @struct
 */
Laya.ALIMiniAdapter = function() {};
/**
 * @extends {laya.bili.mini.BLMiniAdapter}
 * @constructor
 * @struct
 */
Laya.BLMiniAdapter = function() {};
/**
 * @extends {laya.qq.mini.QQMiniAdapter}
 * @constructor
 * @struct
 */
Laya.QQMiniAdapter = function() {};
/**
 * @extends {laya.tb.mini.TBMiniAdapter}
 * @constructor
 * @struct
 */
Laya.TBMiniAdapter = function() {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/spine-core-3.8.d.ts
/** @const */
var spine = {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {!Array<!spine.Timeline>} timelines
 * @param {number} duration
 */
spine.Animation = function(name, timelines, duration) {};
/** @type {string} */
spine.Animation.prototype.name;
/** @type {!Array<!spine.Timeline>} */
spine.Animation.prototype.timelines;
/** @type {!Array<boolean>} */
spine.Animation.prototype.timelineIds;
/** @type {number} */
spine.Animation.prototype.duration;

/**
 * @param {number} id
 * @return {boolean}
 */
spine.Animation.prototype.hasTimeline = function(id) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {boolean} loop
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.Animation.prototype.apply = function(skeleton, lastTime, time, loop, events, alpha, blend, direction) {};

/**
 * @param {!spine.ArrayLike<number>} values
 * @param {number} target
 * @param {number=} step
 * @return {number}
 */
spine.Animation.binarySearch = function(values, target, step) {};

/**
 * @param {!spine.ArrayLike<number>} values
 * @param {number} target
 * @param {number} step
 * @return {number}
 */
spine.Animation.linearSearch = function(values, target, step) {};
/**
 * @record
 * @struct
 */
spine.Timeline = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.Timeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @return {number}
 */
spine.Timeline.prototype.getPropertyId = function() {};

/** @enum {number} */
spine.MixBlend = {
  setup: 1,
  first: 1,
  replace: 1,
  add: 1,
};

/** @enum {number} */
spine.MixDirection = {
  mixIn: 1,
  mixOut: 1,
};

/** @enum {number} */
spine.TimelineType = {
  rotate: 1,
  translate: 1,
  scale: 1,
  shear: 1,
  attachment: 1,
  color: 1,
  deform: 1,
  event: 1,
  drawOrder: 1,
  ikConstraint: 1,
  transformConstraint: 1,
  pathConstraintPosition: 1,
  pathConstraintSpacing: 1,
  pathConstraintMix: 1,
  twoColor: 1,
};

/**
 * @implements {spine.Timeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.CurveTimeline = function(frameCount) {};
/** @type {number} */
spine.CurveTimeline.LINEAR;
/** @type {number} */
spine.CurveTimeline.STEPPED;
/** @type {number} */
spine.CurveTimeline.BEZIER;
/** @type {number} */
spine.CurveTimeline.BEZIER_SIZE;
/** @type {?} */
spine.CurveTimeline.prototype.curves;

/**
 * @abstract
 * @return {number}
 */
spine.CurveTimeline.prototype.getPropertyId = function() {};

/**
 * @return {number}
 */
spine.CurveTimeline.prototype.getFrameCount = function() {};

/**
 * @param {number} frameIndex
 * @return {void}
 */
spine.CurveTimeline.prototype.setLinear = function(frameIndex) {};

/**
 * @param {number} frameIndex
 * @return {void}
 */
spine.CurveTimeline.prototype.setStepped = function(frameIndex) {};

/**
 * @param {number} frameIndex
 * @return {number}
 */
spine.CurveTimeline.prototype.getCurveType = function(frameIndex) {};

/**
 * @param {number} frameIndex
 * @param {number} cx1
 * @param {number} cy1
 * @param {number} cx2
 * @param {number} cy2
 * @return {void}
 */
spine.CurveTimeline.prototype.setCurve = function(frameIndex, cx1, cy1, cx2, cy2) {};

/**
 * @param {number} frameIndex
 * @param {number} percent
 * @return {number}
 */
spine.CurveTimeline.prototype.getCurvePercent = function(frameIndex, percent) {};

/**
 * @abstract
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.CurveTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.RotateTimeline = function(frameCount) {};
/** @type {number} */
spine.RotateTimeline.ENTRIES;
/** @type {number} */
spine.RotateTimeline.PREV_TIME;
/** @type {number} */
spine.RotateTimeline.PREV_ROTATION;
/** @type {number} */
spine.RotateTimeline.ROTATION;
/** @type {number} */
spine.RotateTimeline.prototype.boneIndex;
/** @type {!spine.ArrayLike<number>} */
spine.RotateTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.RotateTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} degrees
 * @return {void}
 */
spine.RotateTimeline.prototype.setFrame = function(frameIndex, time, degrees) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.RotateTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.TranslateTimeline = function(frameCount) {};
/** @type {number} */
spine.TranslateTimeline.ENTRIES;
/** @type {number} */
spine.TranslateTimeline.PREV_TIME;
/** @type {number} */
spine.TranslateTimeline.PREV_X;
/** @type {number} */
spine.TranslateTimeline.PREV_Y;
/** @type {number} */
spine.TranslateTimeline.X;
/** @type {number} */
spine.TranslateTimeline.Y;
/** @type {number} */
spine.TranslateTimeline.prototype.boneIndex;
/** @type {!spine.ArrayLike<number>} */
spine.TranslateTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.TranslateTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
spine.TranslateTimeline.prototype.setFrame = function(frameIndex, time, x, y) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.TranslateTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.TranslateTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.ScaleTimeline = function(frameCount) {};

/**
 * @return {number}
 */
spine.ScaleTimeline.prototype.getPropertyId = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.ScaleTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.TranslateTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.ShearTimeline = function(frameCount) {};

/**
 * @return {number}
 */
spine.ShearTimeline.prototype.getPropertyId = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.ShearTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.ColorTimeline = function(frameCount) {};
/** @type {number} */
spine.ColorTimeline.ENTRIES;
/** @type {number} */
spine.ColorTimeline.PREV_TIME;
/** @type {number} */
spine.ColorTimeline.PREV_R;
/** @type {number} */
spine.ColorTimeline.PREV_G;
/** @type {number} */
spine.ColorTimeline.PREV_B;
/** @type {number} */
spine.ColorTimeline.PREV_A;
/** @type {number} */
spine.ColorTimeline.R;
/** @type {number} */
spine.ColorTimeline.G;
/** @type {number} */
spine.ColorTimeline.B;
/** @type {number} */
spine.ColorTimeline.A;
/** @type {number} */
spine.ColorTimeline.prototype.slotIndex;
/** @type {!spine.ArrayLike<number>} */
spine.ColorTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.ColorTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {void}
 */
spine.ColorTimeline.prototype.setFrame = function(frameIndex, time, r, g, b, a) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.ColorTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.TwoColorTimeline = function(frameCount) {};
/** @type {number} */
spine.TwoColorTimeline.ENTRIES;
/** @type {number} */
spine.TwoColorTimeline.PREV_TIME;
/** @type {number} */
spine.TwoColorTimeline.PREV_R;
/** @type {number} */
spine.TwoColorTimeline.PREV_G;
/** @type {number} */
spine.TwoColorTimeline.PREV_B;
/** @type {number} */
spine.TwoColorTimeline.PREV_A;
/** @type {number} */
spine.TwoColorTimeline.PREV_R2;
/** @type {number} */
spine.TwoColorTimeline.PREV_G2;
/** @type {number} */
spine.TwoColorTimeline.PREV_B2;
/** @type {number} */
spine.TwoColorTimeline.R;
/** @type {number} */
spine.TwoColorTimeline.G;
/** @type {number} */
spine.TwoColorTimeline.B;
/** @type {number} */
spine.TwoColorTimeline.A;
/** @type {number} */
spine.TwoColorTimeline.R2;
/** @type {number} */
spine.TwoColorTimeline.G2;
/** @type {number} */
spine.TwoColorTimeline.B2;
/** @type {number} */
spine.TwoColorTimeline.prototype.slotIndex;
/** @type {!spine.ArrayLike<number>} */
spine.TwoColorTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.TwoColorTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @param {number} r2
 * @param {number} g2
 * @param {number} b2
 * @return {void}
 */
spine.TwoColorTimeline.prototype.setFrame = function(frameIndex, time, r, g, b, a, r2, g2, b2) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.TwoColorTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @implements {spine.Timeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.AttachmentTimeline = function(frameCount) {};
/** @type {number} */
spine.AttachmentTimeline.prototype.slotIndex;
/** @type {!spine.ArrayLike<number>} */
spine.AttachmentTimeline.prototype.frames;
/** @type {!Array<string>} */
spine.AttachmentTimeline.prototype.attachmentNames;

/**
 * @return {number}
 */
spine.AttachmentTimeline.prototype.getPropertyId = function() {};

/**
 * @return {number}
 */
spine.AttachmentTimeline.prototype.getFrameCount = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {string} attachmentName
 * @return {void}
 */
spine.AttachmentTimeline.prototype.setFrame = function(frameIndex, time, attachmentName) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} events
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.AttachmentTimeline.prototype.apply = function(skeleton, lastTime, time, events, alpha, blend, direction) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {!spine.Slot} slot
 * @param {string} attachmentName
 * @return {void}
 */
spine.AttachmentTimeline.prototype.setAttachment = function(skeleton, slot, attachmentName) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.DeformTimeline = function(frameCount) {};
/** @type {number} */
spine.DeformTimeline.prototype.slotIndex;
/** @type {!spine.VertexAttachment} */
spine.DeformTimeline.prototype.attachment;
/** @type {!spine.ArrayLike<number>} */
spine.DeformTimeline.prototype.frames;
/** @type {!Array<!spine.ArrayLike<number>>} */
spine.DeformTimeline.prototype.frameVertices;

/**
 * @return {number}
 */
spine.DeformTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {!spine.ArrayLike<number>} vertices
 * @return {void}
 */
spine.DeformTimeline.prototype.setFrame = function(frameIndex, time, vertices) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.DeformTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @implements {spine.Timeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.EventTimeline = function(frameCount) {};
/** @type {!spine.ArrayLike<number>} */
spine.EventTimeline.prototype.frames;
/** @type {!Array<!spine.Event>} */
spine.EventTimeline.prototype.events;

/**
 * @return {number}
 */
spine.EventTimeline.prototype.getPropertyId = function() {};

/**
 * @return {number}
 */
spine.EventTimeline.prototype.getFrameCount = function() {};

/**
 * @param {number} frameIndex
 * @param {!spine.Event} event
 * @return {void}
 */
spine.EventTimeline.prototype.setFrame = function(frameIndex, event) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.EventTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @implements {spine.Timeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.DrawOrderTimeline = function(frameCount) {};
/** @type {!spine.ArrayLike<number>} */
spine.DrawOrderTimeline.prototype.frames;
/** @type {!Array<!Array<number>>} */
spine.DrawOrderTimeline.prototype.drawOrders;

/**
 * @return {number}
 */
spine.DrawOrderTimeline.prototype.getPropertyId = function() {};

/**
 * @return {number}
 */
spine.DrawOrderTimeline.prototype.getFrameCount = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {!Array<number>} drawOrder
 * @return {void}
 */
spine.DrawOrderTimeline.prototype.setFrame = function(frameIndex, time, drawOrder) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.DrawOrderTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.IkConstraintTimeline = function(frameCount) {};
/** @type {number} */
spine.IkConstraintTimeline.ENTRIES;
/** @type {number} */
spine.IkConstraintTimeline.PREV_TIME;
/** @type {number} */
spine.IkConstraintTimeline.PREV_MIX;
/** @type {number} */
spine.IkConstraintTimeline.PREV_SOFTNESS;
/** @type {number} */
spine.IkConstraintTimeline.PREV_BEND_DIRECTION;
/** @type {number} */
spine.IkConstraintTimeline.PREV_COMPRESS;
/** @type {number} */
spine.IkConstraintTimeline.PREV_STRETCH;
/** @type {number} */
spine.IkConstraintTimeline.MIX;
/** @type {number} */
spine.IkConstraintTimeline.SOFTNESS;
/** @type {number} */
spine.IkConstraintTimeline.BEND_DIRECTION;
/** @type {number} */
spine.IkConstraintTimeline.COMPRESS;
/** @type {number} */
spine.IkConstraintTimeline.STRETCH;
/** @type {number} */
spine.IkConstraintTimeline.prototype.ikConstraintIndex;
/** @type {!spine.ArrayLike<number>} */
spine.IkConstraintTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.IkConstraintTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} mix
 * @param {number} softness
 * @param {number} bendDirection
 * @param {boolean} compress
 * @param {boolean} stretch
 * @return {void}
 */
spine.IkConstraintTimeline.prototype.setFrame = function(frameIndex, time, mix, softness, bendDirection, compress, stretch) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.IkConstraintTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.TransformConstraintTimeline = function(frameCount) {};
/** @type {number} */
spine.TransformConstraintTimeline.ENTRIES;
/** @type {number} */
spine.TransformConstraintTimeline.PREV_TIME;
/** @type {number} */
spine.TransformConstraintTimeline.PREV_ROTATE;
/** @type {number} */
spine.TransformConstraintTimeline.PREV_TRANSLATE;
/** @type {number} */
spine.TransformConstraintTimeline.PREV_SCALE;
/** @type {number} */
spine.TransformConstraintTimeline.PREV_SHEAR;
/** @type {number} */
spine.TransformConstraintTimeline.ROTATE;
/** @type {number} */
spine.TransformConstraintTimeline.TRANSLATE;
/** @type {number} */
spine.TransformConstraintTimeline.SCALE;
/** @type {number} */
spine.TransformConstraintTimeline.SHEAR;
/** @type {number} */
spine.TransformConstraintTimeline.prototype.transformConstraintIndex;
/** @type {!spine.ArrayLike<number>} */
spine.TransformConstraintTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.TransformConstraintTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} rotateMix
 * @param {number} translateMix
 * @param {number} scaleMix
 * @param {number} shearMix
 * @return {void}
 */
spine.TransformConstraintTimeline.prototype.setFrame = function(frameIndex, time, rotateMix, translateMix, scaleMix, shearMix) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.TransformConstraintTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.PathConstraintPositionTimeline = function(frameCount) {};
/** @type {number} */
spine.PathConstraintPositionTimeline.ENTRIES;
/** @type {number} */
spine.PathConstraintPositionTimeline.PREV_TIME;
/** @type {number} */
spine.PathConstraintPositionTimeline.PREV_VALUE;
/** @type {number} */
spine.PathConstraintPositionTimeline.VALUE;
/** @type {number} */
spine.PathConstraintPositionTimeline.prototype.pathConstraintIndex;
/** @type {!spine.ArrayLike<number>} */
spine.PathConstraintPositionTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.PathConstraintPositionTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} value
 * @return {void}
 */
spine.PathConstraintPositionTimeline.prototype.setFrame = function(frameIndex, time, value) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.PathConstraintPositionTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @extends {spine.PathConstraintPositionTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.PathConstraintSpacingTimeline = function(frameCount) {};

/**
 * @return {number}
 */
spine.PathConstraintSpacingTimeline.prototype.getPropertyId = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.PathConstraintSpacingTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @extends {spine.CurveTimeline}
 * @constructor
 * @struct
 * @param {number} frameCount
 */
spine.PathConstraintMixTimeline = function(frameCount) {};
/** @type {number} */
spine.PathConstraintMixTimeline.ENTRIES;
/** @type {number} */
spine.PathConstraintMixTimeline.PREV_TIME;
/** @type {number} */
spine.PathConstraintMixTimeline.PREV_ROTATE;
/** @type {number} */
spine.PathConstraintMixTimeline.PREV_TRANSLATE;
/** @type {number} */
spine.PathConstraintMixTimeline.ROTATE;
/** @type {number} */
spine.PathConstraintMixTimeline.TRANSLATE;
/** @type {number} */
spine.PathConstraintMixTimeline.prototype.pathConstraintIndex;
/** @type {!spine.ArrayLike<number>} */
spine.PathConstraintMixTimeline.prototype.frames;

/**
 * @return {number}
 */
spine.PathConstraintMixTimeline.prototype.getPropertyId = function() {};

/**
 * @param {number} frameIndex
 * @param {number} time
 * @param {number} rotateMix
 * @param {number} translateMix
 * @return {void}
 */
spine.PathConstraintMixTimeline.prototype.setFrame = function(frameIndex, time, rotateMix, translateMix) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {number} lastTime
 * @param {number} time
 * @param {!Array<!spine.Event>} firedEvents
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!spine.MixDirection} direction
 * @return {void}
 */
spine.PathConstraintMixTimeline.prototype.apply = function(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {};

/**
 * @constructor
 * @struct
 * @param {!spine.AnimationStateData} data
 */
spine.AnimationState = function(data) {};
/** @type {!spine.Animation} */
spine.AnimationState.emptyAnimation;
/** @type {number} */
spine.AnimationState.SUBSEQUENT;
/** @type {number} */
spine.AnimationState.FIRST;
/** @type {number} */
spine.AnimationState.HOLD_SUBSEQUENT;
/** @type {number} */
spine.AnimationState.HOLD_FIRST;
/** @type {number} */
spine.AnimationState.HOLD_MIX;
/** @type {number} */
spine.AnimationState.SETUP;
/** @type {number} */
spine.AnimationState.CURRENT;
/** @type {!spine.AnimationStateData} */
spine.AnimationState.prototype.data;
/** @type {!Array<!spine.TrackEntry>} */
spine.AnimationState.prototype.tracks;
/** @type {number} */
spine.AnimationState.prototype.timeScale;
/** @type {number} */
spine.AnimationState.prototype.unkeyedState;
/** @type {!Array<!spine.Event>} */
spine.AnimationState.prototype.events;
/** @type {!Array<!spine.AnimationStateListener>} */
spine.AnimationState.prototype.listeners;
/** @type {!spine.EventQueue} */
spine.AnimationState.prototype.queue;
/** @type {!spine.IntSet} */
spine.AnimationState.prototype.propertyIDs;
/** @type {boolean} */
spine.AnimationState.prototype.animationsChanged;
/** @type {!spine.Pool<!spine.TrackEntry>} */
spine.AnimationState.prototype.trackEntryPool;

/**
 * @param {number} delta
 * @return {void}
 */
spine.AnimationState.prototype.update = function(delta) {};

/**
 * @param {!spine.TrackEntry} to
 * @param {number} delta
 * @return {boolean}
 */
spine.AnimationState.prototype.updateMixingFrom = function(to, delta) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @return {boolean}
 */
spine.AnimationState.prototype.apply = function(skeleton) {};

/**
 * @param {!spine.TrackEntry} to
 * @param {!spine.Skeleton} skeleton
 * @param {!spine.MixBlend} blend
 * @return {number}
 */
spine.AnimationState.prototype.applyMixingFrom = function(to, skeleton, blend) {};

/**
 * @param {!spine.AttachmentTimeline} timeline
 * @param {!spine.Skeleton} skeleton
 * @param {number} time
 * @param {!spine.MixBlend} blend
 * @param {boolean} attachments
 * @return {void}
 */
spine.AnimationState.prototype.applyAttachmentTimeline = function(timeline, skeleton, time, blend, attachments) {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {!spine.Slot} slot
 * @param {string} attachmentName
 * @param {boolean} attachments
 * @return {void}
 */
spine.AnimationState.prototype.setAttachment = function(skeleton, slot, attachmentName, attachments) {};

/**
 * @param {!spine.Timeline} timeline
 * @param {!spine.Skeleton} skeleton
 * @param {number} time
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @param {!Array<number>} timelinesRotation
 * @param {number} i
 * @param {boolean} firstFrame
 * @return {void}
 */
spine.AnimationState.prototype.applyRotateTimeline = function(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {};

/**
 * @param {!spine.TrackEntry} entry
 * @param {number} animationTime
 * @return {void}
 */
spine.AnimationState.prototype.queueEvents = function(entry, animationTime) {};

/**
 * @return {void}
 */
spine.AnimationState.prototype.clearTracks = function() {};

/**
 * @param {number} trackIndex
 * @return {void}
 */
spine.AnimationState.prototype.clearTrack = function(trackIndex) {};

/**
 * @param {number} index
 * @param {!spine.TrackEntry} current
 * @param {boolean} interrupt
 * @return {void}
 */
spine.AnimationState.prototype.setCurrent = function(index, current, interrupt) {};

/**
 * @param {number} trackIndex
 * @param {string} animationName
 * @param {boolean} loop
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.setAnimation = function(trackIndex, animationName, loop) {};

/**
 * @param {number} trackIndex
 * @param {!spine.Animation} animation
 * @param {boolean} loop
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.setAnimationWith = function(trackIndex, animation, loop) {};

/**
 * @param {number} trackIndex
 * @param {string} animationName
 * @param {boolean} loop
 * @param {number} delay
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.addAnimation = function(trackIndex, animationName, loop, delay) {};

/**
 * @param {number} trackIndex
 * @param {!spine.Animation} animation
 * @param {boolean} loop
 * @param {number} delay
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.addAnimationWith = function(trackIndex, animation, loop, delay) {};

/**
 * @param {number} trackIndex
 * @param {number} mixDuration
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.setEmptyAnimation = function(trackIndex, mixDuration) {};

/**
 * @param {number} trackIndex
 * @param {number} mixDuration
 * @param {number} delay
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.addEmptyAnimation = function(trackIndex, mixDuration, delay) {};

/**
 * @param {number} mixDuration
 * @return {void}
 */
spine.AnimationState.prototype.setEmptyAnimations = function(mixDuration) {};

/**
 * @param {number} index
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.expandToIndex = function(index) {};

/**
 * @param {number} trackIndex
 * @param {!spine.Animation} animation
 * @param {boolean} loop
 * @param {!spine.TrackEntry} last
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.trackEntry = function(trackIndex, animation, loop, last) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationState.prototype.disposeNext = function(entry) {};

/**
 * @return {void}
 */
spine.AnimationState.prototype._animationsChanged = function() {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationState.prototype.computeHold = function(entry) {};

/**
 * @param {number} trackIndex
 * @return {!spine.TrackEntry}
 */
spine.AnimationState.prototype.getCurrent = function(trackIndex) {};

/**
 * @param {!spine.AnimationStateListener} listener
 * @return {void}
 */
spine.AnimationState.prototype.addListener = function(listener) {};

/**
 * @param {!spine.AnimationStateListener} listener
 * @return {void}
 */
spine.AnimationState.prototype.removeListener = function(listener) {};

/**
 * @return {void}
 */
spine.AnimationState.prototype.clearListeners = function() {};

/**
 * @return {void}
 */
spine.AnimationState.prototype.clearListenerNotifications = function() {};
/**
 * @constructor
 * @struct
 */
spine.TrackEntry = function() {};
/** @type {!spine.Animation} */
spine.TrackEntry.prototype.animation;
/** @type {!spine.TrackEntry} */
spine.TrackEntry.prototype.next;
/** @type {!spine.TrackEntry} */
spine.TrackEntry.prototype.mixingFrom;
/** @type {!spine.TrackEntry} */
spine.TrackEntry.prototype.mixingTo;
/** @type {!spine.AnimationStateListener} */
spine.TrackEntry.prototype.listener;
/** @type {number} */
spine.TrackEntry.prototype.trackIndex;
/** @type {boolean} */
spine.TrackEntry.prototype.loop;
/** @type {boolean} */
spine.TrackEntry.prototype.holdPrevious;
/** @type {number} */
spine.TrackEntry.prototype.eventThreshold;
/** @type {number} */
spine.TrackEntry.prototype.attachmentThreshold;
/** @type {number} */
spine.TrackEntry.prototype.drawOrderThreshold;
/** @type {number} */
spine.TrackEntry.prototype.animationStart;
/** @type {number} */
spine.TrackEntry.prototype.animationEnd;
/** @type {number} */
spine.TrackEntry.prototype.animationLast;
/** @type {number} */
spine.TrackEntry.prototype.nextAnimationLast;
/** @type {number} */
spine.TrackEntry.prototype.delay;
/** @type {number} */
spine.TrackEntry.prototype.trackTime;
/** @type {number} */
spine.TrackEntry.prototype.trackLast;
/** @type {number} */
spine.TrackEntry.prototype.nextTrackLast;
/** @type {number} */
spine.TrackEntry.prototype.trackEnd;
/** @type {number} */
spine.TrackEntry.prototype.timeScale;
/** @type {number} */
spine.TrackEntry.prototype.alpha;
/** @type {number} */
spine.TrackEntry.prototype.mixTime;
/** @type {number} */
spine.TrackEntry.prototype.mixDuration;
/** @type {number} */
spine.TrackEntry.prototype.interruptAlpha;
/** @type {number} */
spine.TrackEntry.prototype.totalAlpha;
/** @type {!spine.MixBlend} */
spine.TrackEntry.prototype.mixBlend;
/** @type {!Array<number>} */
spine.TrackEntry.prototype.timelineMode;
/** @type {!Array<!spine.TrackEntry>} */
spine.TrackEntry.prototype.timelineHoldMix;
/** @type {!Array<number>} */
spine.TrackEntry.prototype.timelinesRotation;

/**
 * @return {void}
 */
spine.TrackEntry.prototype.reset = function() {};

/**
 * @return {number}
 */
spine.TrackEntry.prototype.getAnimationTime = function() {};

/**
 * @param {number} animationLast
 * @return {void}
 */
spine.TrackEntry.prototype.setAnimationLast = function(animationLast) {};

/**
 * @return {boolean}
 */
spine.TrackEntry.prototype.isComplete = function() {};

/**
 * @return {void}
 */
spine.TrackEntry.prototype.resetRotationDirections = function() {};

/**
 * @constructor
 * @struct
 * @param {!spine.AnimationState} animState
 */
spine.EventQueue = function(animState) {};
/** @type {!Array<?>} */
spine.EventQueue.prototype.objects;
/** @type {boolean} */
spine.EventQueue.prototype.drainDisabled;
/** @type {!spine.AnimationState} */
spine.EventQueue.prototype.animState;

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.EventQueue.prototype.start = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.EventQueue.prototype.interrupt = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.EventQueue.prototype.end = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.EventQueue.prototype.dispose = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.EventQueue.prototype.complete = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @param {!spine.Event} event
 * @return {void}
 */
spine.EventQueue.prototype.event = function(entry, event) {};

/**
 * @return {void}
 */
spine.EventQueue.prototype.drain = function() {};

/**
 * @return {void}
 */
spine.EventQueue.prototype.clear = function() {};

/** @enum {number} */
spine.EventType = {
  start: 1,
  interrupt: 1,
  end: 1,
  dispose: 1,
  complete: 1,
  event: 1,
};
/**
 * @record
 * @struct
 */
spine.AnimationStateListener = function() {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateListener.prototype.start = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateListener.prototype.interrupt = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateListener.prototype.end = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateListener.prototype.dispose = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateListener.prototype.complete = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @param {!spine.Event} event
 * @return {void}
 */
spine.AnimationStateListener.prototype.event = function(entry, event) {};
/**
 * @implements {spine.AnimationStateListener}
 * @constructor
 * @struct
 */
spine.AnimationStateAdapter = function() {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.start = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.interrupt = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.end = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.dispose = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.complete = function(entry) {};

/**
 * @param {!spine.TrackEntry} entry
 * @param {!spine.Event} event
 * @return {void}
 */
spine.AnimationStateAdapter.prototype.event = function(entry, event) {};

/**
 * @constructor
 * @struct
 * @param {!spine.SkeletonData} skeletonData
 */
spine.AnimationStateData = function(skeletonData) {};
/** @type {!spine.SkeletonData} */
spine.AnimationStateData.prototype.skeletonData;
/** @type {!spine.Map<number>} */
spine.AnimationStateData.prototype.animationToMixTime;
/** @type {number} */
spine.AnimationStateData.prototype.defaultMix;

/**
 * @param {string} fromName
 * @param {string} toName
 * @param {number} duration
 * @return {void}
 */
spine.AnimationStateData.prototype.setMix = function(fromName, toName, duration) {};

/**
 * @param {!spine.Animation} from
 * @param {!spine.Animation} to
 * @param {number} duration
 * @return {void}
 */
spine.AnimationStateData.prototype.setMixWith = function(from, to, duration) {};

/**
 * @param {!spine.Animation} from
 * @param {!spine.Animation} to
 * @return {number}
 */
spine.AnimationStateData.prototype.getMix = function(from, to) {};

/**
 * @implements {spine.Disposable}
 * @constructor
 * @struct
 * @param {function(!HTMLImageElement): ?} textureLoader
 * @param {string=} pathPrefix
 */
spine.AssetManager = function(textureLoader, pathPrefix) {};
/** @type {?} */
spine.AssetManager.prototype.pathPrefix;
/** @type {?} */
spine.AssetManager.prototype.textureLoader;
/** @type {?} */
spine.AssetManager.prototype.assets;
/** @type {?} */
spine.AssetManager.prototype.errors;
/** @type {?} */
spine.AssetManager.prototype.toLoad;
/** @type {?} */
spine.AssetManager.prototype.loaded;
/** @type {?} */
spine.AssetManager.prototype.rawDataUris;
/** @type {?} */
spine.AssetManager.prototype.downloadText;
/** @type {?} */
spine.AssetManager.prototype.downloadBinary;

/**
 * @param {string} path
 * @param {string} data
 * @return {void}
 */
spine.AssetManager.prototype.setRawDataURI = function(path, data) {};

/**
 * @param {string} path
 * @param {function(string, !Uint8Array): void=} success
 * @param {function(string, string): void=} error
 * @return {void}
 */
spine.AssetManager.prototype.loadBinary = function(path, success, error) {};

/**
 * @param {string} path
 * @param {function(string, string): void=} success
 * @param {function(string, string): void=} error
 * @return {void}
 */
spine.AssetManager.prototype.loadText = function(path, success, error) {};

/**
 * @param {string} path
 * @param {function(string, !HTMLImageElement): void=} success
 * @param {function(string, string): void=} error
 * @return {void}
 */
spine.AssetManager.prototype.loadTexture = function(path, success, error) {};

/**
 * @param {string} path
 * @param {function(string, !spine.TextureAtlas): void=} success
 * @param {function(string, string): void=} error
 * @return {void}
 */
spine.AssetManager.prototype.loadTextureAtlas = function(path, success, error) {};

/**
 * @param {string} path
 * @return {?}
 */
spine.AssetManager.prototype.get = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
spine.AssetManager.prototype.remove = function(path) {};

/**
 * @return {void}
 */
spine.AssetManager.prototype.removeAll = function() {};

/**
 * @return {boolean}
 */
spine.AssetManager.prototype.isLoadingComplete = function() {};

/**
 * @return {number}
 */
spine.AssetManager.prototype.getToLoad = function() {};

/**
 * @return {number}
 */
spine.AssetManager.prototype.getLoaded = function() {};

/**
 * @return {void}
 */
spine.AssetManager.prototype.dispose = function() {};

/**
 * @return {boolean}
 */
spine.AssetManager.prototype.hasErrors = function() {};

/**
 * @return {!spine.Map<string>}
 */
spine.AssetManager.prototype.getErrors = function() {};

/**
 * @implements {spine.AttachmentLoader}
 * @constructor
 * @struct
 * @param {!spine.TextureAtlas} atlas
 */
spine.AtlasAttachmentLoader = function(atlas) {};
/** @type {!spine.TextureAtlas} */
spine.AtlasAttachmentLoader.prototype.atlas;

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @param {string} path
 * @return {!spine.RegionAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @param {string} path
 * @return {!spine.MeshAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newMeshAttachment = function(skin, name, path) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.BoundingBoxAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newBoundingBoxAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.PathAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newPathAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.PointAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newPointAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.ClippingAttachment}
 */
spine.AtlasAttachmentLoader.prototype.newClippingAttachment = function(skin, name) {};

/** @enum {number} */
spine.BlendMode = {
  Normal: 1,
  Additive: 1,
  Multiply: 1,
  Screen: 1,
};

/**
 * @implements {spine.Updatable}
 * @constructor
 * @struct
 * @param {!spine.BoneData} data
 * @param {!spine.Skeleton} skeleton
 * @param {!spine.Bone} parent
 */
spine.Bone = function(data, skeleton, parent) {};
/** @type {!spine.BoneData} */
spine.Bone.prototype.data;
/** @type {!spine.Skeleton} */
spine.Bone.prototype.skeleton;
/** @type {!spine.Bone} */
spine.Bone.prototype.parent;
/** @type {!Array<!spine.Bone>} */
spine.Bone.prototype.children;
/** @type {number} */
spine.Bone.prototype.x;
/** @type {number} */
spine.Bone.prototype.y;
/** @type {number} */
spine.Bone.prototype.rotation;
/** @type {number} */
spine.Bone.prototype.scaleX;
/** @type {number} */
spine.Bone.prototype.scaleY;
/** @type {number} */
spine.Bone.prototype.shearX;
/** @type {number} */
spine.Bone.prototype.shearY;
/** @type {number} */
spine.Bone.prototype.ax;
/** @type {number} */
spine.Bone.prototype.ay;
/** @type {number} */
spine.Bone.prototype.arotation;
/** @type {number} */
spine.Bone.prototype.ascaleX;
/** @type {number} */
spine.Bone.prototype.ascaleY;
/** @type {number} */
spine.Bone.prototype.ashearX;
/** @type {number} */
spine.Bone.prototype.ashearY;
/** @type {boolean} */
spine.Bone.prototype.appliedValid;
/** @type {number} */
spine.Bone.prototype.a;
/** @type {number} */
spine.Bone.prototype.b;
/** @type {number} */
spine.Bone.prototype.c;
/** @type {number} */
spine.Bone.prototype.d;
/** @type {number} */
spine.Bone.prototype.worldY;
/** @type {number} */
spine.Bone.prototype.worldX;
/** @type {boolean} */
spine.Bone.prototype.sorted;
/** @type {boolean} */
spine.Bone.prototype.active;

/**
 * @return {boolean}
 */
spine.Bone.prototype.isActive = function() {};

/**
 * @return {void}
 */
spine.Bone.prototype.update = function() {};

/**
 * @return {void}
 */
spine.Bone.prototype.updateWorldTransform = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} rotation
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number} shearX
 * @param {number} shearY
 * @return {void}
 */
spine.Bone.prototype.updateWorldTransformWith = function(x, y, rotation, scaleX, scaleY, shearX, shearY) {};

/**
 * @return {void}
 */
spine.Bone.prototype.setToSetupPose = function() {};

/**
 * @return {number}
 */
spine.Bone.prototype.getWorldRotationX = function() {};

/**
 * @return {number}
 */
spine.Bone.prototype.getWorldRotationY = function() {};

/**
 * @return {number}
 */
spine.Bone.prototype.getWorldScaleX = function() {};

/**
 * @return {number}
 */
spine.Bone.prototype.getWorldScaleY = function() {};

/**
 * @return {void}
 */
spine.Bone.prototype.updateAppliedTransform = function() {};

/**
 * @param {!spine.Vector2} world
 * @return {!spine.Vector2}
 */
spine.Bone.prototype.worldToLocal = function(world) {};

/**
 * @param {!spine.Vector2} local
 * @return {!spine.Vector2}
 */
spine.Bone.prototype.localToWorld = function(local) {};

/**
 * @param {number} worldRotation
 * @return {number}
 */
spine.Bone.prototype.worldToLocalRotation = function(worldRotation) {};

/**
 * @param {number} localRotation
 * @return {number}
 */
spine.Bone.prototype.localToWorldRotation = function(localRotation) {};

/**
 * @param {number} degrees
 * @return {void}
 */
spine.Bone.prototype.rotateWorld = function(degrees) {};

/**
 * @constructor
 * @struct
 * @param {number} index
 * @param {string} name
 * @param {!spine.BoneData} parent
 */
spine.BoneData = function(index, name, parent) {};
/** @type {number} */
spine.BoneData.prototype.index;
/** @type {string} */
spine.BoneData.prototype.name;
/** @type {!spine.BoneData} */
spine.BoneData.prototype.parent;
/** @type {number} */
spine.BoneData.prototype.length;
/** @type {number} */
spine.BoneData.prototype.x;
/** @type {number} */
spine.BoneData.prototype.y;
/** @type {number} */
spine.BoneData.prototype.rotation;
/** @type {number} */
spine.BoneData.prototype.scaleX;
/** @type {number} */
spine.BoneData.prototype.scaleY;
/** @type {number} */
spine.BoneData.prototype.shearX;
/** @type {number} */
spine.BoneData.prototype.shearY;
/** @type {!spine.TransformMode} */
spine.BoneData.prototype.transformMode;
/** @type {boolean} */
spine.BoneData.prototype.skinRequired;
/** @type {!spine.Color} */
spine.BoneData.prototype.color;

/** @enum {number} */
spine.TransformMode = {
  Normal: 1,
  OnlyTranslation: 1,
  NoRotationOrReflection: 1,
  NoScale: 1,
  NoScaleOrReflection: 1,
};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {number} order
 * @param {boolean} skinRequired
 */
spine.ConstraintData = function(name, order, skinRequired) {};
/** @type {string} */
spine.ConstraintData.prototype.name;
/** @type {number} */
spine.ConstraintData.prototype.order;
/** @type {boolean} */
spine.ConstraintData.prototype.skinRequired;

/**
 * @constructor
 * @struct
 * @param {number} time
 * @param {!spine.EventData} data
 */
spine.Event = function(time, data) {};
/** @type {!spine.EventData} */
spine.Event.prototype.data;
/** @type {number} */
spine.Event.prototype.intValue;
/** @type {number} */
spine.Event.prototype.floatValue;
/** @type {string} */
spine.Event.prototype.stringValue;
/** @type {number} */
spine.Event.prototype.time;
/** @type {number} */
spine.Event.prototype.volume;
/** @type {number} */
spine.Event.prototype.balance;

/**
 * @constructor
 * @struct
 * @param {string} name
 */
spine.EventData = function(name) {};
/** @type {string} */
spine.EventData.prototype.name;
/** @type {number} */
spine.EventData.prototype.intValue;
/** @type {number} */
spine.EventData.prototype.floatValue;
/** @type {string} */
spine.EventData.prototype.stringValue;
/** @type {string} */
spine.EventData.prototype.audioPath;
/** @type {number} */
spine.EventData.prototype.volume;
/** @type {number} */
spine.EventData.prototype.balance;

/**
 * @implements {spine.Updatable}
 * @constructor
 * @struct
 * @param {!spine.IkConstraintData} data
 * @param {!spine.Skeleton} skeleton
 */
spine.IkConstraint = function(data, skeleton) {};
/** @type {!spine.IkConstraintData} */
spine.IkConstraint.prototype.data;
/** @type {!Array<!spine.Bone>} */
spine.IkConstraint.prototype.bones;
/** @type {!spine.Bone} */
spine.IkConstraint.prototype.target;
/** @type {number} */
spine.IkConstraint.prototype.bendDirection;
/** @type {boolean} */
spine.IkConstraint.prototype.compress;
/** @type {boolean} */
spine.IkConstraint.prototype.stretch;
/** @type {number} */
spine.IkConstraint.prototype.mix;
/** @type {number} */
spine.IkConstraint.prototype.softness;
/** @type {boolean} */
spine.IkConstraint.prototype.active;

/**
 * @return {boolean}
 */
spine.IkConstraint.prototype.isActive = function() {};

/**
 * @return {void}
 */
spine.IkConstraint.prototype.apply = function() {};

/**
 * @return {void}
 */
spine.IkConstraint.prototype.update = function() {};

/**
 * @param {!spine.Bone} bone
 * @param {number} targetX
 * @param {number} targetY
 * @param {boolean} compress
 * @param {boolean} stretch
 * @param {boolean} uniform
 * @param {number} alpha
 * @return {void}
 */
spine.IkConstraint.prototype.apply1 = function(bone, targetX, targetY, compress, stretch, uniform, alpha) {};

/**
 * @param {!spine.Bone} parent
 * @param {!spine.Bone} child
 * @param {number} targetX
 * @param {number} targetY
 * @param {number} bendDir
 * @param {boolean} stretch
 * @param {number} softness
 * @param {number} alpha
 * @return {void}
 */
spine.IkConstraint.prototype.apply2 = function(parent, child, targetX, targetY, bendDir, stretch, softness, alpha) {};

/**
 * @extends {spine.ConstraintData}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.IkConstraintData = function(name) {};
/** @type {!Array<!spine.BoneData>} */
spine.IkConstraintData.prototype.bones;
/** @type {!spine.BoneData} */
spine.IkConstraintData.prototype.target;
/** @type {number} */
spine.IkConstraintData.prototype.bendDirection;
/** @type {boolean} */
spine.IkConstraintData.prototype.compress;
/** @type {boolean} */
spine.IkConstraintData.prototype.stretch;
/** @type {boolean} */
spine.IkConstraintData.prototype.uniform;
/** @type {number} */
spine.IkConstraintData.prototype.mix;
/** @type {number} */
spine.IkConstraintData.prototype.softness;

/**
 * @implements {spine.Updatable}
 * @constructor
 * @struct
 * @param {!spine.PathConstraintData} data
 * @param {!spine.Skeleton} skeleton
 */
spine.PathConstraint = function(data, skeleton) {};
/** @type {number} */
spine.PathConstraint.NONE;
/** @type {number} */
spine.PathConstraint.BEFORE;
/** @type {number} */
spine.PathConstraint.AFTER;
/** @type {number} */
spine.PathConstraint.epsilon;
/** @type {!spine.PathConstraintData} */
spine.PathConstraint.prototype.data;
/** @type {!Array<!spine.Bone>} */
spine.PathConstraint.prototype.bones;
/** @type {!spine.Slot} */
spine.PathConstraint.prototype.target;
/** @type {number} */
spine.PathConstraint.prototype.position;
/** @type {number} */
spine.PathConstraint.prototype.spacing;
/** @type {number} */
spine.PathConstraint.prototype.rotateMix;
/** @type {number} */
spine.PathConstraint.prototype.translateMix;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.spaces;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.positions;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.world;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.curves;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.lengths;
/** @type {!Array<number>} */
spine.PathConstraint.prototype.segments;
/** @type {boolean} */
spine.PathConstraint.prototype.active;

/**
 * @return {boolean}
 */
spine.PathConstraint.prototype.isActive = function() {};

/**
 * @return {void}
 */
spine.PathConstraint.prototype.apply = function() {};

/**
 * @return {void}
 */
spine.PathConstraint.prototype.update = function() {};

/**
 * @param {!spine.PathAttachment} path
 * @param {number} spacesCount
 * @param {boolean} tangents
 * @param {boolean} percentPosition
 * @param {boolean} percentSpacing
 * @return {!Array<number>}
 */
spine.PathConstraint.prototype.computeWorldPositions = function(path, spacesCount, tangents, percentPosition, percentSpacing) {};

/**
 * @param {number} p
 * @param {!Array<number>} temp
 * @param {number} i
 * @param {!Array<number>} out
 * @param {number} o
 * @return {void}
 */
spine.PathConstraint.prototype.addBeforePosition = function(p, temp, i, out, o) {};

/**
 * @param {number} p
 * @param {!Array<number>} temp
 * @param {number} i
 * @param {!Array<number>} out
 * @param {number} o
 * @return {void}
 */
spine.PathConstraint.prototype.addAfterPosition = function(p, temp, i, out, o) {};

/**
 * @param {number} p
 * @param {number} x1
 * @param {number} y1
 * @param {number} cx1
 * @param {number} cy1
 * @param {number} cx2
 * @param {number} cy2
 * @param {number} x2
 * @param {number} y2
 * @param {!Array<number>} out
 * @param {number} o
 * @param {boolean} tangents
 * @return {void}
 */
spine.PathConstraint.prototype.addCurvePosition = function(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {};

/**
 * @extends {spine.ConstraintData}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.PathConstraintData = function(name) {};
/** @type {!Array<!spine.BoneData>} */
spine.PathConstraintData.prototype.bones;
/** @type {!spine.SlotData} */
spine.PathConstraintData.prototype.target;
/** @type {!spine.PositionMode} */
spine.PathConstraintData.prototype.positionMode;
/** @type {!spine.SpacingMode} */
spine.PathConstraintData.prototype.spacingMode;
/** @type {!spine.RotateMode} */
spine.PathConstraintData.prototype.rotateMode;
/** @type {number} */
spine.PathConstraintData.prototype.offsetRotation;
/** @type {number} */
spine.PathConstraintData.prototype.position;
/** @type {number} */
spine.PathConstraintData.prototype.spacing;
/** @type {number} */
spine.PathConstraintData.prototype.rotateMix;
/** @type {number} */
spine.PathConstraintData.prototype.translateMix;

/** @enum {number} */
spine.PositionMode = {
  Fixed: 1,
  Percent: 1,
};

/** @enum {number} */
spine.SpacingMode = {
  Length: 1,
  Fixed: 1,
  Percent: 1,
};

/** @enum {number} */
spine.RotateMode = {
  Tangent: 1,
  Chain: 1,
  ChainScale: 1,
};

/**
 * @implements {spine.Disposable}
 * @constructor
 * @struct
 * @param {string=} pathPrefix
 */
spine.SharedAssetManager = function(pathPrefix) {};
/** @type {?} */
spine.SharedAssetManager.prototype.pathPrefix;
/** @type {?} */
spine.SharedAssetManager.prototype.clientAssets;
/** @type {?} */
spine.SharedAssetManager.prototype.queuedAssets;
/** @type {?} */
spine.SharedAssetManager.prototype.rawAssets;
/** @type {?} */
spine.SharedAssetManager.prototype.errors;
/** @type {?} */
spine.SharedAssetManager.prototype.queueAsset;
/** @type {?} */
spine.SharedAssetManager.prototype.updateClientAssets;

/**
 * @param {string} clientId
 * @param {string} path
 * @return {void}
 */
spine.SharedAssetManager.prototype.loadText = function(clientId, path) {};

/**
 * @param {string} clientId
 * @param {string} path
 * @return {void}
 */
spine.SharedAssetManager.prototype.loadJson = function(clientId, path) {};

/**
 * @param {string} clientId
 * @param {function((!HTMLImageElement|!ImageBitmap)): ?} textureLoader
 * @param {string} path
 * @return {void}
 */
spine.SharedAssetManager.prototype.loadTexture = function(clientId, textureLoader, path) {};

/**
 * @param {string} clientId
 * @param {string} path
 * @return {?}
 */
spine.SharedAssetManager.prototype.get = function(clientId, path) {};

/**
 * @param {string} clientId
 * @return {boolean}
 */
spine.SharedAssetManager.prototype.isLoadingComplete = function(clientId) {};

/**
 * @return {void}
 */
spine.SharedAssetManager.prototype.dispose = function() {};

/**
 * @return {boolean}
 */
spine.SharedAssetManager.prototype.hasErrors = function() {};

/**
 * @return {!spine.Map<string>}
 */
spine.SharedAssetManager.prototype.getErrors = function() {};

/**
 * @constructor
 * @struct
 * @param {!spine.SkeletonData} data
 */
spine.Skeleton = function(data) {};
/** @type {!spine.SkeletonData} */
spine.Skeleton.prototype.data;
/** @type {!Array<!spine.Bone>} */
spine.Skeleton.prototype.bones;
/** @type {!Array<!spine.Slot>} */
spine.Skeleton.prototype.slots;
/** @type {!Array<!spine.Slot>} */
spine.Skeleton.prototype.drawOrder;
/** @type {!Array<!spine.IkConstraint>} */
spine.Skeleton.prototype.ikConstraints;
/** @type {!Array<!spine.TransformConstraint>} */
spine.Skeleton.prototype.transformConstraints;
/** @type {!Array<!spine.PathConstraint>} */
spine.Skeleton.prototype.pathConstraints;
/** @type {!Array<!spine.Updatable>} */
spine.Skeleton.prototype._updateCache;
/** @type {!Array<!spine.Updatable>} */
spine.Skeleton.prototype.updateCacheReset;
/** @type {!spine.Skin} */
spine.Skeleton.prototype.skin;
/** @type {!spine.Color} */
spine.Skeleton.prototype.color;
/** @type {number} */
spine.Skeleton.prototype.time;
/** @type {number} */
spine.Skeleton.prototype.scaleX;
/** @type {number} */
spine.Skeleton.prototype.scaleY;
/** @type {number} */
spine.Skeleton.prototype.x;
/** @type {number} */
spine.Skeleton.prototype.y;

/**
 * @return {void}
 */
spine.Skeleton.prototype.updateCache = function() {};

/**
 * @param {!spine.IkConstraint} constraint
 * @return {void}
 */
spine.Skeleton.prototype.sortIkConstraint = function(constraint) {};

/**
 * @param {!spine.PathConstraint} constraint
 * @return {void}
 */
spine.Skeleton.prototype.sortPathConstraint = function(constraint) {};

/**
 * @param {!spine.TransformConstraint} constraint
 * @return {void}
 */
spine.Skeleton.prototype.sortTransformConstraint = function(constraint) {};

/**
 * @param {!spine.Skin} skin
 * @param {number} slotIndex
 * @param {!spine.Bone} slotBone
 * @return {void}
 */
spine.Skeleton.prototype.sortPathConstraintAttachment = function(skin, slotIndex, slotBone) {};

/**
 * @param {!spine.Attachment} attachment
 * @param {!spine.Bone} slotBone
 * @return {void}
 */
spine.Skeleton.prototype.sortPathConstraintAttachmentWith = function(attachment, slotBone) {};

/**
 * @param {!spine.Bone} bone
 * @return {void}
 */
spine.Skeleton.prototype.sortBone = function(bone) {};

/**
 * @param {!Array<!spine.Bone>} bones
 * @return {void}
 */
spine.Skeleton.prototype.sortReset = function(bones) {};

/**
 * @return {void}
 */
spine.Skeleton.prototype.updateWorldTransform = function() {};

/**
 * @return {void}
 */
spine.Skeleton.prototype.setToSetupPose = function() {};

/**
 * @return {void}
 */
spine.Skeleton.prototype.setBonesToSetupPose = function() {};

/**
 * @return {void}
 */
spine.Skeleton.prototype.setSlotsToSetupPose = function() {};

/**
 * @return {!spine.Bone}
 */
spine.Skeleton.prototype.getRootBone = function() {};

/**
 * @param {string} boneName
 * @return {!spine.Bone}
 */
spine.Skeleton.prototype.findBone = function(boneName) {};

/**
 * @param {string} boneName
 * @return {number}
 */
spine.Skeleton.prototype.findBoneIndex = function(boneName) {};

/**
 * @param {string} slotName
 * @return {!spine.Slot}
 */
spine.Skeleton.prototype.findSlot = function(slotName) {};

/**
 * @param {string} slotName
 * @return {number}
 */
spine.Skeleton.prototype.findSlotIndex = function(slotName) {};

/**
 * @param {string} skinName
 * @return {void}
 */
spine.Skeleton.prototype.setSkinByName = function(skinName) {};

/**
 * @param {!spine.Skin} newSkin
 * @return {void}
 */
spine.Skeleton.prototype.setSkin = function(newSkin) {};

/**
 * @param {string} slotName
 * @param {string} attachmentName
 * @return {!spine.Attachment}
 */
spine.Skeleton.prototype.getAttachmentByName = function(slotName, attachmentName) {};

/**
 * @param {number} slotIndex
 * @param {string} attachmentName
 * @return {!spine.Attachment}
 */
spine.Skeleton.prototype.getAttachment = function(slotIndex, attachmentName) {};

/**
 * @param {string} slotName
 * @param {string} attachmentName
 * @return {void}
 */
spine.Skeleton.prototype.setAttachment = function(slotName, attachmentName) {};

/**
 * @param {string} constraintName
 * @return {!spine.IkConstraint}
 */
spine.Skeleton.prototype.findIkConstraint = function(constraintName) {};

/**
 * @param {string} constraintName
 * @return {!spine.TransformConstraint}
 */
spine.Skeleton.prototype.findTransformConstraint = function(constraintName) {};

/**
 * @param {string} constraintName
 * @return {!spine.PathConstraint}
 */
spine.Skeleton.prototype.findPathConstraint = function(constraintName) {};

/**
 * @param {!spine.Vector2} offset
 * @param {!spine.Vector2} size
 * @param {!Array<number>=} temp
 * @return {void}
 */
spine.Skeleton.prototype.getBounds = function(offset, size, temp) {};

/**
 * @param {number} delta
 * @return {void}
 */
spine.Skeleton.prototype.update = function(delta) {};

/**
 * @constructor
 * @struct
 * @param {!spine.AttachmentLoader} attachmentLoader
 */
spine.SkeletonBinary = function(attachmentLoader) {};
/** @type {!Array<number>} */
spine.SkeletonBinary.AttachmentTypeValues;
/** @type {!Array<!spine.TransformMode>} */
spine.SkeletonBinary.TransformModeValues;
/** @type {!Array<!spine.PositionMode>} */
spine.SkeletonBinary.PositionModeValues;
/** @type {!Array<!spine.SpacingMode>} */
spine.SkeletonBinary.SpacingModeValues;
/** @type {!Array<!spine.RotateMode>} */
spine.SkeletonBinary.RotateModeValues;
/** @type {!Array<!spine.BlendMode>} */
spine.SkeletonBinary.BlendModeValues;
/** @type {number} */
spine.SkeletonBinary.BONE_ROTATE;
/** @type {number} */
spine.SkeletonBinary.BONE_TRANSLATE;
/** @type {number} */
spine.SkeletonBinary.BONE_SCALE;
/** @type {number} */
spine.SkeletonBinary.BONE_SHEAR;
/** @type {number} */
spine.SkeletonBinary.SLOT_ATTACHMENT;
/** @type {number} */
spine.SkeletonBinary.SLOT_COLOR;
/** @type {number} */
spine.SkeletonBinary.SLOT_TWO_COLOR;
/** @type {number} */
spine.SkeletonBinary.PATH_POSITION;
/** @type {number} */
spine.SkeletonBinary.PATH_SPACING;
/** @type {number} */
spine.SkeletonBinary.PATH_MIX;
/** @type {number} */
spine.SkeletonBinary.CURVE_LINEAR;
/** @type {number} */
spine.SkeletonBinary.CURVE_STEPPED;
/** @type {number} */
spine.SkeletonBinary.CURVE_BEZIER;
/** @type {number} */
spine.SkeletonBinary.prototype.scale;
/** @type {!spine.AttachmentLoader} */
spine.SkeletonBinary.prototype.attachmentLoader;
/** @type {?} */
spine.SkeletonBinary.prototype.linkedMeshes;
/** @type {?} */
spine.SkeletonBinary.prototype.readSkin;
/** @type {?} */
spine.SkeletonBinary.prototype.readAttachment;
/** @type {?} */
spine.SkeletonBinary.prototype.readVertices;
/** @type {?} */
spine.SkeletonBinary.prototype.readFloatArray;
/** @type {?} */
spine.SkeletonBinary.prototype.readShortArray;
/** @type {?} */
spine.SkeletonBinary.prototype.readAnimation;
/** @type {?} */
spine.SkeletonBinary.prototype.readCurve;

/**
 * @param {!Uint8Array} binary
 * @return {!spine.SkeletonData}
 */
spine.SkeletonBinary.prototype.readSkeletonData = function(binary) {};

/**
 * @param {!spine.CurveTimeline} timeline
 * @param {number} frameIndex
 * @param {number} cx1
 * @param {number} cy1
 * @param {number} cx2
 * @param {number} cy2
 * @return {void}
 */
spine.SkeletonBinary.prototype.setCurve = function(timeline, frameIndex, cx1, cy1, cx2, cy2) {};
/**
 * @constructor
 * @struct
 */
spine.SkeletonBounds = function() {};
/** @type {number} */
spine.SkeletonBounds.prototype.minX;
/** @type {number} */
spine.SkeletonBounds.prototype.minY;
/** @type {number} */
spine.SkeletonBounds.prototype.maxX;
/** @type {number} */
spine.SkeletonBounds.prototype.maxY;
/** @type {!Array<!spine.BoundingBoxAttachment>} */
spine.SkeletonBounds.prototype.boundingBoxes;
/** @type {!Array<!spine.ArrayLike<number>>} */
spine.SkeletonBounds.prototype.polygons;
/** @type {?} */
spine.SkeletonBounds.prototype.polygonPool;

/**
 * @param {!spine.Skeleton} skeleton
 * @param {boolean} updateAabb
 * @return {void}
 */
spine.SkeletonBounds.prototype.update = function(skeleton, updateAabb) {};

/**
 * @return {void}
 */
spine.SkeletonBounds.prototype.aabbCompute = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
spine.SkeletonBounds.prototype.aabbContainsPoint = function(x, y) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {boolean}
 */
spine.SkeletonBounds.prototype.aabbIntersectsSegment = function(x1, y1, x2, y2) {};

/**
 * @param {!spine.SkeletonBounds} bounds
 * @return {boolean}
 */
spine.SkeletonBounds.prototype.aabbIntersectsSkeleton = function(bounds) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!spine.BoundingBoxAttachment}
 */
spine.SkeletonBounds.prototype.containsPoint = function(x, y) {};

/**
 * @param {!spine.ArrayLike<number>} polygon
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
spine.SkeletonBounds.prototype.containsPointPolygon = function(polygon, x, y) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {!spine.BoundingBoxAttachment}
 */
spine.SkeletonBounds.prototype.intersectsSegment = function(x1, y1, x2, y2) {};

/**
 * @param {!spine.ArrayLike<number>} polygon
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {boolean}
 */
spine.SkeletonBounds.prototype.intersectsSegmentPolygon = function(polygon, x1, y1, x2, y2) {};

/**
 * @param {!spine.BoundingBoxAttachment} boundingBox
 * @return {!spine.ArrayLike<number>}
 */
spine.SkeletonBounds.prototype.getPolygon = function(boundingBox) {};

/**
 * @return {number}
 */
spine.SkeletonBounds.prototype.getWidth = function() {};

/**
 * @return {number}
 */
spine.SkeletonBounds.prototype.getHeight = function() {};
/**
 * @constructor
 * @struct
 */
spine.SkeletonClipping = function() {};
/** @type {?} */
spine.SkeletonClipping.prototype.triangulator;
/** @type {?} */
spine.SkeletonClipping.prototype.clippingPolygon;
/** @type {?} */
spine.SkeletonClipping.prototype.clipOutput;
/** @type {!Array<number>} */
spine.SkeletonClipping.prototype.clippedVertices;
/** @type {!Array<number>} */
spine.SkeletonClipping.prototype.clippedTriangles;
/** @type {?} */
spine.SkeletonClipping.prototype.scratch;
/** @type {?} */
spine.SkeletonClipping.prototype.clipAttachment;
/** @type {?} */
spine.SkeletonClipping.prototype.clippingPolygons;

/**
 * @param {!spine.Slot} slot
 * @param {!spine.ClippingAttachment} clip
 * @return {number}
 */
spine.SkeletonClipping.prototype.clipStart = function(slot, clip) {};

/**
 * @param {!spine.Slot} slot
 * @return {void}
 */
spine.SkeletonClipping.prototype.clipEndWithSlot = function(slot) {};

/**
 * @return {void}
 */
spine.SkeletonClipping.prototype.clipEnd = function() {};

/**
 * @return {boolean}
 */
spine.SkeletonClipping.prototype.isClipping = function() {};

/**
 * @param {!spine.ArrayLike<number>} vertices
 * @param {number} verticesLength
 * @param {!spine.ArrayLike<number>} triangles
 * @param {number} trianglesLength
 * @param {!spine.ArrayLike<number>} uvs
 * @param {!spine.Color} light
 * @param {!spine.Color} dark
 * @param {boolean} twoColor
 * @return {void}
 */
spine.SkeletonClipping.prototype.clipTriangles = function(vertices, verticesLength, triangles, trianglesLength, uvs, light, dark, twoColor) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} x3
 * @param {number} y3
 * @param {!Array<number>} clippingArea
 * @param {!Array<number>} output
 * @return {boolean}
 */
spine.SkeletonClipping.prototype.clip = function(x1, y1, x2, y2, x3, y3, clippingArea, output) {};

/**
 * @param {!spine.ArrayLike<number>} polygon
 * @return {void}
 */
spine.SkeletonClipping.makeClockwise = function(polygon) {};
/**
 * @constructor
 * @struct
 */
spine.SkeletonData = function() {};
/** @type {string} */
spine.SkeletonData.prototype.name;
/** @type {!Array<!spine.BoneData>} */
spine.SkeletonData.prototype.bones;
/** @type {!Array<!spine.SlotData>} */
spine.SkeletonData.prototype.slots;
/** @type {!Array<!spine.Skin>} */
spine.SkeletonData.prototype.skins;
/** @type {!spine.Skin} */
spine.SkeletonData.prototype.defaultSkin;
/** @type {!Array<!spine.EventData>} */
spine.SkeletonData.prototype.events;
/** @type {!Array<!spine.Animation>} */
spine.SkeletonData.prototype.animations;
/** @type {!Array<!spine.IkConstraintData>} */
spine.SkeletonData.prototype.ikConstraints;
/** @type {!Array<!spine.TransformConstraintData>} */
spine.SkeletonData.prototype.transformConstraints;
/** @type {!Array<!spine.PathConstraintData>} */
spine.SkeletonData.prototype.pathConstraints;
/** @type {number} */
spine.SkeletonData.prototype.x;
/** @type {number} */
spine.SkeletonData.prototype.y;
/** @type {number} */
spine.SkeletonData.prototype.width;
/** @type {number} */
spine.SkeletonData.prototype.height;
/** @type {string} */
spine.SkeletonData.prototype.version;
/** @type {string} */
spine.SkeletonData.prototype.hash;
/** @type {number} */
spine.SkeletonData.prototype.fps;
/** @type {string} */
spine.SkeletonData.prototype.imagesPath;
/** @type {string} */
spine.SkeletonData.prototype.audioPath;

/**
 * @param {string} boneName
 * @return {!spine.BoneData}
 */
spine.SkeletonData.prototype.findBone = function(boneName) {};

/**
 * @param {string} boneName
 * @return {number}
 */
spine.SkeletonData.prototype.findBoneIndex = function(boneName) {};

/**
 * @param {string} slotName
 * @return {!spine.SlotData}
 */
spine.SkeletonData.prototype.findSlot = function(slotName) {};

/**
 * @param {string} slotName
 * @return {number}
 */
spine.SkeletonData.prototype.findSlotIndex = function(slotName) {};

/**
 * @param {string} skinName
 * @return {!spine.Skin}
 */
spine.SkeletonData.prototype.findSkin = function(skinName) {};

/**
 * @param {string} eventDataName
 * @return {!spine.EventData}
 */
spine.SkeletonData.prototype.findEvent = function(eventDataName) {};

/**
 * @param {string} animationName
 * @return {!spine.Animation}
 */
spine.SkeletonData.prototype.findAnimation = function(animationName) {};

/**
 * @param {string} constraintName
 * @return {!spine.IkConstraintData}
 */
spine.SkeletonData.prototype.findIkConstraint = function(constraintName) {};

/**
 * @param {string} constraintName
 * @return {!spine.TransformConstraintData}
 */
spine.SkeletonData.prototype.findTransformConstraint = function(constraintName) {};

/**
 * @param {string} constraintName
 * @return {!spine.PathConstraintData}
 */
spine.SkeletonData.prototype.findPathConstraint = function(constraintName) {};

/**
 * @param {string} pathConstraintName
 * @return {number}
 */
spine.SkeletonData.prototype.findPathConstraintIndex = function(pathConstraintName) {};

/**
 * @constructor
 * @struct
 * @param {!spine.AttachmentLoader} attachmentLoader
 */
spine.SkeletonJson = function(attachmentLoader) {};
/** @type {!spine.AttachmentLoader} */
spine.SkeletonJson.prototype.attachmentLoader;
/** @type {number} */
spine.SkeletonJson.prototype.scale;
/** @type {?} */
spine.SkeletonJson.prototype.linkedMeshes;

/**
 * @param {?} json
 * @return {!spine.SkeletonData}
 */
spine.SkeletonJson.prototype.readSkeletonData = function(json) {};

/**
 * @param {?} map
 * @param {!spine.Skin} skin
 * @param {number} slotIndex
 * @param {string} name
 * @param {!spine.SkeletonData} skeletonData
 * @return {!spine.Attachment}
 */
spine.SkeletonJson.prototype.readAttachment = function(map, skin, slotIndex, name, skeletonData) {};

/**
 * @param {?} map
 * @param {!spine.VertexAttachment} attachment
 * @param {number} verticesLength
 * @return {void}
 */
spine.SkeletonJson.prototype.readVertices = function(map, attachment, verticesLength) {};

/**
 * @param {?} map
 * @param {string} name
 * @param {!spine.SkeletonData} skeletonData
 * @return {void}
 */
spine.SkeletonJson.prototype.readAnimation = function(map, name, skeletonData) {};

/**
 * @param {?} map
 * @param {!spine.CurveTimeline} timeline
 * @param {number} frameIndex
 * @return {void}
 */
spine.SkeletonJson.prototype.readCurve = function(map, timeline, frameIndex) {};

/**
 * @param {?} map
 * @param {string} prop
 * @param {?} defaultValue
 * @return {?}
 */
spine.SkeletonJson.prototype.getValue = function(map, prop, defaultValue) {};

/**
 * @param {string} str
 * @return {!spine.BlendMode}
 */
spine.SkeletonJson.blendModeFromString = function(str) {};

/**
 * @param {string} str
 * @return {!spine.PositionMode}
 */
spine.SkeletonJson.positionModeFromString = function(str) {};

/**
 * @param {string} str
 * @return {!spine.SpacingMode}
 */
spine.SkeletonJson.spacingModeFromString = function(str) {};

/**
 * @param {string} str
 * @return {!spine.RotateMode}
 */
spine.SkeletonJson.rotateModeFromString = function(str) {};

/**
 * @param {string} str
 * @return {!spine.TransformMode}
 */
spine.SkeletonJson.transformModeFromString = function(str) {};

/**
 * @constructor
 * @struct
 * @param {number} slotIndex
 * @param {string} name
 * @param {!spine.Attachment} attachment
 */
spine.SkinEntry = function(slotIndex, name, attachment) {};
/** @type {number} */
spine.SkinEntry.prototype.slotIndex;
/** @type {string} */
spine.SkinEntry.prototype.name;
/** @type {!spine.Attachment} */
spine.SkinEntry.prototype.attachment;

/**
 * @constructor
 * @struct
 * @param {string} name
 */
spine.Skin = function(name) {};
/** @type {string} */
spine.Skin.prototype.name;
/** @type {!Array<!spine.Map<!spine.Attachment>>} */
spine.Skin.prototype.attachments;
/** @type {!Array<!spine.BoneData>} */
spine.Skin.prototype.bones;
/** @type {!Array<!spine.ConstraintData>} */
spine.Skin.prototype.constraints;

/**
 * @param {number} slotIndex
 * @param {string} name
 * @param {!spine.Attachment} attachment
 * @return {void}
 */
spine.Skin.prototype.setAttachment = function(slotIndex, name, attachment) {};

/**
 * @param {!spine.Skin} skin
 * @return {void}
 */
spine.Skin.prototype.addSkin = function(skin) {};

/**
 * @param {!spine.Skin} skin
 * @return {void}
 */
spine.Skin.prototype.copySkin = function(skin) {};

/**
 * @param {number} slotIndex
 * @param {string} name
 * @return {!spine.Attachment}
 */
spine.Skin.prototype.getAttachment = function(slotIndex, name) {};

/**
 * @param {number} slotIndex
 * @param {string} name
 * @return {void}
 */
spine.Skin.prototype.removeAttachment = function(slotIndex, name) {};

/**
 * @return {!Array<!spine.SkinEntry>}
 */
spine.Skin.prototype.getAttachments = function() {};

/**
 * @param {number} slotIndex
 * @param {!Array<!spine.SkinEntry>} attachments
 * @return {void}
 */
spine.Skin.prototype.getAttachmentsForSlot = function(slotIndex, attachments) {};

/**
 * @return {void}
 */
spine.Skin.prototype.clear = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @param {!spine.Skin} oldSkin
 * @return {void}
 */
spine.Skin.prototype.attachAll = function(skeleton, oldSkin) {};

/**
 * @constructor
 * @struct
 * @param {!spine.SlotData} data
 * @param {!spine.Bone} bone
 */
spine.Slot = function(data, bone) {};
/** @type {!spine.SlotData} */
spine.Slot.prototype.data;
/** @type {!spine.Bone} */
spine.Slot.prototype.bone;
/** @type {!spine.Color} */
spine.Slot.prototype.color;
/** @type {!spine.Color} */
spine.Slot.prototype.darkColor;
/** @type {!spine.Attachment} */
spine.Slot.prototype.attachment;
/** @type {?} */
spine.Slot.prototype.attachmentTime;
/** @type {number} */
spine.Slot.prototype.attachmentState;
/** @type {!Array<number>} */
spine.Slot.prototype.deform;

/**
 * @return {!spine.Skeleton}
 */
spine.Slot.prototype.getSkeleton = function() {};

/**
 * @return {!spine.Attachment}
 */
spine.Slot.prototype.getAttachment = function() {};

/**
 * @param {!spine.Attachment} attachment
 * @return {void}
 */
spine.Slot.prototype.setAttachment = function(attachment) {};

/**
 * @param {number} time
 * @return {void}
 */
spine.Slot.prototype.setAttachmentTime = function(time) {};

/**
 * @return {number}
 */
spine.Slot.prototype.getAttachmentTime = function() {};

/**
 * @return {void}
 */
spine.Slot.prototype.setToSetupPose = function() {};

/**
 * @constructor
 * @struct
 * @param {number} index
 * @param {string} name
 * @param {!spine.BoneData} boneData
 */
spine.SlotData = function(index, name, boneData) {};
/** @type {number} */
spine.SlotData.prototype.index;
/** @type {string} */
spine.SlotData.prototype.name;
/** @type {!spine.BoneData} */
spine.SlotData.prototype.boneData;
/** @type {!spine.Color} */
spine.SlotData.prototype.color;
/** @type {!spine.Color} */
spine.SlotData.prototype.darkColor;
/** @type {string} */
spine.SlotData.prototype.attachmentName;
/** @type {!spine.BlendMode} */
spine.SlotData.prototype.blendMode;

/**
 * @constructor
 * @struct
 * @param {(!HTMLImageElement|!ImageBitmap)} image
 */
spine.Texture = function(image) {};
/** @type {(!HTMLImageElement|!ImageBitmap)} */
spine.Texture.prototype._image;

/**
 * @return {(!HTMLImageElement|!ImageBitmap)}
 */
spine.Texture.prototype.getImage = function() {};

/**
 * @abstract
 * @param {!spine.TextureFilter} minFilter
 * @param {!spine.TextureFilter} magFilter
 * @return {void}
 */
spine.Texture.prototype.setFilters = function(minFilter, magFilter) {};

/**
 * @abstract
 * @param {!spine.TextureWrap} uWrap
 * @param {!spine.TextureWrap} vWrap
 * @return {void}
 */
spine.Texture.prototype.setWraps = function(uWrap, vWrap) {};

/**
 * @abstract
 * @return {void}
 */
spine.Texture.prototype.dispose = function() {};

/**
 * @param {string} text
 * @return {!spine.TextureFilter}
 */
spine.Texture.filterFromString = function(text) {};

/**
 * @param {string} text
 * @return {!spine.TextureWrap}
 */
spine.Texture.wrapFromString = function(text) {};

/** @enum {number} */
spine.TextureFilter = {
  Nearest: 1,
  Linear: 1,
  MipMap: 1,
  MipMapNearestNearest: 1,
  MipMapLinearNearest: 1,
  MipMapNearestLinear: 1,
  MipMapLinearLinear: 1,
};

/** @enum {number} */
spine.TextureWrap = {
  MirroredRepeat: 1,
  ClampToEdge: 1,
  Repeat: 1,
};
/**
 * @constructor
 * @struct
 */
spine.TextureRegion = function() {};
/** @type {?} */
spine.TextureRegion.prototype.renderObject;
/** @type {number} */
spine.TextureRegion.prototype.u;
/** @type {number} */
spine.TextureRegion.prototype.v;
/** @type {number} */
spine.TextureRegion.prototype.u2;
/** @type {number} */
spine.TextureRegion.prototype.v2;
/** @type {number} */
spine.TextureRegion.prototype.width;
/** @type {number} */
spine.TextureRegion.prototype.height;
/** @type {boolean} */
spine.TextureRegion.prototype.rotate;
/** @type {number} */
spine.TextureRegion.prototype.offsetX;
/** @type {number} */
spine.TextureRegion.prototype.offsetY;
/** @type {number} */
spine.TextureRegion.prototype.originalWidth;
/** @type {number} */
spine.TextureRegion.prototype.originalHeight;
/**
 * @extends {spine.Texture}
 * @constructor
 * @struct
 */
spine.FakeTexture = function() {};

/**
 * @param {!spine.TextureFilter} minFilter
 * @param {!spine.TextureFilter} magFilter
 * @return {void}
 */
spine.FakeTexture.prototype.setFilters = function(minFilter, magFilter) {};

/**
 * @param {!spine.TextureWrap} uWrap
 * @param {!spine.TextureWrap} vWrap
 * @return {void}
 */
spine.FakeTexture.prototype.setWraps = function(uWrap, vWrap) {};

/**
 * @return {void}
 */
spine.FakeTexture.prototype.dispose = function() {};

/**
 * @implements {spine.Disposable}
 * @constructor
 * @struct
 * @param {string} atlasText
 * @param {function(string): ?} textureLoader
 */
spine.TextureAtlas = function(atlasText, textureLoader) {};
/** @type {!Array<!spine.TextureAtlasPage>} */
spine.TextureAtlas.prototype.pages;
/** @type {!Array<!spine.TextureAtlasRegion>} */
spine.TextureAtlas.prototype.regions;
/** @type {?} */
spine.TextureAtlas.prototype.load;

/**
 * @param {string} name
 * @return {!spine.TextureAtlasRegion}
 */
spine.TextureAtlas.prototype.findRegion = function(name) {};

/**
 * @return {void}
 */
spine.TextureAtlas.prototype.dispose = function() {};
/**
 * @constructor
 * @struct
 */
spine.TextureAtlasPage = function() {};
/** @type {string} */
spine.TextureAtlasPage.prototype.name;
/** @type {!spine.TextureFilter} */
spine.TextureAtlasPage.prototype.minFilter;
/** @type {!spine.TextureFilter} */
spine.TextureAtlasPage.prototype.magFilter;
/** @type {!spine.TextureWrap} */
spine.TextureAtlasPage.prototype.uWrap;
/** @type {!spine.TextureWrap} */
spine.TextureAtlasPage.prototype.vWrap;
/** @type {!spine.Texture} */
spine.TextureAtlasPage.prototype.texture;
/** @type {number} */
spine.TextureAtlasPage.prototype.width;
/** @type {number} */
spine.TextureAtlasPage.prototype.height;
/**
 * @extends {spine.TextureRegion}
 * @constructor
 * @struct
 */
spine.TextureAtlasRegion = function() {};
/** @type {!spine.TextureAtlasPage} */
spine.TextureAtlasRegion.prototype.page;
/** @type {string} */
spine.TextureAtlasRegion.prototype.name;
/** @type {number} */
spine.TextureAtlasRegion.prototype.x;
/** @type {number} */
spine.TextureAtlasRegion.prototype.y;
/** @type {number} */
spine.TextureAtlasRegion.prototype.index;
/** @type {boolean} */
spine.TextureAtlasRegion.prototype.rotate;
/** @type {number} */
spine.TextureAtlasRegion.prototype.degrees;
/** @type {!spine.Texture} */
spine.TextureAtlasRegion.prototype.texture;

/**
 * @implements {spine.Updatable}
 * @constructor
 * @struct
 * @param {!spine.TransformConstraintData} data
 * @param {!spine.Skeleton} skeleton
 */
spine.TransformConstraint = function(data, skeleton) {};
/** @type {!spine.TransformConstraintData} */
spine.TransformConstraint.prototype.data;
/** @type {!Array<!spine.Bone>} */
spine.TransformConstraint.prototype.bones;
/** @type {!spine.Bone} */
spine.TransformConstraint.prototype.target;
/** @type {number} */
spine.TransformConstraint.prototype.rotateMix;
/** @type {number} */
spine.TransformConstraint.prototype.translateMix;
/** @type {number} */
spine.TransformConstraint.prototype.scaleMix;
/** @type {number} */
spine.TransformConstraint.prototype.shearMix;
/** @type {!spine.Vector2} */
spine.TransformConstraint.prototype.temp;
/** @type {boolean} */
spine.TransformConstraint.prototype.active;

/**
 * @return {boolean}
 */
spine.TransformConstraint.prototype.isActive = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.apply = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.update = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.applyAbsoluteWorld = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.applyRelativeWorld = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.applyAbsoluteLocal = function() {};

/**
 * @return {void}
 */
spine.TransformConstraint.prototype.applyRelativeLocal = function() {};

/**
 * @extends {spine.ConstraintData}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.TransformConstraintData = function(name) {};
/** @type {!Array<!spine.BoneData>} */
spine.TransformConstraintData.prototype.bones;
/** @type {!spine.BoneData} */
spine.TransformConstraintData.prototype.target;
/** @type {number} */
spine.TransformConstraintData.prototype.rotateMix;
/** @type {number} */
spine.TransformConstraintData.prototype.translateMix;
/** @type {number} */
spine.TransformConstraintData.prototype.scaleMix;
/** @type {number} */
spine.TransformConstraintData.prototype.shearMix;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetRotation;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetX;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetY;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetScaleX;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetScaleY;
/** @type {number} */
spine.TransformConstraintData.prototype.offsetShearY;
/** @type {boolean} */
spine.TransformConstraintData.prototype.relative;
/** @type {boolean} */
spine.TransformConstraintData.prototype.local;
/**
 * @constructor
 * @struct
 */
spine.Triangulator = function() {};
/** @type {?} */
spine.Triangulator.prototype.convexPolygons;
/** @type {?} */
spine.Triangulator.prototype.convexPolygonsIndices;
/** @type {?} */
spine.Triangulator.prototype.indicesArray;
/** @type {?} */
spine.Triangulator.prototype.isConcaveArray;
/** @type {?} */
spine.Triangulator.prototype.triangles;
/** @type {?} */
spine.Triangulator.prototype.polygonPool;
/** @type {?} */
spine.Triangulator.prototype.polygonIndicesPool;
/** @type {?} */
spine.Triangulator.isConcave;
/** @type {?} */
spine.Triangulator.positiveArea;
/** @type {?} */
spine.Triangulator.winding;

/**
 * @param {!spine.ArrayLike<number>} verticesArray
 * @return {!Array<number>}
 */
spine.Triangulator.prototype.triangulate = function(verticesArray) {};

/**
 * @param {!Array<number>} verticesArray
 * @param {!Array<number>} triangles
 * @return {!Array<!Array<number>>}
 */
spine.Triangulator.prototype.decompose = function(verticesArray, triangles) {};
/**
 * @record
 * @struct
 */
spine.Updatable = function() {};

/**
 * @return {void}
 */
spine.Updatable.prototype.update = function() {};

/**
 * @return {boolean}
 */
spine.Updatable.prototype.isActive = function() {};
/**
 * @template T
 * @record
 * @struct
 */
spine.Map = function() {};

/* TODO: IndexSignature: spine */
/**
 * @constructor
 * @struct
 */
spine.IntSet = function() {};
/** @type {!Array<number>} */
spine.IntSet.prototype.array;

/**
 * @param {number} value
 * @return {boolean}
 */
spine.IntSet.prototype.add = function(value) {};

/**
 * @param {number} value
 * @return {boolean}
 */
spine.IntSet.prototype.contains = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
spine.IntSet.prototype.remove = function(value) {};

/**
 * @return {void}
 */
spine.IntSet.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
spine.Disposable = function() {};

/**
 * @return {void}
 */
spine.Disposable.prototype.dispose = function() {};
/**
 * @record
 * @struct
 */
spine.Restorable = function() {};

/**
 * @return {void}
 */
spine.Restorable.prototype.restore = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} r
 * @param {number=} g
 * @param {number=} b
 * @param {number=} a
 */
spine.Color = function(r, g, b, a) {};
/** @type {number} */
spine.Color.prototype.r;
/** @type {number} */
spine.Color.prototype.g;
/** @type {number} */
spine.Color.prototype.b;
/** @type {number} */
spine.Color.prototype.a;
/** @type {!spine.Color} */
spine.Color.WHITE;
/** @type {!spine.Color} */
spine.Color.RED;
/** @type {!spine.Color} */
spine.Color.GREEN;
/** @type {!spine.Color} */
spine.Color.BLUE;
/** @type {!spine.Color} */
spine.Color.MAGENTA;

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {THIS}
 */
spine.Color.prototype.set = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {!spine.Color} c
 * @return {THIS}
 */
spine.Color.prototype.setFromColor = function(c) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {string} hex
 * @return {THIS}
 */
spine.Color.prototype.setFromString = function(hex) {};

/**
 * @template THIS
 * @this {THIS}
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} a
 * @return {THIS}
 */
spine.Color.prototype.add = function(r, g, b, a) {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
spine.Color.prototype.clamp = function() {};

/**
 * @param {!spine.Color} color
 * @param {number} value
 * @return {void}
 */
spine.Color.rgba8888ToColor = function(color, value) {};

/**
 * @param {!spine.Color} color
 * @param {number} value
 * @return {void}
 */
spine.Color.rgb888ToColor = function(color, value) {};
/**
 * @constructor
 * @struct
 */
spine.MathUtils = function() {};
/** @type {number} */
spine.MathUtils.PI;
/** @type {number} */
spine.MathUtils.PI2;
/** @type {number} */
spine.MathUtils.radiansToDegrees;
/** @type {number} */
spine.MathUtils.radDeg;
/** @type {number} */
spine.MathUtils.degreesToRadians;
/** @type {number} */
spine.MathUtils.degRad;

/**
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
spine.MathUtils.clamp = function(value, min, max) {};

/**
 * @param {number} degrees
 * @return {number}
 */
spine.MathUtils.cosDeg = function(degrees) {};

/**
 * @param {number} degrees
 * @return {number}
 */
spine.MathUtils.sinDeg = function(degrees) {};

/**
 * @param {number} value
 * @return {number}
 */
spine.MathUtils.signum = function(value) {};

/**
 * @param {number} x
 * @return {number}
 */
spine.MathUtils.toInt = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
spine.MathUtils.cbrt = function(x) {};

/**
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
spine.MathUtils.randomTriangular = function(min, max) {};

/**
 * @param {number} min
 * @param {number} max
 * @param {number} mode
 * @return {number}
 */
spine.MathUtils.randomTriangularWith = function(min, max, mode) {};
/**
 * @constructor
 * @struct
 */
spine.Interpolation = function() {};

/**
 * @abstract
 * @protected
 * @param {number} a
 * @return {number}
 */
spine.Interpolation.prototype.applyInternal = function(a) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {number} a
 * @return {number}
 */
spine.Interpolation.prototype.apply = function(start, end, a) {};

/**
 * @extends {spine.Interpolation}
 * @constructor
 * @struct
 * @param {number} power
 */
spine.Pow = function(power) {};
/** @type {number} */
spine.Pow.prototype.power;

/**
 * @param {number} a
 * @return {number}
 */
spine.Pow.prototype.applyInternal = function(a) {};

/**
 * @extends {spine.Pow}
 * @constructor
 * @struct
 * @param {number} power
 */
spine.PowOut = function(power) {};

/**
 * @param {number} a
 * @return {number}
 */
spine.PowOut.prototype.applyInternal = function(a) {};
/**
 * @constructor
 * @struct
 */
spine.Utils = function() {};
/** @type {boolean} */
spine.Utils.SUPPORTS_TYPED_ARRAYS;

/**
 * @template T
 * @param {!spine.ArrayLike<T>} source
 * @param {number} sourceStart
 * @param {!spine.ArrayLike<T>} dest
 * @param {number} destStart
 * @param {number} numElements
 * @return {void}
 */
spine.Utils.arrayCopy = function(source, sourceStart, dest, destStart, numElements) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {number} size
 * @param {?=} value
 * @return {!Array<T>}
 */
spine.Utils.setArraySize = function(array, size, value) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {number} size
 * @param {?=} value
 * @return {!Array<T>}
 */
spine.Utils.ensureArrayCapacity = function(array, size, value) {};

/**
 * @template T
 * @param {number} size
 * @param {T} defaultValue
 * @return {!Array<T>}
 */
spine.Utils.newArray = function(size, defaultValue) {};

/**
 * @param {number} size
 * @return {!spine.ArrayLike<number>}
 */
spine.Utils.newFloatArray = function(size) {};

/**
 * @param {number} size
 * @return {!spine.ArrayLike<number>}
 */
spine.Utils.newShortArray = function(size) {};

/**
 * @param {!Array<number>} array
 * @return {(!Float32Array|!Array<number>)}
 */
spine.Utils.toFloatArray = function(array) {};

/**
 * @param {number} value
 * @return {number}
 */
spine.Utils.toSinglePrecision = function(value) {};

/**
 * @param {number} alpha
 * @param {!spine.MixBlend} blend
 * @return {void}
 */
spine.Utils.webkit602BugfixHelper = function(alpha, blend) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} element
 * @param {boolean=} identity
 * @return {boolean}
 */
spine.Utils.contains = function(array, element, identity) {};
/**
 * @constructor
 * @struct
 */
spine.DebugUtils = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @return {void}
 */
spine.DebugUtils.logBones = function(skeleton) {};

/**
 * @template T
 * @constructor
 * @struct
 * @param {function(): T} instantiator
 */
spine.Pool = function(instantiator) {};
/** @type {?} */
spine.Pool.prototype.items;
/** @type {?} */
spine.Pool.prototype.instantiator;

/**
 * @return {T}
 */
spine.Pool.prototype.obtain = function() {};

/**
 * @param {T} item
 * @return {void}
 */
spine.Pool.prototype.free = function(item) {};

/**
 * @param {!spine.ArrayLike<T>} items
 * @return {void}
 */
spine.Pool.prototype.freeAll = function(items) {};

/**
 * @return {void}
 */
spine.Pool.prototype.clear = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 */
spine.Vector2 = function(x, y) {};
/** @type {number} */
spine.Vector2.prototype.x;
/** @type {number} */
spine.Vector2.prototype.y;

/**
 * @param {number} x
 * @param {number} y
 * @return {!spine.Vector2}
 */
spine.Vector2.prototype.set = function(x, y) {};

/**
 * @return {number}
 */
spine.Vector2.prototype.length = function() {};

/**
 * @template THIS
 * @this {THIS}
 * @return {THIS}
 */
spine.Vector2.prototype.normalize = function() {};
/**
 * @constructor
 * @struct
 */
spine.TimeKeeper = function() {};
/** @type {number} */
spine.TimeKeeper.prototype.maxDelta;
/** @type {number} */
spine.TimeKeeper.prototype.framesPerSecond;
/** @type {number} */
spine.TimeKeeper.prototype.delta;
/** @type {number} */
spine.TimeKeeper.prototype.totalTime;
/** @type {?} */
spine.TimeKeeper.prototype.lastTime;
/** @type {?} */
spine.TimeKeeper.prototype.frameCount;
/** @type {?} */
spine.TimeKeeper.prototype.frameTime;

/**
 * @return {void}
 */
spine.TimeKeeper.prototype.update = function() {};
/**
 * @template T
 * @record
 * @struct
 */
spine.ArrayLike = function() {};
/** @type {number} */
spine.ArrayLike.prototype.length;

/* TODO: IndexSignature: spine */

/**
 * @constructor
 * @struct
 * @param {number=} windowSize
 */
spine.WindowedMean = function(windowSize) {};
/** @type {!Array<number>} */
spine.WindowedMean.prototype.values;
/** @type {number} */
spine.WindowedMean.prototype.addedValues;
/** @type {number} */
spine.WindowedMean.prototype.lastValue;
/** @type {number} */
spine.WindowedMean.prototype.mean;
/** @type {boolean} */
spine.WindowedMean.prototype.dirty;

/**
 * @return {boolean}
 */
spine.WindowedMean.prototype.hasEnoughData = function() {};

/**
 * @param {number} value
 * @return {void}
 */
spine.WindowedMean.prototype.addValue = function(value) {};

/**
 * @return {number}
 */
spine.WindowedMean.prototype.getMean = function() {};
/**
 * @record
 * @struct
 */
spine.VertexEffect = function() {};

/**
 * @param {!spine.Skeleton} skeleton
 * @return {void}
 */
spine.VertexEffect.prototype.begin = function(skeleton) {};

/**
 * @param {!spine.Vector2} position
 * @param {!spine.Vector2} uv
 * @param {!spine.Color} light
 * @param {!spine.Color} dark
 * @return {void}
 */
spine.VertexEffect.prototype.transform = function(position, uv, light, dark) {};

/**
 * @return {void}
 */
spine.VertexEffect.prototype.end = function() {};

/**
 * @param {number} n
 * @return {number}
 */
Math.prototype.fround = function(n) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
spine.Attachment = function(name) {};
/** @type {string} */
spine.Attachment.prototype.name;

/**
 * @abstract
 * @return {!spine.Attachment}
 */
spine.Attachment.prototype.copy = function() {};

/**
 * @extends {spine.Attachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.VertexAttachment = function(name) {};
/** @type {?} */
spine.VertexAttachment.nextID;
/** @type {number} */
spine.VertexAttachment.prototype.id;
/** @type {!Array<number>} */
spine.VertexAttachment.prototype.bones;
/** @type {!spine.ArrayLike<number>} */
spine.VertexAttachment.prototype.vertices;
/** @type {number} */
spine.VertexAttachment.prototype.worldVerticesLength;
/** @type {!spine.VertexAttachment} */
spine.VertexAttachment.prototype.deformAttachment;

/**
 * @param {!spine.Slot} slot
 * @param {number} start
 * @param {number} count
 * @param {!spine.ArrayLike<number>} worldVertices
 * @param {number} offset
 * @param {number} stride
 * @return {void}
 */
spine.VertexAttachment.prototype.computeWorldVertices = function(slot, start, count, worldVertices, offset, stride) {};

/**
 * @param {!spine.VertexAttachment} attachment
 * @return {void}
 */
spine.VertexAttachment.prototype.copyTo = function(attachment) {};
/**
 * @record
 * @struct
 */
spine.AttachmentLoader = function() {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @param {string} path
 * @return {!spine.RegionAttachment}
 */
spine.AttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @param {string} path
 * @return {!spine.MeshAttachment}
 */
spine.AttachmentLoader.prototype.newMeshAttachment = function(skin, name, path) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.BoundingBoxAttachment}
 */
spine.AttachmentLoader.prototype.newBoundingBoxAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.PathAttachment}
 */
spine.AttachmentLoader.prototype.newPathAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.PointAttachment}
 */
spine.AttachmentLoader.prototype.newPointAttachment = function(skin, name) {};

/**
 * @param {!spine.Skin} skin
 * @param {string} name
 * @return {!spine.ClippingAttachment}
 */
spine.AttachmentLoader.prototype.newClippingAttachment = function(skin, name) {};

/** @enum {number} */
spine.AttachmentType = {
  Region: 1,
  BoundingBox: 1,
  Mesh: 1,
  LinkedMesh: 1,
  Path: 1,
  Point: 1,
  Clipping: 1,
};

/**
 * @extends {spine.VertexAttachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.BoundingBoxAttachment = function(name) {};
/** @type {!spine.Color} */
spine.BoundingBoxAttachment.prototype.color;

/**
 * @return {!spine.Attachment}
 */
spine.BoundingBoxAttachment.prototype.copy = function() {};

/**
 * @extends {spine.VertexAttachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.ClippingAttachment = function(name) {};
/** @type {!spine.SlotData} */
spine.ClippingAttachment.prototype.endSlot;
/** @type {!spine.Color} */
spine.ClippingAttachment.prototype.color;

/**
 * @return {!spine.Attachment}
 */
spine.ClippingAttachment.prototype.copy = function() {};

/**
 * @extends {spine.VertexAttachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.MeshAttachment = function(name) {};
/** @type {!spine.TextureRegion} */
spine.MeshAttachment.prototype.region;
/** @type {string} */
spine.MeshAttachment.prototype.path;
/** @type {!spine.ArrayLike<number>} */
spine.MeshAttachment.prototype.regionUVs;
/** @type {!spine.ArrayLike<number>} */
spine.MeshAttachment.prototype.uvs;
/** @type {!Array<number>} */
spine.MeshAttachment.prototype.triangles;
/** @type {!spine.Color} */
spine.MeshAttachment.prototype.color;
/** @type {number} */
spine.MeshAttachment.prototype.width;
/** @type {number} */
spine.MeshAttachment.prototype.height;
/** @type {number} */
spine.MeshAttachment.prototype.hullLength;
/** @type {!Array<number>} */
spine.MeshAttachment.prototype.edges;
/** @type {?} */
spine.MeshAttachment.prototype.parentMesh;
/** @type {!spine.Color} */
spine.MeshAttachment.prototype.tempColor;

/**
 * @return {void}
 */
spine.MeshAttachment.prototype.updateUVs = function() {};

/**
 * @return {!spine.MeshAttachment}
 */
spine.MeshAttachment.prototype.getParentMesh = function() {};

/**
 * @param {!spine.MeshAttachment} parentMesh
 * @return {void}
 */
spine.MeshAttachment.prototype.setParentMesh = function(parentMesh) {};

/**
 * @return {!spine.Attachment}
 */
spine.MeshAttachment.prototype.copy = function() {};

/**
 * @return {!spine.MeshAttachment}
 */
spine.MeshAttachment.prototype.newLinkedMesh = function() {};

/**
 * @extends {spine.VertexAttachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.PathAttachment = function(name) {};
/** @type {!Array<number>} */
spine.PathAttachment.prototype.lengths;
/** @type {boolean} */
spine.PathAttachment.prototype.closed;
/** @type {boolean} */
spine.PathAttachment.prototype.constantSpeed;
/** @type {!spine.Color} */
spine.PathAttachment.prototype.color;

/**
 * @return {!spine.Attachment}
 */
spine.PathAttachment.prototype.copy = function() {};

/**
 * @extends {spine.VertexAttachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.PointAttachment = function(name) {};
/** @type {number} */
spine.PointAttachment.prototype.x;
/** @type {number} */
spine.PointAttachment.prototype.y;
/** @type {number} */
spine.PointAttachment.prototype.rotation;
/** @type {!spine.Color} */
spine.PointAttachment.prototype.color;

/**
 * @param {!spine.Bone} bone
 * @param {!spine.Vector2} point
 * @return {!spine.Vector2}
 */
spine.PointAttachment.prototype.computeWorldPosition = function(bone, point) {};

/**
 * @param {!spine.Bone} bone
 * @return {number}
 */
spine.PointAttachment.prototype.computeWorldRotation = function(bone) {};

/**
 * @return {!spine.Attachment}
 */
spine.PointAttachment.prototype.copy = function() {};

/**
 * @extends {spine.Attachment}
 * @constructor
 * @struct
 * @param {string} name
 */
spine.RegionAttachment = function(name) {};
/** @type {number} */
spine.RegionAttachment.OX1;
/** @type {number} */
spine.RegionAttachment.OY1;
/** @type {number} */
spine.RegionAttachment.OX2;
/** @type {number} */
spine.RegionAttachment.OY2;
/** @type {number} */
spine.RegionAttachment.OX3;
/** @type {number} */
spine.RegionAttachment.OY3;
/** @type {number} */
spine.RegionAttachment.OX4;
/** @type {number} */
spine.RegionAttachment.OY4;
/** @type {number} */
spine.RegionAttachment.X1;
/** @type {number} */
spine.RegionAttachment.Y1;
/** @type {number} */
spine.RegionAttachment.C1R;
/** @type {number} */
spine.RegionAttachment.C1G;
/** @type {number} */
spine.RegionAttachment.C1B;
/** @type {number} */
spine.RegionAttachment.C1A;
/** @type {number} */
spine.RegionAttachment.U1;
/** @type {number} */
spine.RegionAttachment.V1;
/** @type {number} */
spine.RegionAttachment.X2;
/** @type {number} */
spine.RegionAttachment.Y2;
/** @type {number} */
spine.RegionAttachment.C2R;
/** @type {number} */
spine.RegionAttachment.C2G;
/** @type {number} */
spine.RegionAttachment.C2B;
/** @type {number} */
spine.RegionAttachment.C2A;
/** @type {number} */
spine.RegionAttachment.U2;
/** @type {number} */
spine.RegionAttachment.V2;
/** @type {number} */
spine.RegionAttachment.X3;
/** @type {number} */
spine.RegionAttachment.Y3;
/** @type {number} */
spine.RegionAttachment.C3R;
/** @type {number} */
spine.RegionAttachment.C3G;
/** @type {number} */
spine.RegionAttachment.C3B;
/** @type {number} */
spine.RegionAttachment.C3A;
/** @type {number} */
spine.RegionAttachment.U3;
/** @type {number} */
spine.RegionAttachment.V3;
/** @type {number} */
spine.RegionAttachment.X4;
/** @type {number} */
spine.RegionAttachment.Y4;
/** @type {number} */
spine.RegionAttachment.C4R;
/** @type {number} */
spine.RegionAttachment.C4G;
/** @type {number} */
spine.RegionAttachment.C4B;
/** @type {number} */
spine.RegionAttachment.C4A;
/** @type {number} */
spine.RegionAttachment.U4;
/** @type {number} */
spine.RegionAttachment.V4;
/** @type {number} */
spine.RegionAttachment.prototype.x;
/** @type {number} */
spine.RegionAttachment.prototype.y;
/** @type {number} */
spine.RegionAttachment.prototype.scaleX;
/** @type {number} */
spine.RegionAttachment.prototype.scaleY;
/** @type {number} */
spine.RegionAttachment.prototype.rotation;
/** @type {number} */
spine.RegionAttachment.prototype.width;
/** @type {number} */
spine.RegionAttachment.prototype.height;
/** @type {!spine.Color} */
spine.RegionAttachment.prototype.color;
/** @type {string} */
spine.RegionAttachment.prototype.path;
/** @type {?} */
spine.RegionAttachment.prototype.rendererObject;
/** @type {!spine.TextureRegion} */
spine.RegionAttachment.prototype.region;
/** @type {!spine.ArrayLike<number>} */
spine.RegionAttachment.prototype.offset;
/** @type {!spine.ArrayLike<number>} */
spine.RegionAttachment.prototype.uvs;
/** @type {!spine.Color} */
spine.RegionAttachment.prototype.tempColor;

/**
 * @return {void}
 */
spine.RegionAttachment.prototype.updateOffset = function() {};

/**
 * @param {!spine.TextureRegion} region
 * @return {void}
 */
spine.RegionAttachment.prototype.setRegion = function(region) {};

/**
 * @param {!spine.Bone} bone
 * @param {!spine.ArrayLike<number>} worldVertices
 * @param {number} offset
 * @param {number} stride
 * @return {void}
 */
spine.RegionAttachment.prototype.computeWorldVertices = function(bone, worldVertices, offset, stride) {};

/**
 * @return {!spine.Attachment}
 */
spine.RegionAttachment.prototype.copy = function() {};

/**
 * @implements {spine.VertexEffect}
 * @constructor
 * @struct
 * @param {number} jitterX
 * @param {number} jitterY
 */
spine.JitterEffect = function(jitterX, jitterY) {};
/** @type {number} */
spine.JitterEffect.prototype.jitterX;
/** @type {number} */
spine.JitterEffect.prototype.jitterY;

/**
 * @param {!spine.Skeleton} skeleton
 * @return {void}
 */
spine.JitterEffect.prototype.begin = function(skeleton) {};

/**
 * @param {!spine.Vector2} position
 * @param {!spine.Vector2} uv
 * @param {!spine.Color} light
 * @param {!spine.Color} dark
 * @return {void}
 */
spine.JitterEffect.prototype.transform = function(position, uv, light, dark) {};

/**
 * @return {void}
 */
spine.JitterEffect.prototype.end = function() {};

/**
 * @implements {spine.VertexEffect}
 * @constructor
 * @struct
 * @param {number} radius
 */
spine.SwirlEffect = function(radius) {};
/** @type {!spine.PowOut} */
spine.SwirlEffect.interpolation;
/** @type {number} */
spine.SwirlEffect.prototype.centerX;
/** @type {number} */
spine.SwirlEffect.prototype.centerY;
/** @type {number} */
spine.SwirlEffect.prototype.radius;
/** @type {number} */
spine.SwirlEffect.prototype.angle;
/** @type {?} */
spine.SwirlEffect.prototype.worldX;
/** @type {?} */
spine.SwirlEffect.prototype.worldY;

/**
 * @param {!spine.Skeleton} skeleton
 * @return {void}
 */
spine.SwirlEffect.prototype.begin = function(skeleton) {};

/**
 * @param {!spine.Vector2} position
 * @param {!spine.Vector2} uv
 * @param {!spine.Color} light
 * @param {!spine.Color} dark
 * @return {void}
 */
spine.SwirlEffect.prototype.transform = function(position, uv, light, dark) {};

/**
 * @return {void}
 */
spine.SwirlEffect.prototype.end = function() {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/union.d.ts
/** @type {function(): void} */
CanvasContext.prototype.addColorStop;
/** @type {function(): void} */
CanvasContext.prototype.arc;
/** @type {function(): void} */
CanvasContext.prototype.beginPath;
/** @type {function(): void} */
CanvasContext.prototype.bezierCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.clearActions;
/** @type {function(): void} */
CanvasContext.prototype.clearRect;
/** @type {function(): void} */
CanvasContext.prototype.clip;
/** @type {function(): void} */
CanvasContext.prototype.closePath;
/** @type {function(): void} */
CanvasContext.prototype.createCircularGradient;
/** @type {function(): void} */
CanvasContext.prototype.createLinearGradient;
/** @type {function(): void} */
CanvasContext.prototype.draw;
/** @type {function(): void} */
CanvasContext.prototype.drawImage;
/** @type {function(): void} */
CanvasContext.prototype.fill;
/** @type {function(): void} */
CanvasContext.prototype.fillRect;
/** @type {function(): void} */
CanvasContext.prototype.fillText;
/** @type {function(): void} */
CanvasContext.prototype.lineTo;
/** @type {function(): void} */
CanvasContext.prototype.moveTo;
/** @type {function(): void} */
CanvasContext.prototype.quadraticCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.rect;
/** @type {function(): void} */
CanvasContext.prototype.rotate;
/** @type {function(): void} */
CanvasContext.prototype.save;
/** @type {function(): void} */
CanvasContext.prototype.scale;
/** @type {function(): void} */
CanvasContext.prototype.setFillStyle;
/** @type {function(): void} */
CanvasContext.prototype.setFontSize;
/** @type {function(): void} */
CanvasContext.prototype.setGlobalAlpha;
/** @type {function(): void} */
CanvasContext.prototype.setLineCap;
/** @type {function(): void} */
CanvasContext.prototype.setLineDash;
/** @type {function(): void} */
CanvasContext.prototype.setLineJoin;
/** @type {function(): void} */
CanvasContext.prototype.setLineWidth;
/** @type {function(): void} */
CanvasContext.prototype.setMiterLimit;
/** @type {function(): void} */
CanvasContext.prototype.setShadow;
/** @type {function(): void} */
CanvasContext.prototype.setStrokeStyle;
/** @type {function(): void} */
CanvasContext.prototype.setTextAlign;
/** @type {function(): void} */
CanvasContext.prototype.setTextBaseline;
/** @type {function(): void} */
CanvasContext.prototype.stroke;
/** @type {function(): void} */
CanvasContext.prototype.strokeRect;
/** @type {function(): void} */
CanvasContext.prototype.translate;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.characteristicId;
/** @type {?} */
_writeBLECharacteristicValueObject.prototype.value;
/** @type {function(!_writeBLECharacteristicValueSuccessObject): void} */
_writeBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.complete;
/** @type {string} */
_writeBLECharacteristicValueSuccessObject.prototype.errMsg;
/** @type {function(): void} */
_vibrateShortObject.prototype.success;
/** @type {function(): void} */
_vibrateShortObject.prototype.fail;
/** @type {function(): void} */
_vibrateShortObject.prototype.complete;
/** @type {function(): void} */
_vibrateLongObject.prototype.success;
/** @type {function(): void} */
_vibrateLongObject.prototype.fail;
/** @type {function(): void} */
_vibrateLongObject.prototype.complete;
/** @type {string} */
_uploadFileObject.prototype.url;
/** @type {string} */
_uploadFileObject.prototype.filePath;
/** @type {string} */
_uploadFileObject.prototype.name;
/** @type {!Object} */
_uploadFileObject.prototype.header;
/** @type {!Object} */
_uploadFileObject.prototype.formData;
/** @type {function(!_uploadFileSuccessObject): void} */
_uploadFileObject.prototype.success;
/** @type {function(): void} */
_uploadFileObject.prototype.fail;
/** @type {function(): void} */
_uploadFileObject.prototype.complete;
/** @type {string} */
_uploadFileSuccessObject.prototype.data;
/** @type {number} */
_uploadFileSuccessObject.prototype.statusCode;
/** @type {boolean} */
_updateShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_updateShareMenuObject.prototype.success;
/** @type {function(): void} */
_updateShareMenuObject.prototype.fail;
/** @type {function(): void} */
_updateShareMenuObject.prototype.complete;
/** @type {string} */
_switchTabObject.prototype.url;
/** @type {function(): void} */
_switchTabObject.prototype.success;
/** @type {function(): void} */
_switchTabObject.prototype.fail;
/** @type {function(): void} */
_switchTabObject.prototype.complete;
/** @type {function(): void} */
_stopWifiObject.prototype.success;
/** @type {function(): void} */
_stopWifiObject.prototype.fail;
/** @type {function(): void} */
_stopWifiObject.prototype.complete;
/** @type {function(!_stopHCESuccessObject): void} */
_stopHCEObject.prototype.success;
/** @type {function(): void} */
_stopHCEObject.prototype.fail;
/** @type {function(): void} */
_stopHCEObject.prototype.complete;
/** @type {string} */
_stopHCESuccessObject.prototype.errMsg;
/** @type {number} */
_stopHCESuccessObject.prototype.errCode;
/** @type {function(): void} */
_stopCompassObject.prototype.success;
/** @type {function(): void} */
_stopCompassObject.prototype.fail;
/** @type {function(): void} */
_stopCompassObject.prototype.complete;
/** @type {function(!_stopBluetoothDevicesDiscoverySuccessObject): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.complete;
/** @type {string} */
_stopBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/** @type {function(!_stopBeaconDiscoverySuccessObject): void} */
_stopBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.complete;
/** @type {string} */
_stopBeaconDiscoverySuccessObject.prototype.errMsg;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.success;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.complete;
/** @type {function(): void} */
_startWifiObject.prototype.success;
/** @type {function(): void} */
_startWifiObject.prototype.fail;
/** @type {function(): void} */
_startWifiObject.prototype.complete;
/** @type {?} */
_startSoterAuthenticationObject.prototype.requestAuthModes;
/** @type {string} */
_startSoterAuthenticationObject.prototype.challenge;
/** @type {string} */
_startSoterAuthenticationObject.prototype.authContent;
/** @type {function(!_startSoterAuthenticationSuccessObject): void} */
_startSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.complete;
/** @type {number} */
_startSoterAuthenticationSuccessObject.prototype.errCode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.authMode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSON;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSONSignature;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.errMsg;
/** @type {function(!_startRecordSuccessObject): void} */
_startRecordObject.prototype.success;
/** @type {function(): void} */
_startRecordObject.prototype.fail;
/** @type {function(): void} */
_startRecordObject.prototype.complete;
/** @type {?} */
_startRecordSuccessObject.prototype.tempFilePath;
/** @type {function(!_startPullDownRefreshSuccessObject): void} */
_startPullDownRefreshObject.prototype.success;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.fail;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.complete;
/** @type {string} */
_startPullDownRefreshSuccessObject.prototype.errMsg;
/** @type {?} */
_startHCEObject.prototype.aid_list;
/** @type {function(!_startHCESuccessObject): void} */
_startHCEObject.prototype.success;
/** @type {function(): void} */
_startHCEObject.prototype.fail;
/** @type {function(): void} */
_startHCEObject.prototype.complete;
/** @type {string} */
_startHCESuccessObject.prototype.errMsg;
/** @type {number} */
_startHCESuccessObject.prototype.errCode;
/** @type {function(): void} */
_startCompassObject.prototype.success;
/** @type {function(): void} */
_startCompassObject.prototype.fail;
/** @type {function(): void} */
_startCompassObject.prototype.complete;
/** @type {?} */
_startBluetoothDevicesDiscoveryObject.prototype.services;
/** @type {boolean} */
_startBluetoothDevicesDiscoveryObject.prototype.allowDuplicatesKey;
/** @type {number} */
_startBluetoothDevicesDiscoveryObject.prototype.interval;
/** @type {function(!_startBluetoothDevicesDiscoverySuccessObject): void} */
_startBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.complete;
/** @type {string} */
_startBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/** @type {?} */
_startBeaconDiscoveryObject.prototype.uuids;
/** @type {function(!_startBeaconDiscoverySuccessObject): void} */
_startBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.complete;
/** @type {string} */
_startBeaconDiscoverySuccessObject.prototype.errMsg;
/** @type {function(): void} */
_startAccelerometerObject.prototype.success;
/** @type {function(): void} */
_startAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_startAccelerometerObject.prototype.complete;
/** @type {string} */
_showToastObject.prototype.title;
/** @type {string} */
_showToastObject.prototype.icon;
/** @type {string} */
_showToastObject.prototype.image;
/** @type {number} */
_showToastObject.prototype.duration;
/** @type {boolean} */
_showToastObject.prototype.mask;
/** @type {function(): void} */
_showToastObject.prototype.success;
/** @type {function(): void} */
_showToastObject.prototype.fail;
/** @type {function(): void} */
_showToastObject.prototype.complete;
/** @type {number} */
_showTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.complete;
/** @type {boolean} */
_showTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_showTabBarObject.prototype.success;
/** @type {function(): void} */
_showTabBarObject.prototype.fail;
/** @type {function(): void} */
_showTabBarObject.prototype.complete;
/** @type {boolean} */
_showShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_showShareMenuObject.prototype.success;
/** @type {function(): void} */
_showShareMenuObject.prototype.fail;
/** @type {function(): void} */
_showShareMenuObject.prototype.complete;
/** @type {string} */
_showModalObject.prototype.title;
/** @type {string} */
_showModalObject.prototype.content;
/** @type {boolean} */
_showModalObject.prototype.showCancel;
/** @type {string} */
_showModalObject.prototype.cancelText;
/** @type {?} */
_showModalObject.prototype.cancelColor;
/** @type {string} */
_showModalObject.prototype.confirmText;
/** @type {?} */
_showModalObject.prototype.confirmColor;
/** @type {function(!_showModalSuccessObject): void} */
_showModalObject.prototype.success;
/** @type {function(): void} */
_showModalObject.prototype.fail;
/** @type {function(): void} */
_showModalObject.prototype.complete;
/** @type {boolean} */
_showModalSuccessObject.prototype.confirm;
/** @type {boolean} */
_showModalSuccessObject.prototype.cancel;
/** @type {string} */
_showLoadingObject.prototype.title;
/** @type {boolean} */
_showLoadingObject.prototype.mask;
/** @type {function(): void} */
_showLoadingObject.prototype.success;
/** @type {function(): void} */
_showLoadingObject.prototype.fail;
/** @type {function(): void} */
_showLoadingObject.prototype.complete;
/** @type {?} */
_showActionSheetObject.prototype.itemList;
/** @type {?} */
_showActionSheetObject.prototype.itemColor;
/** @type {function(!_showActionSheetSuccessObject): void} */
_showActionSheetObject.prototype.success;
/** @type {function(): void} */
_showActionSheetObject.prototype.fail;
/** @type {function(): void} */
_showActionSheetObject.prototype.complete;
/** @type {number} */
_showActionSheetSuccessObject.prototype.tapIndex;
/** @type {?} */
_setWifiListObject.prototype.wifiList;
/** @type {function(): void} */
_setWifiListObject.prototype.success;
/** @type {function(): void} */
_setWifiListObject.prototype.fail;
/** @type {function(): void} */
_setWifiListObject.prototype.complete;
/** @type {string} */
_setTopBarTextObject.prototype.text;
/** @type {function(): void} */
_setTopBarTextObject.prototype.success;
/** @type {function(): void} */
_setTopBarTextObject.prototype.fail;
/** @type {function(): void} */
_setTopBarTextObject.prototype.complete;
/** @type {?} */
_setTabBarStyleObject.prototype.color;
/** @type {?} */
_setTabBarStyleObject.prototype.selectedColor;
/** @type {?} */
_setTabBarStyleObject.prototype.backgroundColor;
/** @type {string} */
_setTabBarStyleObject.prototype.borderStyle;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.success;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.fail;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.complete;
/** @type {number} */
_setTabBarItemObject.prototype.index;
/** @type {string} */
_setTabBarItemObject.prototype.text;
/** @type {string} */
_setTabBarItemObject.prototype.iconPath;
/** @type {string} */
_setTabBarItemObject.prototype.selectedIconPath;
/** @type {function(): void} */
_setTabBarItemObject.prototype.success;
/** @type {function(): void} */
_setTabBarItemObject.prototype.fail;
/** @type {function(): void} */
_setTabBarItemObject.prototype.complete;
/** @type {number} */
_setTabBarBadgeObject.prototype.index;
/** @type {string} */
_setTabBarBadgeObject.prototype.text;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.complete;
/** @type {string} */
_setStorageObject.prototype.key;
/** @type {?} */
_setStorageObject.prototype.data;
/** @type {function(): void} */
_setStorageObject.prototype.success;
/** @type {function(): void} */
_setStorageObject.prototype.fail;
/** @type {function(): void} */
_setStorageObject.prototype.complete;
/** @type {number} */
_setScreenBrightnessObject.prototype.value;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.complete;
/** @type {string} */
_setNavigationBarTitleObject.prototype.title;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.complete;
/** @type {string} */
_setNavigationBarColorObject.prototype.frontColor;
/** @type {string} */
_setNavigationBarColorObject.prototype.backgroundColor;
/** @type {!Object} */
_setNavigationBarColorObject.prototype.animation;
/** @type {function(!_setNavigationBarColorSuccessObject): void} */
_setNavigationBarColorObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.complete;
/** @type {string} */
_setNavigationBarColorSuccessObject.prototype.errMsg;
/** @type {boolean} */
_setKeepScreenOnObject.prototype.keepScreenOn;
/** @type {function(!_setKeepScreenOnSuccessObject): void} */
_setKeepScreenOnObject.prototype.success;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.fail;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.complete;
/** @type {string} */
_setKeepScreenOnSuccessObject.prototype.errMsg;
/** @type {boolean} */
_setEnableDebugObject.prototype.enableDebug;
/** @type {function(!_setEnableDebugSuccessObject): void} */
_setEnableDebugObject.prototype.success;
/** @type {function(): void} */
_setEnableDebugObject.prototype.fail;
/** @type {function(): void} */
_setEnableDebugObject.prototype.complete;
/** @type {string} */
_setEnableDebugSuccessObject.prototype.errMsg;
/** @type {string} */
_setClipboardDataObject.prototype.data;
/** @type {function(): void} */
_setClipboardDataObject.prototype.success;
/** @type {function(): void} */
_setClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_setClipboardDataObject.prototype.complete;
/** @type {?} */
_sendSocketMessageObject.prototype.data;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.success;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.fail;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.complete;
/** @type {?} */
_sendHCEMessageObject.prototype.data;
/** @type {function(!_sendHCEMessageSuccessObject): void} */
_sendHCEMessageObject.prototype.success;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.fail;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.complete;
/** @type {string} */
_sendHCEMessageSuccessObject.prototype.errMsg;
/** @type {number} */
_sendHCEMessageSuccessObject.prototype.errCode;
/** @type {number} */
_seekBackgroundAudioObject.prototype.position;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.complete;
/** @type {boolean} */
_scanCodeObject.prototype.onlyFromCamera;
/** @type {?} */
_scanCodeObject.prototype.scanType;
/** @type {function(!_scanCodeSuccessObject): void} */
_scanCodeObject.prototype.success;
/** @type {function(): void} */
_scanCodeObject.prototype.fail;
/** @type {function(): void} */
_scanCodeObject.prototype.complete;
/** @type {?} */
_scanCodeSuccessObject.prototype.result;
/** @type {?} */
_scanCodeSuccessObject.prototype.scanType;
/** @type {?} */
_scanCodeSuccessObject.prototype.charSet;
/** @type {?} */
_scanCodeSuccessObject.prototype.path;
/** @type {string} */
_saveVideoToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveVideoToPhotosAlbumSuccessObject): void} */
_saveVideoToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.complete;
/** @type {string} */
_saveVideoToPhotosAlbumSuccessObject.prototype.errMsg;
/** @type {string} */
_saveImageToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveImageToPhotosAlbumSuccessObject): void} */
_saveImageToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.complete;
/** @type {string} */
_saveImageToPhotosAlbumSuccessObject.prototype.errMsg;
/** @type {string} */
_saveFileObject.prototype.tempFilePath;
/** @type {function(!_saveFileSuccessObject): void} */
_saveFileObject.prototype.success;
/** @type {function(): void} */
_saveFileObject.prototype.fail;
/** @type {function(): void} */
_saveFileObject.prototype.complete;
/** @type {?} */
_saveFileSuccessObject.prototype.savedFilePath;
/** @type {number} */
_requestPaymentObject.prototype.appId;
/** @type {string} */
_requestPaymentObject.prototype.pkgName;
/** @type {string} */
_requestPaymentObject.prototype.token;
/** @type {string} */
_requestPaymentObject.prototype.timeStamp;
/** @type {string} */
_requestPaymentObject.prototype.orderNo;
/** @type {string} */
_requestPaymentObject.prototype.paySign;
/** @type {function(): void} */
_requestPaymentObject.prototype.success;
/** @type {function(): void} */
_requestPaymentObject.prototype.fail;
/** @type {function(): void} */
_requestPaymentObject.prototype.complete;
/** @type {string} */
_requestObject.prototype.url;
/** @type {?} */
_requestObject.prototype.data;
/** @type {!Object} */
_requestObject.prototype.header;
/** @type {string} */
_requestObject.prototype.method;
/** @type {string} */
_requestObject.prototype.dataType;
/** @type {string} */
_requestObject.prototype.responseType;
/** @type {function(!_requestSuccessObject): void} */
_requestObject.prototype.success;
/** @type {function(): void} */
_requestObject.prototype.fail;
/** @type {function(): void} */
_requestObject.prototype.complete;
/** @type {?} */
_requestSuccessObject.prototype.data;
/** @type {number} */
_requestSuccessObject.prototype.statusCode;
/** @type {!Object} */
_requestSuccessObject.prototype.header;
/** @type {number} */
_removeTabBarBadgeObject.prototype.index;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.complete;
/** @type {string} */
_removeStorageObject.prototype.key;
/** @type {function(): void} */
_removeStorageObject.prototype.success;
/** @type {function(): void} */
_removeStorageObject.prototype.fail;
/** @type {function(): void} */
_removeStorageObject.prototype.complete;
/** @type {string} */
_removeSavedFileObject.prototype.filePath;
/** @type {function(): void} */
_removeSavedFileObject.prototype.success;
/** @type {function(): void} */
_removeSavedFileObject.prototype.fail;
/** @type {function(): void} */
_removeSavedFileObject.prototype.complete;
/** @type {string} */
_redirectToObject.prototype.url;
/** @type {function(): void} */
_redirectToObject.prototype.success;
/** @type {function(): void} */
_redirectToObject.prototype.fail;
/** @type {function(): void} */
_redirectToObject.prototype.complete;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.characteristicId;
/** @type {function(!_readBLECharacteristicValueSuccessObject): void} */
_readBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.complete;
/** @type {number} */
_readBLECharacteristicValueSuccessObject.prototype.errCode;
/** @type {string} */
_readBLECharacteristicValueSuccessObject.prototype.errMsg;
/** @type {string} */
_reLaunchObject.prototype.url;
/** @type {function(): void} */
_reLaunchObject.prototype.success;
/** @type {function(): void} */
_reLaunchObject.prototype.fail;
/** @type {function(): void} */
_reLaunchObject.prototype.complete;
/** @type {string} */
_previewImageObject.prototype.current;
/** @type {?} */
_previewImageObject.prototype.urls;
/** @type {function(): void} */
_previewImageObject.prototype.success;
/** @type {function(): void} */
_previewImageObject.prototype.fail;
/** @type {function(): void} */
_previewImageObject.prototype.complete;
/** @type {string} */
_playVoiceObject.prototype.filePath;
/** @type {number} */
_playVoiceObject.prototype.duration;
/** @type {function(): void} */
_playVoiceObject.prototype.success;
/** @type {function(): void} */
_playVoiceObject.prototype.fail;
/** @type {function(): void} */
_playVoiceObject.prototype.complete;
/** @type {string} */
_playBackgroundAudioObject.prototype.dataUrl;
/** @type {string} */
_playBackgroundAudioObject.prototype.title;
/** @type {string} */
_playBackgroundAudioObject.prototype.coverImgUrl;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.complete;
/** @type {number} */
_pageScrollToObject.prototype.scrollTop;
/** @type {number} */
_pageScrollToObject.prototype.duration;
/** @type {function(!_openSettingSuccessObject): void} */
_openSettingObject.prototype.success;
/** @type {function(): void} */
_openSettingObject.prototype.fail;
/** @type {function(): void} */
_openSettingObject.prototype.complete;
/** @type {!Object} */
_openSettingSuccessObject.prototype.authSetting;
/** @type {?} */
_openLocationObject.prototype.latitude;
/** @type {?} */
_openLocationObject.prototype.longitude;
/** @type {?} */
_openLocationObject.prototype.scale;
/** @type {string} */
_openLocationObject.prototype.name;
/** @type {string} */
_openLocationObject.prototype.address;
/** @type {function(): void} */
_openLocationObject.prototype.success;
/** @type {function(): void} */
_openLocationObject.prototype.fail;
/** @type {function(): void} */
_openLocationObject.prototype.complete;
/** @type {?} */
_openDocumentObject.prototype.filePath;
/** @type {?} */
_openDocumentObject.prototype.fileType;
/** @type {?} */
_openDocumentObject.prototype.success;
/** @type {?} */
_openDocumentObject.prototype.fail;
/** @type {?} */
_openDocumentObject.prototype.complete;
/** @type {?} */
_openCardObject.prototype.cardList;
/** @type {function(): void} */
_openCardObject.prototype.success;
/** @type {function(): void} */
_openCardObject.prototype.fail;
/** @type {function(): void} */
_openCardObject.prototype.complete;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.complete;
/** @type {!Object} */
_onWifiConnectedCallbackResult.prototype.wifi;
/** @type {?} */
_onSocketMessageCallbackResult.prototype.data;
/** @type {boolean} */
_onNetworkStatusChangeCallbackResult.prototype.isConnected;
/** @type {string} */
_onNetworkStatusChangeCallbackResult.prototype.networkType;
/** @type {number} */
_onHCEMessageCallbackResult.prototype.messageType;
/** @type {?} */
_onHCEMessageCallbackResult.prototype.data;
/** @type {number} */
_onHCEMessageCallbackResult.prototype.reason;
/** @type {?} */
_onGetWifiListCallbackResult.prototype.wifiList;
/** @type {!Object} */
_onEvaluateWifiCallbackResult.prototype.wifi;
/** @type {number} */
_onCompassChangeCallbackResult.prototype.direction;
/** @type {?} */
_onBluetoothDeviceFoundCallbackResult.prototype.devices;
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.discovering;
/** @type {?} */
_onBeaconUpdateCallbackResult.prototype.beacons;
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.discovering;
/** @type {string} */
_onBLEConnectionStateChangeCallbackResult.prototype.deviceId;
/** @type {boolean} */
_onBLEConnectionStateChangeCallbackResult.prototype.connected;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.deviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.serviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.characteristicId;
/** @type {?} */
_onBLECharacteristicValueChangeCallbackResult.prototype.value;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.x;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.y;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.z;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.deviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.serviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.characteristicId;
/** @type {boolean} */
_notifyBLECharacteristicValueChangeObject.prototype.state;
/** @type {function(!_notifyBLECharacteristicValueChangeSuccessObject): void} */
_notifyBLECharacteristicValueChangeObject.prototype.success;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.fail;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.complete;
/** @type {string} */
_notifyBLECharacteristicValueChangeSuccessObject.prototype.errMsg;
/** @type {string} */
_navigateToMiniProgramObject.prototype.appId;
/** @type {string} */
_navigateToMiniProgramObject.prototype.path;
/** @type {!Object} */
_navigateToMiniProgramObject.prototype.extraData;
/** @type {string} */
_navigateToMiniProgramObject.prototype.envVersion;
/** @type {function(!_navigateToMiniProgramSuccessObject): void} */
_navigateToMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.complete;
/** @type {string} */
_navigateToMiniProgramSuccessObject.prototype.errMsg;
/** @type {string} */
_navigateToObject.prototype.url;
/** @type {function(): void} */
_navigateToObject.prototype.success;
/** @type {function(): void} */
_navigateToObject.prototype.fail;
/** @type {function(): void} */
_navigateToObject.prototype.complete;
/** @type {!Object} */
_navigateBackMiniProgramObject.prototype.extraData;
/** @type {function(!_navigateBackMiniProgramSuccessObject): void} */
_navigateBackMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.complete;
/** @type {string} */
_navigateBackMiniProgramSuccessObject.prototype.errMsg;
/** @type {number} */
_navigateBackObject.prototype.delta;
/** @type {boolean} */
_makeVoIPCallObject.prototype.allowBackCamera;
/** @type {boolean} */
_makeVoIPCallObject.prototype.showOther;
/** @type {string} */
_makeVoIPCallObject.prototype.avatarUrl;
/** @type {string} */
_makeVoIPCallObject.prototype.context;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.success;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.fail;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.complete;
/** @type {string} */
_makePhoneCallObject.prototype.phoneNumber;
/** @type {function(): void} */
_makePhoneCallObject.prototype.success;
/** @type {function(): void} */
_makePhoneCallObject.prototype.fail;
/** @type {function(): void} */
_makePhoneCallObject.prototype.complete;
/** @type {string} */
_loginObject.prototype.pkgName;
/** @type {function(!_loginSuccessObject): void} */
_loginObject.prototype.success;
/** @type {function(): void} */
_loginObject.prototype.fail;
/** @type {function(): void} */
_loginObject.prototype.complete;
/** @type {string} */
_loginSuccessObject.prototype.errMsg;
/** @type {string} */
_loginSuccessObject.prototype.code;
/** @type {number} */
_hideTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.complete;
/** @type {boolean} */
_hideTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_hideTabBarObject.prototype.success;
/** @type {function(): void} */
_hideTabBarObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarObject.prototype.complete;
/** @type {function(): void} */
_hideShareMenuObject.prototype.success;
/** @type {function(): void} */
_hideShareMenuObject.prototype.fail;
/** @type {function(): void} */
_hideShareMenuObject.prototype.complete;
/** @type {function(): void} */
_getWifiListObject.prototype.success;
/** @type {function(): void} */
_getWifiListObject.prototype.fail;
/** @type {function(): void} */
_getWifiListObject.prototype.complete;
/** @type {function(!_getWeRunDataSuccessObject): void} */
_getWeRunDataObject.prototype.success;
/** @type {function(): void} */
_getWeRunDataObject.prototype.fail;
/** @type {function(): void} */
_getWeRunDataObject.prototype.complete;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.errMsg;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.encryptedData;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.iv;
/** @type {boolean} */
_getUserInfoObject.prototype.withCredentials;
/** @type {string} */
_getUserInfoObject.prototype.lang;
/** @type {function(!_getUserInfoSuccessObject): void} */
_getUserInfoObject.prototype.success;
/** @type {function(): void} */
_getUserInfoObject.prototype.fail;
/** @type {function(): void} */
_getUserInfoObject.prototype.complete;
/** @type {!Object} */
_getUserInfoSuccessObject.prototype.userInfo;
/** @type {string} */
_getUserInfoSuccessObject.prototype.rawData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.signature;
/** @type {string} */
_getUserInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.iv;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.brand;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.model;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.language;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.version;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.system;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.platform;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.SDKVersion;
/** @type {function(!_getSystemInfoSuccessObject): void} */
_getSystemInfoObject.prototype.success;
/** @type {function(): void} */
_getSystemInfoObject.prototype.fail;
/** @type {function(): void} */
_getSystemInfoObject.prototype.complete;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.brand;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.model;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.language;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.version;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.system;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.platform;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.SDKVersion;
/** @type {function(!_getStorageInfoSuccessObject): void} */
_getStorageInfoObject.prototype.success;
/** @type {function(): void} */
_getStorageInfoObject.prototype.fail;
/** @type {function(): void} */
_getStorageInfoObject.prototype.complete;
/** @type {?} */
_getStorageInfoSuccessObject.prototype.keys;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.currentSize;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.limitSize;
/** @type {string} */
_getStorageObject.prototype.key;
/** @type {function(!_getStorageSuccessObject): void} */
_getStorageObject.prototype.success;
/** @type {function(): void} */
_getStorageObject.prototype.fail;
/** @type {function(): void} */
_getStorageObject.prototype.complete;
/** @type {string} */
_getStorageSuccessObject.prototype.data;
/** @type {string} */
_getShareInfoObject.prototype.shareTicket;
/** @type {function(!_getShareInfoSuccessObject): void} */
_getShareInfoObject.prototype.success;
/** @type {function(): void} */
_getShareInfoObject.prototype.fail;
/** @type {function(): void} */
_getShareInfoObject.prototype.complete;
/** @type {string} */
_getShareInfoSuccessObject.prototype.errMsg;
/** @type {string} */
_getShareInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getShareInfoSuccessObject.prototype.iv;
/** @type {function(!_getSettingSuccessObject): void} */
_getSettingObject.prototype.success;
/** @type {function(): void} */
_getSettingObject.prototype.fail;
/** @type {function(): void} */
_getSettingObject.prototype.complete;
/** @type {!Object} */
_getSettingSuccessObject.prototype.authSetting;
/** @type {function(!_getScreenBrightnessSuccessObject): void} */
_getScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.complete;
/** @type {number} */
_getScreenBrightnessSuccessObject.prototype.value;
/** @type {function(!_getSavedFileListSuccessObject): void} */
_getSavedFileListObject.prototype.success;
/** @type {function(): void} */
_getSavedFileListObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileListObject.prototype.complete;
/** @type {string} */
_getSavedFileListSuccessObject.prototype.errMsg;
/** @type {?} */
_getSavedFileListSuccessObject.prototype.fileList;
/** @type {string} */
_getSavedFileInfoObject.prototype.filePath;
/** @type {function(!_getSavedFileInfoSuccessObject): void} */
_getSavedFileInfoObject.prototype.success;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.complete;
/** @type {string} */
_getSavedFileInfoSuccessObject.prototype.errMsg;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.size;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.createTime;
/** @type {function(!_getOpenDeviceIdSuccessObject): void} */
_getOpenDeviceIdObject.prototype.success;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.fail;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.complete;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.errMsg;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.encryptedData;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.iv;
/** @type {function(!_getNetworkTypeSuccessObject): void} */
_getNetworkTypeObject.prototype.success;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.fail;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.complete;
/** @type {?} */
_getNetworkTypeSuccessObject.prototype.networkType;
/** @type {string} */
_getLocationObject.prototype.type;
/** @type {boolean} */
_getLocationObject.prototype.altitude;
/** @type {function(!_getLocationSuccessObject): void} */
_getLocationObject.prototype.success;
/** @type {function(): void} */
_getLocationObject.prototype.fail;
/** @type {function(): void} */
_getLocationObject.prototype.complete;
/** @type {?} */
_getLocationSuccessObject.prototype.latitude;
/** @type {?} */
_getLocationSuccessObject.prototype.longitude;
/** @type {?} */
_getLocationSuccessObject.prototype.speed;
/** @type {?} */
_getLocationSuccessObject.prototype.accuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.altitude;
/** @type {?} */
_getLocationSuccessObject.prototype.verticalAccuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.horizontalAccuracy;
/** @type {string} */
_getImageInfoObject.prototype.src;
/** @type {function(!_getImageInfoSuccessObject): void} */
_getImageInfoObject.prototype.success;
/** @type {function(): void} */
_getImageInfoObject.prototype.fail;
/** @type {function(): void} */
_getImageInfoObject.prototype.complete;
/** @type {number} */
_getImageInfoSuccessObject.prototype.width;
/** @type {number} */
_getImageInfoSuccessObject.prototype.height;
/** @type {string} */
_getImageInfoSuccessObject.prototype.path;
/** @type {function(!_getHCEStateSuccessObject): void} */
_getHCEStateObject.prototype.success;
/** @type {function(): void} */
_getHCEStateObject.prototype.fail;
/** @type {function(): void} */
_getHCEStateObject.prototype.complete;
/** @type {string} */
_getHCEStateSuccessObject.prototype.errMsg;
/** @type {number} */
_getHCEStateSuccessObject.prototype.errCode;
/** @type {string} */
_getFileInfoObject.prototype.filePath;
/** @type {string} */
_getFileInfoObject.prototype.digestAlgorithm;
/** @type {function(!_getFileInfoSuccessObject): void} */
_getFileInfoObject.prototype.success;
/** @type {function(): void} */
_getFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getFileInfoObject.prototype.complete;
/** @type {number} */
_getFileInfoSuccessObject.prototype.size;
/** @type {string} */
_getFileInfoSuccessObject.prototype.digest;
/** @type {string} */
_getFileInfoSuccessObject.prototype.errMsg;
/** @type {!Object} */
_getExtConfigSyncReturnValue.prototype.extConfig;
/** @type {function(!_getExtConfigSuccessObject): void} */
_getExtConfigObject.prototype.success;
/** @type {function(): void} */
_getExtConfigObject.prototype.fail;
/** @type {function(): void} */
_getExtConfigObject.prototype.complete;
/** @type {string} */
_getExtConfigSuccessObject.prototype.errMsg;
/** @type {!Object} */
_getExtConfigSuccessObject.prototype.extConfig;
/** @type {function(!_getConnectedWifiSuccessObject): void} */
_getConnectedWifiObject.prototype.success;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.fail;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.complete;
/** @type {!Object} */
_getConnectedWifiSuccessObject.prototype.wifi;
/** @type {?} */
_getConnectedBluetoothDevicesObject.prototype.services;
/** @type {function(!_getConnectedBluetoothDevicesSuccessObject): void} */
_getConnectedBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.complete;
/** @type {?} */
_getConnectedBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getConnectedBluetoothDevicesSuccessObject.prototype.errMsg;
/** @type {function(!_getClipboardDataSuccessObject): void} */
_getClipboardDataObject.prototype.success;
/** @type {function(): void} */
_getClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_getClipboardDataObject.prototype.complete;
/** @type {string} */
_getClipboardDataSuccessObject.prototype.data;
/** @type {function(!_getBluetoothDevicesSuccessObject): void} */
_getBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.complete;
/** @type {?} */
_getBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getBluetoothDevicesSuccessObject.prototype.errMsg;
/** @type {function(!_getBluetoothAdapterStateSuccessObject): void} */
_getBluetoothAdapterStateObject.prototype.success;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.complete;
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.discovering;
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.available;
/** @type {string} */
_getBluetoothAdapterStateSuccessObject.prototype.errMsg;
/** @type {function(!_getBeaconsSuccessObject): void} */
_getBeaconsObject.prototype.success;
/** @type {function(): void} */
_getBeaconsObject.prototype.fail;
/** @type {function(): void} */
_getBeaconsObject.prototype.complete;
/** @type {?} */
_getBeaconsSuccessObject.prototype.beacons;
/** @type {string} */
_getBeaconsSuccessObject.prototype.errMsg;
/** @type {function(!_getBackgroundAudioPlayerStateSuccessObject): void} */
_getBackgroundAudioPlayerStateObject.prototype.success;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.fail;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.complete;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.duration;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.currentPosition;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.status;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.downloadPercent;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.dataUrl;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.duration;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.currentTime;
/** @type {boolean} */
_getBackgroundAudioManagerReturnValue.prototype.paused;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.src;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.startTime;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.buffered;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.title;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.epname;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.singer;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.coverImgUrl;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.webUrl;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.play;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.pause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.stop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.seek;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onCanplay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPlay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onStop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onEnded;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onTimeUpdate;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPrev;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onNext;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onError;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onWaiting;
/** @type {string} */
_getBLEDeviceServicesObject.prototype.deviceId;
/** @type {function(!_getBLEDeviceServicesSuccessObject): void} */
_getBLEDeviceServicesObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.complete;
/** @type {?} */
_getBLEDeviceServicesSuccessObject.prototype.services;
/** @type {string} */
_getBLEDeviceServicesSuccessObject.prototype.errMsg;
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.deviceId;
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.serviceId;
/** @type {function(!_getBLEDeviceCharacteristicsSuccessObject): void} */
_getBLEDeviceCharacteristicsObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.complete;
/** @type {?} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.characteristics;
/** @type {string} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.errMsg;
/** @type {string} */
_downloadFileObject.prototype.url;
/** @type {!Object} */
_downloadFileObject.prototype.header;
/** @type {string} */
_downloadFileObject.prototype.filePath;
/** @type {function(!_downloadFileSuccessObject): void} */
_downloadFileObject.prototype.success;
/** @type {function(): void} */
_downloadFileObject.prototype.fail;
/** @type {function(): void} */
_downloadFileObject.prototype.complete;
/** @type {string} */
_downloadFileSuccessObject.prototype.tempFilePath;
/** @type {number} */
_downloadFileSuccessObject.prototype.statusCode;
/** @type {string} */
_downloadFileSuccessObject.prototype.errCode;
/** @type {number} */
_downloadFileSuccessObject.prototype.errMsg;
/** @type {string} */
_createBLEConnectionObject.prototype.deviceId;
/** @type {function(!_createBLEConnectionSuccessObject): void} */
_createBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.complete;
/** @type {string} */
_createBLEConnectionSuccessObject.prototype.errMsg;
/** @type {?} */
_createAnimationObject.prototype.duration;
/** @type {string} */
_createAnimationObject.prototype.timingFunction;
/** @type {?} */
_createAnimationObject.prototype.delay;
/** @type {string} */
_createAnimationObject.prototype.transformOrigin;
/** @type {string} */
_connectWifiObject.prototype.SSID;
/** @type {string} */
_connectWifiObject.prototype.BSSID;
/** @type {string} */
_connectWifiObject.prototype.password;
/** @type {function(): void} */
_connectWifiObject.prototype.success;
/** @type {function(): void} */
_connectWifiObject.prototype.fail;
/** @type {function(): void} */
_connectWifiObject.prototype.complete;
/** @type {string} */
_connectSocketObject.prototype.url;
/** @type {!Object} */
_connectSocketObject.prototype.header;
/** @type {string} */
_connectSocketObject.prototype.method;
/** @type {?} */
_connectSocketObject.prototype.protocols;
/** @type {function(): void} */
_connectSocketObject.prototype.success;
/** @type {function(): void} */
_connectSocketObject.prototype.fail;
/** @type {function(): void} */
_connectSocketObject.prototype.complete;
/** @type {number} */
_closeSocketObject.prototype.code;
/** @type {string} */
_closeSocketObject.prototype.reason;
/** @type {function(): void} */
_closeSocketObject.prototype.success;
/** @type {function(): void} */
_closeSocketObject.prototype.fail;
/** @type {function(): void} */
_closeSocketObject.prototype.complete;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.complete;
/** @type {string} */
_closeBLEConnectionObject.prototype.deviceId;
/** @type {function(!_closeBLEConnectionSuccessObject): void} */
_closeBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.complete;
/** @type {string} */
_closeBLEConnectionSuccessObject.prototype.errMsg;
/** @type {?} */
_chooseVideoObject.prototype.sourceType;
/** @type {?} */
_chooseVideoObject.prototype.compressed;
/** @type {number} */
_chooseVideoObject.prototype.maxDuration;
/** @type {function(!_chooseVideoSuccessObject): void} */
_chooseVideoObject.prototype.success;
/** @type {function(): void} */
_chooseVideoObject.prototype.fail;
/** @type {function(): void} */
_chooseVideoObject.prototype.complete;
/** @type {?} */
_chooseVideoSuccessObject.prototype.tempFilePath;
/** @type {?} */
_chooseVideoSuccessObject.prototype.duration;
/** @type {?} */
_chooseVideoSuccessObject.prototype.size;
/** @type {?} */
_chooseVideoSuccessObject.prototype.height;
/** @type {?} */
_chooseVideoSuccessObject.prototype.width;
/** @type {function(!_chooseLocationSuccessObject): void} */
_chooseLocationObject.prototype.success;
/** @type {function(): void} */
_chooseLocationObject.prototype.fail;
/** @type {function(): void} */
_chooseLocationObject.prototype.complete;
/** @type {?} */
_chooseLocationSuccessObject.prototype.name;
/** @type {?} */
_chooseLocationSuccessObject.prototype.address;
/** @type {?} */
_chooseLocationSuccessObject.prototype.latitude;
/** @type {?} */
_chooseLocationSuccessObject.prototype.longitude;
/** @type {function(!_chooseInvoiceTitleSuccessObject): void} */
_chooseInvoiceTitleObject.prototype.success;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.fail;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.complete;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.type;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.title;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.taxNumber;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.companyAddress;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.telephone;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankName;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankAccount;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.errMsg;
/** @type {number} */
_chooseImageObject.prototype.count;
/** @type {?} */
_chooseImageObject.prototype.sizeType;
/** @type {?} */
_chooseImageObject.prototype.sourceType;
/** @type {function(!_chooseImageSuccessObject): void} */
_chooseImageObject.prototype.success;
/** @type {function(): void} */
_chooseImageObject.prototype.fail;
/** @type {function(): void} */
_chooseImageObject.prototype.complete;
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFilePaths;
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFiles;
/** @type {function(!_chooseContactSuccessObject): void} */
_chooseContactObject.prototype.success;
/** @type {function(): void} */
_chooseContactObject.prototype.fail;
/** @type {function(): void} */
_chooseContactObject.prototype.complete;
/** @type {?} */
_chooseContactSuccessObject.prototype.phoneNumber;
/** @type {?} */
_chooseContactSuccessObject.prototype.displayName;
/** @type {function(!_chooseAddressSuccessObject): void} */
_chooseAddressObject.prototype.success;
/** @type {function(): void} */
_chooseAddressObject.prototype.fail;
/** @type {function(): void} */
_chooseAddressObject.prototype.complete;
/** @type {string} */
_chooseAddressSuccessObject.prototype.errMsg;
/** @type {string} */
_chooseAddressSuccessObject.prototype.userName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.postalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.provinceName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.cityName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.countyName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.detailInfo;
/** @type {string} */
_chooseAddressSuccessObject.prototype.nationalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.telNumber;
/** @type {function(): void} */
_checkSessionObject.prototype.success;
/** @type {function(): void} */
_checkSessionObject.prototype.fail;
/** @type {function(): void} */
_checkSessionObject.prototype.complete;
/** @type {function(!_checkIsSupportSoterAuthenticationSuccessObject): void} */
_checkIsSupportSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.complete;
/** @type {?} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.supportMode;
/** @type {string} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.errMsg;
/** @type {string} */
_checkIsSoterEnrolledInDeviceObject.prototype.checkAuthMode;
/** @type {function(!_checkIsSoterEnrolledInDeviceSuccessObject): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.success;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.fail;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.complete;
/** @type {boolean} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.isEnrolled;
/** @type {string} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.errMsg;
/** @type {number} */
_canvasToTempFilePathObject.prototype.x;
/** @type {number} */
_canvasToTempFilePathObject.prototype.y;
/** @type {number} */
_canvasToTempFilePathObject.prototype.width;
/** @type {number} */
_canvasToTempFilePathObject.prototype.height;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destWidth;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destHeight;
/** @type {string} */
_canvasToTempFilePathObject.prototype.canvasId;
/** @type {string} */
_canvasToTempFilePathObject.prototype.fileType;
/** @type {number} */
_canvasToTempFilePathObject.prototype.quality;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.success;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.fail;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.complete;
/** @type {string} */
_canvasPutImageDataObject.prototype.canvasId;
/** @type {?} */
_canvasPutImageDataObject.prototype.data;
/** @type {number} */
_canvasPutImageDataObject.prototype.x;
/** @type {number} */
_canvasPutImageDataObject.prototype.y;
/** @type {number} */
_canvasPutImageDataObject.prototype.width;
/** @type {number} */
_canvasPutImageDataObject.prototype.height;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.complete;
/** @type {string} */
_canvasGetImageDataObject.prototype.canvasId;
/** @type {number} */
_canvasGetImageDataObject.prototype.x;
/** @type {number} */
_canvasGetImageDataObject.prototype.y;
/** @type {number} */
_canvasGetImageDataObject.prototype.width;
/** @type {number} */
_canvasGetImageDataObject.prototype.height;
/** @type {function(!_canvasGetImageDataSuccessObject): void} */
_canvasGetImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.complete;
/** @type {string} */
_canvasGetImageDataSuccessObject.prototype.errMsg;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.width;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.height;
/** @type {?} */
_canvasGetImageDataSuccessObject.prototype.data;
/** @type {string} */
_authorizeObject.prototype.scope;
/** @type {function(!_authorizeSuccessObject): void} */
_authorizeObject.prototype.success;
/** @type {function(): void} */
_authorizeObject.prototype.fail;
/** @type {function(): void} */
_authorizeObject.prototype.complete;
/** @type {string} */
_authorizeSuccessObject.prototype.errMsg;
/** @type {string} */
_addPhoneContactObject.prototype.photoFilePath;
/** @type {string} */
_addPhoneContactObject.prototype.nickName;
/** @type {string} */
_addPhoneContactObject.prototype.lastName;
/** @type {string} */
_addPhoneContactObject.prototype.middleName;
/** @type {string} */
_addPhoneContactObject.prototype.firstName;
/** @type {string} */
_addPhoneContactObject.prototype.remark;
/** @type {string} */
_addPhoneContactObject.prototype.mobilePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.weChatNumber;
/** @type {string} */
_addPhoneContactObject.prototype.addressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.addressState;
/** @type {string} */
_addPhoneContactObject.prototype.addressCity;
/** @type {string} */
_addPhoneContactObject.prototype.addressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.addressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.organization;
/** @type {string} */
_addPhoneContactObject.prototype.title;
/** @type {string} */
_addPhoneContactObject.prototype.workFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.workPhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.hostNumber;
/** @type {string} */
_addPhoneContactObject.prototype.email;
/** @type {string} */
_addPhoneContactObject.prototype.url;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.homeFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressPostalCode;
/** @type {function(): void} */
_addPhoneContactObject.prototype.success;
/** @type {function(): void} */
_addPhoneContactObject.prototype.fail;
/** @type {function(): void} */
_addPhoneContactObject.prototype.complete;
/** @type {?} */
_addCardObject.prototype.cardList;
/** @type {function(!_addCardSuccessObject): void} */
_addCardObject.prototype.success;
/** @type {function(): void} */
_addCardObject.prototype.fail;
/** @type {function(): void} */
_addCardObject.prototype.complete;
/** @type {?} */
_addCardSuccessObject.prototype.cardList;
/** @type {string} */
_ShareAppMessageReturnObject.prototype.title;
/** @type {string} */
_ShareAppMessageReturnObject.prototype.path;
/** @type {string} */
_AppShowOptions.prototype.path;
/** @type {!Object} */
_AppShowOptions.prototype.query;
/** @type {number} */
_AppShowOptions.prototype.scene;
/** @type {string} */
_AppShowOptions.prototype.shareTicket;
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onLaunch;
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onShow;
/** @type {function(): void} */
_AppOptions.prototype.onHide;
/** @type {function(string): void} */
_AppOptions.prototype.onError;
/**
 * @record
 * @struct
 */
function _BatteryInfo() {}
/** @type {number} */
_BatteryInfo.prototype.level;
/** @type {number} */
_BatteryInfo.prototype.isCharging;
/**
 * @record
 * @struct
 */
function _FileSystemManager() {}
/** @type {function(?): void} */
_FileSystemManager.prototype.access;
/** @type {function(string): ?} */
_FileSystemManager.prototype.accessSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.appendFile;
/** @type {function(string, ?, string=): ?} */
_FileSystemManager.prototype.appendFileSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.copyFile;
/** @type {function(string, string): boolean} */
_FileSystemManager.prototype.copyFileSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.getFileInfo;
/** @type {function(?): void} */
_FileSystemManager.prototype.mkdir;
/** @type {function(string, string): ?} */
_FileSystemManager.prototype.mkdirSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.readFile;
/** @type {function(string, string=): ?} */
_FileSystemManager.prototype.readFileSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.rename;
/** @type {function(string, string): ?} */
_FileSystemManager.prototype.renameSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.rmdir;
/** @type {function(string, boolean=): void} */
_FileSystemManager.prototype.rmdirSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.readdir;
/** @type {function(string): !Array<?>} */
_FileSystemManager.prototype.readdirSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.unlink;
/** @type {function(string): ?} */
_FileSystemManager.prototype.unlinkSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.unzip;
/** @type {function(?): void} */
_FileSystemManager.prototype.writeFile;
/** @type {function(string, ?, string=, boolean=): boolean} */
_FileSystemManager.prototype.writeFileSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.saveFile;
/** @type {function(string, string=): string} */
_FileSystemManager.prototype.saveFileSync;
/** @type {function(?): void} */
_FileSystemManager.prototype.removeSavedFile;
/** @type {function(?): void} */
_FileSystemManager.prototype.stat;
/**
 * @record
 * @struct
 */
function _LoadSubpackageTask() {}
/** @type {function(!Function): void} */
_LoadSubpackageTask.prototype.onProgressUpdate;
/**
 * @record
 * @struct
 */
function _NativeAd() {}
/** @type {function(): void} */
_NativeAd.prototype.load;
/** @type {function(): void} */
_NativeAd.prototype.destroy;
/** @type {function(!Function): void} */
_NativeAd.prototype.reportAdShow;
/** @type {function(!Function): void} */
_NativeAd.prototype.reportAdClick;
/** @type {function(!Function): void} */
_NativeAd.prototype.onLoad;
/** @type {function(!Function): void} */
_NativeAd.prototype.offLoad;
/** @type {function(!Function): void} */
_NativeAd.prototype.onError;
/** @type {function(!Function): void} */
_NativeAd.prototype.offError;
/**
 * @record
 * @struct
 */
function _InsertAd() {}
/** @type {function(): void} */
_InsertAd.prototype.load;
/** @type {function(): void} */
_InsertAd.prototype.show;
/** @type {function(): void} */
_InsertAd.prototype.destroy;
/** @type {function(!Function): void} */
_InsertAd.prototype.onLoad;
/** @type {function(!Function): void} */
_InsertAd.prototype.offLoad;
/** @type {function(!Function): void} */
_InsertAd.prototype.onShow;
/** @type {function(!Function): void} */
_InsertAd.prototype.offShow;
/** @type {function(!Function): void} */
_InsertAd.prototype.onError;
/** @type {function(!Function): void} */
_InsertAd.prototype.offError;
/**
 * @record
 * @struct
 */
function _VideoAd() {}
/** @type {function(): void} */
_VideoAd.prototype.load;
/** @type {function(): void} */
_VideoAd.prototype.show;
/** @type {function(): void} */
_VideoAd.prototype.destroy;
/** @type {function(!Function): void} */
_VideoAd.prototype.onLoad;
/** @type {function(!Function): void} */
_VideoAd.prototype.offLoad;
/** @type {function(!Function): void} */
_VideoAd.prototype.onVideoStart;
/** @type {function(!Function): void} */
_VideoAd.prototype.offVideoStart;
/** @type {function(!Function): void} */
_VideoAd.prototype.onRewarded;
/** @type {function(!Function): void} */
_VideoAd.prototype.offRewarded;
/** @type {function(!Function): void} */
_VideoAd.prototype.onError;
/** @type {function(!Function): void} */
_VideoAd.prototype.offError;
/**
 * @record
 * @struct
 */
function _BannerAd() {}
/** @type {function(): void} */
_BannerAd.prototype.show;
/** @type {function(): void} */
_BannerAd.prototype.hide;
/** @type {function(!Function): void} */
_BannerAd.prototype.onShow;
/** @type {function(!Function): void} */
_BannerAd.prototype.offShow;
/** @type {function(!Function): void} */
_BannerAd.prototype.onHide;
/** @type {function(!Function): void} */
_BannerAd.prototype.offHide;
/** @type {function(!Function): void} */
_BannerAd.prototype.onError;
/** @type {function(!Function): void} */
_BannerAd.prototype.offError;
/**
 * @record
 * @struct
 */
function _Battle() {}
/** @type {function(?): void} */
_Battle.prototype.init;
/** @type {function(?): void} */
_Battle.prototype.postGameStatus;
/** @type {function(!Function): void} */
_Battle.prototype.onGameStart;
/** @type {function(?): void} */
_Battle.prototype.quit;
/** @type {function(?): void} */
_Battle.prototype.postMessage;
/** @type {function(!Function): void} */
_Battle.prototype.onMessage;
/** @type {function(?): void} */
_Battle.prototype.writeBlackboard;
/**
 * @record
 * @struct
 */
function _DownloadTask() {}
/** @type {function(): void} */
_DownloadTask.prototype.abort;
/** @type {function(!Function): void} */
_DownloadTask.prototype.onProgressUpdate;
/** @type {?|undefined} */
PageOptions.prototype.data;
/** @type {function(!Object=): void} */
PageOptions.prototype.onLoad;
/** @type {function(): void} */
PageOptions.prototype.onReady;
/** @type {function(): void} */
PageOptions.prototype.onShow;
/** @type {function(): void} */
PageOptions.prototype.onHide;
/** @type {function(): void} */
PageOptions.prototype.onUnload;
/** @type {function(): void} */
PageOptions.prototype.onPullDownRefresh;
/** @type {function(): void} */
PageOptions.prototype.onReachBottom;
/** @type {function(): !_ShareAppMessageReturnObject} */
PageOptions.prototype.onShareAppMessage;
/** @const */
var qg = {};

/**
 * 批量添加卡券。
 * @param {!_addCardObject} object
 * @return {void}
 */
qg.addCard = function(object) {};

/**
 * 调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式，写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。
 * @param {!_addPhoneContactObject} object
 * @return {void}
 */
qg.addPhoneContact = function(object) {};

/**
 * 将 ArrayBuffer 数据转成 Base64 字符串
 * @return {void}
 */
qg.arrayBufferToBase64 = function() {};

/**
 * 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。
 * @param {!_authorizeObject} object
 * @return {void}
 */
qg.authorize = function(object) {};

/**
 * 将 Base64 字符串转成 ArrayBuffer 数据
 * @param {string} base64
 * @return {void}
 */
qg.base64ToArrayBuffer = function(base64) {};

/**
 * 判断小程序的API，回调，参数，组件等是否在当前版本可用。
 * @param {string} string
 * @return {void}
 */
qg.canIUse = function(string) {};

/**
 * 返回一个数组，用来描述 canvas 区域隐含的像素数据
 * @param {!_canvasGetImageDataObject} object
 * @return {void}
 */
qg.canvasGetImageData = function(object) {};

/**
 * 将像素数据绘制到画布的方法
 * @param {!_canvasPutImageDataObject} object
 * @return {void}
 */
qg.canvasPutImageData = function(object) {};

/**
 * 把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。
 * @this {string}
 * @param {!_canvasToTempFilePathObject} object
 * @return {void}
 */
qg.canvasToTempFilePath = function(object) {};

/**
 * 获取设备内是否录入如指纹等生物信息的接口
 * @param {!_checkIsSoterEnrolledInDeviceObject} object
 * @return {void}
 */
qg.checkIsSoterEnrolledInDevice = function(object) {};

/**
 * 获取本机支持的 SOTER 生物认证方式
 * @param {!_checkIsSupportSoterAuthenticationObject} object
 * @return {void}
 */
qg.checkIsSupportSoterAuthentication = function(object) {};

/**
 * 通过上述接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用wx.checkSession接口**检测当前用户登录态是否有效**。登录态过期后开发者可以再调用wx.login获取新的用户登录态。
 * @param {!_checkSessionObject} object
 * @return {void}
 */
qg.checkSession = function(object) {};

/**
 * 调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。
 * @param {!_chooseAddressObject} object
 * @return {void}
 */
qg.chooseAddress = function(object) {};

/**
 * 调起选择手机通讯录联系人界面，返回用户选择的联系人信息。
 * @param {!_chooseContactObject} object
 * @return {void}
 */
qg.chooseContact = function(object) {};

/**
 * 从本地相册选择图片或使用相机拍照。
 * @param {!_chooseImageObject} object
 * @return {void}
 */
qg.chooseImage = function(object) {};

/**
 * 选择用户的发票抬头。
 * @param {!_chooseInvoiceTitleObject} object
 * @return {void}
 */
qg.chooseInvoiceTitle = function(object) {};

/**
 * 打开地图选择位置。
 * @param {!_chooseLocationObject} object
 * @return {void}
 */
qg.chooseLocation = function(object) {};

/**
 * 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。
 * @param {!_chooseVideoObject} object
 * @return {void}
 */
qg.chooseVideo = function(object) {};

/**
 * 清理本地数据缓存。
 * @return {void}
 */
qg.clearStorage = function() {};

/**
 * 同步清理本地数据缓存
 * @return {void}
 */
qg.clearStorageSync = function() {};

/**
 * 断开与低功耗蓝牙设备的连接
 * @param {!_closeBLEConnectionObject} object
 * @return {void}
 */
qg.closeBLEConnection = function(object) {};

/**
 * 关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源。建议在使用小程序蓝牙流程后调用，与`wx.openBluetoothAdapter`成对调用。
 * @param {!_closeBluetoothAdapterObject} object
 * @return {void}
 */
qg.closeBluetoothAdapter = function(object) {};

/**
 * 关闭 WebSocket 连接。
 * @param {!_closeSocketObject} object
 * @return {void}
 */
qg.closeSocket = function(object) {};

/**
 * 创建一个 [WebSocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket) 连接。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_connectSocketObject} object
 * @return {void}
 */
qg.connectSocket = function(object) {};

/**
 * 连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。
 * @param {!_connectWifiObject} object
 * @return {void}
 */
qg.connectWifi = function(object) {};

/**
 * 创建一个动画实例[animation](#animation)。调用实例的方法来描述动画。最后通过动画实例的`export`方法导出动画数据传递给组件的`animation`属性。
 * @param {!_createAnimationObject} object
 * @return {void}
 */
qg.createAnimation = function(object) {};

/**
 * 创建并返回 audio 上下文 `audioContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<audio/>` 组件
 * @this {string}
 * @param {string} audioid
 * @return {void}
 */
qg.createAudioContext = function(audioid) {};

/**
 * 连接低功耗蓝牙设备。
 * @param {!_createBLEConnectionObject} object
 * @return {void}
 */
qg.createBLEConnection = function(object) {};

/**
 * 创建并返回 camera 上下文 `cameraContext` 对象，`cameraContext` 与页面的 `camera` 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 `<camera/>` 组件。
 * @this {string}
 * @return {void}
 */
qg.createCameraContext = function() {};

/**
 * 创建 canvas 绘图上下文（指定 canvasId）。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<canvas/>` 组件
 * @this {string}
 * @param {string} canvasid
 * @return {!CanvasContext}
 */
qg.createCanvasContext = function(canvasid) {};

/**
 * 创建并返回绘图上下文。
 * @return {!CanvasContext}
 */
qg.createContext = function() {};

/**
 * 创建并返回内部 audio 上下文 `innerAudioContext` 对象。
 * @return {void}
 */
qg.createInnerAudioContext = function() {};

/**
 * 操作对应的 `<live-player/>` 组件。
 * @this {string}
 * @param {string} domid
 * @return {void}
 */
qg.createLivePlayerContext = function(domid) {};

/**
 * 创建并返回 `live-pusher` 上下文 `LivePusherContext` 对象，`LivePusherContext` 与页面的 `<live-pusher />` 组件绑定，一个页面只能有一个 `live-pusher`，通过它可以操作对应的 `<live-pusher/>` 组件。
 * @return {void}
 */
qg.createLivePusherContext = function() {};

/**
 * 创建并返回 map 上下文 `mapContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<map/>` 组件
 * @this {string}
 * @param {string} mapid
 * @return {void}
 */
qg.createMapContext = function(mapid) {};

/**
 * undefined
 * @return {void}
 */
qg.createSelectorQuery = function() {};

/**
 * 创建并返回 video 上下文 `videoContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<video/>` 组件
 * @this {string}
 * @param {string} videoid
 * @return {void}
 */
qg.createVideoContext = function(videoid) {};

/**
 * 下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地临时路径。
 * @param {!_downloadFileObject} object
 * @return {!_DownloadTask}
 */
qg.downloadFile = function(object) {};

/**
 * 蓝牙设备characteristic(特征值)信息
 * @param {!_getBLEDeviceCharacteristicsObject} object
 * @return {void}
 */
qg.getBLEDeviceCharacteristics = function(object) {};

/**
 * 获取蓝牙设备所有 service（服务）
 * @param {!_getBLEDeviceServicesObject} object
 * @return {void}
 */
qg.getBLEDeviceServices = function(object) {};

/**
 * 获取**全局唯一**的背景音频管理器 `backgroundAudioManager`。
 * @return {!_getBackgroundAudioManagerReturnValue}
 */
qg.getBackgroundAudioManager = function() {};

/**
 * 获取后台音乐播放状态。
 * @param {!_getBackgroundAudioPlayerStateObject} object
 * @return {void}
 */
qg.getBackgroundAudioPlayerState = function(object) {};

/**
 * 获取所有已搜索到的`iBeacon`设备
 * @param {!_getBeaconsObject} object
 * @return {void}
 */
qg.getBeacons = function(object) {};

/**
 * 获取本机蓝牙适配器状态
 * @param {!_getBluetoothAdapterStateObject} object
 * @return {void}
 */
qg.getBluetoothAdapterState = function(object) {};

/**
 * 获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。
 * @param {!_getBluetoothDevicesObject} object
 * @return {void}
 */
qg.getBluetoothDevices = function(object) {};

/**
 * 获取系统剪贴板内容
 * @param {!_getClipboardDataObject} object
 * @return {void}
 */
qg.getClipboardData = function(object) {};

/**
 * 根据 uuid 获取处于已连接状态的设备
 * @param {!_getConnectedBluetoothDevicesObject} object
 * @return {void}
 */
qg.getConnectedBluetoothDevices = function(object) {};

/**
 * 获取已连接中的 Wi-Fi 信息
 * @param {!_getConnectedWifiObject} object
 * @return {void}
 */
qg.getConnectedWifi = function(object) {};

/**
 * 获取第三方平台自定义的数据字段。
 * @param {!_getExtConfigObject} object
 * @return {void}
 */
qg.getExtConfig = function(object) {};

/**
 * 获取第三方平台自定义的数据字段的同步接口。
 * @return {!_getExtConfigSyncReturnValue}
 */
qg.getExtConfigSync = function() {};

/**
 * 获取文件信息
 * @param {!_getFileInfoObject} object
 * @return {void}
 */
qg.getFileInfo = function(object) {};

/**
 * 判断当前设备是否支持 HCE 能力。
 * @param {!_getHCEStateObject} object
 * @return {void}
 */
qg.getHCEState = function(object) {};

/**
 * 获取图片信息
 * @param {!_getImageInfoObject} object
 * @return {void}
 */
qg.getImageInfo = function(object) {};

/**
 * 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。
 * @param {!_getLocationObject} object
 * @return {void}
 */
qg.getLocation = function(object) {};

/**
 * 获取网络类型。
 * @param {!_getNetworkTypeObject} object
 * @return {void}
 */
qg.getNetworkType = function(object) {};

/**
 * 获取微信替设备生成的唯一标识，用于判断设备是否更换。获取的数据为AES加密数据，需要自行解密。
 * @param {!_getOpenDeviceIdObject} object
 * @return {void}
 */
qg.getOpenDeviceId = function(object) {};

/**
 * 获取**全局唯一**的录音管理器 `recorderManager`。
 * @return {void}
 */
qg.getRecorderManager = function() {};

/**
 * 获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 [wx.getFileInfo](./getFileInfo.md) 接口。
 * @param {!_getSavedFileInfoObject} object
 * @return {void}
 */
qg.getSavedFileInfo = function(object) {};

/**
 * 获取本地已保存的文件列表
 * @param {!_getSavedFileListObject} object
 * @return {void}
 */
qg.getSavedFileList = function(object) {};

/**
 * 获取屏幕亮度。
 * @param {!_getScreenBrightnessObject} object
 * @return {void}
 */
qg.getScreenBrightness = function(object) {};

/**
 * 获取用户的当前设置。
 * @param {!_getSettingObject} object
 * @return {void}
 */
qg.getSetting = function(object) {};

/**
 * 获取转发详细信息
 * @param {!_getShareInfoObject} object
 * @return {void}
 */
qg.getShareInfo = function(object) {};

/**
 * 从本地缓存中异步获取指定 key 对应的内容。
 * @param {!_getStorageObject} object
 * @return {void}
 */
qg.getStorage = function(object) {};

/**
 * 异步获取当前storage的相关信息
 * @param {!_getStorageInfoObject} object
 * @return {void}
 */
qg.getStorageInfo = function(object) {};

/**
 * 同步获取当前storage的相关信息
 * @return {void}
 */
qg.getStorageInfoSync = function() {};

/**
 * 从本地缓存中同步获取指定 key 对应的内容。
 * @param {string} key
 * @return {void}
 */
qg.getStorageSync = function(key) {};

/**
 * 获取系统信息。
 * @param {!_getSystemInfoObject} object
 * @return {void}
 */
qg.getSystemInfo = function(object) {};

/**
 * 获取系统信息同步接口
 * @return {!_getSystemInfoSyncReturnValue}
 */
qg.getSystemInfoSync = function() {};

/**
 * 获取用户信息，withCredentials 为 true 时需要先调用 [wx.login](./api-login.md#wxloginobject) 接口。
 * @param {!_getUserInfoObject} object
 * @return {void}
 */
qg.getUserInfo = function(object) {};

/**
 * 获取用户过去三十天微信运动步数，需要先调用 [wx.login](./api-login.md#wxloginobject) 接口。
 * @param {!_getWeRunDataObject} object
 * @return {void}
 */
qg.getWeRunData = function(object) {};

/**
 * 请求获取 Wi-Fi 列表，在 `onGetWifiList` 注册的回调中返回 wifiList 数据。iOS 将跳转到系统的 Wi-Fi 界面，Android 不会跳转。
 * @param {!_getWifiListObject} object
 * @return {void}
 */
qg.getWifiList = function(object) {};

/**
 * 隐藏 loading 提示框
 * @return {void}
 */
qg.hideLoading = function() {};

/**
 * 隐藏导航条加载动画。
 * @return {void}
 */
qg.hideNavigationBarLoading = function() {};

/**
 * 隐藏转发按钮
 * @param {!_hideShareMenuObject} object
 * @return {void}
 */
qg.hideShareMenu = function(object) {};

/**
 * 隐藏 tabBar
 * @param {!_hideTabBarObject} object
 * @return {void}
 */
qg.hideTabBar = function(object) {};

/**
 * 隐藏 tabBar 某一项的右上角的红点
 * @param {!_hideTabBarRedDotObject} object
 * @return {void}
 */
qg.hideTabBarRedDot = function(object) {};

/**
 * 隐藏消息提示框
 * @return {void}
 */
qg.hideToast = function() {};

/**
 * 调用接口获取**登录凭证（token）**进而换取用户登录态信息，包括用户的**唯一标识（uid）**等。
 * @param {!_loginObject} object
 * @return {void}
 */
qg.login = function(object) {};

/**
 * wx.makePhoneCall({
 * @param {!_makePhoneCallObject} object
 * @return {void}
 */
qg.makePhoneCall = function(object) {};

/**
 * 调起 VoIP 音视频通话界面。
 * @param {!_makeVoIPCallObject} object
 * @return {void}
 */
qg.makeVoIPCall = function(object) {};

/**
 * 关闭当前页面，返回上一页面或多级页面。可通过 [`getCurrentPages()`](../framework/app-service/page.md#getCurrentPages()) 获取当前的页面栈，决定需要返回几层。
 * @param {!_navigateBackObject} object
 * @return {void}
 */
qg.navigateBack = function(object) {};

/**
 * 返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功
 * @param {!_navigateBackMiniProgramObject} object
 * @return {void}
 */
qg.navigateBackMiniProgram = function(object) {};

/**
 * 保留当前页面，跳转到应用内的某个页面，使用`wx.navigateBack`可以返回到原页面。
 * @param {!_navigateToObject} object
 * @return {void}
 */
qg.navigateTo = function(object) {};

/**
 * 打开同一公众号下关联的另一个小程序。**（注：必须是同一公众号下，而非同个 open 账号下）**
 * @param {!_navigateToMiniProgramObject} object
 * @return {void}
 */
qg.navigateToMiniProgram = function(object) {};

/**
 * 启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持`notify`或者`indicate`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_notifyBLECharacteristicValueChangeObject} object
 * @return {void}
 */
qg.notifyBLECharacteristicValueChange = function(object) {};

/**
 * 监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 `wx.stopAccelerometer` 停止监听。
 * @param {function(?, ?, ?): void} callback
 * @return {void}
 */
qg.onAccelerometerChange = function(callback) {};

/**
 * 监听低功耗蓝牙设备的特征值变化。必须先启用`notify`接口才能接收到设备推送的notification。
 * @param {function(!_onBLECharacteristicValueChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onBLECharacteristicValueChange = function(callback) {};

/**
 * 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。
 * @param {function(!_onBLEConnectionStateChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onBLEConnectionStateChange = function(callback) {};

/**
 * 监听音乐暂停。
 * @param {string} callback
 * @return {void}
 */
qg.onBackgroundAudioPause = function(callback) {};

/**
 * 监听音乐播放。
 * @param {string} callback
 * @return {void}
 */
qg.onBackgroundAudioPlay = function(callback) {};

/**
 * 监听音乐停止。
 * @param {string} callback
 * @return {void}
 */
qg.onBackgroundAudioStop = function(callback) {};

/**
 * 监听 `iBeacon` 服务的状态变化
 * @param {function(!_onBeaconServiceChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onBeaconServiceChange = function(callback) {};

/**
 * 监听 `iBeacon` 设备的更新事件
 * @param {function(!_onBeaconUpdateCallbackResult): void} callback
 * @return {void}
 */
qg.onBeaconUpdate = function(callback) {};

/**
 * 监听蓝牙适配器状态变化事件
 * @param {function(!_onBluetoothAdapterStateChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onBluetoothAdapterStateChange = function(callback) {};

/**
 * 监听寻找到新设备的事件
 * @param {function(!_onBluetoothDeviceFoundCallbackResult): void} callback
 * @return {void}
 */
qg.onBluetoothDeviceFound = function(callback) {};

/**
 * 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用`wx.stopCompass`停止监听。
 * @param {function(!_onCompassChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onCompassChange = function(callback) {};

/**
 * 监听需要评估连上的 Wi-Fi 的请求，在回调里必须返回 `confidence` 字段
 * @param {function(!_onEvaluateWifiCallbackResult): void} callback
 * @return {void}
 */
qg.onEvaluateWifi = function(callback) {};

/**
 * 监听在获取到 Wi-Fi 列表数据时的事件，在回调中将返回 wifiList。
 * @param {function(!_onGetWifiListCallbackResult): void} callback
 * @return {void}
 */
qg.onGetWifiList = function(callback) {};

/**
 * 监听 NFC 设备的消息回调，并在回调中处理。返回参数中 `messageType` 表示消息类型，目前有如下值：
 * @param {function(!_onHCEMessageCallbackResult): void} callback
 * @return {void}
 */
qg.onHCEMessage = function(callback) {};

/**
 * 监听网络状态变化。
 * @param {function(!_onNetworkStatusChangeCallbackResult): void} callback
 * @return {void}
 */
qg.onNetworkStatusChange = function(callback) {};

/**
 * 监听WebSocket关闭。
 * @param {string} callback
 * @return {void}
 */
qg.onSocketClose = function(callback) {};

/**
 * 监听WebSocket错误。
 * @param {string} callback
 * @return {void}
 */
qg.onSocketError = function(callback) {};

/**
 * 监听WebSocket接受到服务器的消息事件。
 * @param {function(!_onSocketMessageCallbackResult): void} callback
 * @return {void}
 */
qg.onSocketMessage = function(callback) {};

/**
 * 监听WebSocket连接打开事件。
 * @param {string} callback
 * @return {void}
 */
qg.onSocketOpen = function(callback) {};

/**
 * 监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件
 * @param {function(!_onUserCaptureScreenCallbackResult): void} callback
 * @return {void}
 */
qg.onUserCaptureScreen = function(callback) {};

/**
 * 监听连接上 Wi-Fi 的事件。
 * @param {function(!_onWifiConnectedCallbackResult): void} callback
 * @return {void}
 */
qg.onWifiConnected = function(callback) {};

/**
 * 初始化小程序蓝牙模块，生效周期为调用`wx.openBluetoothAdapter`至调用`wx.closeBluetoothAdapter`或小程序被销毁为止。
 * @param {!_openBluetoothAdapterObject} object
 * @return {void}
 */
qg.openBluetoothAdapter = function(object) {};

/**
 * 查看微信卡包中的卡券。
 * @param {!_openCardObject} object
 * @return {void}
 */
qg.openCard = function(object) {};

/**
 * 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx
 * @param {!_openDocumentObject} object
 * @return {void}
 */
qg.openDocument = function(object) {};

/**
 * ​使用微信内置地图查看位置。
 * @param {!_openLocationObject} object
 * @return {void}
 */
qg.openLocation = function(object) {};

/**
 * 调起客户端小程序设置界面，返回用户设置的操作结果。
 * @param {!_openSettingObject} object
 * @return {void}
 */
qg.openSetting = function(object) {};

/**
 * 将页面滚动到目标位置。
 * @param {!_pageScrollToObject} object
 * @return {void}
 */
qg.pageScrollTo = function(object) {};

/**
 * 暂停播放音乐。
 * @return {void}
 */
qg.pauseBackgroundAudio = function() {};

/**
 * 暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 wx.stopVoice。
 * @return {void}
 */
qg.pauseVoice = function() {};

/**
 * 使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。
 * @param {!_playBackgroundAudioObject} object
 * @return {void}
 */
qg.playBackgroundAudio = function(object) {};

/**
 * 开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。
 * @param {!_playVoiceObject} object
 * @return {void}
 */
qg.playVoice = function(object) {};

/**
 * 预览图片。
 * @param {!_previewImageObject} object
 * @return {void}
 */
qg.previewImage = function(object) {};

/**
 * 关闭所有页面，打开到应用内的某个页面。
 * @param {!_reLaunchObject} object
 * @return {void}
 */
qg.reLaunch = function(object) {};

/**
 * 读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持`read`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_readBLECharacteristicValueObject} object
 * @return {void}
 */
qg.readBLECharacteristicValue = function(object) {};

/**
 * 关闭当前页面，跳转到应用内的某个页面。
 * @param {!_redirectToObject} object
 * @return {void}
 */
qg.redirectTo = function(object) {};

/**
 * 删除本地存储的文件
 * @param {!_removeSavedFileObject} object
 * @return {void}
 */
qg.removeSavedFile = function(object) {};

/**
 * 从本地缓存中异步移除指定 key 。
 * @param {!_removeStorageObject} object
 * @return {void}
 */
qg.removeStorage = function(object) {};

/**
 * 从本地缓存中同步移除指定 key 。
 * @param {string} key
 * @return {void}
 */
qg.removeStorageSync = function(key) {};

/**
 * 移除 tabBar 某一项右上角的文本
 * @param {!_removeTabBarBadgeObject} object
 * @return {void}
 */
qg.removeTabBarBadge = function(object) {};

/**
 * 自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。
 * @param {string} eventname
 * @param {string} data
 * @return {void}
 */
qg.reportAnalytics = function(eventname, data) {};

/**
 * 发起网络请求。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_requestObject} object
 * @return {void}
 */
qg.request = function(object) {};

/**
 * 保存文件到本地。**注意：saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用**
 * @param {!_saveFileObject} object
 * @return {void}
 */
qg.saveFile = function(object) {};

/**
 * 保存图片到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveImageToPhotosAlbumObject} object
 * @return {void}
 */
qg.saveImageToPhotosAlbum = function(object) {};

/**
 * 保存视频到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveVideoToPhotosAlbumObject} object
 * @return {void}
 */
qg.saveVideoToPhotosAlbum = function(object) {};

/**
 * 调起客户端扫码界面，扫码成功后返回对应的结果
 * @param {!_scanCodeObject} object
 * @return {void}
 */
qg.scanCode = function(object) {};

/**
 * 控制音乐播放进度。
 * @param {!_seekBackgroundAudioObject} object
 * @return {void}
 */
qg.seekBackgroundAudio = function(object) {};

/**
 * 发送 NFC 消息。仅在安卓系统下有效。
 * @param {!_sendHCEMessageObject} object
 * @return {void}
 */
qg.sendHCEMessage = function(object) {};

/**
 * 通过 WebSocket 连接发送数据，需要先 [wx.connectSocket](#wxconnectsocketobject)，并在 [wx.onSocketOpen](#wxonsocketopencallback) 回调之后才能发送。
 * @param {!_sendSocketMessageObject} object
 * @return {void}
 */
qg.sendSocketMessage = function(object) {};

/**
 * 设置系统剪贴板的内容
 * @param {!_setClipboardDataObject} object
 * @return {void}
 */
qg.setClipboardData = function(object) {};

/**
 * 设置是否打开调试开关，此开关对正式版也能生效。
 * @param {!_setEnableDebugObject} object
 * @return {void}
 */
qg.setEnableDebug = function(object) {};

/**
 * 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
 * @param {!_setKeepScreenOnObject} object
 * @return {void}
 */
qg.setKeepScreenOn = function(object) {};

/**
 * wx.setNavigationBarColor({
 * @param {!_setNavigationBarColorObject} object
 * @return {void}
 */
qg.setNavigationBarColor = function(object) {};

/**
 * 动态设置当前页面的标题。
 * @param {!_setNavigationBarTitleObject} object
 * @return {void}
 */
qg.setNavigationBarTitle = function(object) {};

/**
 * 设置屏幕亮度。
 * @param {!_setScreenBrightnessObject} object
 * @return {void}
 */
qg.setScreenBrightness = function(object) {};

/**
 * 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。
 * @param {!_setStorageObject} object
 * @return {void}
 */
qg.setStorage = function(object) {};

/**
 * 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。
 * @param {string} key
 * @return {void}
 */
qg.setStorageSync = function(key) {};

/**
 * 为 tabBar 某一项的右上角添加文本
 * @param {!_setTabBarBadgeObject} object
 * @return {void}
 */
qg.setTabBarBadge = function(object) {};

/**
 * 动态设置 tabBar 某一项的内容
 * @param {!_setTabBarItemObject} object
 * @return {void}
 */
qg.setTabBarItem = function(object) {};

/**
 * 动态设置 tabBar 的整体样式
 * @param {!_setTabBarStyleObject} object
 * @return {void}
 */
qg.setTabBarStyle = function(object) {};

/**
 * 动态设置置顶栏文字内容，只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容。**注意：调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg："setTopBarText: fail invoke too frequently"**
 * @param {!_setTopBarTextObject} object
 * @return {void}
 */
qg.setTopBarText = function(object) {};

/**
 * 在 `onGetWifiList` 回调后，利用接口设置 wifiList 中 AP 的相关信息。
 * @param {!_setWifiListObject} object
 * @return {void}
 */
qg.setWifiList = function(object) {};

/**
 * ​显示操作菜单
 * @param {!_showActionSheetObject} object
 * @return {void}
 */
qg.showActionSheet = function(object) {};

/**
 * 显示 loading 提示框, 需主动调用 [wx.hideLoading](#wxhideloading) 才能关闭提示框
 * @param {!_showLoadingObject} object
 * @return {void}
 */
qg.showLoading = function(object) {};

/**
 * ​显示模态弹窗
 * @param {!_showModalObject} object
 * @return {void}
 */
qg.showModal = function(object) {};

/**
 * 在当前页面显示导航条加载动画。
 * @return {void}
 */
qg.showNavigationBarLoading = function() {};

/**
 * 显示当前页面的转发按钮
 * @param {!_showShareMenuObject} object
 * @return {void}
 */
qg.showShareMenu = function(object) {};

/**
 * 显示 tabBar
 * @param {!_showTabBarObject} object
 * @return {void}
 */
qg.showTabBar = function(object) {};

/**
 * 显示 tabBar 某一项的右上角的红点
 * @param {!_showTabBarRedDotObject} object
 * @return {void}
 */
qg.showTabBarRedDot = function(object) {};

/**
 * 显示消息提示框
 * @param {!_showToastObject} object
 * @return {void}
 */
qg.showToast = function(object) {};

/**
 * 开始监听加速度数据。
 * @param {!_startAccelerometerObject} object
 * @return {void}
 */
qg.startAccelerometer = function(object) {};

/**
 * 开始搜索附近的`iBeacon`设备
 * @param {!_startBeaconDiscoveryObject} object
 * @return {void}
 */
qg.startBeaconDiscovery = function(object) {};

/**
 * 开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。
 * @param {!_startBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
qg.startBluetoothDevicesDiscovery = function(object) {};

/**
 * 开始监听罗盘数据。
 * @param {!_startCompassObject} object
 * @return {void}
 */
qg.startCompass = function(object) {};

/**
 * 初始化 NFC 模块。
 * @param {!_startHCEObject} object
 * @return {void}
 */
qg.startHCE = function(object) {};

/**
 * 开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致
 * @param {!_startPullDownRefreshObject} object
 * @return {void}
 */
qg.startPullDownRefresh = function(object) {};

/**
 * 开始录音。当主动调用`wx.stopRecord`，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。
 * @param {!_startRecordObject} object
 * @return {void}
 */
qg.startRecord = function(object) {};

/**
 * 开始 SOTER 生物认证
 * @param {!_startSoterAuthenticationObject} object
 * @return {void}
 */
qg.startSoterAuthentication = function(object) {};

/**
 * 初始化 Wi-Fi 模块。
 * @param {!_startWifiObject} object
 * @return {void}
 */
qg.startWifi = function(object) {};

/**
 * 停止监听加速度数据。
 * @param {!_stopAccelerometerObject} object
 * @return {void}
 */
qg.stopAccelerometer = function(object) {};

/**
 * 停止播放音乐。
 * @return {void}
 */
qg.stopBackgroundAudio = function() {};

/**
 * 停止搜索附近的`iBeacon`设备
 * @param {!_stopBeaconDiscoveryObject} object
 * @return {void}
 */
qg.stopBeaconDiscovery = function(object) {};

/**
 * 停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。
 * @param {!_stopBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
qg.stopBluetoothDevicesDiscovery = function(object) {};

/**
 * 停止监听罗盘数据。
 * @param {!_stopCompassObject} object
 * @return {void}
 */
qg.stopCompass = function(object) {};

/**
 * 关闭 NFC 模块。仅在安卓系统下有效。
 * @param {!_stopHCEObject} object
 * @return {void}
 */
qg.stopHCE = function(object) {};

/**
 * 停止当前页面下拉刷新。
 * @return {void}
 */
qg.stopPullDownRefresh = function() {};

/**
 * ​主动调用停止录音。
 * @return {void}
 */
qg.stopRecord = function() {};

/**
 * 结束播放语音。
 * @return {void}
 */
qg.stopVoice = function() {};

/**
 * 关闭 Wi-Fi 模块。
 * @param {!_stopWifiObject} object
 * @return {void}
 */
qg.stopWifi = function(object) {};

/**
 * 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
 * @param {!_switchTabObject} object
 * @return {void}
 */
qg.switchTab = function(object) {};

/**
 * 更新转发属性
 * @param {!_updateShareMenuObject} object
 * @return {void}
 */
qg.updateShareMenu = function(object) {};

/**
 * 将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 `content-type` 为 `multipart/form-data` 。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_uploadFileObject} object
 * @return {void}
 */
qg.uploadFile = function(object) {};

/**
 * 使手机发生较长时间的振动（400ms）
 * @param {!_vibrateLongObject} object
 * @return {void}
 */
qg.vibrateLong = function(object) {};

/**
 * 使手机发生较短时间的振动（15ms）
 * @param {!_vibrateShortObject} object
 * @return {void}
 */
qg.vibrateShort = function(object) {};

/**
 * 
 * 监听主域发送的消息
 * @param {!Function} callback
 * @return {void}
 */
qg.onMessage = function(callback) {};

/**
 * 拉取当前用户所有同玩好友的托管数据。该接口只可在开放数据域下使用
 * @param {?} object
 * @return {void}
 */
qg.getFriendCloudStorage = function(object) {};

/**
 * 对用户托管数据进行写数据操作。允许同时写多组 KV 数据。
 * @param {?} object
 * @return {void}
 */
qg.setUserCloudStorage = function(object) {};

/**
 * 向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持`write`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_writeBLECharacteristicValueObject} object
 * @return {void}
 */
qg.writeBLECharacteristicValue = function(object) {};

/**
 * 获取一个对战对象
 * @return {!_Battle}
 */
qg.getBattle = function() {};

/**
 * 设置游戏加载进度页面。如果游戏加载起来后3秒内没有调用setLoadingProgress，会自动关闭游戏加载进度页面。为了用户体验统一，务必在游戏加载后第一时间调用setLoadingProgress({progress: 0})，随后再传回真实的加载进度。
 * @param {?} object
 * @return {void}
 */
qg.setLoadingProgress = function(object) {};

/**
 * 支持最低平台版本号'1031' (minPlatformVersion>='1031')
 * 隐藏游戏加载进度页面
 * @param {?} object
 * @return {void}
 */
qg.loadingComplete = function(object) {};

/**
 * 发起微信支付。
 * @param {!_requestPaymentObject} object
 * @return {void}
 */
qg.requestPayment = function(object) {};

/**
 * 发起支付。
 * @param {!_requestPaymentObject} object
 * @return {void}
 */
qg.pay = function(object) {};

/**
 * 初始化广告服务，在应用生命周期中，只需要初始化一次，在这里可以指定是否打开广告组件 Log，传入分配的广告 AppId
 * @param {?} object
 * @return {void}
 */
qg.initAdService = function(object) {};

/**
 * 创建 Banner 广告组件，如果已经创建过 Banner 广告组件，则会使用已创建的广告组件对象
 * @param {?} object
 * @return {!_BannerAd}
 */
qg.createBannerAd = function(object) {};

/**
 * **确保广告服务已经初始化完毕**
 * 创建激励视频广告组件，同一个 posId，如果已经创建，并且未 destroy，会复用之前的对象
 * @param {?} object
 * @return {!_VideoAd}
 */
qg.createRewardedVideoAd = function(object) {};

/**
 * **确保广告服务已经初始化完毕**
 * 创建插屏广告组件，同一个 posId，如果已经创建，并且未 destroy，会复用之前的对象
 * @param {?} object
 * @return {!_InsertAd}
 */
qg.createInsertAd = function(object) {};

/**
 * **确保广告服务已经初始化完毕**
 * 原生广告是 cp 通过封装好的接口获取广告数据，根据实际场景自由选择绘制和展示方式的广告，更加灵活。 需要注意的是，每个原生广告组件对象只有一次有效曝光，一次有效点击。 同一个 posId，如果已经创建，并且未 destroy，会复用之前的对象。
 * @param {?} object
 * @return {!_NativeAd}
 */
qg.createNativeAd = function(object) {};

/**
 * 加载游戏子包。注意：主包或子包不能引用未加载的包中的模块。
 * @param {?} object
 * @return {!_LoadSubpackageTask}
 */
qg.loadSubpackage = function(object) {};

/**
 * 文件系统是小游戏提供的一套以小游戏和用户维度隔离的存储以及一套相应的管理接口。cp 使用文件系统来保存数据不必关心数据实际保存在硬盘(或者光盘)的地址为多少的数据块上。只需记住这个文件的所属目录和文件名。通过 qg.getFileSystemManager() 获取全局唯一的文件管理器，返回的是 FileSystemManager 文件管理器对象,所有的文件系统的管理操作通过 FileSystemManager (文件管理器对象)来调用。
 * @return {!_FileSystemManager}
 */
qg.getFileSystemManager = function() {};

/**
 * 获取设备电量
 * @param {?} object
 * @return {void}
 */
qg.getBatteryInfo = function(object) {};

/**
 * getBatteryInfo() 的同步版本，获取设备电量。
 * @param {?} object
 * @return {!_BatteryInfo}
 */
qg.getBatteryInfoSync = function(object) {};

/**
 * 监听音频中断结束，在收到 onAudioInterruptionBegin 事件之后，OPPO小游戏内所有音频会暂停，收到此事件之后才可再次播放成功
 * @param {!Function} callback
 * @return {void}
 */
qg.onAudioInterruptionEnd = function(callback) {};

/**
 * 取消监听音频中断结束，在收到 onAudioInterruptionBegin 事件之后，OPPO小游戏内所有音频会暂停，收到此事件之后才可再次播放成功
 * @param {!Function} callback
 * @return {void}
 */
qg.offAudioInterruptionEnd = function(callback) {};

/**
 * 监听音频因为受到系统占用而被中断开始，以下场景会触发此事件：闹钟、电话、FaceTime 通话。此事件触发后，OPPO小游戏内所有音频会暂停。
 * @param {!Function} callback
 * @return {void}
 */
qg.onAudioInterruptionBegin = function(callback) {};

/**
 * 取消监听音频因为受到系统占用而被中断开始，以下场景会触发此事件：闹钟、电话、FaceTime 通话。此事件触发后，OPPO小游戏内所有音频会暂停。
 * @param {!Function} callback
 * @return {void}
 */
qg.offAudioInterruptionBegin = function(callback) {};

/**
 * 监听全局错误事件
 * @param {!Function} callback
 * @return {void}
 */
qg.onError = function(callback) {};

/**
 * 取消监听全局错误事件
 * @param {!Function} callback
 * @return {void}
 */
qg.offError = function(callback) {};

/**
 * 退出当前 OPPO 小游戏
 * @param {?} object
 * @return {void}
 */
qg.exitApplication = function(object) {};

/**
 * 返回 OPPO 小游戏启动参数
 * @return {?}
 */
qg.getLaunchOptionsSync = function() {};

/**
 * 监听 OPPO 小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面等操作会触发此事件。
 * @param {!Function} callback
 * @return {?}
 */
qg.onHide = function(callback) {};

/**
 * 取消监听 OPPO 小游戏隐藏到后台事件。锁屏、按 HOME 键退到桌面、显示在聊天顶部等操作会触发此事件。
 * @param {!Function} callback
 * @return {?}
 */
qg.offHide = function(callback) {};

/**
 * 监听 OPPO 小游戏回到前台的事件
 * @param {!Function} callback
 * @return {?}
 */
qg.onShow = function(callback) {};

/**
 * 取消监听 OPPO 小游戏回到前台的事件
 * @param {!Function} callback
 * @return {?}
 */
qg.offShow = function(callback) {};

/**
 * 获取性能管理器
 * @return {?}
 */
qg.getPerformance = function() {};

/**
 * 加快触发 JavaScript VM 进行（垃圾回收），GC 时机是由 JavaScript VM 来控制的，并不能保证调用后马上触发 GC。
 * @return {void}
 */
qg.triggerGC = function() {};

/**
 * 获取一行文本的行高
 * @param {?} object
 * @return {void}
 */
qg.getTextLineHeight = function(object) {};
// Generated from: C:/workspace/ClosureCompilerJS/libs/wx.d.ts
/** @type {function(): void} */
CanvasContext.prototype.addColorStop;
/** @type {function(): void} */
CanvasContext.prototype.arc;
/** @type {function(): void} */
CanvasContext.prototype.beginPath;
/** @type {function(): void} */
CanvasContext.prototype.bezierCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.clearActions;
/** @type {function(): void} */
CanvasContext.prototype.clearRect;
/** @type {function(): void} */
CanvasContext.prototype.clip;
/** @type {function(): void} */
CanvasContext.prototype.closePath;
/** @type {function(): void} */
CanvasContext.prototype.createCircularGradient;
/** @type {function(): void} */
CanvasContext.prototype.createLinearGradient;
/** @type {function(): void} */
CanvasContext.prototype.draw;
/** @type {function(): void} */
CanvasContext.prototype.drawImage;
/** @type {function(): void} */
CanvasContext.prototype.fill;
/** @type {function(): void} */
CanvasContext.prototype.fillRect;
/** @type {function(): void} */
CanvasContext.prototype.fillText;
/** @type {function(): void} */
CanvasContext.prototype.lineTo;
/** @type {function(): void} */
CanvasContext.prototype.moveTo;
/** @type {function(): void} */
CanvasContext.prototype.quadraticCurveTo;
/** @type {function(): void} */
CanvasContext.prototype.rect;
/** @type {function(): void} */
CanvasContext.prototype.rotate;
/** @type {function(): void} */
CanvasContext.prototype.save;
/** @type {function(): void} */
CanvasContext.prototype.scale;
/** @type {function(): void} */
CanvasContext.prototype.setFillStyle;
/** @type {function(): void} */
CanvasContext.prototype.setFontSize;
/** @type {function(): void} */
CanvasContext.prototype.setGlobalAlpha;
/** @type {function(): void} */
CanvasContext.prototype.setLineCap;
/** @type {function(): void} */
CanvasContext.prototype.setLineDash;
/** @type {function(): void} */
CanvasContext.prototype.setLineJoin;
/** @type {function(): void} */
CanvasContext.prototype.setLineWidth;
/** @type {function(): void} */
CanvasContext.prototype.setMiterLimit;
/** @type {function(): void} */
CanvasContext.prototype.setShadow;
/** @type {function(): void} */
CanvasContext.prototype.setStrokeStyle;
/** @type {function(): void} */
CanvasContext.prototype.setTextAlign;
/** @type {function(): void} */
CanvasContext.prototype.setTextBaseline;
/** @type {function(): void} */
CanvasContext.prototype.stroke;
/** @type {function(): void} */
CanvasContext.prototype.strokeRect;
/** @type {function(): void} */
CanvasContext.prototype.translate;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_writeBLECharacteristicValueObject.prototype.characteristicId;
/** @type {?} */
_writeBLECharacteristicValueObject.prototype.value;
/** @type {function(!_writeBLECharacteristicValueSuccessObject): void} */
_writeBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_writeBLECharacteristicValueObject.prototype.complete;
/** @type {string} */
_writeBLECharacteristicValueSuccessObject.prototype.errMsg;
/** @type {function(): void} */
_vibrateShortObject.prototype.success;
/** @type {function(): void} */
_vibrateShortObject.prototype.fail;
/** @type {function(): void} */
_vibrateShortObject.prototype.complete;
/** @type {function(): void} */
_vibrateLongObject.prototype.success;
/** @type {function(): void} */
_vibrateLongObject.prototype.fail;
/** @type {function(): void} */
_vibrateLongObject.prototype.complete;
/** @type {string} */
_uploadFileObject.prototype.url;
/** @type {string} */
_uploadFileObject.prototype.filePath;
/** @type {string} */
_uploadFileObject.prototype.name;
/** @type {!Object} */
_uploadFileObject.prototype.header;
/** @type {!Object} */
_uploadFileObject.prototype.formData;
/** @type {function(!_uploadFileSuccessObject): void} */
_uploadFileObject.prototype.success;
/** @type {function(): void} */
_uploadFileObject.prototype.fail;
/** @type {function(): void} */
_uploadFileObject.prototype.complete;
/** @type {string} */
_uploadFileSuccessObject.prototype.data;
/** @type {number} */
_uploadFileSuccessObject.prototype.statusCode;
/** @type {boolean} */
_updateShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_updateShareMenuObject.prototype.success;
/** @type {function(): void} */
_updateShareMenuObject.prototype.fail;
/** @type {function(): void} */
_updateShareMenuObject.prototype.complete;
/** @type {string} */
_switchTabObject.prototype.url;
/** @type {function(): void} */
_switchTabObject.prototype.success;
/** @type {function(): void} */
_switchTabObject.prototype.fail;
/** @type {function(): void} */
_switchTabObject.prototype.complete;
/** @type {function(): void} */
_stopWifiObject.prototype.success;
/** @type {function(): void} */
_stopWifiObject.prototype.fail;
/** @type {function(): void} */
_stopWifiObject.prototype.complete;
/** @type {function(!_stopHCESuccessObject): void} */
_stopHCEObject.prototype.success;
/** @type {function(): void} */
_stopHCEObject.prototype.fail;
/** @type {function(): void} */
_stopHCEObject.prototype.complete;
/** @type {string} */
_stopHCESuccessObject.prototype.errMsg;
/** @type {number} */
_stopHCESuccessObject.prototype.errCode;
/** @type {function(): void} */
_stopCompassObject.prototype.success;
/** @type {function(): void} */
_stopCompassObject.prototype.fail;
/** @type {function(): void} */
_stopCompassObject.prototype.complete;
/** @type {function(!_stopBluetoothDevicesDiscoverySuccessObject): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBluetoothDevicesDiscoveryObject.prototype.complete;
/** @type {string} */
_stopBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/** @type {function(!_stopBeaconDiscoverySuccessObject): void} */
_stopBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_stopBeaconDiscoveryObject.prototype.complete;
/** @type {string} */
_stopBeaconDiscoverySuccessObject.prototype.errMsg;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.success;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_stopAccelerometerObject.prototype.complete;
/** @type {function(): void} */
_startWifiObject.prototype.success;
/** @type {function(): void} */
_startWifiObject.prototype.fail;
/** @type {function(): void} */
_startWifiObject.prototype.complete;
/** @type {?} */
_startSoterAuthenticationObject.prototype.requestAuthModes;
/** @type {string} */
_startSoterAuthenticationObject.prototype.challenge;
/** @type {string} */
_startSoterAuthenticationObject.prototype.authContent;
/** @type {function(!_startSoterAuthenticationSuccessObject): void} */
_startSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_startSoterAuthenticationObject.prototype.complete;
/** @type {number} */
_startSoterAuthenticationSuccessObject.prototype.errCode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.authMode;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSON;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.resultJSONSignature;
/** @type {string} */
_startSoterAuthenticationSuccessObject.prototype.errMsg;
/** @type {function(!_startRecordSuccessObject): void} */
_startRecordObject.prototype.success;
/** @type {function(): void} */
_startRecordObject.prototype.fail;
/** @type {function(): void} */
_startRecordObject.prototype.complete;
/** @type {?} */
_startRecordSuccessObject.prototype.tempFilePath;
/** @type {function(!_startPullDownRefreshSuccessObject): void} */
_startPullDownRefreshObject.prototype.success;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.fail;
/** @type {function(): void} */
_startPullDownRefreshObject.prototype.complete;
/** @type {string} */
_startPullDownRefreshSuccessObject.prototype.errMsg;
/** @type {?} */
_startHCEObject.prototype.aid_list;
/** @type {function(!_startHCESuccessObject): void} */
_startHCEObject.prototype.success;
/** @type {function(): void} */
_startHCEObject.prototype.fail;
/** @type {function(): void} */
_startHCEObject.prototype.complete;
/** @type {string} */
_startHCESuccessObject.prototype.errMsg;
/** @type {number} */
_startHCESuccessObject.prototype.errCode;
/** @type {function(): void} */
_startCompassObject.prototype.success;
/** @type {function(): void} */
_startCompassObject.prototype.fail;
/** @type {function(): void} */
_startCompassObject.prototype.complete;
/** @type {?} */
_startBluetoothDevicesDiscoveryObject.prototype.services;
/** @type {boolean} */
_startBluetoothDevicesDiscoveryObject.prototype.allowDuplicatesKey;
/** @type {number} */
_startBluetoothDevicesDiscoveryObject.prototype.interval;
/** @type {function(!_startBluetoothDevicesDiscoverySuccessObject): void} */
_startBluetoothDevicesDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBluetoothDevicesDiscoveryObject.prototype.complete;
/** @type {string} */
_startBluetoothDevicesDiscoverySuccessObject.prototype.errMsg;
/** @type {?} */
_startBeaconDiscoveryObject.prototype.uuids;
/** @type {function(!_startBeaconDiscoverySuccessObject): void} */
_startBeaconDiscoveryObject.prototype.success;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.fail;
/** @type {function(): void} */
_startBeaconDiscoveryObject.prototype.complete;
/** @type {string} */
_startBeaconDiscoverySuccessObject.prototype.errMsg;
/** @type {function(): void} */
_startAccelerometerObject.prototype.success;
/** @type {function(): void} */
_startAccelerometerObject.prototype.fail;
/** @type {function(): void} */
_startAccelerometerObject.prototype.complete;
/** @type {string} */
_showToastObject.prototype.title;
/** @type {string} */
_showToastObject.prototype.icon;
/** @type {string} */
_showToastObject.prototype.image;
/** @type {number} */
_showToastObject.prototype.duration;
/** @type {boolean} */
_showToastObject.prototype.mask;
/** @type {function(): void} */
_showToastObject.prototype.success;
/** @type {function(): void} */
_showToastObject.prototype.fail;
/** @type {function(): void} */
_showToastObject.prototype.complete;
/** @type {number} */
_showTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_showTabBarRedDotObject.prototype.complete;
/** @type {boolean} */
_showTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_showTabBarObject.prototype.success;
/** @type {function(): void} */
_showTabBarObject.prototype.fail;
/** @type {function(): void} */
_showTabBarObject.prototype.complete;
/** @type {boolean} */
_showShareMenuObject.prototype.withShareTicket;
/** @type {function(): void} */
_showShareMenuObject.prototype.success;
/** @type {function(): void} */
_showShareMenuObject.prototype.fail;
/** @type {function(): void} */
_showShareMenuObject.prototype.complete;
/** @type {string} */
_showModalObject.prototype.title;
/** @type {string} */
_showModalObject.prototype.content;
/** @type {boolean} */
_showModalObject.prototype.showCancel;
/** @type {string} */
_showModalObject.prototype.cancelText;
/** @type {?} */
_showModalObject.prototype.cancelColor;
/** @type {string} */
_showModalObject.prototype.confirmText;
/** @type {?} */
_showModalObject.prototype.confirmColor;
/** @type {function(!_showModalSuccessObject): void} */
_showModalObject.prototype.success;
/** @type {function(): void} */
_showModalObject.prototype.fail;
/** @type {function(): void} */
_showModalObject.prototype.complete;
/** @type {boolean} */
_showModalSuccessObject.prototype.confirm;
/** @type {boolean} */
_showModalSuccessObject.prototype.cancel;
/** @type {string} */
_showLoadingObject.prototype.title;
/** @type {boolean} */
_showLoadingObject.prototype.mask;
/** @type {function(): void} */
_showLoadingObject.prototype.success;
/** @type {function(): void} */
_showLoadingObject.prototype.fail;
/** @type {function(): void} */
_showLoadingObject.prototype.complete;
/** @type {?} */
_showActionSheetObject.prototype.itemList;
/** @type {?} */
_showActionSheetObject.prototype.itemColor;
/** @type {function(!_showActionSheetSuccessObject): void} */
_showActionSheetObject.prototype.success;
/** @type {function(): void} */
_showActionSheetObject.prototype.fail;
/** @type {function(): void} */
_showActionSheetObject.prototype.complete;
/** @type {number} */
_showActionSheetSuccessObject.prototype.tapIndex;
/** @type {?} */
_setWifiListObject.prototype.wifiList;
/** @type {function(): void} */
_setWifiListObject.prototype.success;
/** @type {function(): void} */
_setWifiListObject.prototype.fail;
/** @type {function(): void} */
_setWifiListObject.prototype.complete;
/** @type {string} */
_setTopBarTextObject.prototype.text;
/** @type {function(): void} */
_setTopBarTextObject.prototype.success;
/** @type {function(): void} */
_setTopBarTextObject.prototype.fail;
/** @type {function(): void} */
_setTopBarTextObject.prototype.complete;
/** @type {?} */
_setTabBarStyleObject.prototype.color;
/** @type {?} */
_setTabBarStyleObject.prototype.selectedColor;
/** @type {?} */
_setTabBarStyleObject.prototype.backgroundColor;
/** @type {string} */
_setTabBarStyleObject.prototype.borderStyle;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.success;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.fail;
/** @type {function(): void} */
_setTabBarStyleObject.prototype.complete;
/** @type {number} */
_setTabBarItemObject.prototype.index;
/** @type {string} */
_setTabBarItemObject.prototype.text;
/** @type {string} */
_setTabBarItemObject.prototype.iconPath;
/** @type {string} */
_setTabBarItemObject.prototype.selectedIconPath;
/** @type {function(): void} */
_setTabBarItemObject.prototype.success;
/** @type {function(): void} */
_setTabBarItemObject.prototype.fail;
/** @type {function(): void} */
_setTabBarItemObject.prototype.complete;
/** @type {number} */
_setTabBarBadgeObject.prototype.index;
/** @type {string} */
_setTabBarBadgeObject.prototype.text;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_setTabBarBadgeObject.prototype.complete;
/** @type {string} */
_setStorageObject.prototype.key;
/** @type {?} */
_setStorageObject.prototype.data;
/** @type {function(): void} */
_setStorageObject.prototype.success;
/** @type {function(): void} */
_setStorageObject.prototype.fail;
/** @type {function(): void} */
_setStorageObject.prototype.complete;
/** @type {number} */
_setScreenBrightnessObject.prototype.value;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_setScreenBrightnessObject.prototype.complete;
/** @type {string} */
_setNavigationBarTitleObject.prototype.title;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarTitleObject.prototype.complete;
/** @type {string} */
_setNavigationBarColorObject.prototype.frontColor;
/** @type {string} */
_setNavigationBarColorObject.prototype.backgroundColor;
/** @type {!Object} */
_setNavigationBarColorObject.prototype.animation;
/** @type {function(!_setNavigationBarColorSuccessObject): void} */
_setNavigationBarColorObject.prototype.success;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.fail;
/** @type {function(): void} */
_setNavigationBarColorObject.prototype.complete;
/** @type {string} */
_setNavigationBarColorSuccessObject.prototype.errMsg;
/** @type {boolean} */
_setKeepScreenOnObject.prototype.keepScreenOn;
/** @type {function(!_setKeepScreenOnSuccessObject): void} */
_setKeepScreenOnObject.prototype.success;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.fail;
/** @type {function(): void} */
_setKeepScreenOnObject.prototype.complete;
/** @type {string} */
_setKeepScreenOnSuccessObject.prototype.errMsg;
/** @type {boolean} */
_setEnableDebugObject.prototype.enableDebug;
/** @type {function(!_setEnableDebugSuccessObject): void} */
_setEnableDebugObject.prototype.success;
/** @type {function(): void} */
_setEnableDebugObject.prototype.fail;
/** @type {function(): void} */
_setEnableDebugObject.prototype.complete;
/** @type {string} */
_setEnableDebugSuccessObject.prototype.errMsg;
/** @type {string} */
_setClipboardDataObject.prototype.data;
/** @type {function(): void} */
_setClipboardDataObject.prototype.success;
/** @type {function(): void} */
_setClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_setClipboardDataObject.prototype.complete;
/** @type {?} */
_sendSocketMessageObject.prototype.data;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.success;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.fail;
/** @type {function(): void} */
_sendSocketMessageObject.prototype.complete;
/** @type {?} */
_sendHCEMessageObject.prototype.data;
/** @type {function(!_sendHCEMessageSuccessObject): void} */
_sendHCEMessageObject.prototype.success;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.fail;
/** @type {function(): void} */
_sendHCEMessageObject.prototype.complete;
/** @type {string} */
_sendHCEMessageSuccessObject.prototype.errMsg;
/** @type {number} */
_sendHCEMessageSuccessObject.prototype.errCode;
/** @type {number} */
_seekBackgroundAudioObject.prototype.position;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_seekBackgroundAudioObject.prototype.complete;
/** @type {boolean} */
_scanCodeObject.prototype.onlyFromCamera;
/** @type {?} */
_scanCodeObject.prototype.scanType;
/** @type {function(!_scanCodeSuccessObject): void} */
_scanCodeObject.prototype.success;
/** @type {function(): void} */
_scanCodeObject.prototype.fail;
/** @type {function(): void} */
_scanCodeObject.prototype.complete;
/** @type {?} */
_scanCodeSuccessObject.prototype.result;
/** @type {?} */
_scanCodeSuccessObject.prototype.scanType;
/** @type {?} */
_scanCodeSuccessObject.prototype.charSet;
/** @type {?} */
_scanCodeSuccessObject.prototype.path;
/** @type {string} */
_saveVideoToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveVideoToPhotosAlbumSuccessObject): void} */
_saveVideoToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveVideoToPhotosAlbumObject.prototype.complete;
/** @type {string} */
_saveVideoToPhotosAlbumSuccessObject.prototype.errMsg;
/** @type {string} */
_saveImageToPhotosAlbumObject.prototype.filePath;
/** @type {function(!_saveImageToPhotosAlbumSuccessObject): void} */
_saveImageToPhotosAlbumObject.prototype.success;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.fail;
/** @type {function(): void} */
_saveImageToPhotosAlbumObject.prototype.complete;
/** @type {string} */
_saveImageToPhotosAlbumSuccessObject.prototype.errMsg;
/** @type {string} */
_saveFileObject.prototype.tempFilePath;
/** @type {function(!_saveFileSuccessObject): void} */
_saveFileObject.prototype.success;
/** @type {function(): void} */
_saveFileObject.prototype.fail;
/** @type {function(): void} */
_saveFileObject.prototype.complete;
/** @type {?} */
_saveFileSuccessObject.prototype.savedFilePath;
/** @type {string} */
_requestPaymentObject.prototype.timeStamp;
/** @type {string} */
_requestPaymentObject.prototype.nonceStr;
/** @type {string} */
_requestPaymentObject.prototype.package;
/** @type {string} */
_requestPaymentObject.prototype.signType;
/** @type {string} */
_requestPaymentObject.prototype.paySign;
/** @type {function(): void} */
_requestPaymentObject.prototype.success;
/** @type {function(): void} */
_requestPaymentObject.prototype.fail;
/** @type {function(): void} */
_requestPaymentObject.prototype.complete;
/** @type {string} */
_requestObject.prototype.url;
/** @type {?} */
_requestObject.prototype.data;
/** @type {!Object} */
_requestObject.prototype.header;
/** @type {string} */
_requestObject.prototype.method;
/** @type {string} */
_requestObject.prototype.dataType;
/** @type {string} */
_requestObject.prototype.responseType;
/** @type {function(!_requestSuccessObject): void} */
_requestObject.prototype.success;
/** @type {function(): void} */
_requestObject.prototype.fail;
/** @type {function(): void} */
_requestObject.prototype.complete;
/** @type {?} */
_requestSuccessObject.prototype.data;
/** @type {number} */
_requestSuccessObject.prototype.statusCode;
/** @type {!Object} */
_requestSuccessObject.prototype.header;
/** @type {number} */
_removeTabBarBadgeObject.prototype.index;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.success;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.fail;
/** @type {function(): void} */
_removeTabBarBadgeObject.prototype.complete;
/** @type {string} */
_removeStorageObject.prototype.key;
/** @type {function(): void} */
_removeStorageObject.prototype.success;
/** @type {function(): void} */
_removeStorageObject.prototype.fail;
/** @type {function(): void} */
_removeStorageObject.prototype.complete;
/** @type {string} */
_removeSavedFileObject.prototype.filePath;
/** @type {function(): void} */
_removeSavedFileObject.prototype.success;
/** @type {function(): void} */
_removeSavedFileObject.prototype.fail;
/** @type {function(): void} */
_removeSavedFileObject.prototype.complete;
/** @type {string} */
_redirectToObject.prototype.url;
/** @type {function(): void} */
_redirectToObject.prototype.success;
/** @type {function(): void} */
_redirectToObject.prototype.fail;
/** @type {function(): void} */
_redirectToObject.prototype.complete;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.deviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.serviceId;
/** @type {string} */
_readBLECharacteristicValueObject.prototype.characteristicId;
/** @type {function(!_readBLECharacteristicValueSuccessObject): void} */
_readBLECharacteristicValueObject.prototype.success;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.fail;
/** @type {function(): void} */
_readBLECharacteristicValueObject.prototype.complete;
/** @type {number} */
_readBLECharacteristicValueSuccessObject.prototype.errCode;
/** @type {string} */
_readBLECharacteristicValueSuccessObject.prototype.errMsg;
/** @type {string} */
_reLaunchObject.prototype.url;
/** @type {function(): void} */
_reLaunchObject.prototype.success;
/** @type {function(): void} */
_reLaunchObject.prototype.fail;
/** @type {function(): void} */
_reLaunchObject.prototype.complete;
/** @type {string} */
_previewImageObject.prototype.current;
/** @type {?} */
_previewImageObject.prototype.urls;
/** @type {function(): void} */
_previewImageObject.prototype.success;
/** @type {function(): void} */
_previewImageObject.prototype.fail;
/** @type {function(): void} */
_previewImageObject.prototype.complete;
/** @type {string} */
_playVoiceObject.prototype.filePath;
/** @type {number} */
_playVoiceObject.prototype.duration;
/** @type {function(): void} */
_playVoiceObject.prototype.success;
/** @type {function(): void} */
_playVoiceObject.prototype.fail;
/** @type {function(): void} */
_playVoiceObject.prototype.complete;
/** @type {string} */
_playBackgroundAudioObject.prototype.dataUrl;
/** @type {string} */
_playBackgroundAudioObject.prototype.title;
/** @type {string} */
_playBackgroundAudioObject.prototype.coverImgUrl;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.success;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.fail;
/** @type {function(): void} */
_playBackgroundAudioObject.prototype.complete;
/** @type {number} */
_pageScrollToObject.prototype.scrollTop;
/** @type {number} */
_pageScrollToObject.prototype.duration;
/** @type {function(!_openSettingSuccessObject): void} */
_openSettingObject.prototype.success;
/** @type {function(): void} */
_openSettingObject.prototype.fail;
/** @type {function(): void} */
_openSettingObject.prototype.complete;
/** @type {!Object} */
_openSettingSuccessObject.prototype.authSetting;
/** @type {?} */
_openLocationObject.prototype.latitude;
/** @type {?} */
_openLocationObject.prototype.longitude;
/** @type {?} */
_openLocationObject.prototype.scale;
/** @type {string} */
_openLocationObject.prototype.name;
/** @type {string} */
_openLocationObject.prototype.address;
/** @type {function(): void} */
_openLocationObject.prototype.success;
/** @type {function(): void} */
_openLocationObject.prototype.fail;
/** @type {function(): void} */
_openLocationObject.prototype.complete;
/** @type {?} */
_openDocumentObject.prototype.filePath;
/** @type {?} */
_openDocumentObject.prototype.fileType;
/** @type {?} */
_openDocumentObject.prototype.success;
/** @type {?} */
_openDocumentObject.prototype.fail;
/** @type {?} */
_openDocumentObject.prototype.complete;
/** @type {?} */
_openCardObject.prototype.cardList;
/** @type {function(): void} */
_openCardObject.prototype.success;
/** @type {function(): void} */
_openCardObject.prototype.fail;
/** @type {function(): void} */
_openCardObject.prototype.complete;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_openBluetoothAdapterObject.prototype.complete;
/** @type {!Object} */
_onWifiConnectedCallbackResult.prototype.wifi;
/** @type {?} */
_onSocketMessageCallbackResult.prototype.data;
/** @type {boolean} */
_onNetworkStatusChangeCallbackResult.prototype.isConnected;
/** @type {string} */
_onNetworkStatusChangeCallbackResult.prototype.networkType;
/** @type {number} */
_onHCEMessageCallbackResult.prototype.messageType;
/** @type {?} */
_onHCEMessageCallbackResult.prototype.data;
/** @type {number} */
_onHCEMessageCallbackResult.prototype.reason;
/** @type {?} */
_onGetWifiListCallbackResult.prototype.wifiList;
/** @type {!Object} */
_onEvaluateWifiCallbackResult.prototype.wifi;
/** @type {number} */
_onCompassChangeCallbackResult.prototype.direction;
/** @type {?} */
_onBluetoothDeviceFoundCallbackResult.prototype.devices;
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBluetoothAdapterStateChangeCallbackResult.prototype.discovering;
/** @type {?} */
_onBeaconUpdateCallbackResult.prototype.beacons;
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.available;
/** @type {boolean} */
_onBeaconServiceChangeCallbackResult.prototype.discovering;
/** @type {string} */
_onBLEConnectionStateChangeCallbackResult.prototype.deviceId;
/** @type {boolean} */
_onBLEConnectionStateChangeCallbackResult.prototype.connected;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.deviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.serviceId;
/** @type {string} */
_onBLECharacteristicValueChangeCallbackResult.prototype.characteristicId;
/** @type {?} */
_onBLECharacteristicValueChangeCallbackResult.prototype.value;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.x;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.y;
/** @type {number} */
_onAccelerometerChangeCallbackResult.prototype.z;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.deviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.serviceId;
/** @type {string} */
_notifyBLECharacteristicValueChangeObject.prototype.characteristicId;
/** @type {boolean} */
_notifyBLECharacteristicValueChangeObject.prototype.state;
/** @type {function(!_notifyBLECharacteristicValueChangeSuccessObject): void} */
_notifyBLECharacteristicValueChangeObject.prototype.success;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.fail;
/** @type {function(): void} */
_notifyBLECharacteristicValueChangeObject.prototype.complete;
/** @type {string} */
_notifyBLECharacteristicValueChangeSuccessObject.prototype.errMsg;
/** @type {string} */
_navigateToMiniProgramObject.prototype.appId;
/** @type {string} */
_navigateToMiniProgramObject.prototype.path;
/** @type {!Object} */
_navigateToMiniProgramObject.prototype.extraData;
/** @type {string} */
_navigateToMiniProgramObject.prototype.envVersion;
/** @type {function(!_navigateToMiniProgramSuccessObject): void} */
_navigateToMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateToMiniProgramObject.prototype.complete;
/** @type {string} */
_navigateToMiniProgramSuccessObject.prototype.errMsg;
/** @type {string} */
_navigateToObject.prototype.url;
/** @type {function(): void} */
_navigateToObject.prototype.success;
/** @type {function(): void} */
_navigateToObject.prototype.fail;
/** @type {function(): void} */
_navigateToObject.prototype.complete;
/** @type {!Object} */
_navigateBackMiniProgramObject.prototype.extraData;
/** @type {function(!_navigateBackMiniProgramSuccessObject): void} */
_navigateBackMiniProgramObject.prototype.success;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.fail;
/** @type {function(): void} */
_navigateBackMiniProgramObject.prototype.complete;
/** @type {string} */
_navigateBackMiniProgramSuccessObject.prototype.errMsg;
/** @type {number} */
_navigateBackObject.prototype.delta;
/** @type {boolean} */
_makeVoIPCallObject.prototype.allowBackCamera;
/** @type {boolean} */
_makeVoIPCallObject.prototype.showOther;
/** @type {string} */
_makeVoIPCallObject.prototype.avatarUrl;
/** @type {string} */
_makeVoIPCallObject.prototype.context;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.success;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.fail;
/** @type {function(): void} */
_makeVoIPCallObject.prototype.complete;
/** @type {string} */
_makePhoneCallObject.prototype.phoneNumber;
/** @type {function(): void} */
_makePhoneCallObject.prototype.success;
/** @type {function(): void} */
_makePhoneCallObject.prototype.fail;
/** @type {function(): void} */
_makePhoneCallObject.prototype.complete;
/** @type {function(!_loginSuccessObject): void} */
_loginObject.prototype.success;
/** @type {function(): void} */
_loginObject.prototype.fail;
/** @type {function(): void} */
_loginObject.prototype.complete;
/** @type {string} */
_loginSuccessObject.prototype.errMsg;
/** @type {string} */
_loginSuccessObject.prototype.code;
/** @type {number} */
_hideTabBarRedDotObject.prototype.index;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.success;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarRedDotObject.prototype.complete;
/** @type {boolean} */
_hideTabBarObject.prototype.aniamtion;
/** @type {function(): void} */
_hideTabBarObject.prototype.success;
/** @type {function(): void} */
_hideTabBarObject.prototype.fail;
/** @type {function(): void} */
_hideTabBarObject.prototype.complete;
/** @type {function(): void} */
_hideShareMenuObject.prototype.success;
/** @type {function(): void} */
_hideShareMenuObject.prototype.fail;
/** @type {function(): void} */
_hideShareMenuObject.prototype.complete;
/** @type {function(): void} */
_getWifiListObject.prototype.success;
/** @type {function(): void} */
_getWifiListObject.prototype.fail;
/** @type {function(): void} */
_getWifiListObject.prototype.complete;
/** @type {function(!_getWeRunDataSuccessObject): void} */
_getWeRunDataObject.prototype.success;
/** @type {function(): void} */
_getWeRunDataObject.prototype.fail;
/** @type {function(): void} */
_getWeRunDataObject.prototype.complete;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.errMsg;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.encryptedData;
/** @type {string} */
_getWeRunDataSuccessObject.prototype.iv;
/** @type {boolean} */
_getUserInfoObject.prototype.withCredentials;
/** @type {string} */
_getUserInfoObject.prototype.lang;
/** @type {function(!_getUserInfoSuccessObject): void} */
_getUserInfoObject.prototype.success;
/** @type {function(): void} */
_getUserInfoObject.prototype.fail;
/** @type {function(): void} */
_getUserInfoObject.prototype.complete;
/** @type {!Object} */
_getUserInfoSuccessObject.prototype.userInfo;
/** @type {string} */
_getUserInfoSuccessObject.prototype.rawData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.signature;
/** @type {string} */
_getUserInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getUserInfoSuccessObject.prototype.iv;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.brand;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.model;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.language;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.version;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.system;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.platform;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSyncReturnValue.prototype.SDKVersion;
/** @type {function(!_getSystemInfoSuccessObject): void} */
_getSystemInfoObject.prototype.success;
/** @type {function(): void} */
_getSystemInfoObject.prototype.fail;
/** @type {function(): void} */
_getSystemInfoObject.prototype.complete;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.brand;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.model;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.pixelRatio;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.screenHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowWidth;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.windowHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.statusBarHeight;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.language;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.version;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.system;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.platform;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.fontSizeSetting;
/** @type {?} */
_getSystemInfoSuccessObject.prototype.SDKVersion;
/** @type {function(!_getStorageInfoSuccessObject): void} */
_getStorageInfoObject.prototype.success;
/** @type {function(): void} */
_getStorageInfoObject.prototype.fail;
/** @type {function(): void} */
_getStorageInfoObject.prototype.complete;
/** @type {?} */
_getStorageInfoSuccessObject.prototype.keys;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.currentSize;
/** @type {number} */
_getStorageInfoSuccessObject.prototype.limitSize;
/** @type {string} */
_getStorageObject.prototype.key;
/** @type {function(!_getStorageSuccessObject): void} */
_getStorageObject.prototype.success;
/** @type {function(): void} */
_getStorageObject.prototype.fail;
/** @type {function(): void} */
_getStorageObject.prototype.complete;
/** @type {string} */
_getStorageSuccessObject.prototype.data;
/** @type {string} */
_getShareInfoObject.prototype.shareTicket;
/** @type {function(!_getShareInfoSuccessObject): void} */
_getShareInfoObject.prototype.success;
/** @type {function(): void} */
_getShareInfoObject.prototype.fail;
/** @type {function(): void} */
_getShareInfoObject.prototype.complete;
/** @type {string} */
_getShareInfoSuccessObject.prototype.errMsg;
/** @type {string} */
_getShareInfoSuccessObject.prototype.encryptedData;
/** @type {string} */
_getShareInfoSuccessObject.prototype.iv;
/** @type {function(!_getSettingSuccessObject): void} */
_getSettingObject.prototype.success;
/** @type {function(): void} */
_getSettingObject.prototype.fail;
/** @type {function(): void} */
_getSettingObject.prototype.complete;
/** @type {!Object} */
_getSettingSuccessObject.prototype.authSetting;
/** @type {function(!_getScreenBrightnessSuccessObject): void} */
_getScreenBrightnessObject.prototype.success;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.fail;
/** @type {function(): void} */
_getScreenBrightnessObject.prototype.complete;
/** @type {number} */
_getScreenBrightnessSuccessObject.prototype.value;
/** @type {function(!_getSavedFileListSuccessObject): void} */
_getSavedFileListObject.prototype.success;
/** @type {function(): void} */
_getSavedFileListObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileListObject.prototype.complete;
/** @type {string} */
_getSavedFileListSuccessObject.prototype.errMsg;
/** @type {?} */
_getSavedFileListSuccessObject.prototype.fileList;
/** @type {string} */
_getSavedFileInfoObject.prototype.filePath;
/** @type {function(!_getSavedFileInfoSuccessObject): void} */
_getSavedFileInfoObject.prototype.success;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getSavedFileInfoObject.prototype.complete;
/** @type {string} */
_getSavedFileInfoSuccessObject.prototype.errMsg;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.size;
/** @type {number} */
_getSavedFileInfoSuccessObject.prototype.createTime;
/** @type {function(!_getOpenDeviceIdSuccessObject): void} */
_getOpenDeviceIdObject.prototype.success;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.fail;
/** @type {function(): void} */
_getOpenDeviceIdObject.prototype.complete;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.errMsg;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.encryptedData;
/** @type {string} */
_getOpenDeviceIdSuccessObject.prototype.iv;
/** @type {function(!_getNetworkTypeSuccessObject): void} */
_getNetworkTypeObject.prototype.success;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.fail;
/** @type {function(): void} */
_getNetworkTypeObject.prototype.complete;
/** @type {?} */
_getNetworkTypeSuccessObject.prototype.networkType;
/** @type {string} */
_getLocationObject.prototype.type;
/** @type {boolean} */
_getLocationObject.prototype.altitude;
/** @type {function(!_getLocationSuccessObject): void} */
_getLocationObject.prototype.success;
/** @type {function(): void} */
_getLocationObject.prototype.fail;
/** @type {function(): void} */
_getLocationObject.prototype.complete;
/** @type {?} */
_getLocationSuccessObject.prototype.latitude;
/** @type {?} */
_getLocationSuccessObject.prototype.longitude;
/** @type {?} */
_getLocationSuccessObject.prototype.speed;
/** @type {?} */
_getLocationSuccessObject.prototype.accuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.altitude;
/** @type {?} */
_getLocationSuccessObject.prototype.verticalAccuracy;
/** @type {?} */
_getLocationSuccessObject.prototype.horizontalAccuracy;
/** @type {string} */
_getImageInfoObject.prototype.src;
/** @type {function(!_getImageInfoSuccessObject): void} */
_getImageInfoObject.prototype.success;
/** @type {function(): void} */
_getImageInfoObject.prototype.fail;
/** @type {function(): void} */
_getImageInfoObject.prototype.complete;
/** @type {number} */
_getImageInfoSuccessObject.prototype.width;
/** @type {number} */
_getImageInfoSuccessObject.prototype.height;
/** @type {string} */
_getImageInfoSuccessObject.prototype.path;
/** @type {function(!_getHCEStateSuccessObject): void} */
_getHCEStateObject.prototype.success;
/** @type {function(): void} */
_getHCEStateObject.prototype.fail;
/** @type {function(): void} */
_getHCEStateObject.prototype.complete;
/** @type {string} */
_getHCEStateSuccessObject.prototype.errMsg;
/** @type {number} */
_getHCEStateSuccessObject.prototype.errCode;
/** @type {string} */
_getFileInfoObject.prototype.filePath;
/** @type {string} */
_getFileInfoObject.prototype.digestAlgorithm;
/** @type {function(!_getFileInfoSuccessObject): void} */
_getFileInfoObject.prototype.success;
/** @type {function(): void} */
_getFileInfoObject.prototype.fail;
/** @type {function(): void} */
_getFileInfoObject.prototype.complete;
/** @type {number} */
_getFileInfoSuccessObject.prototype.size;
/** @type {string} */
_getFileInfoSuccessObject.prototype.digest;
/** @type {string} */
_getFileInfoSuccessObject.prototype.errMsg;
/** @type {!Object} */
_getExtConfigSyncReturnValue.prototype.extConfig;
/** @type {function(!_getExtConfigSuccessObject): void} */
_getExtConfigObject.prototype.success;
/** @type {function(): void} */
_getExtConfigObject.prototype.fail;
/** @type {function(): void} */
_getExtConfigObject.prototype.complete;
/** @type {string} */
_getExtConfigSuccessObject.prototype.errMsg;
/** @type {!Object} */
_getExtConfigSuccessObject.prototype.extConfig;
/** @type {function(!_getConnectedWifiSuccessObject): void} */
_getConnectedWifiObject.prototype.success;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.fail;
/** @type {function(): void} */
_getConnectedWifiObject.prototype.complete;
/** @type {!Object} */
_getConnectedWifiSuccessObject.prototype.wifi;
/** @type {?} */
_getConnectedBluetoothDevicesObject.prototype.services;
/** @type {function(!_getConnectedBluetoothDevicesSuccessObject): void} */
_getConnectedBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getConnectedBluetoothDevicesObject.prototype.complete;
/** @type {?} */
_getConnectedBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getConnectedBluetoothDevicesSuccessObject.prototype.errMsg;
/** @type {function(!_getClipboardDataSuccessObject): void} */
_getClipboardDataObject.prototype.success;
/** @type {function(): void} */
_getClipboardDataObject.prototype.fail;
/** @type {function(): void} */
_getClipboardDataObject.prototype.complete;
/** @type {string} */
_getClipboardDataSuccessObject.prototype.data;
/** @type {function(!_getBluetoothDevicesSuccessObject): void} */
_getBluetoothDevicesObject.prototype.success;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothDevicesObject.prototype.complete;
/** @type {?} */
_getBluetoothDevicesSuccessObject.prototype.devices;
/** @type {string} */
_getBluetoothDevicesSuccessObject.prototype.errMsg;
/** @type {function(!_getBluetoothAdapterStateSuccessObject): void} */
_getBluetoothAdapterStateObject.prototype.success;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.fail;
/** @type {function(): void} */
_getBluetoothAdapterStateObject.prototype.complete;
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.discovering;
/** @type {boolean} */
_getBluetoothAdapterStateSuccessObject.prototype.available;
/** @type {string} */
_getBluetoothAdapterStateSuccessObject.prototype.errMsg;
/** @type {function(!_getBeaconsSuccessObject): void} */
_getBeaconsObject.prototype.success;
/** @type {function(): void} */
_getBeaconsObject.prototype.fail;
/** @type {function(): void} */
_getBeaconsObject.prototype.complete;
/** @type {?} */
_getBeaconsSuccessObject.prototype.beacons;
/** @type {string} */
_getBeaconsSuccessObject.prototype.errMsg;
/** @type {function(!_getBackgroundAudioPlayerStateSuccessObject): void} */
_getBackgroundAudioPlayerStateObject.prototype.success;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.fail;
/** @type {function(): void} */
_getBackgroundAudioPlayerStateObject.prototype.complete;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.duration;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.currentPosition;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.status;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.downloadPercent;
/** @type {?} */
_getBackgroundAudioPlayerStateSuccessObject.prototype.dataUrl;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.duration;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.currentTime;
/** @type {boolean} */
_getBackgroundAudioManagerReturnValue.prototype.paused;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.src;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.startTime;
/** @type {number} */
_getBackgroundAudioManagerReturnValue.prototype.buffered;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.title;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.epname;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.singer;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.coverImgUrl;
/** @type {string} */
_getBackgroundAudioManagerReturnValue.prototype.webUrl;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.play;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.pause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.stop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.seek;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onCanplay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPlay;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPause;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onStop;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onEnded;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onTimeUpdate;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onPrev;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onNext;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onError;
/** @type {function(): void} */
_getBackgroundAudioManagerReturnValue.prototype.onWaiting;
/** @type {string} */
_getBLEDeviceServicesObject.prototype.deviceId;
/** @type {function(!_getBLEDeviceServicesSuccessObject): void} */
_getBLEDeviceServicesObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceServicesObject.prototype.complete;
/** @type {?} */
_getBLEDeviceServicesSuccessObject.prototype.services;
/** @type {string} */
_getBLEDeviceServicesSuccessObject.prototype.errMsg;
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.deviceId;
/** @type {string} */
_getBLEDeviceCharacteristicsObject.prototype.serviceId;
/** @type {function(!_getBLEDeviceCharacteristicsSuccessObject): void} */
_getBLEDeviceCharacteristicsObject.prototype.success;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.fail;
/** @type {function(): void} */
_getBLEDeviceCharacteristicsObject.prototype.complete;
/** @type {?} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.characteristics;
/** @type {string} */
_getBLEDeviceCharacteristicsSuccessObject.prototype.errMsg;
/** @type {string} */
_downloadFileObject.prototype.url;
/** @type {!Object} */
_downloadFileObject.prototype.header;
/** @type {function(!_downloadFileSuccessObject): void} */
_downloadFileObject.prototype.success;
/** @type {function(): void} */
_downloadFileObject.prototype.fail;
/** @type {function(): void} */
_downloadFileObject.prototype.complete;
/** @type {string} */
_downloadFileSuccessObject.prototype.tempFilePath;
/** @type {number} */
_downloadFileSuccessObject.prototype.statusCode;
/** @type {string} */
_createBLEConnectionObject.prototype.deviceId;
/** @type {function(!_createBLEConnectionSuccessObject): void} */
_createBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_createBLEConnectionObject.prototype.complete;
/** @type {string} */
_createBLEConnectionSuccessObject.prototype.errMsg;
/** @type {?} */
_createAnimationObject.prototype.duration;
/** @type {string} */
_createAnimationObject.prototype.timingFunction;
/** @type {?} */
_createAnimationObject.prototype.delay;
/** @type {string} */
_createAnimationObject.prototype.transformOrigin;
/** @type {string} */
_connectWifiObject.prototype.SSID;
/** @type {string} */
_connectWifiObject.prototype.BSSID;
/** @type {string} */
_connectWifiObject.prototype.password;
/** @type {function(): void} */
_connectWifiObject.prototype.success;
/** @type {function(): void} */
_connectWifiObject.prototype.fail;
/** @type {function(): void} */
_connectWifiObject.prototype.complete;
/** @type {string} */
_connectSocketObject.prototype.url;
/** @type {!Object} */
_connectSocketObject.prototype.header;
/** @type {string} */
_connectSocketObject.prototype.method;
/** @type {?} */
_connectSocketObject.prototype.protocols;
/** @type {function(): void} */
_connectSocketObject.prototype.success;
/** @type {function(): void} */
_connectSocketObject.prototype.fail;
/** @type {function(): void} */
_connectSocketObject.prototype.complete;
/** @type {number} */
_closeSocketObject.prototype.code;
/** @type {string} */
_closeSocketObject.prototype.reason;
/** @type {function(): void} */
_closeSocketObject.prototype.success;
/** @type {function(): void} */
_closeSocketObject.prototype.fail;
/** @type {function(): void} */
_closeSocketObject.prototype.complete;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.success;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.fail;
/** @type {function(): void} */
_closeBluetoothAdapterObject.prototype.complete;
/** @type {string} */
_closeBLEConnectionObject.prototype.deviceId;
/** @type {function(!_closeBLEConnectionSuccessObject): void} */
_closeBLEConnectionObject.prototype.success;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.fail;
/** @type {function(): void} */
_closeBLEConnectionObject.prototype.complete;
/** @type {string} */
_closeBLEConnectionSuccessObject.prototype.errMsg;
/** @type {?} */
_chooseVideoObject.prototype.sourceType;
/** @type {?} */
_chooseVideoObject.prototype.compressed;
/** @type {number} */
_chooseVideoObject.prototype.maxDuration;
/** @type {function(!_chooseVideoSuccessObject): void} */
_chooseVideoObject.prototype.success;
/** @type {function(): void} */
_chooseVideoObject.prototype.fail;
/** @type {function(): void} */
_chooseVideoObject.prototype.complete;
/** @type {?} */
_chooseVideoSuccessObject.prototype.tempFilePath;
/** @type {?} */
_chooseVideoSuccessObject.prototype.duration;
/** @type {?} */
_chooseVideoSuccessObject.prototype.size;
/** @type {?} */
_chooseVideoSuccessObject.prototype.height;
/** @type {?} */
_chooseVideoSuccessObject.prototype.width;
/** @type {function(!_chooseLocationSuccessObject): void} */
_chooseLocationObject.prototype.success;
/** @type {function(): void} */
_chooseLocationObject.prototype.fail;
/** @type {function(): void} */
_chooseLocationObject.prototype.complete;
/** @type {?} */
_chooseLocationSuccessObject.prototype.name;
/** @type {?} */
_chooseLocationSuccessObject.prototype.address;
/** @type {?} */
_chooseLocationSuccessObject.prototype.latitude;
/** @type {?} */
_chooseLocationSuccessObject.prototype.longitude;
/** @type {function(!_chooseInvoiceTitleSuccessObject): void} */
_chooseInvoiceTitleObject.prototype.success;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.fail;
/** @type {function(): void} */
_chooseInvoiceTitleObject.prototype.complete;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.type;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.title;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.taxNumber;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.companyAddress;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.telephone;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankName;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.bankAccount;
/** @type {string} */
_chooseInvoiceTitleSuccessObject.prototype.errMsg;
/** @type {number} */
_chooseImageObject.prototype.count;
/** @type {?} */
_chooseImageObject.prototype.sizeType;
/** @type {?} */
_chooseImageObject.prototype.sourceType;
/** @type {function(!_chooseImageSuccessObject): void} */
_chooseImageObject.prototype.success;
/** @type {function(): void} */
_chooseImageObject.prototype.fail;
/** @type {function(): void} */
_chooseImageObject.prototype.complete;
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFilePaths;
/** @type {?} */
_chooseImageSuccessObject.prototype.tempFiles;
/** @type {function(!_chooseContactSuccessObject): void} */
_chooseContactObject.prototype.success;
/** @type {function(): void} */
_chooseContactObject.prototype.fail;
/** @type {function(): void} */
_chooseContactObject.prototype.complete;
/** @type {?} */
_chooseContactSuccessObject.prototype.phoneNumber;
/** @type {?} */
_chooseContactSuccessObject.prototype.displayName;
/** @type {function(!_chooseAddressSuccessObject): void} */
_chooseAddressObject.prototype.success;
/** @type {function(): void} */
_chooseAddressObject.prototype.fail;
/** @type {function(): void} */
_chooseAddressObject.prototype.complete;
/** @type {string} */
_chooseAddressSuccessObject.prototype.errMsg;
/** @type {string} */
_chooseAddressSuccessObject.prototype.userName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.postalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.provinceName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.cityName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.countyName;
/** @type {string} */
_chooseAddressSuccessObject.prototype.detailInfo;
/** @type {string} */
_chooseAddressSuccessObject.prototype.nationalCode;
/** @type {string} */
_chooseAddressSuccessObject.prototype.telNumber;
/** @type {function(): void} */
_checkSessionObject.prototype.success;
/** @type {function(): void} */
_checkSessionObject.prototype.fail;
/** @type {function(): void} */
_checkSessionObject.prototype.complete;
/** @type {function(!_checkIsSupportSoterAuthenticationSuccessObject): void} */
_checkIsSupportSoterAuthenticationObject.prototype.success;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.fail;
/** @type {function(): void} */
_checkIsSupportSoterAuthenticationObject.prototype.complete;
/** @type {?} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.supportMode;
/** @type {string} */
_checkIsSupportSoterAuthenticationSuccessObject.prototype.errMsg;
/** @type {string} */
_checkIsSoterEnrolledInDeviceObject.prototype.checkAuthMode;
/** @type {function(!_checkIsSoterEnrolledInDeviceSuccessObject): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.success;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.fail;
/** @type {function(): void} */
_checkIsSoterEnrolledInDeviceObject.prototype.complete;
/** @type {boolean} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.isEnrolled;
/** @type {string} */
_checkIsSoterEnrolledInDeviceSuccessObject.prototype.errMsg;
/** @type {number} */
_canvasToTempFilePathObject.prototype.x;
/** @type {number} */
_canvasToTempFilePathObject.prototype.y;
/** @type {number} */
_canvasToTempFilePathObject.prototype.width;
/** @type {number} */
_canvasToTempFilePathObject.prototype.height;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destWidth;
/** @type {number} */
_canvasToTempFilePathObject.prototype.destHeight;
/** @type {string} */
_canvasToTempFilePathObject.prototype.canvasId;
/** @type {string} */
_canvasToTempFilePathObject.prototype.fileType;
/** @type {number} */
_canvasToTempFilePathObject.prototype.quality;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.success;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.fail;
/** @type {function(): void} */
_canvasToTempFilePathObject.prototype.complete;
/** @type {string} */
_canvasPutImageDataObject.prototype.canvasId;
/** @type {?} */
_canvasPutImageDataObject.prototype.data;
/** @type {number} */
_canvasPutImageDataObject.prototype.x;
/** @type {number} */
_canvasPutImageDataObject.prototype.y;
/** @type {number} */
_canvasPutImageDataObject.prototype.width;
/** @type {number} */
_canvasPutImageDataObject.prototype.height;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasPutImageDataObject.prototype.complete;
/** @type {string} */
_canvasGetImageDataObject.prototype.canvasId;
/** @type {number} */
_canvasGetImageDataObject.prototype.x;
/** @type {number} */
_canvasGetImageDataObject.prototype.y;
/** @type {number} */
_canvasGetImageDataObject.prototype.width;
/** @type {number} */
_canvasGetImageDataObject.prototype.height;
/** @type {function(!_canvasGetImageDataSuccessObject): void} */
_canvasGetImageDataObject.prototype.success;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.fail;
/** @type {function(): void} */
_canvasGetImageDataObject.prototype.complete;
/** @type {string} */
_canvasGetImageDataSuccessObject.prototype.errMsg;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.width;
/** @type {number} */
_canvasGetImageDataSuccessObject.prototype.height;
/** @type {?} */
_canvasGetImageDataSuccessObject.prototype.data;
/** @type {string} */
_authorizeObject.prototype.scope;
/** @type {function(!_authorizeSuccessObject): void} */
_authorizeObject.prototype.success;
/** @type {function(): void} */
_authorizeObject.prototype.fail;
/** @type {function(): void} */
_authorizeObject.prototype.complete;
/** @type {string} */
_authorizeSuccessObject.prototype.errMsg;
/** @type {string} */
_addPhoneContactObject.prototype.photoFilePath;
/** @type {string} */
_addPhoneContactObject.prototype.nickName;
/** @type {string} */
_addPhoneContactObject.prototype.lastName;
/** @type {string} */
_addPhoneContactObject.prototype.middleName;
/** @type {string} */
_addPhoneContactObject.prototype.firstName;
/** @type {string} */
_addPhoneContactObject.prototype.remark;
/** @type {string} */
_addPhoneContactObject.prototype.mobilePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.weChatNumber;
/** @type {string} */
_addPhoneContactObject.prototype.addressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.addressState;
/** @type {string} */
_addPhoneContactObject.prototype.addressCity;
/** @type {string} */
_addPhoneContactObject.prototype.addressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.addressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.organization;
/** @type {string} */
_addPhoneContactObject.prototype.title;
/** @type {string} */
_addPhoneContactObject.prototype.workFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.workPhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.hostNumber;
/** @type {string} */
_addPhoneContactObject.prototype.email;
/** @type {string} */
_addPhoneContactObject.prototype.url;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.workAddressPostalCode;
/** @type {string} */
_addPhoneContactObject.prototype.homeFaxNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homePhoneNumber;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCountry;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressState;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressCity;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressStreet;
/** @type {string} */
_addPhoneContactObject.prototype.homeAddressPostalCode;
/** @type {function(): void} */
_addPhoneContactObject.prototype.success;
/** @type {function(): void} */
_addPhoneContactObject.prototype.fail;
/** @type {function(): void} */
_addPhoneContactObject.prototype.complete;
/** @type {?} */
_addCardObject.prototype.cardList;
/** @type {function(!_addCardSuccessObject): void} */
_addCardObject.prototype.success;
/** @type {function(): void} */
_addCardObject.prototype.fail;
/** @type {function(): void} */
_addCardObject.prototype.complete;
/** @type {?} */
_addCardSuccessObject.prototype.cardList;
/** @type {string} */
_ShareAppMessageReturnObject.prototype.title;
/** @type {string} */
_ShareAppMessageReturnObject.prototype.path;
/** @type {string} */
_AppShowOptions.prototype.path;
/** @type {!Object} */
_AppShowOptions.prototype.query;
/** @type {number} */
_AppShowOptions.prototype.scene;
/** @type {string} */
_AppShowOptions.prototype.shareTicket;
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onLaunch;
/** @type {function(!_AppShowOptions): void} */
_AppOptions.prototype.onShow;
/** @type {function(): void} */
_AppOptions.prototype.onHide;
/** @type {function(string): void} */
_AppOptions.prototype.onError;
/** @type {?|undefined} */
PageOptions.prototype.data;
/** @type {function(!Object=): void} */
PageOptions.prototype.onLoad;
/** @type {function(): void} */
PageOptions.prototype.onReady;
/** @type {function(): void} */
PageOptions.prototype.onShow;
/** @type {function(): void} */
PageOptions.prototype.onHide;
/** @type {function(): void} */
PageOptions.prototype.onUnload;
/** @type {function(): void} */
PageOptions.prototype.onPullDownRefresh;
/** @type {function(): void} */
PageOptions.prototype.onReachBottom;
/** @type {function(): !_ShareAppMessageReturnObject} */
PageOptions.prototype.onShareAppMessage;
/** @const */
var wx = {};

/**
 * 批量添加卡券。
 * @param {!_addCardObject} object
 * @return {void}
 */
wx.addCard = function(object) {};

/**
 * 调用后，用户可以选择将该表单以“新增联系人”或“添加到已有联系人”的方式，写入手机系统通讯录，完成手机通讯录联系人和联系方式的增加。
 * @param {!_addPhoneContactObject} object
 * @return {void}
 */
wx.addPhoneContact = function(object) {};

/**
 * 将 ArrayBuffer 数据转成 Base64 字符串
 * @return {void}
 */
wx.arrayBufferToBase64 = function() {};

/**
 * 提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。
 * @param {!_authorizeObject} object
 * @return {void}
 */
wx.authorize = function(object) {};

/**
 * 将 Base64 字符串转成 ArrayBuffer 数据
 * @param {string} base64
 * @return {void}
 */
wx.base64ToArrayBuffer = function(base64) {};

/**
 * 判断小程序的API，回调，参数，组件等是否在当前版本可用。
 * @param {string} string
 * @return {void}
 */
wx.canIUse = function(string) {};

/**
 * 返回一个数组，用来描述 canvas 区域隐含的像素数据
 * @param {!_canvasGetImageDataObject} object
 * @return {void}
 */
wx.canvasGetImageData = function(object) {};

/**
 * 将像素数据绘制到画布的方法
 * @param {!_canvasPutImageDataObject} object
 * @return {void}
 */
wx.canvasPutImageData = function(object) {};

/**
 * 把当前画布指定区域的内容导出生成指定大小的图片，并返回文件路径。
 * @this {string}
 * @param {!_canvasToTempFilePathObject} object
 * @return {void}
 */
wx.canvasToTempFilePath = function(object) {};

/**
 * 获取设备内是否录入如指纹等生物信息的接口
 * @param {!_checkIsSoterEnrolledInDeviceObject} object
 * @return {void}
 */
wx.checkIsSoterEnrolledInDevice = function(object) {};

/**
 * 获取本机支持的 SOTER 生物认证方式
 * @param {!_checkIsSupportSoterAuthenticationObject} object
 * @return {void}
 */
wx.checkIsSupportSoterAuthentication = function(object) {};

/**
 * 通过上述接口获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用wx.checkSession接口**检测当前用户登录态是否有效**。登录态过期后开发者可以再调用wx.login获取新的用户登录态。
 * @param {!_checkSessionObject} object
 * @return {void}
 */
wx.checkSession = function(object) {};

/**
 * 调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址。
 * @param {!_chooseAddressObject} object
 * @return {void}
 */
wx.chooseAddress = function(object) {};

/**
 * 调起选择手机通讯录联系人界面，返回用户选择的联系人信息。
 * @param {!_chooseContactObject} object
 * @return {void}
 */
wx.chooseContact = function(object) {};

/**
 * 从本地相册选择图片或使用相机拍照。
 * @param {!_chooseImageObject} object
 * @return {void}
 */
wx.chooseImage = function(object) {};

/**
 * 选择用户的发票抬头。
 * @param {!_chooseInvoiceTitleObject} object
 * @return {void}
 */
wx.chooseInvoiceTitle = function(object) {};

/**
 * 打开地图选择位置。
 * @param {!_chooseLocationObject} object
 * @return {void}
 */
wx.chooseLocation = function(object) {};

/**
 * 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。
 * @param {!_chooseVideoObject} object
 * @return {void}
 */
wx.chooseVideo = function(object) {};

/**
 * 清理本地数据缓存。
 * @return {void}
 */
wx.clearStorage = function() {};

/**
 * 同步清理本地数据缓存
 * @return {void}
 */
wx.clearStorageSync = function() {};

/**
 * 断开与低功耗蓝牙设备的连接
 * @param {!_closeBLEConnectionObject} object
 * @return {void}
 */
wx.closeBLEConnection = function(object) {};

/**
 * 关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源。建议在使用小程序蓝牙流程后调用，与`wx.openBluetoothAdapter`成对调用。
 * @param {!_closeBluetoothAdapterObject} object
 * @return {void}
 */
wx.closeBluetoothAdapter = function(object) {};

/**
 * 关闭 WebSocket 连接。
 * @param {!_closeSocketObject} object
 * @return {void}
 */
wx.closeSocket = function(object) {};

/**
 * 创建一个 [WebSocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket) 连接。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_connectSocketObject} object
 * @return {void}
 */
wx.connectSocket = function(object) {};

/**
 * 连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持。
 * @param {!_connectWifiObject} object
 * @return {void}
 */
wx.connectWifi = function(object) {};

/**
 * 创建一个动画实例[animation](#animation)。调用实例的方法来描述动画。最后通过动画实例的`export`方法导出动画数据传递给组件的`animation`属性。
 * @param {!_createAnimationObject} object
 * @return {void}
 */
wx.createAnimation = function(object) {};

/**
 * 创建并返回 audio 上下文 `audioContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<audio/>` 组件
 * @this {string}
 * @param {string} audioid
 * @return {void}
 */
wx.createAudioContext = function(audioid) {};

/**
 * 连接低功耗蓝牙设备。
 * @param {!_createBLEConnectionObject} object
 * @return {void}
 */
wx.createBLEConnection = function(object) {};

/**
 * 创建并返回 camera 上下文 `cameraContext` 对象，`cameraContext` 与页面的 `camera` 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 `<camera/>` 组件。
 * @this {string}
 * @return {void}
 */
wx.createCameraContext = function() {};

/**
 * 创建 canvas 绘图上下文（指定 canvasId）。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<canvas/>` 组件
 * @this {string}
 * @param {string} canvasid
 * @return {!CanvasContext}
 */
wx.createCanvasContext = function(canvasid) {};

/**
 * 创建并返回绘图上下文。
 * @return {!CanvasContext}
 */
wx.createContext = function() {};

/**
 * 创建并返回内部 audio 上下文 `innerAudioContext` 对象。*本接口是 `wx.createAudioContext` 升级版。*
 * @return {void}
 */
wx.createInnerAudioContext = function() {};

/**
 * 操作对应的 `<live-player/>` 组件。
 * @this {string}
 * @param {string} domid
 * @return {void}
 */
wx.createLivePlayerContext = function(domid) {};

/**
 * 创建并返回 `live-pusher` 上下文 `LivePusherContext` 对象，`LivePusherContext` 与页面的 `<live-pusher />` 组件绑定，一个页面只能有一个 `live-pusher`，通过它可以操作对应的 `<live-pusher/>` 组件。
 * @return {void}
 */
wx.createLivePusherContext = function() {};

/**
 * 创建并返回 map 上下文 `mapContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<map/>` 组件
 * @this {string}
 * @param {string} mapid
 * @return {void}
 */
wx.createMapContext = function(mapid) {};

/**
 * undefined
 * @return {void}
 */
wx.createSelectorQuery = function() {};

/**
 * 创建并返回 video 上下文 `videoContext` 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 `<video/>` 组件
 * @this {string}
 * @param {string} videoid
 * @return {void}
 */
wx.createVideoContext = function(videoid) {};

/**
 * 下载文件资源到本地，客户端直接发起一个 HTTP GET 请求，返回文件的本地临时路径。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_downloadFileObject} object
 * @return {void}
 */
wx.downloadFile = function(object) {};

/**
 * 蓝牙设备characteristic(特征值)信息
 * @param {!_getBLEDeviceCharacteristicsObject} object
 * @return {void}
 */
wx.getBLEDeviceCharacteristics = function(object) {};

/**
 * 获取蓝牙设备所有 service（服务）
 * @param {!_getBLEDeviceServicesObject} object
 * @return {void}
 */
wx.getBLEDeviceServices = function(object) {};

/**
 * 获取**全局唯一**的背景音频管理器 `backgroundAudioManager`。
 * @return {!_getBackgroundAudioManagerReturnValue}
 */
wx.getBackgroundAudioManager = function() {};

/**
 * 获取后台音乐播放状态。
 * @param {!_getBackgroundAudioPlayerStateObject} object
 * @return {void}
 */
wx.getBackgroundAudioPlayerState = function(object) {};

/**
 * 获取所有已搜索到的`iBeacon`设备
 * @param {!_getBeaconsObject} object
 * @return {void}
 */
wx.getBeacons = function(object) {};

/**
 * 获取本机蓝牙适配器状态
 * @param {!_getBluetoothAdapterStateObject} object
 * @return {void}
 */
wx.getBluetoothAdapterState = function(object) {};

/**
 * 获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备。
 * @param {!_getBluetoothDevicesObject} object
 * @return {void}
 */
wx.getBluetoothDevices = function(object) {};

/**
 * 获取系统剪贴板内容
 * @param {!_getClipboardDataObject} object
 * @return {void}
 */
wx.getClipboardData = function(object) {};

/**
 * 根据 uuid 获取处于已连接状态的设备
 * @param {!_getConnectedBluetoothDevicesObject} object
 * @return {void}
 */
wx.getConnectedBluetoothDevices = function(object) {};

/**
 * 获取已连接中的 Wi-Fi 信息
 * @param {!_getConnectedWifiObject} object
 * @return {void}
 */
wx.getConnectedWifi = function(object) {};

/**
 * 获取第三方平台自定义的数据字段。
 * @param {!_getExtConfigObject} object
 * @return {void}
 */
wx.getExtConfig = function(object) {};

/**
 * 获取第三方平台自定义的数据字段的同步接口。
 * @return {!_getExtConfigSyncReturnValue}
 */
wx.getExtConfigSync = function() {};

/**
 * 获取文件信息
 * @param {!_getFileInfoObject} object
 * @return {void}
 */
wx.getFileInfo = function(object) {};

/**
 * 判断当前设备是否支持 HCE 能力。
 * @param {!_getHCEStateObject} object
 * @return {void}
 */
wx.getHCEState = function(object) {};

/**
 * 获取图片信息
 * @param {!_getImageInfoObject} object
 * @return {void}
 */
wx.getImageInfo = function(object) {};

/**
 * 获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。
 * @param {!_getLocationObject} object
 * @return {void}
 */
wx.getLocation = function(object) {};

/**
 * 获取网络类型。
 * @param {!_getNetworkTypeObject} object
 * @return {void}
 */
wx.getNetworkType = function(object) {};

/**
 * 获取微信替设备生成的唯一标识，用于判断设备是否更换。获取的数据为AES加密数据，需要自行解密。
 * @param {!_getOpenDeviceIdObject} object
 * @return {void}
 */
wx.getOpenDeviceId = function(object) {};

/**
 * 获取**全局唯一**的录音管理器 `recorderManager`。
 * @return {void}
 */
wx.getRecorderManager = function() {};

/**
 * 获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 [wx.getFileInfo](./getFileInfo.md) 接口。
 * @param {!_getSavedFileInfoObject} object
 * @return {void}
 */
wx.getSavedFileInfo = function(object) {};

/**
 * 获取本地已保存的文件列表
 * @param {!_getSavedFileListObject} object
 * @return {void}
 */
wx.getSavedFileList = function(object) {};

/**
 * 获取屏幕亮度。
 * @param {!_getScreenBrightnessObject} object
 * @return {void}
 */
wx.getScreenBrightness = function(object) {};

/**
 * 获取用户的当前设置。
 * @param {!_getSettingObject} object
 * @return {void}
 */
wx.getSetting = function(object) {};

/**
 * 获取转发详细信息
 * @param {!_getShareInfoObject} object
 * @return {void}
 */
wx.getShareInfo = function(object) {};

/**
 * 从本地缓存中异步获取指定 key 对应的内容。
 * @param {!_getStorageObject} object
 * @return {void}
 */
wx.getStorage = function(object) {};

/**
 * 异步获取当前storage的相关信息
 * @param {!_getStorageInfoObject} object
 * @return {void}
 */
wx.getStorageInfo = function(object) {};

/**
 * 同步获取当前storage的相关信息
 * @return {void}
 */
wx.getStorageInfoSync = function() {};

/**
 * 从本地缓存中同步获取指定 key 对应的内容。
 * @param {string} key
 * @return {void}
 */
wx.getStorageSync = function(key) {};

/**
 * 获取系统信息。
 * @param {!_getSystemInfoObject} object
 * @return {void}
 */
wx.getSystemInfo = function(object) {};

/**
 * 获取系统信息同步接口
 * @return {!_getSystemInfoSyncReturnValue}
 */
wx.getSystemInfoSync = function() {};

/**
 * 获取用户信息，withCredentials 为 true 时需要先调用 [wx.login](./api-login.md#wxloginobject) 接口。
 * @param {!_getUserInfoObject} object
 * @return {void}
 */
wx.getUserInfo = function(object) {};

/**
 * 获取用户过去三十天微信运动步数，需要先调用 [wx.login](./api-login.md#wxloginobject) 接口。
 * @param {!_getWeRunDataObject} object
 * @return {void}
 */
wx.getWeRunData = function(object) {};

/**
 * 请求获取 Wi-Fi 列表，在 `onGetWifiList` 注册的回调中返回 wifiList 数据。iOS 将跳转到系统的 Wi-Fi 界面，Android 不会跳转。
 * @param {!_getWifiListObject} object
 * @return {void}
 */
wx.getWifiList = function(object) {};

/**
 * 隐藏 loading 提示框
 * @return {void}
 */
wx.hideLoading = function() {};

/**
 * 隐藏导航条加载动画。
 * @return {void}
 */
wx.hideNavigationBarLoading = function() {};

/**
 * 隐藏转发按钮
 * @param {!_hideShareMenuObject} object
 * @return {void}
 */
wx.hideShareMenu = function(object) {};

/**
 * 隐藏 tabBar
 * @param {!_hideTabBarObject} object
 * @return {void}
 */
wx.hideTabBar = function(object) {};

/**
 * 隐藏 tabBar 某一项的右上角的红点
 * @param {!_hideTabBarRedDotObject} object
 * @return {void}
 */
wx.hideTabBarRedDot = function(object) {};

/**
 * 隐藏消息提示框
 * @return {void}
 */
wx.hideToast = function() {};

/**
 * 调用接口获取**登录凭证（code）**进而换取用户登录态信息，包括用户的**唯一标识（openid）** 及本次登录的 **会话密钥（session_key）**等。**用户数据的加解密通讯**需要依赖会话密钥完成。
 * @param {!_loginObject} object
 * @return {void}
 */
wx.login = function(object) {};

/**
 * wx.makePhoneCall({
 * @param {!_makePhoneCallObject} object
 * @return {void}
 */
wx.makePhoneCall = function(object) {};

/**
 * 调起 VoIP 音视频通话界面。
 * @param {!_makeVoIPCallObject} object
 * @return {void}
 */
wx.makeVoIPCall = function(object) {};

/**
 * 关闭当前页面，返回上一页面或多级页面。可通过 [`getCurrentPages()`](../framework/app-service/page.md#getCurrentPages()) 获取当前的页面栈，决定需要返回几层。
 * @param {!_navigateBackObject} object
 * @return {void}
 */
wx.navigateBack = function(object) {};

/**
 * 返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功
 * @param {!_navigateBackMiniProgramObject} object
 * @return {void}
 */
wx.navigateBackMiniProgram = function(object) {};

/**
 * 保留当前页面，跳转到应用内的某个页面，使用`wx.navigateBack`可以返回到原页面。
 * @param {!_navigateToObject} object
 * @return {void}
 */
wx.navigateTo = function(object) {};

/**
 * 打开同一公众号下关联的另一个小程序。**（注：必须是同一公众号下，而非同个 open 账号下）**
 * @param {!_navigateToMiniProgramObject} object
 * @return {void}
 */
wx.navigateToMiniProgram = function(object) {};

/**
 * 启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值。注意：必须设备的特征值支持`notify`或者`indicate`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_notifyBLECharacteristicValueChangeObject} object
 * @return {void}
 */
wx.notifyBLECharacteristicValueChange = function(object) {};

/**
 * 监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 `wx.stopAccelerometer` 停止监听。
 * @param {function(!_onAccelerometerChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onAccelerometerChange = function(callback) {};

/**
 * 监听低功耗蓝牙设备的特征值变化。必须先启用`notify`接口才能接收到设备推送的notification。
 * @param {function(!_onBLECharacteristicValueChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onBLECharacteristicValueChange = function(callback) {};

/**
 * 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。
 * @param {function(!_onBLEConnectionStateChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onBLEConnectionStateChange = function(callback) {};

/**
 * 监听音乐暂停。
 * @param {string} callback
 * @return {void}
 */
wx.onBackgroundAudioPause = function(callback) {};

/**
 * 监听音乐播放。
 * @param {string} callback
 * @return {void}
 */
wx.onBackgroundAudioPlay = function(callback) {};

/**
 * 监听音乐停止。
 * @param {string} callback
 * @return {void}
 */
wx.onBackgroundAudioStop = function(callback) {};

/**
 * 监听 `iBeacon` 服务的状态变化
 * @param {function(!_onBeaconServiceChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onBeaconServiceChange = function(callback) {};

/**
 * 监听 `iBeacon` 设备的更新事件
 * @param {function(!_onBeaconUpdateCallbackResult): void} callback
 * @return {void}
 */
wx.onBeaconUpdate = function(callback) {};

/**
 * 监听蓝牙适配器状态变化事件
 * @param {function(!_onBluetoothAdapterStateChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onBluetoothAdapterStateChange = function(callback) {};

/**
 * 监听寻找到新设备的事件
 * @param {function(!_onBluetoothDeviceFoundCallbackResult): void} callback
 * @return {void}
 */
wx.onBluetoothDeviceFound = function(callback) {};

/**
 * 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用`wx.stopCompass`停止监听。
 * @param {function(!_onCompassChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onCompassChange = function(callback) {};

/**
 * 监听需要评估连上的 Wi-Fi 的请求，在回调里必须返回 `confidence` 字段
 * @param {function(!_onEvaluateWifiCallbackResult): void} callback
 * @return {void}
 */
wx.onEvaluateWifi = function(callback) {};

/**
 * 监听在获取到 Wi-Fi 列表数据时的事件，在回调中将返回 wifiList。
 * @param {function(!_onGetWifiListCallbackResult): void} callback
 * @return {void}
 */
wx.onGetWifiList = function(callback) {};

/**
 * 监听 NFC 设备的消息回调，并在回调中处理。返回参数中 `messageType` 表示消息类型，目前有如下值：
 * @param {function(!_onHCEMessageCallbackResult): void} callback
 * @return {void}
 */
wx.onHCEMessage = function(callback) {};

/**
 * 监听网络状态变化。
 * @param {function(!_onNetworkStatusChangeCallbackResult): void} callback
 * @return {void}
 */
wx.onNetworkStatusChange = function(callback) {};

/**
 * 监听WebSocket关闭。
 * @param {string} callback
 * @return {void}
 */
wx.onSocketClose = function(callback) {};

/**
 * 监听WebSocket错误。
 * @param {string} callback
 * @return {void}
 */
wx.onSocketError = function(callback) {};

/**
 * 监听WebSocket接受到服务器的消息事件。
 * @param {function(!_onSocketMessageCallbackResult): void} callback
 * @return {void}
 */
wx.onSocketMessage = function(callback) {};

/**
 * 监听WebSocket连接打开事件。
 * @param {string} callback
 * @return {void}
 */
wx.onSocketOpen = function(callback) {};

/**
 * 监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件
 * @param {function(!_onUserCaptureScreenCallbackResult): void} callback
 * @return {void}
 */
wx.onUserCaptureScreen = function(callback) {};

/**
 * 监听连接上 Wi-Fi 的事件。
 * @param {function(!_onWifiConnectedCallbackResult): void} callback
 * @return {void}
 */
wx.onWifiConnected = function(callback) {};

/**
 * 初始化小程序蓝牙模块，生效周期为调用`wx.openBluetoothAdapter`至调用`wx.closeBluetoothAdapter`或小程序被销毁为止。
 * @param {!_openBluetoothAdapterObject} object
 * @return {void}
 */
wx.openBluetoothAdapter = function(object) {};

/**
 * 查看微信卡包中的卡券。
 * @param {!_openCardObject} object
 * @return {void}
 */
wx.openCard = function(object) {};

/**
 * 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx
 * @param {!_openDocumentObject} object
 * @return {void}
 */
wx.openDocument = function(object) {};

/**
 * ​使用微信内置地图查看位置。
 * @param {!_openLocationObject} object
 * @return {void}
 */
wx.openLocation = function(object) {};

/**
 * 调起客户端小程序设置界面，返回用户设置的操作结果。
 * @param {!_openSettingObject} object
 * @return {void}
 */
wx.openSetting = function(object) {};

/**
 * 将页面滚动到目标位置。
 * @param {!_pageScrollToObject} object
 * @return {void}
 */
wx.pageScrollTo = function(object) {};

/**
 * 暂停播放音乐。
 * @return {void}
 */
wx.pauseBackgroundAudio = function() {};

/**
 * 暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用 wx.stopVoice。
 * @return {void}
 */
wx.pauseVoice = function() {};

/**
 * 使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。
 * @param {!_playBackgroundAudioObject} object
 * @return {void}
 */
wx.playBackgroundAudio = function(object) {};

/**
 * 开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。
 * @param {!_playVoiceObject} object
 * @return {void}
 */
wx.playVoice = function(object) {};

/**
 * 预览图片。
 * @param {!_previewImageObject} object
 * @return {void}
 */
wx.previewImage = function(object) {};

/**
 * 关闭所有页面，打开到应用内的某个页面。
 * @param {!_reLaunchObject} object
 * @return {void}
 */
wx.reLaunch = function(object) {};

/**
 * 读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持`read`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_readBLECharacteristicValueObject} object
 * @return {void}
 */
wx.readBLECharacteristicValue = function(object) {};

/**
 * 关闭当前页面，跳转到应用内的某个页面。
 * @param {!_redirectToObject} object
 * @return {void}
 */
wx.redirectTo = function(object) {};

/**
 * 删除本地存储的文件
 * @param {!_removeSavedFileObject} object
 * @return {void}
 */
wx.removeSavedFile = function(object) {};

/**
 * 从本地缓存中异步移除指定 key 。
 * @param {!_removeStorageObject} object
 * @return {void}
 */
wx.removeStorage = function(object) {};

/**
 * 从本地缓存中同步移除指定 key 。
 * @param {string} key
 * @return {void}
 */
wx.removeStorageSync = function(key) {};

/**
 * 移除 tabBar 某一项右上角的文本
 * @param {!_removeTabBarBadgeObject} object
 * @return {void}
 */
wx.removeTabBarBadge = function(object) {};

/**
 * 自定义分析数据上报接口。使用前，需要在小程序管理后台自定义分析中新建事件，配置好事件名与字段。
 * @param {string} eventname
 * @param {string} data
 * @return {void}
 */
wx.reportAnalytics = function(eventname, data) {};

/**
 * 发起网络请求。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_requestObject} object
 * @return {void}
 */
wx.request = function(object) {};

/**
 * 发起微信支付。
 * @param {!_requestPaymentObject} object
 * @return {void}
 */
wx.requestPayment = function(object) {};

/**
 * 保存文件到本地。**注意：saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用**
 * @param {!_saveFileObject} object
 * @return {void}
 */
wx.saveFile = function(object) {};

/**
 * 保存图片到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveImageToPhotosAlbumObject} object
 * @return {void}
 */
wx.saveImageToPhotosAlbum = function(object) {};

/**
 * 保存视频到系统相册。需要[用户授权](./authorize-index.md) scope.writePhotosAlbum
 * @param {!_saveVideoToPhotosAlbumObject} object
 * @return {void}
 */
wx.saveVideoToPhotosAlbum = function(object) {};

/**
 * 调起客户端扫码界面，扫码成功后返回对应的结果
 * @param {!_scanCodeObject} object
 * @return {void}
 */
wx.scanCode = function(object) {};

/**
 * 控制音乐播放进度。
 * @param {!_seekBackgroundAudioObject} object
 * @return {void}
 */
wx.seekBackgroundAudio = function(object) {};

/**
 * 发送 NFC 消息。仅在安卓系统下有效。
 * @param {!_sendHCEMessageObject} object
 * @return {void}
 */
wx.sendHCEMessage = function(object) {};

/**
 * 通过 WebSocket 连接发送数据，需要先 [wx.connectSocket](#wxconnectsocketobject)，并在 [wx.onSocketOpen](#wxonsocketopencallback) 回调之后才能发送。
 * @param {!_sendSocketMessageObject} object
 * @return {void}
 */
wx.sendSocketMessage = function(object) {};

/**
 * 设置系统剪贴板的内容
 * @param {!_setClipboardDataObject} object
 * @return {void}
 */
wx.setClipboardData = function(object) {};

/**
 * 设置是否打开调试开关，此开关对正式版也能生效。
 * @param {!_setEnableDebugObject} object
 * @return {void}
 */
wx.setEnableDebug = function(object) {};

/**
 * 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。
 * @param {!_setKeepScreenOnObject} object
 * @return {void}
 */
wx.setKeepScreenOn = function(object) {};

/**
 * wx.setNavigationBarColor({
 * @param {!_setNavigationBarColorObject} object
 * @return {void}
 */
wx.setNavigationBarColor = function(object) {};

/**
 * 动态设置当前页面的标题。
 * @param {!_setNavigationBarTitleObject} object
 * @return {void}
 */
wx.setNavigationBarTitle = function(object) {};

/**
 * 设置屏幕亮度。
 * @param {!_setScreenBrightnessObject} object
 * @return {void}
 */
wx.setScreenBrightness = function(object) {};

/**
 * 将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。
 * @param {!_setStorageObject} object
 * @return {void}
 */
wx.setStorage = function(object) {};

/**
 * 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。
 * @param {string} key
 * @param {?} v
 * @return {void}
 */
wx.setStorageSync = function(key, v) {};

/**
 * 为 tabBar 某一项的右上角添加文本
 * @param {!_setTabBarBadgeObject} object
 * @return {void}
 */
wx.setTabBarBadge = function(object) {};

/**
 * 动态设置 tabBar 某一项的内容
 * @param {!_setTabBarItemObject} object
 * @return {void}
 */
wx.setTabBarItem = function(object) {};

/**
 * 动态设置 tabBar 的整体样式
 * @param {!_setTabBarStyleObject} object
 * @return {void}
 */
wx.setTabBarStyle = function(object) {};

/**
 * 动态设置置顶栏文字内容，只有当前小程序被置顶时能生效，如果当前小程序没有被置顶，也能调用成功，但是不会立即生效，只有在用户将这个小程序置顶后才换上设置的文字内容。**注意：调用成功后，需间隔 5s 才能再次调用此接口，如果在 5s 内再次调用此接口，会回调 fail，errMsg："setTopBarText: fail invoke too frequently"**
 * @param {!_setTopBarTextObject} object
 * @return {void}
 */
wx.setTopBarText = function(object) {};

/**
 * 在 `onGetWifiList` 回调后，利用接口设置 wifiList 中 AP 的相关信息。
 * @param {!_setWifiListObject} object
 * @return {void}
 */
wx.setWifiList = function(object) {};

/**
 * ​显示操作菜单
 * @param {!_showActionSheetObject} object
 * @return {void}
 */
wx.showActionSheet = function(object) {};

/**
 * 显示 loading 提示框, 需主动调用 [wx.hideLoading](#wxhideloading) 才能关闭提示框
 * @param {!_showLoadingObject} object
 * @return {void}
 */
wx.showLoading = function(object) {};

/**
 * ​显示模态弹窗
 * @param {!_showModalObject} object
 * @return {void}
 */
wx.showModal = function(object) {};

/**
 * 在当前页面显示导航条加载动画。
 * @return {void}
 */
wx.showNavigationBarLoading = function() {};

/**
 * 显示当前页面的转发按钮
 * @param {!_showShareMenuObject} object
 * @return {void}
 */
wx.showShareMenu = function(object) {};

/**
 * 显示 tabBar
 * @param {!_showTabBarObject} object
 * @return {void}
 */
wx.showTabBar = function(object) {};

/**
 * 显示 tabBar 某一项的右上角的红点
 * @param {!_showTabBarRedDotObject} object
 * @return {void}
 */
wx.showTabBarRedDot = function(object) {};

/**
 * 显示消息提示框
 * @param {!_showToastObject} object
 * @return {void}
 */
wx.showToast = function(object) {};

/**
 * 开始监听加速度数据。
 * @param {!_startAccelerometerObject} object
 * @return {void}
 */
wx.startAccelerometer = function(object) {};

/**
 * 开始搜索附近的`iBeacon`设备
 * @param {!_startBeaconDiscoveryObject} object
 * @return {void}
 */
wx.startBeaconDiscovery = function(object) {};

/**
 * 开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。
 * @param {!_startBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
wx.startBluetoothDevicesDiscovery = function(object) {};

/**
 * 开始监听罗盘数据。
 * @param {!_startCompassObject} object
 * @return {void}
 */
wx.startCompass = function(object) {};

/**
 * 初始化 NFC 模块。
 * @param {!_startHCEObject} object
 * @return {void}
 */
wx.startHCE = function(object) {};

/**
 * 开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致
 * @param {!_startPullDownRefreshObject} object
 * @return {void}
 */
wx.startPullDownRefresh = function(object) {};

/**
 * 开始录音。当主动调用`wx.stopRecord`，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。
 * @param {!_startRecordObject} object
 * @return {void}
 */
wx.startRecord = function(object) {};

/**
 * 开始 SOTER 生物认证
 * @param {!_startSoterAuthenticationObject} object
 * @return {void}
 */
wx.startSoterAuthentication = function(object) {};

/**
 * 初始化 Wi-Fi 模块。
 * @param {!_startWifiObject} object
 * @return {void}
 */
wx.startWifi = function(object) {};

/**
 * 停止监听加速度数据。
 * @param {!_stopAccelerometerObject} object
 * @return {void}
 */
wx.stopAccelerometer = function(object) {};

/**
 * 停止播放音乐。
 * @return {void}
 */
wx.stopBackgroundAudio = function() {};

/**
 * 停止搜索附近的`iBeacon`设备
 * @param {!_stopBeaconDiscoveryObject} object
 * @return {void}
 */
wx.stopBeaconDiscovery = function(object) {};

/**
 * 停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索。
 * @param {!_stopBluetoothDevicesDiscoveryObject} object
 * @return {void}
 */
wx.stopBluetoothDevicesDiscovery = function(object) {};

/**
 * 停止监听罗盘数据。
 * @param {!_stopCompassObject} object
 * @return {void}
 */
wx.stopCompass = function(object) {};

/**
 * 关闭 NFC 模块。仅在安卓系统下有效。
 * @param {!_stopHCEObject} object
 * @return {void}
 */
wx.stopHCE = function(object) {};

/**
 * 停止当前页面下拉刷新。
 * @return {void}
 */
wx.stopPullDownRefresh = function() {};

/**
 * ​主动调用停止录音。
 * @return {void}
 */
wx.stopRecord = function() {};

/**
 * 结束播放语音。
 * @return {void}
 */
wx.stopVoice = function() {};

/**
 * 关闭 Wi-Fi 模块。
 * @param {!_stopWifiObject} object
 * @return {void}
 */
wx.stopWifi = function(object) {};

/**
 * 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
 * @param {!_switchTabObject} object
 * @return {void}
 */
wx.switchTab = function(object) {};

/**
 * 更新转发属性
 * @param {!_updateShareMenuObject} object
 * @return {void}
 */
wx.updateShareMenu = function(object) {};

/**
 * 将本地资源上传到开发者服务器，客户端发起一个 HTTPS POST 请求，其中 `content-type` 为 `multipart/form-data` 。**使用前请先阅读[说明](./api-network.md)**。
 * @param {!_uploadFileObject} object
 * @return {void}
 */
wx.uploadFile = function(object) {};

/**
 * 使手机发生较长时间的振动（400ms）
 * @param {!_vibrateLongObject} object
 * @return {void}
 */
wx.vibrateLong = function(object) {};

/**
 * 使手机发生较短时间的振动（15ms）
 * @param {!_vibrateShortObject} object
 * @return {void}
 */
wx.vibrateShort = function(object) {};

/**
 * 
 * 监听主域发送的消息
 * @param {!Function} callback
 * @return {void}
 */
wx.onMessage = function(callback) {};

/**
 * 拉取当前用户所有同玩好友的托管数据。该接口只可在开放数据域下使用
 * @param {?} object
 * @return {void}
 */
wx.getFriendCloudStorage = function(object) {};

/**
 * 对用户托管数据进行写数据操作。允许同时写多组 KV 数据。
 * @param {?} object
 * @return {void}
 */
wx.setUserCloudStorage = function(object) {};

/**
 * 向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持`write`才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!_writeBLECharacteristicValueObject} object
 * @return {void}
 */
wx.writeBLECharacteristicValue = function(object) {};
